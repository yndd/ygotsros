/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/http-port/eq YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq struct {
	PortList   *string `path:"port-list" module:"nokia-conf"`
	PortNumber *int32  `path:"port-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq) IsYANGGoStruct() {
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v int32 = 0
		t.PortNumber = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/http-port/neq YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq struct {
	PortList   *string `path:"port-list" module:"nokia-conf"`
	PortNumber *int32  `path:"port-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq) IsYANGGoStruct() {
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v int32 = 0
		t.PortNumber = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/ip-protocol YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol struct {
	Eq  NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol_Eq_Union  `path:"eq" module:"nokia-conf"`
	Neq NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol_Neq_Union `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol) GetEq() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol_Eq_Union {
	if t == nil || t.Eq == nil {
		return nil
	}
	return t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol) GetNeq() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol_Neq_Union {
	if t == nil || t.Neq == nil {
		return nil
	}
	return t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/network-address YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress struct {
	Eq  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq  `path:"eq" module:"nokia-conf"`
	Neq *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress) IsYANGGoStruct() {
}

// GetOrCreateEq retrieves the value of the Eq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress) GetOrCreateEq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq {
	if t.Eq != nil {
		return t.Eq
	}
	t.Eq = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq{}
	return t.Eq
}

// GetOrCreateNeq retrieves the value of the Neq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress) GetOrCreateNeq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq {
	if t.Neq != nil {
		return t.Neq
	}
	t.Neq = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq{}
	return t.Neq
}

// GetEq returns the value of the Eq struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress. If the receiver or the field Eq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress) GetEq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq {
	if t != nil && t.Eq != nil {
		return t.Eq
	}
	return nil
}

// GetNeq returns the value of the Neq struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress. If the receiver or the field Neq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress) GetNeq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq {
	if t != nil && t.Neq != nil {
		return t.Neq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Eq.PopulateDefaults()
	t.Neq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/network-address/eq YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq struct {
	IpPrefix     *string `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/network-address/neq YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq struct {
	IpPrefix     *string `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/protocol YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol struct {
	Eq  *string `path:"eq" module:"nokia-conf"`
	Neq *string `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/server-address YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress struct {
	Eq  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq  `path:"eq" module:"nokia-conf"`
	Neq *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress) IsYANGGoStruct() {
}

// GetOrCreateEq retrieves the value of the Eq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress) GetOrCreateEq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq {
	if t.Eq != nil {
		return t.Eq
	}
	t.Eq = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq{}
	return t.Eq
}

// GetOrCreateNeq retrieves the value of the Neq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress) GetOrCreateNeq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq {
	if t.Neq != nil {
		return t.Neq
	}
	t.Neq = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq{}
	return t.Neq
}

// GetEq returns the value of the Eq struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress. If the receiver or the field Eq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress) GetEq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq {
	if t != nil && t.Eq != nil {
		return t.Eq
	}
	return nil
}

// GetNeq returns the value of the Neq struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress. If the receiver or the field Neq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress) GetNeq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq {
	if t != nil && t.Neq != nil {
		return t.Neq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Eq.PopulateDefaults()
	t.Neq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/server-address/eq YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq struct {
	DnsIpCache   *string                                                                                                                 `path:"dns-ip-cache" module:"nokia-conf"`
	IpPrefix     *string                                                                                                                 `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string                                                                                                                 `path:"ip-prefix-list" module:"nokia-conf"`
	MaskedIp     *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp `path:"masked-ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) IsYANGGoStruct() {
}

// GetOrCreateMaskedIp retrieves the value of the MaskedIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) GetOrCreateMaskedIp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp {
	if t.MaskedIp != nil {
		return t.MaskedIp
	}
	t.MaskedIp = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp{}
	return t.MaskedIp
}

// GetMaskedIp returns the value of the MaskedIp struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq. If the receiver or the field MaskedIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) GetMaskedIp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp {
	if t != nil && t.MaskedIp != nil {
		return t.MaskedIp
	}
	return nil
}

// GetDnsIpCache retrieves the value of the leaf DnsIpCache from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnsIpCache is set, it can
// safely use t.GetDnsIpCache() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnsIpCache == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) GetDnsIpCache() string {
	if t == nil || t.DnsIpCache == nil {
		return ""
	}
	return *t.DnsIpCache
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MaskedIp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/server-address/eq/masked-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp struct {
	Address *string `path:"address" module:"nokia-conf"`
	Netmask *string `path:"netmask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetNetmask retrieves the value of the leaf Netmask from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Netmask is set, it can
// safely use t.GetNetmask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Netmask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp) GetNetmask() string {
	if t == nil || t.Netmask == nil {
		return ""
	}
	return *t.Netmask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/server-address/neq YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq struct {
	DnsIpCache   *string                                                                                                                  `path:"dns-ip-cache" module:"nokia-conf"`
	IpPrefix     *string                                                                                                                  `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string                                                                                                                  `path:"ip-prefix-list" module:"nokia-conf"`
	MaskedIp     *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp `path:"masked-ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) IsYANGGoStruct() {
}

// GetOrCreateMaskedIp retrieves the value of the MaskedIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) GetOrCreateMaskedIp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp {
	if t.MaskedIp != nil {
		return t.MaskedIp
	}
	t.MaskedIp = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp{}
	return t.MaskedIp
}

// GetMaskedIp returns the value of the MaskedIp struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq. If the receiver or the field MaskedIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) GetMaskedIp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp {
	if t != nil && t.MaskedIp != nil {
		return t.MaskedIp
	}
	return nil
}

// GetDnsIpCache retrieves the value of the leaf DnsIpCache from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnsIpCache is set, it can
// safely use t.GetDnsIpCache() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnsIpCache == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) GetDnsIpCache() string {
	if t == nil || t.DnsIpCache == nil {
		return ""
	}
	return *t.DnsIpCache
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MaskedIp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/server-address/neq/masked-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp struct {
	Address *string `path:"address" module:"nokia-conf"`
	Netmask *string `path:"netmask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetNetmask retrieves the value of the leaf Netmask from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Netmask is set, it can
// safely use t.GetNetmask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Netmask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp) GetNetmask() string {
	if t == nil || t.Netmask == nil {
		return ""
	}
	return *t.Netmask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/server-port YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort struct {
	Eq  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq  `path:"eq" module:"nokia-conf"`
	Gt  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt  `path:"gt" module:"nokia-conf"`
	Lt  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt  `path:"lt" module:"nokia-conf"`
	Neq *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) IsYANGGoStruct() {
}

// GetOrCreateEq retrieves the value of the Eq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) GetOrCreateEq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq {
	if t.Eq != nil {
		return t.Eq
	}
	t.Eq = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq{}
	return t.Eq
}

// GetOrCreateGt retrieves the value of the Gt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) GetOrCreateGt() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt {
	if t.Gt != nil {
		return t.Gt
	}
	t.Gt = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt{}
	return t.Gt
}

// GetOrCreateLt retrieves the value of the Lt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) GetOrCreateLt() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt {
	if t.Lt != nil {
		return t.Lt
	}
	t.Lt = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt{}
	return t.Lt
}

// GetOrCreateNeq retrieves the value of the Neq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) GetOrCreateNeq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq {
	if t.Neq != nil {
		return t.Neq
	}
	t.Neq = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq{}
	return t.Neq
}

// GetEq returns the value of the Eq struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort. If the receiver or the field Eq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) GetEq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq {
	if t != nil && t.Eq != nil {
		return t.Eq
	}
	return nil
}

// GetGt returns the value of the Gt struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort. If the receiver or the field Gt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) GetGt() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt {
	if t != nil && t.Gt != nil {
		return t.Gt
	}
	return nil
}

// GetLt returns the value of the Lt struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort. If the receiver or the field Lt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) GetLt() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt {
	if t != nil && t.Lt != nil {
		return t.Lt
	}
	return nil
}

// GetNeq returns the value of the Neq struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort. If the receiver or the field Neq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) GetNeq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq {
	if t != nil && t.Neq != nil {
		return t.Neq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Eq.PopulateDefaults()
	t.Gt.PopulateDefaults()
	t.Lt.PopulateDefaults()
	t.Neq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/server-port/eq YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq struct {
	FirstPacketPolicy E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_FirstPacketPolicy `path:"first-packet-policy" module:"nokia-conf"`
	PortList          *string                                                                                                                        `path:"port-list" module:"nokia-conf"`
	PortNumber        *int32                                                                                                                         `path:"port-number" module:"nokia-conf"`
	Range             *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range              `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) GetRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetFirstPacketPolicy retrieves the value of the leaf FirstPacketPolicy from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirstPacketPolicy is set, it can
// safely use t.GetFirstPacketPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirstPacketPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) GetFirstPacketPolicy() E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_FirstPacketPolicy {
	if t == nil || t.FirstPacketPolicy == 0 {
		return 0
	}
	return t.FirstPacketPolicy
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v int32 = 0
		t.PortNumber = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/server-port/eq/range YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 1
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v int32 = 1
		t.End = &v
	}
	if t.Start == nil {
		var v int32 = 0
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/server-port/gt YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt struct {
	PortNumber *int32 `path:"port-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt) IsYANGGoStruct() {
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v int32 = 0
		t.PortNumber = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/server-port/lt YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt struct {
	PortNumber *int32 `path:"port-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt) IsYANGGoStruct() {
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v int32 = 0
		t.PortNumber = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/server-port/neq YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq struct {
	PortList   *string                                                                                                            `path:"port-list" module:"nokia-conf"`
	PortNumber *int32                                                                                                             `path:"port-number" module:"nokia-conf"`
	Range      *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq) GetRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v int32 = 0
		t.PortNumber = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-filter/entry/server-port/neq/range YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 1
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v int32 = 1
		t.End = &v
	}
	if t.Start == nil {
		var v int32 = 0
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-group YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup struct {
	ApplicationGroupName *string `path:"application-group-name" module:"nokia-conf"`
	ChargingGroup        *string `path:"charging-group" module:"nokia-conf"`
	Description          *string `path:"description" module:"nokia-conf"`
	ExportId             *uint32 `path:"export-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup) IsYANGGoStruct() {
}

// GetApplicationGroupName retrieves the value of the leaf ApplicationGroupName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplicationGroupName is set, it can
// safely use t.GetApplicationGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplicationGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup) GetApplicationGroupName() string {
	if t == nil || t.ApplicationGroupName == nil {
		return ""
	}
	return *t.ApplicationGroupName
}

// GetChargingGroup retrieves the value of the leaf ChargingGroup from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChargingGroup is set, it can
// safely use t.GetChargingGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChargingGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup) GetChargingGroup() string {
	if t == nil || t.ChargingGroup == nil {
		return ""
	}
	return *t.ChargingGroup
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportId retrieves the value of the leaf ExportId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportId is set, it can
// safely use t.GetExportId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup) GetExportId() uint32 {
	if t == nil || t.ExportId == nil {
		return 0
	}
	return *t.ExportId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ApplicationGroupName == nil {
		return nil, fmt.Errorf("nil value for key ApplicationGroupName")
	}

	return map[string]interface{}{
		"application-group-name": *t.ApplicationGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile struct {
	AaSubSuppressible *bool                                                                                                              `path:"aa-sub-suppressible" module:"nokia-conf"`
	AppProfileName    *string                                                                                                            `path:"app-profile-name" module:"nokia-conf"`
	CapacityCost      *uint16                                                                                                            `path:"capacity-cost" module:"nokia-conf"`
	Characteristic    map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic `path:"characteristic" module:"nokia-conf"`
	Description       *string                                                                                                            `path:"description" module:"nokia-conf"`
	Divert            *bool                                                                                                              `path:"divert" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile) IsYANGGoStruct() {
}

// NewCharacteristic creates a new entry in the Characteristic list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile) NewCharacteristic(CharacteristicName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic)
	}

	key := CharacteristicName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Characteristic[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Characteristic", key)
	}

	t.Characteristic[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic{
		CharacteristicName: &CharacteristicName,
	}

	return t.Characteristic[key], nil
}

// RenameCharacteristic renames an entry in the list Characteristic within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile) RenameCharacteristic(oldK, newK string) error {
	if _, ok := t.Characteristic[newK]; ok {
		return fmt.Errorf("key %v already exists in Characteristic", newK)
	}

	e, ok := t.Characteristic[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Characteristic", oldK)
	}
	e.CharacteristicName = &newK

	t.Characteristic[newK] = e
	delete(t.Characteristic, oldK)
	return nil
}

// GetOrCreateCharacteristic retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile) GetOrCreateCharacteristic(CharacteristicName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic {

	key := CharacteristicName

	if v, ok := t.Characteristic[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCharacteristic(CharacteristicName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCharacteristic got unexpected error: %v", err))
	}
	return v
}

// GetCharacteristic retrieves the value with the specified key from
// the Characteristic map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile) GetCharacteristic(CharacteristicName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic {

	if t == nil {
		return nil
	}

	key := CharacteristicName

	if lm, ok := t.Characteristic[key]; ok {
		return lm
	}
	return nil
}

// DeleteCharacteristic deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile) DeleteCharacteristic(CharacteristicName string) {
	key := CharacteristicName

	delete(t.Characteristic, key)
}

// AppendCharacteristic appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic struct to the
// list Characteristic of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile) AppendCharacteristic(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) error {
	if v.CharacteristicName == nil {
		return fmt.Errorf("invalid nil key received for CharacteristicName")
	}

	key := *v.CharacteristicName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic)
	}

	if _, ok := t.Characteristic[key]; ok {
		return fmt.Errorf("duplicate key for list Characteristic %v", key)
	}

	t.Characteristic[key] = v
	return nil
}

// GetAaSubSuppressible retrieves the value of the leaf AaSubSuppressible from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AaSubSuppressible is set, it can
// safely use t.GetAaSubSuppressible() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AaSubSuppressible == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile) GetAaSubSuppressible() bool {
	if t == nil || t.AaSubSuppressible == nil {
		return false
	}
	return *t.AaSubSuppressible
}

// GetAppProfileName retrieves the value of the leaf AppProfileName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfileName is set, it can
// safely use t.GetAppProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile) GetAppProfileName() string {
	if t == nil || t.AppProfileName == nil {
		return ""
	}
	return *t.AppProfileName
}

// GetCapacityCost retrieves the value of the leaf CapacityCost from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CapacityCost is set, it can
// safely use t.GetCapacityCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CapacityCost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile) GetCapacityCost() uint16 {
	if t == nil || t.CapacityCost == nil {
		return 1
	}
	return *t.CapacityCost
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDivert retrieves the value of the leaf Divert from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Divert is set, it can
// safely use t.GetDivert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Divert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile) GetDivert() bool {
	if t == nil || t.Divert == nil {
		return false
	}
	return *t.Divert
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AaSubSuppressible == nil {
		var v bool = false
		t.AaSubSuppressible = &v
	}
	if t.CapacityCost == nil {
		var v uint16 = 1
		t.CapacityCost = &v
	}
	if t.Divert == nil {
		var v bool = false
		t.Divert = &v
	}
	for _, e := range t.Characteristic {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AppProfileName == nil {
		return nil, fmt.Errorf("nil value for key AppProfileName")
	}

	return map[string]interface{}{
		"app-profile-name": *t.AppProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-profile/characteristic YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic struct {
	CharacteristicName *string `path:"characteristic-name" module:"nokia-conf"`
	Value              *string `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) IsYANGGoStruct() {
}

// GetCharacteristicName retrieves the value of the leaf CharacteristicName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CharacteristicName is set, it can
// safely use t.GetCharacteristicName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CharacteristicName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) GetCharacteristicName() string {
	if t == nil || t.CharacteristicName == nil {
		return ""
	}
	return *t.CharacteristicName
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CharacteristicName == nil {
		return nil, fmt.Errorf("nil value for key CharacteristicName")
	}

	return map[string]interface{}{
		"characteristic-name": *t.CharacteristicName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy struct {
	Entry map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) NewEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) GetEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) AppendEntry(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action       `path:"action" module:"nokia-conf" yangPresence:"true"`
	AdminState  E_NokiaTypesSros_AdminState                                                                                   `path:"admin-state" module:"nokia-conf"`
	Description *string                                                                                                       `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match        `path:"match" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) IsYANGGoStruct() {
}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) GetAction() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action struct {
	AbandonTcpOptimization *bool                                                                                                                         `path:"abandon-tcp-optimization" module:"nokia-conf"`
	BandwidthPolicer       *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer      `path:"bandwidth-policer" module:"nokia-conf"`
	DnsIpCache             *string                                                                                                                       `path:"dns-ip-cache" module:"nokia-conf"`
	Drop                   *bool                                                                                                                         `path:"drop" module:"nokia-conf"`
	ErrorDrop              *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop             `path:"error-drop" module:"nokia-conf" yangPresence:"true"`
	FlowCountLimitPolicer  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer `path:"flow-count-limit-policer" module:"nokia-conf"`
	FlowSetupRatePolicer   *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer  `path:"flow-setup-rate-policer" module:"nokia-conf"`
	FragmentDrop           *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop          `path:"fragment-drop" module:"nokia-conf"`
	GtpFilter              *string                                                                                                                       `path:"gtp-filter" module:"nokia-conf"`
	HttpEnrich             *string                                                                                                                       `path:"http-enrich" module:"nokia-conf"`
	HttpErrorRedirect      *string                                                                                                                       `path:"http-error-redirect" module:"nokia-conf"`
	HttpNotification       *string                                                                                                                       `path:"http-notification" module:"nokia-conf"`
	HttpRedirect           *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect          `path:"http-redirect" module:"nokia-conf"`
	MirrorSource           *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource          `path:"mirror-source" module:"nokia-conf"`
	OverloadDrop           *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop          `path:"overload-drop" module:"nokia-conf" yangPresence:"true"`
	Remark                 *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark                `path:"remark" module:"nokia-conf"`
	SctpFilter             *string                                                                                                                       `path:"sctp-filter" module:"nokia-conf"`
	SessionFilter          *string                                                                                                                       `path:"session-filter" module:"nokia-conf"`
	TcpMssAdjust           *int32                                                                                                                        `path:"tcp-mss-adjust" module:"nokia-conf"`
	TcpValidate            *string                                                                                                                       `path:"tcp-validate" module:"nokia-conf"`
	TlsEnrich              *string                                                                                                                       `path:"tls-enrich" module:"nokia-conf"`
	UrlFilter              *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter             `path:"url-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) IsYANGGoStruct() {
}

// GetOrCreateBandwidthPolicer retrieves the value of the BandwidthPolicer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOrCreateBandwidthPolicer() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer {
	if t.BandwidthPolicer != nil {
		return t.BandwidthPolicer
	}
	t.BandwidthPolicer = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer{}
	return t.BandwidthPolicer
}

// GetOrCreateErrorDrop retrieves the value of the ErrorDrop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOrCreateErrorDrop() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop {
	if t.ErrorDrop != nil {
		return t.ErrorDrop
	}
	t.ErrorDrop = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop{}
	return t.ErrorDrop
}

// GetOrCreateFlowCountLimitPolicer retrieves the value of the FlowCountLimitPolicer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOrCreateFlowCountLimitPolicer() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer {
	if t.FlowCountLimitPolicer != nil {
		return t.FlowCountLimitPolicer
	}
	t.FlowCountLimitPolicer = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer{}
	return t.FlowCountLimitPolicer
}

// GetOrCreateFlowSetupRatePolicer retrieves the value of the FlowSetupRatePolicer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOrCreateFlowSetupRatePolicer() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer {
	if t.FlowSetupRatePolicer != nil {
		return t.FlowSetupRatePolicer
	}
	t.FlowSetupRatePolicer = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer{}
	return t.FlowSetupRatePolicer
}

// GetOrCreateFragmentDrop retrieves the value of the FragmentDrop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOrCreateFragmentDrop() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop {
	if t.FragmentDrop != nil {
		return t.FragmentDrop
	}
	t.FragmentDrop = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop{}
	return t.FragmentDrop
}

// GetOrCreateHttpRedirect retrieves the value of the HttpRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOrCreateHttpRedirect() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect {
	if t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	t.HttpRedirect = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect{}
	return t.HttpRedirect
}

// GetOrCreateMirrorSource retrieves the value of the MirrorSource field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOrCreateMirrorSource() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource {
	if t.MirrorSource != nil {
		return t.MirrorSource
	}
	t.MirrorSource = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource{}
	return t.MirrorSource
}

// GetOrCreateOverloadDrop retrieves the value of the OverloadDrop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOrCreateOverloadDrop() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop {
	if t.OverloadDrop != nil {
		return t.OverloadDrop
	}
	t.OverloadDrop = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop{}
	return t.OverloadDrop
}

// GetOrCreateRemark retrieves the value of the Remark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOrCreateRemark() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark {
	if t.Remark != nil {
		return t.Remark
	}
	t.Remark = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark{}
	return t.Remark
}

// GetOrCreateUrlFilter retrieves the value of the UrlFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOrCreateUrlFilter() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter {
	if t.UrlFilter != nil {
		return t.UrlFilter
	}
	t.UrlFilter = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter{}
	return t.UrlFilter
}

// GetBandwidthPolicer returns the value of the BandwidthPolicer struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action. If the receiver or the field BandwidthPolicer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetBandwidthPolicer() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer {
	if t != nil && t.BandwidthPolicer != nil {
		return t.BandwidthPolicer
	}
	return nil
}

// GetErrorDrop returns the value of the ErrorDrop struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action. If the receiver or the field ErrorDrop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetErrorDrop() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop {
	if t != nil && t.ErrorDrop != nil {
		return t.ErrorDrop
	}
	return nil
}

// GetFlowCountLimitPolicer returns the value of the FlowCountLimitPolicer struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action. If the receiver or the field FlowCountLimitPolicer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetFlowCountLimitPolicer() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer {
	if t != nil && t.FlowCountLimitPolicer != nil {
		return t.FlowCountLimitPolicer
	}
	return nil
}

// GetFlowSetupRatePolicer returns the value of the FlowSetupRatePolicer struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action. If the receiver or the field FlowSetupRatePolicer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetFlowSetupRatePolicer() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer {
	if t != nil && t.FlowSetupRatePolicer != nil {
		return t.FlowSetupRatePolicer
	}
	return nil
}

// GetFragmentDrop returns the value of the FragmentDrop struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action. If the receiver or the field FragmentDrop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetFragmentDrop() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop {
	if t != nil && t.FragmentDrop != nil {
		return t.FragmentDrop
	}
	return nil
}

// GetHttpRedirect returns the value of the HttpRedirect struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action. If the receiver or the field HttpRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetHttpRedirect() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect {
	if t != nil && t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	return nil
}

// GetMirrorSource returns the value of the MirrorSource struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action. If the receiver or the field MirrorSource is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetMirrorSource() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource {
	if t != nil && t.MirrorSource != nil {
		return t.MirrorSource
	}
	return nil
}

// GetOverloadDrop returns the value of the OverloadDrop struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action. If the receiver or the field OverloadDrop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOverloadDrop() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop {
	if t != nil && t.OverloadDrop != nil {
		return t.OverloadDrop
	}
	return nil
}

// GetRemark returns the value of the Remark struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action. If the receiver or the field Remark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetRemark() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark {
	if t != nil && t.Remark != nil {
		return t.Remark
	}
	return nil
}

// GetUrlFilter returns the value of the UrlFilter struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action. If the receiver or the field UrlFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetUrlFilter() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter {
	if t != nil && t.UrlFilter != nil {
		return t.UrlFilter
	}
	return nil
}

// GetAbandonTcpOptimization retrieves the value of the leaf AbandonTcpOptimization from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AbandonTcpOptimization is set, it can
// safely use t.GetAbandonTcpOptimization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AbandonTcpOptimization == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetAbandonTcpOptimization() bool {
	if t == nil || t.AbandonTcpOptimization == nil {
		return false
	}
	return *t.AbandonTcpOptimization
}

// GetDnsIpCache retrieves the value of the leaf DnsIpCache from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnsIpCache is set, it can
// safely use t.GetDnsIpCache() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnsIpCache == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetDnsIpCache() string {
	if t == nil || t.DnsIpCache == nil {
		return ""
	}
	return *t.DnsIpCache
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetDrop() bool {
	if t == nil || t.Drop == nil {
		return false
	}
	return *t.Drop
}

// GetGtpFilter retrieves the value of the leaf GtpFilter from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GtpFilter is set, it can
// safely use t.GetGtpFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GtpFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetGtpFilter() string {
	if t == nil || t.GtpFilter == nil {
		return ""
	}
	return *t.GtpFilter
}

// GetHttpEnrich retrieves the value of the leaf HttpEnrich from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpEnrich is set, it can
// safely use t.GetHttpEnrich() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpEnrich == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetHttpEnrich() string {
	if t == nil || t.HttpEnrich == nil {
		return ""
	}
	return *t.HttpEnrich
}

// GetHttpErrorRedirect retrieves the value of the leaf HttpErrorRedirect from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpErrorRedirect is set, it can
// safely use t.GetHttpErrorRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpErrorRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetHttpErrorRedirect() string {
	if t == nil || t.HttpErrorRedirect == nil {
		return ""
	}
	return *t.HttpErrorRedirect
}

// GetHttpNotification retrieves the value of the leaf HttpNotification from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpNotification is set, it can
// safely use t.GetHttpNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetHttpNotification() string {
	if t == nil || t.HttpNotification == nil {
		return ""
	}
	return *t.HttpNotification
}

// GetSctpFilter retrieves the value of the leaf SctpFilter from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SctpFilter is set, it can
// safely use t.GetSctpFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SctpFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetSctpFilter() string {
	if t == nil || t.SctpFilter == nil {
		return ""
	}
	return *t.SctpFilter
}

// GetSessionFilter retrieves the value of the leaf SessionFilter from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionFilter is set, it can
// safely use t.GetSessionFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetSessionFilter() string {
	if t == nil || t.SessionFilter == nil {
		return ""
	}
	return *t.SessionFilter
}

// GetTcpMssAdjust retrieves the value of the leaf TcpMssAdjust from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMssAdjust is set, it can
// safely use t.GetTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetTcpMssAdjust() int32 {
	if t == nil || t.TcpMssAdjust == nil {
		return 0
	}
	return *t.TcpMssAdjust
}

// GetTcpValidate retrieves the value of the leaf TcpValidate from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpValidate is set, it can
// safely use t.GetTcpValidate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpValidate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetTcpValidate() string {
	if t == nil || t.TcpValidate == nil {
		return ""
	}
	return *t.TcpValidate
}

// GetTlsEnrich retrieves the value of the leaf TlsEnrich from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsEnrich is set, it can
// safely use t.GetTlsEnrich() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsEnrich == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetTlsEnrich() string {
	if t == nil || t.TlsEnrich == nil {
		return ""
	}
	return *t.TlsEnrich
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AbandonTcpOptimization == nil {
		var v bool = false
		t.AbandonTcpOptimization = &v
	}
	if t.Drop == nil {
		var v bool = false
		t.Drop = &v
	}
	t.BandwidthPolicer.PopulateDefaults()
	t.ErrorDrop.PopulateDefaults()
	t.FlowCountLimitPolicer.PopulateDefaults()
	t.FlowSetupRatePolicer.PopulateDefaults()
	t.FragmentDrop.PopulateDefaults()
	t.HttpRedirect.PopulateDefaults()
	t.MirrorSource.PopulateDefaults()
	t.OverloadDrop.PopulateDefaults()
	t.Remark.PopulateDefaults()
	t.UrlFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/action/bandwidth-policer YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer struct {
	Anl          *string `path:"anl" module:"nokia-conf"`
	DualBucket   *string `path:"dual-bucket" module:"nokia-conf"`
	SingleBucket *string `path:"single-bucket" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer) IsYANGGoStruct() {
}

// GetAnl retrieves the value of the leaf Anl from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Anl is set, it can
// safely use t.GetAnl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Anl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer) GetAnl() string {
	if t == nil || t.Anl == nil {
		return ""
	}
	return *t.Anl
}

// GetDualBucket retrieves the value of the leaf DualBucket from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DualBucket is set, it can
// safely use t.GetDualBucket() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DualBucket == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer) GetDualBucket() string {
	if t == nil || t.DualBucket == nil {
		return ""
	}
	return *t.DualBucket
}

// GetSingleBucket retrieves the value of the leaf SingleBucket from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SingleBucket is set, it can
// safely use t.GetSingleBucket() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SingleBucket == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer) GetSingleBucket() string {
	if t == nil || t.SingleBucket == nil {
		return ""
	}
	return *t.SingleBucket
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/action/error-drop YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop struct {
	EventLog *string `path:"event-log" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop) IsYANGGoStruct() {
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/action/flow-count-limit-policer YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer struct {
	EventLog    *string `path:"event-log" module:"nokia-conf"`
	PolicerName *string `path:"policer-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer) IsYANGGoStruct() {
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/action/flow-setup-rate-policer YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer struct {
	EventLog    *string `path:"event-log" module:"nokia-conf"`
	PolicerName *string `path:"policer-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer) IsYANGGoStruct() {
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/action/fragment-drop YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop struct {
	DropScope E_NokiaTypesApplicationAssurance_FragmentDropScope `path:"drop-scope" module:"nokia-conf"`
	EventLog  *string                                            `path:"event-log" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop) IsYANGGoStruct() {
}

// GetDropScope retrieves the value of the leaf DropScope from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropScope is set, it can
// safely use t.GetDropScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropScope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop) GetDropScope() E_NokiaTypesApplicationAssurance_FragmentDropScope {
	if t == nil || t.DropScope == 0 {
		return 0
	}
	return t.DropScope
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/action/http-redirect YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect struct {
	FlowType E_NokiaTypesApplicationAssurance_HttpRedirFlowType `path:"flow-type" module:"nokia-conf"`
	Name     *string                                            `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect) IsYANGGoStruct() {
}

// GetFlowType retrieves the value of the leaf FlowType from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowType is set, it can
// safely use t.GetFlowType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect) GetFlowType() E_NokiaTypesApplicationAssurance_HttpRedirFlowType {
	if t == nil || t.FlowType == 0 {
		return 0
	}
	return t.FlowType
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/action/mirror-source YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource struct {
	AllInclusive  *bool   `path:"all-inclusive" module:"nokia-conf"`
	MirrorService *string `path:"mirror-service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource) IsYANGGoStruct() {
}

// GetAllInclusive retrieves the value of the leaf AllInclusive from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllInclusive is set, it can
// safely use t.GetAllInclusive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllInclusive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource) GetAllInclusive() bool {
	if t == nil || t.AllInclusive == nil {
		return false
	}
	return *t.AllInclusive
}

// GetMirrorService retrieves the value of the leaf MirrorService from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MirrorService is set, it can
// safely use t.GetMirrorService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MirrorService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource) GetMirrorService() string {
	if t == nil || t.MirrorService == nil {
		return ""
	}
	return *t.MirrorService
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllInclusive == nil {
		var v bool = false
		t.AllInclusive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/action/overload-drop YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop struct {
	EventLog *string `path:"event-log" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop) IsYANGGoStruct() {
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/action/remark YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark struct {
	Dscp     *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp `path:"dscp" module:"nokia-conf"`
	Fc       E_NokiaTypesSros_FcName                                                                                             `path:"fc" module:"nokia-conf"`
	Priority E_NokiaTypesQos_Priority                                                                                            `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark) IsYANGGoStruct() {
}

// GetOrCreateDscp retrieves the value of the Dscp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark) GetOrCreateDscp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp {
	if t.Dscp != nil {
		return t.Dscp
	}
	t.Dscp = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp{}
	return t.Dscp
}

// GetDscp returns the value of the Dscp struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark. If the receiver or the field Dscp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark) GetDscp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp {
	if t != nil && t.Dscp != nil {
		return t.Dscp
	}
	return nil
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark) GetPriority() E_NokiaTypesQos_Priority {
	if t == nil || t.Priority == 0 {
		return NokiaTypesQos_Priority_auto
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == 0 {
		t.Priority = NokiaTypesQos_Priority_auto
	}
	t.Dscp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/action/remark/dscp YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp struct {
	InProfile  E_NokiaTypesQos_DscpName `path:"in-profile" module:"nokia-conf"`
	OutProfile E_NokiaTypesQos_DscpName `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp) IsYANGGoStruct() {
}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp) GetInProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.InProfile == 0 {
		return 0
	}
	return t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp) GetOutProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.OutProfile == 0 {
		return 0
	}
	return t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/action/url-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter struct {
	Characteristic *string `path:"characteristic" module:"nokia-conf"`
	Name           *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter) IsYANGGoStruct() {
}

// GetCharacteristic retrieves the value of the leaf Characteristic from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Characteristic is set, it can
// safely use t.GetCharacteristic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Characteristic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter) GetCharacteristic() string {
	if t == nil || t.Characteristic == nil {
		return ""
	}
	return *t.Characteristic
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match struct {
	AaSub            *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub                     `path:"aa-sub" module:"nokia-conf"`
	AaSubTethering   E_NokiaTypesApplicationAssurance_SubTetherState                                                                                  `path:"aa-sub-tethering" module:"nokia-conf"`
	AppGroup         *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup                  `path:"app-group" module:"nokia-conf"`
	Application      *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application               `path:"application" module:"nokia-conf"`
	Characteristic   map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic `path:"characteristic" module:"nokia-conf"`
	ChargingGroup    *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup             `path:"charging-group" module:"nokia-conf"`
	Dscp             *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp                      `path:"dscp" module:"nokia-conf"`
	DstIp            *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp                     `path:"dst-ip" module:"nokia-conf"`
	DstPort          *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort                   `path:"dst-port" module:"nokia-conf"`
	FlowAttribute    map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute  `path:"flow-attribute" module:"nokia-conf"`
	IpProtocol       *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol                `path:"ip-protocol" module:"nokia-conf"`
	SrcIp            *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp                     `path:"src-ip" module:"nokia-conf"`
	SrcPort          *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort                   `path:"src-port" module:"nokia-conf"`
	TrafficDirection E_NokiaTypesApplicationAssurance_TrafficDirection                                                                                `path:"traffic-direction" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) IsYANGGoStruct() {
}

// NewCharacteristic creates a new entry in the Characteristic list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) NewCharacteristic(CharacteristicName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic)
	}

	key := CharacteristicName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Characteristic[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Characteristic", key)
	}

	t.Characteristic[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic{
		CharacteristicName: &CharacteristicName,
	}

	return t.Characteristic[key], nil
}

// RenameCharacteristic renames an entry in the list Characteristic within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) RenameCharacteristic(oldK, newK string) error {
	if _, ok := t.Characteristic[newK]; ok {
		return fmt.Errorf("key %v already exists in Characteristic", newK)
	}

	e, ok := t.Characteristic[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Characteristic", oldK)
	}
	e.CharacteristicName = &newK

	t.Characteristic[newK] = e
	delete(t.Characteristic, oldK)
	return nil
}

// GetOrCreateCharacteristic retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateCharacteristic(CharacteristicName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic {

	key := CharacteristicName

	if v, ok := t.Characteristic[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCharacteristic(CharacteristicName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCharacteristic got unexpected error: %v", err))
	}
	return v
}

// GetCharacteristic retrieves the value with the specified key from
// the Characteristic map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetCharacteristic(CharacteristicName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic {

	if t == nil {
		return nil
	}

	key := CharacteristicName

	if lm, ok := t.Characteristic[key]; ok {
		return lm
	}
	return nil
}

// DeleteCharacteristic deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) DeleteCharacteristic(CharacteristicName string) {
	key := CharacteristicName

	delete(t.Characteristic, key)
}

// AppendCharacteristic appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic struct to the
// list Characteristic of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) AppendCharacteristic(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) error {
	if v.CharacteristicName == nil {
		return fmt.Errorf("invalid nil key received for CharacteristicName")
	}

	key := *v.CharacteristicName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic)
	}

	if _, ok := t.Characteristic[key]; ok {
		return fmt.Errorf("duplicate key for list Characteristic %v", key)
	}

	t.Characteristic[key] = v
	return nil
}

// NewFlowAttribute creates a new entry in the FlowAttribute list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) NewFlowAttribute(FlowAttributeName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlowAttribute == nil {
		t.FlowAttribute = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute)
	}

	key := FlowAttributeName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FlowAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FlowAttribute", key)
	}

	t.FlowAttribute[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute{
		FlowAttributeName: &FlowAttributeName,
	}

	return t.FlowAttribute[key], nil
}

// RenameFlowAttribute renames an entry in the list FlowAttribute within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) RenameFlowAttribute(oldK, newK string) error {
	if _, ok := t.FlowAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in FlowAttribute", newK)
	}

	e, ok := t.FlowAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FlowAttribute", oldK)
	}
	e.FlowAttributeName = &newK

	t.FlowAttribute[newK] = e
	delete(t.FlowAttribute, oldK)
	return nil
}

// GetOrCreateFlowAttribute retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateFlowAttribute(FlowAttributeName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute {

	key := FlowAttributeName

	if v, ok := t.FlowAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlowAttribute(FlowAttributeName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlowAttribute got unexpected error: %v", err))
	}
	return v
}

// GetFlowAttribute retrieves the value with the specified key from
// the FlowAttribute map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetFlowAttribute(FlowAttributeName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute {

	if t == nil {
		return nil
	}

	key := FlowAttributeName

	if lm, ok := t.FlowAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlowAttribute deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) DeleteFlowAttribute(FlowAttributeName string) {
	key := FlowAttributeName

	delete(t.FlowAttribute, key)
}

// AppendFlowAttribute appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute struct to the
// list FlowAttribute of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) AppendFlowAttribute(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) error {
	if v.FlowAttributeName == nil {
		return fmt.Errorf("invalid nil key received for FlowAttributeName")
	}

	key := *v.FlowAttributeName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlowAttribute == nil {
		t.FlowAttribute = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute)
	}

	if _, ok := t.FlowAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list FlowAttribute %v", key)
	}

	t.FlowAttribute[key] = v
	return nil
}

// GetOrCreateAaSub retrieves the value of the AaSub field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateAaSub() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub {
	if t.AaSub != nil {
		return t.AaSub
	}
	t.AaSub = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub{}
	return t.AaSub
}

// GetOrCreateAppGroup retrieves the value of the AppGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateAppGroup() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup {
	if t.AppGroup != nil {
		return t.AppGroup
	}
	t.AppGroup = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup{}
	return t.AppGroup
}

// GetOrCreateApplication retrieves the value of the Application field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateApplication() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application {
	if t.Application != nil {
		return t.Application
	}
	t.Application = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application{}
	return t.Application
}

// GetOrCreateChargingGroup retrieves the value of the ChargingGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateChargingGroup() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup {
	if t.ChargingGroup != nil {
		return t.ChargingGroup
	}
	t.ChargingGroup = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup{}
	return t.ChargingGroup
}

// GetOrCreateDscp retrieves the value of the Dscp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateDscp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp {
	if t.Dscp != nil {
		return t.Dscp
	}
	t.Dscp = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp{}
	return t.Dscp
}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateIpProtocol retrieves the value of the IpProtocol field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateIpProtocol() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol {
	if t.IpProtocol != nil {
		return t.IpProtocol
	}
	t.IpProtocol = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol{}
	return t.IpProtocol
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetAaSub returns the value of the AaSub struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver or the field AaSub is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetAaSub() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub {
	if t != nil && t.AaSub != nil {
		return t.AaSub
	}
	return nil
}

// GetAppGroup returns the value of the AppGroup struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver or the field AppGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetAppGroup() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup {
	if t != nil && t.AppGroup != nil {
		return t.AppGroup
	}
	return nil
}

// GetApplication returns the value of the Application struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver or the field Application is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetApplication() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application {
	if t != nil && t.Application != nil {
		return t.Application
	}
	return nil
}

// GetChargingGroup returns the value of the ChargingGroup struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver or the field ChargingGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetChargingGroup() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup {
	if t != nil && t.ChargingGroup != nil {
		return t.ChargingGroup
	}
	return nil
}

// GetDscp returns the value of the Dscp struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver or the field Dscp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetDscp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp {
	if t != nil && t.Dscp != nil {
		return t.Dscp
	}
	return nil
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetDstIp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetIpProtocol returns the value of the IpProtocol struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver or the field IpProtocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetIpProtocol() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol {
	if t != nil && t.IpProtocol != nil {
		return t.IpProtocol
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetSrcIp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetAaSubTethering retrieves the value of the leaf AaSubTethering from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AaSubTethering is set, it can
// safely use t.GetAaSubTethering() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AaSubTethering == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetAaSubTethering() E_NokiaTypesApplicationAssurance_SubTetherState {
	if t == nil || t.AaSubTethering == 0 {
		return NokiaTypesApplicationAssurance_SubTetherState_not_applicable
	}
	return t.AaSubTethering
}

// GetTrafficDirection retrieves the value of the leaf TrafficDirection from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrafficDirection is set, it can
// safely use t.GetTrafficDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrafficDirection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetTrafficDirection() E_NokiaTypesApplicationAssurance_TrafficDirection {
	if t == nil || t.TrafficDirection == 0 {
		return NokiaTypesApplicationAssurance_TrafficDirection_both
	}
	return t.TrafficDirection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AaSubTethering == 0 {
		t.AaSubTethering = NokiaTypesApplicationAssurance_SubTetherState_not_applicable
	}
	if t.TrafficDirection == 0 {
		t.TrafficDirection = NokiaTypesApplicationAssurance_TrafficDirection_both
	}
	t.AaSub.PopulateDefaults()
	t.AppGroup.PopulateDefaults()
	t.Application.PopulateDefaults()
	t.ChargingGroup.PopulateDefaults()
	t.Dscp.PopulateDefaults()
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.IpProtocol.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
	for _, e := range t.Characteristic {
		e.PopulateDefaults()
	}
	for _, e := range t.FlowAttribute {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/aa-sub YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub struct {
	Esm      *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm      `path:"esm" module:"nokia-conf"`
	EsmMac   *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac   `path:"esm-mac" module:"nokia-conf"`
	Sap      *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap      `path:"sap" module:"nokia-conf"`
	SpokeSdp *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
	Transit  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit  `path:"transit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) IsYANGGoStruct() {
}

// GetOrCreateEsm retrieves the value of the Esm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) GetOrCreateEsm() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm {
	if t.Esm != nil {
		return t.Esm
	}
	t.Esm = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm{}
	return t.Esm
}

// GetOrCreateEsmMac retrieves the value of the EsmMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) GetOrCreateEsmMac() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac {
	if t.EsmMac != nil {
		return t.EsmMac
	}
	t.EsmMac = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac{}
	return t.EsmMac
}

// GetOrCreateSap retrieves the value of the Sap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) GetOrCreateSap() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap {
	if t.Sap != nil {
		return t.Sap
	}
	t.Sap = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap{}
	return t.Sap
}

// GetOrCreateSpokeSdp retrieves the value of the SpokeSdp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) GetOrCreateSpokeSdp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp {
	if t.SpokeSdp != nil {
		return t.SpokeSdp
	}
	t.SpokeSdp = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp{}
	return t.SpokeSdp
}

// GetOrCreateTransit retrieves the value of the Transit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) GetOrCreateTransit() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit {
	if t.Transit != nil {
		return t.Transit
	}
	t.Transit = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit{}
	return t.Transit
}

// GetEsm returns the value of the Esm struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub. If the receiver or the field Esm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) GetEsm() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm {
	if t != nil && t.Esm != nil {
		return t.Esm
	}
	return nil
}

// GetEsmMac returns the value of the EsmMac struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub. If the receiver or the field EsmMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) GetEsmMac() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac {
	if t != nil && t.EsmMac != nil {
		return t.EsmMac
	}
	return nil
}

// GetSap returns the value of the Sap struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub. If the receiver or the field Sap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) GetSap() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap {
	if t != nil && t.Sap != nil {
		return t.Sap
	}
	return nil
}

// GetSpokeSdp returns the value of the SpokeSdp struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub. If the receiver or the field SpokeSdp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) GetSpokeSdp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp {
	if t != nil && t.SpokeSdp != nil {
		return t.SpokeSdp
	}
	return nil
}

// GetTransit returns the value of the Transit struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub. If the receiver or the field Transit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) GetTransit() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit {
	if t != nil && t.Transit != nil {
		return t.Transit
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Esm.PopulateDefaults()
	t.EsmMac.PopulateDefaults()
	t.Sap.PopulateDefaults()
	t.SpokeSdp.PopulateDefaults()
	t.Transit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/aa-sub/esm YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm struct {
	Eq  *string `path:"eq" module:"nokia-conf"`
	Neq *string `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/aa-sub/esm-mac YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac struct {
	Eq  *string `path:"eq" module:"nokia-conf"`
	Neq *string `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/aa-sub/sap YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap struct {
	Eq  *string `path:"eq" module:"nokia-conf"`
	Neq *string `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/aa-sub/spoke-sdp YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp struct {
	Eq  *string `path:"eq" module:"nokia-conf"`
	Neq *string `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/aa-sub/transit YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit struct {
	Eq  *string `path:"eq" module:"nokia-conf"`
	Neq *string `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/app-group YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup struct {
	Eq  *string `path:"eq" module:"nokia-conf"`
	Neq *string `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/application YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application struct {
	Eq  *string `path:"eq" module:"nokia-conf"`
	Neq *string `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/characteristic YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic struct {
	CharacteristicName *string `path:"characteristic-name" module:"nokia-conf"`
	Eq                 *string `path:"eq" module:"nokia-conf"`
	Neq                *string `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) IsYANGGoStruct() {
}

// GetCharacteristicName retrieves the value of the leaf CharacteristicName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CharacteristicName is set, it can
// safely use t.GetCharacteristicName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CharacteristicName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) GetCharacteristicName() string {
	if t == nil || t.CharacteristicName == nil {
		return ""
	}
	return *t.CharacteristicName
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CharacteristicName == nil {
		return nil, fmt.Errorf("nil value for key CharacteristicName")
	}

	return map[string]interface{}{
		"characteristic-name": *t.CharacteristicName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/charging-group YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup struct {
	Eq  *string `path:"eq" module:"nokia-conf"`
	Neq *string `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/dscp YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp struct {
	Eq  E_NokiaTypesQos_DscpName `path:"eq" module:"nokia-conf"`
	Neq E_NokiaTypesQos_DscpName `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp) GetEq() E_NokiaTypesQos_DscpName {
	if t == nil || t.Eq == 0 {
		return 0
	}
	return t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp) GetNeq() E_NokiaTypesQos_DscpName {
	if t == nil || t.Neq == 0 {
		return 0
	}
	return t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp struct {
	Eq  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq  `path:"eq" module:"nokia-conf"`
	Neq *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp) IsYANGGoStruct() {
}

// GetOrCreateEq retrieves the value of the Eq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp) GetOrCreateEq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq {
	if t.Eq != nil {
		return t.Eq
	}
	t.Eq = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq{}
	return t.Eq
}

// GetOrCreateNeq retrieves the value of the Neq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp) GetOrCreateNeq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq {
	if t.Neq != nil {
		return t.Neq
	}
	t.Neq = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq{}
	return t.Neq
}

// GetEq returns the value of the Eq struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp. If the receiver or the field Eq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp) GetEq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq {
	if t != nil && t.Eq != nil {
		return t.Eq
	}
	return nil
}

// GetNeq returns the value of the Neq struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp. If the receiver or the field Neq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp) GetNeq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq {
	if t != nil && t.Neq != nil {
		return t.Neq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Eq.PopulateDefaults()
	t.Neq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/dst-ip/eq YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq struct {
	IpPrefix     *string `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/dst-ip/neq YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq struct {
	IpPrefix     *string `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort struct {
	Eq  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq  `path:"eq" module:"nokia-conf"`
	Neq *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetOrCreateEq retrieves the value of the Eq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort) GetOrCreateEq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq {
	if t.Eq != nil {
		return t.Eq
	}
	t.Eq = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq{}
	return t.Eq
}

// GetOrCreateNeq retrieves the value of the Neq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort) GetOrCreateNeq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq {
	if t.Neq != nil {
		return t.Neq
	}
	t.Neq = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq{}
	return t.Neq
}

// GetEq returns the value of the Eq struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort. If the receiver or the field Eq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort) GetEq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq {
	if t != nil && t.Eq != nil {
		return t.Eq
	}
	return nil
}

// GetNeq returns the value of the Neq struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort. If the receiver or the field Neq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort) GetNeq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq {
	if t != nil && t.Neq != nil {
		return t.Neq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Eq.PopulateDefaults()
	t.Neq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/dst-port/eq YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq struct {
	PortList   *string                                                                                                                 `path:"port-list" module:"nokia-conf"`
	PortNumber *int32                                                                                                                  `path:"port-number" module:"nokia-conf"`
	Range      *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq) GetRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v int32 = 0
		t.PortNumber = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/dst-port/eq/range YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 1
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v int32 = 1
		t.End = &v
	}
	if t.Start == nil {
		var v int32 = 0
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/dst-port/neq YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq struct {
	PortList   *string                                                                                                                  `path:"port-list" module:"nokia-conf"`
	PortNumber *int32                                                                                                                   `path:"port-number" module:"nokia-conf"`
	Range      *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq) GetRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v int32 = 0
		t.PortNumber = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/dst-port/neq/range YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 1
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v int32 = 1
		t.End = &v
	}
	if t.Start == nil {
		var v int32 = 0
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/flow-attribute YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute struct {
	Confidence        *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence `path:"confidence" module:"nokia-conf"`
	FlowAttributeName *string                                                                                                                         `path:"flow-attribute-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) IsYANGGoStruct() {
}

// GetOrCreateConfidence retrieves the value of the Confidence field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) GetOrCreateConfidence() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence {
	if t.Confidence != nil {
		return t.Confidence
	}
	t.Confidence = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence{}
	return t.Confidence
}

// GetConfidence returns the value of the Confidence struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute. If the receiver or the field Confidence is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) GetConfidence() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence {
	if t != nil && t.Confidence != nil {
		return t.Confidence
	}
	return nil
}

// GetFlowAttributeName retrieves the value of the leaf FlowAttributeName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowAttributeName is set, it can
// safely use t.GetFlowAttributeName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowAttributeName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) GetFlowAttributeName() string {
	if t == nil || t.FlowAttributeName == nil {
		return ""
	}
	return *t.FlowAttributeName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Confidence.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FlowAttributeName == nil {
		return nil, fmt.Errorf("nil value for key FlowAttributeName")
	}

	return map[string]interface{}{
		"flow-attribute-name": *t.FlowAttributeName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/flow-attribute/confidence YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence struct {
	Eq  *uint32 `path:"eq" module:"nokia-conf"`
	Gte *uint32 `path:"gte" module:"nokia-conf"`
	Lt  *uint32 `path:"lt" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence) GetEq() uint32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGte retrieves the value of the leaf Gte from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gte is set, it can
// safely use t.GetGte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence) GetGte() uint32 {
	if t == nil || t.Gte == nil {
		return 0
	}
	return *t.Gte
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence) GetLt() uint32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/ip-protocol YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol struct {
	Eq  NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol_Eq_Union  `path:"eq" module:"nokia-conf"`
	Neq NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol_Neq_Union `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol) GetEq() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol_Eq_Union {
	if t == nil || t.Eq == nil {
		return nil
	}
	return t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol) GetNeq() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol_Neq_Union {
	if t == nil || t.Neq == nil {
		return nil
	}
	return t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp struct {
	Eq  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq  `path:"eq" module:"nokia-conf"`
	Neq *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp) IsYANGGoStruct() {
}

// GetOrCreateEq retrieves the value of the Eq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp) GetOrCreateEq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq {
	if t.Eq != nil {
		return t.Eq
	}
	t.Eq = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq{}
	return t.Eq
}

// GetOrCreateNeq retrieves the value of the Neq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp) GetOrCreateNeq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq {
	if t.Neq != nil {
		return t.Neq
	}
	t.Neq = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq{}
	return t.Neq
}

// GetEq returns the value of the Eq struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp. If the receiver or the field Eq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp) GetEq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq {
	if t != nil && t.Eq != nil {
		return t.Eq
	}
	return nil
}

// GetNeq returns the value of the Neq struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp. If the receiver or the field Neq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp) GetNeq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq {
	if t != nil && t.Neq != nil {
		return t.Neq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Eq.PopulateDefaults()
	t.Neq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/src-ip/eq YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq struct {
	IpPrefix     *string `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/src-ip/neq YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq struct {
	IpPrefix     *string `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort struct {
	Eq  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq  `path:"eq" module:"nokia-conf"`
	Neq *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetOrCreateEq retrieves the value of the Eq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort) GetOrCreateEq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq {
	if t.Eq != nil {
		return t.Eq
	}
	t.Eq = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq{}
	return t.Eq
}

// GetOrCreateNeq retrieves the value of the Neq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort) GetOrCreateNeq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq {
	if t.Neq != nil {
		return t.Neq
	}
	t.Neq = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq{}
	return t.Neq
}

// GetEq returns the value of the Eq struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort. If the receiver or the field Eq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort) GetEq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq {
	if t != nil && t.Eq != nil {
		return t.Eq
	}
	return nil
}

// GetNeq returns the value of the Neq struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort. If the receiver or the field Neq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort) GetNeq() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq {
	if t != nil && t.Neq != nil {
		return t.Neq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Eq.PopulateDefaults()
	t.Neq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/src-port/eq YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq struct {
	PortList   *string                                                                                                                 `path:"port-list" module:"nokia-conf"`
	PortNumber *int32                                                                                                                  `path:"port-number" module:"nokia-conf"`
	Range      *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq) GetRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v int32 = 0
		t.PortNumber = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/src-port/eq/range YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 1
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v int32 = 1
		t.End = &v
	}
	if t.Start == nil {
		var v int32 = 0
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/src-port/neq YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq struct {
	PortList   *string                                                                                                                  `path:"port-list" module:"nokia-conf"`
	PortNumber *int32                                                                                                                   `path:"port-number" module:"nokia-conf"`
	Range      *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq) GetRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v int32 = 0
		t.PortNumber = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-qos-policy/entry/match/src-port/neq/range YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 1
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v int32 = 1
		t.End = &v
	}
	if t.Start == nil {
		var v int32 = 0
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-service-options YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions struct {
	Characteristic map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic `path:"characteristic" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) IsYANGGoStruct() {
}

// NewCharacteristic creates a new entry in the Characteristic list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) NewCharacteristic(CharacteristicName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic)
	}

	key := CharacteristicName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Characteristic[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Characteristic", key)
	}

	t.Characteristic[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic{
		CharacteristicName: &CharacteristicName,
	}

	return t.Characteristic[key], nil
}

// RenameCharacteristic renames an entry in the list Characteristic within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) RenameCharacteristic(oldK, newK string) error {
	if _, ok := t.Characteristic[newK]; ok {
		return fmt.Errorf("key %v already exists in Characteristic", newK)
	}

	e, ok := t.Characteristic[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Characteristic", oldK)
	}
	e.CharacteristicName = &newK

	t.Characteristic[newK] = e
	delete(t.Characteristic, oldK)
	return nil
}

// GetOrCreateCharacteristic retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) GetOrCreateCharacteristic(CharacteristicName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic {

	key := CharacteristicName

	if v, ok := t.Characteristic[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCharacteristic(CharacteristicName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCharacteristic got unexpected error: %v", err))
	}
	return v
}

// GetCharacteristic retrieves the value with the specified key from
// the Characteristic map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) GetCharacteristic(CharacteristicName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic {

	if t == nil {
		return nil
	}

	key := CharacteristicName

	if lm, ok := t.Characteristic[key]; ok {
		return lm
	}
	return nil
}

// DeleteCharacteristic deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) DeleteCharacteristic(CharacteristicName string) {
	key := CharacteristicName

	delete(t.Characteristic, key)
}

// AppendCharacteristic appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic struct to the
// list Characteristic of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) AppendCharacteristic(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) error {
	if v.CharacteristicName == nil {
		return fmt.Errorf("invalid nil key received for CharacteristicName")
	}

	key := *v.CharacteristicName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic)
	}

	if _, ok := t.Characteristic[key]; ok {
		return fmt.Errorf("duplicate key for list Characteristic %v", key)
	}

	t.Characteristic[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Characteristic {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-service-options/characteristic YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic struct {
	CharacteristicName *string                                                                                                                         `path:"characteristic-name" module:"nokia-conf"`
	DefaultValue       *string                                                                                                                         `path:"default-value" module:"nokia-conf"`
	Value              map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) IsYANGGoStruct() {
}

// NewValue creates a new entry in the Value list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) NewValue(ValueName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Value == nil {
		t.Value = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value)
	}

	key := ValueName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Value[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Value", key)
	}

	t.Value[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value{
		ValueName: &ValueName,
	}

	return t.Value[key], nil
}

// RenameValue renames an entry in the list Value within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) RenameValue(oldK, newK string) error {
	if _, ok := t.Value[newK]; ok {
		return fmt.Errorf("key %v already exists in Value", newK)
	}

	e, ok := t.Value[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Value", oldK)
	}
	e.ValueName = &newK

	t.Value[newK] = e
	delete(t.Value, oldK)
	return nil
}

// GetOrCreateValue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) GetOrCreateValue(ValueName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value {

	key := ValueName

	if v, ok := t.Value[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewValue(ValueName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateValue got unexpected error: %v", err))
	}
	return v
}

// GetValue retrieves the value with the specified key from
// the Value map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) GetValue(ValueName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value {

	if t == nil {
		return nil
	}

	key := ValueName

	if lm, ok := t.Value[key]; ok {
		return lm
	}
	return nil
}

// DeleteValue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) DeleteValue(ValueName string) {
	key := ValueName

	delete(t.Value, key)
}

// AppendValue appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value struct to the
// list Value of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) AppendValue(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value) error {
	if v.ValueName == nil {
		return fmt.Errorf("invalid nil key received for ValueName")
	}

	key := *v.ValueName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Value == nil {
		t.Value = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value)
	}

	if _, ok := t.Value[key]; ok {
		return fmt.Errorf("duplicate key for list Value %v", key)
	}

	t.Value[key] = v
	return nil
}

// GetCharacteristicName retrieves the value of the leaf CharacteristicName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CharacteristicName is set, it can
// safely use t.GetCharacteristicName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CharacteristicName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) GetCharacteristicName() string {
	if t == nil || t.CharacteristicName == nil {
		return ""
	}
	return *t.CharacteristicName
}

// GetDefaultValue retrieves the value of the leaf DefaultValue from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultValue is set, it can
// safely use t.GetDefaultValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) GetDefaultValue() string {
	if t == nil || t.DefaultValue == nil {
		return ""
	}
	return *t.DefaultValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Value {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CharacteristicName == nil {
		return nil, fmt.Errorf("nil value for key CharacteristicName")
	}

	return map[string]interface{}{
		"characteristic-name": *t.CharacteristicName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/app-service-options/characteristic/value YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value struct {
	ValueName *string `path:"value-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value) IsYANGGoStruct() {
}

// GetValueName retrieves the value of the leaf ValueName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValueName is set, it can
// safely use t.GetValueName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValueName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value) GetValueName() string {
	if t == nil || t.ValueName == nil {
		return ""
	}
	return *t.ValueName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ValueName == nil {
		return nil, fmt.Errorf("nil value for key ValueName")
	}

	return map[string]interface{}{
		"value-name": *t.ValueName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/application YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application struct {
	AppGroup        *string `path:"app-group" module:"nokia-conf"`
	ApplicationName *string `path:"application-name" module:"nokia-conf"`
	ChargingGroup   *string `path:"charging-group" module:"nokia-conf"`
	Description     *string `path:"description" module:"nokia-conf"`
	ExportId        *uint32 `path:"export-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application) IsYANGGoStruct() {
}

// GetAppGroup retrieves the value of the leaf AppGroup from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppGroup is set, it can
// safely use t.GetAppGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application) GetAppGroup() string {
	if t == nil || t.AppGroup == nil {
		return "Unknown"
	}
	return *t.AppGroup
}

// GetApplicationName retrieves the value of the leaf ApplicationName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplicationName is set, it can
// safely use t.GetApplicationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplicationName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application) GetApplicationName() string {
	if t == nil || t.ApplicationName == nil {
		return ""
	}
	return *t.ApplicationName
}

// GetChargingGroup retrieves the value of the leaf ChargingGroup from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChargingGroup is set, it can
// safely use t.GetChargingGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChargingGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application) GetChargingGroup() string {
	if t == nil || t.ChargingGroup == nil {
		return ""
	}
	return *t.ChargingGroup
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportId retrieves the value of the leaf ExportId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportId is set, it can
// safely use t.GetExportId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application) GetExportId() uint32 {
	if t == nil || t.ExportId == nil {
		return 0
	}
	return *t.ExportId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AppGroup == nil {
		var v string = "Unknown"
		t.AppGroup = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ApplicationName == nil {
		return nil, fmt.Errorf("nil value for key ApplicationName")
	}

	return map[string]interface{}{
		"application-name": *t.ApplicationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/charging-group YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup struct {
	ChargingGroupName *string                                              `path:"charging-group-name" module:"nokia-conf"`
	Description       *string                                              `path:"description" module:"nokia-conf"`
	ExportId          *uint32                                              `path:"export-id" module:"nokia-conf"`
	NotifyStartStop   E_NokiaTypesApplicationAssurance_NotifyStartStopType `path:"notify-start-stop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) IsYANGGoStruct() {
}

// GetChargingGroupName retrieves the value of the leaf ChargingGroupName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChargingGroupName is set, it can
// safely use t.GetChargingGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChargingGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) GetChargingGroupName() string {
	if t == nil || t.ChargingGroupName == nil {
		return ""
	}
	return *t.ChargingGroupName
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportId retrieves the value of the leaf ExportId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportId is set, it can
// safely use t.GetExportId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) GetExportId() uint32 {
	if t == nil || t.ExportId == nil {
		return 0
	}
	return *t.ExportId
}

// GetNotifyStartStop retrieves the value of the leaf NotifyStartStop from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NotifyStartStop is set, it can
// safely use t.GetNotifyStartStop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NotifyStartStop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) GetNotifyStartStop() E_NokiaTypesApplicationAssurance_NotifyStartStopType {
	if t == nil || t.NotifyStartStop == 0 {
		return NokiaTypesApplicationAssurance_NotifyStartStopType_none
	}
	return t.NotifyStartStop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NotifyStartStop == 0 {
		t.NotifyStartStop = NokiaTypesApplicationAssurance_NotifyStartStopType_none
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ChargingGroupName == nil {
		return nil, fmt.Errorf("nil value for key ChargingGroupName")
	}

	return map[string]interface{}{
		"charging-group-name": *t.ChargingGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/custom-protocol YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol struct {
	AdminState       E_NokiaTypesSros_AdminState                                                                                                                                                                                                        `path:"admin-state" module:"nokia-conf"`
	CustomProtocolId *string                                                                                                                                                                                                                            `path:"custom-protocol-id" module:"nokia-conf"`
	Description      *string                                                                                                                                                                                                                            `path:"description" module:"nokia-conf"`
	Expression       map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression_ExprIndex_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression `path:"expression" module:"nokia-conf"`
	IpProtocol       E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_IpProtocol                                                                                                                           `path:"ip-protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) IsYANGGoStruct() {
}

// NewExpression creates a new entry in the Expression list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) NewExpression(ExprIndex NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression_ExprIndex_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Expression == nil {
		t.Expression = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression_ExprIndex_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression)
	}

	key := ExprIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Expression[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Expression", key)
	}

	t.Expression[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression{
		ExprIndex: ExprIndex,
	}

	return t.Expression[key], nil
}

// RenameExpression renames an entry in the list Expression within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) RenameExpression(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression_ExprIndex_Union) error {
	if _, ok := t.Expression[newK]; ok {
		return fmt.Errorf("key %v already exists in Expression", newK)
	}

	e, ok := t.Expression[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Expression", oldK)
	}
	e.ExprIndex = newK

	t.Expression[newK] = e
	delete(t.Expression, oldK)
	return nil
}

// GetOrCreateExpression retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) GetOrCreateExpression(ExprIndex NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression_ExprIndex_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression {

	key := ExprIndex

	if v, ok := t.Expression[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExpression(ExprIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExpression got unexpected error: %v", err))
	}
	return v
}

// GetExpression retrieves the value with the specified key from
// the Expression map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) GetExpression(ExprIndex NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression_ExprIndex_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression {

	if t == nil {
		return nil
	}

	key := ExprIndex

	if lm, ok := t.Expression[key]; ok {
		return lm
	}
	return nil
}

// DeleteExpression deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) DeleteExpression(ExprIndex NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression_ExprIndex_Union) {
	key := ExprIndex

	delete(t.Expression, key)
}

// AppendExpression appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression struct to the
// list Expression of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) AppendExpression(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) error {
	key := v.ExprIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Expression == nil {
		t.Expression = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression_ExprIndex_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression)
	}

	if _, ok := t.Expression[key]; ok {
		return fmt.Errorf("duplicate key for list Expression %v", key)
	}

	t.Expression[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCustomProtocolId retrieves the value of the leaf CustomProtocolId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CustomProtocolId is set, it can
// safely use t.GetCustomProtocolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CustomProtocolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) GetCustomProtocolId() string {
	if t == nil || t.CustomProtocolId == nil {
		return ""
	}
	return *t.CustomProtocolId
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpProtocol retrieves the value of the leaf IpProtocol from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpProtocol is set, it can
// safely use t.GetIpProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpProtocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) GetIpProtocol() E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_IpProtocol {
	if t == nil || t.IpProtocol == 0 {
		return 0
	}
	return t.IpProtocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Expression {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CustomProtocolId == nil {
		return nil, fmt.Errorf("nil value for key CustomProtocolId")
	}

	return map[string]interface{}{
		"custom-protocol-id": *t.CustomProtocolId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/policy/custom-protocol/expression YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression struct {
	Direction E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression_Direction     `path:"direction" module:"nokia-conf"`
	Eq        *string                                                                                                                `path:"eq" module:"nokia-conf"`
	ExprIndex NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression_ExprIndex_Union `path:"expr-index" module:"nokia-conf"`
	Offset    *uint32                                                                                                                `path:"offset" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) IsYANGGoStruct() {
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) GetDirection() E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetExprIndex retrieves the value of the leaf ExprIndex from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExprIndex is set, it can
// safely use t.GetExprIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExprIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) GetExprIndex() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression_ExprIndex_Union {
	if t == nil || t.ExprIndex == nil {
		return nil
	}
	return t.ExprIndex
}

// GetOffset retrieves the value of the leaf Offset from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Offset is set, it can
// safely use t.GetOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Offset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) GetOffset() uint32 {
	if t == nil || t.Offset == nil {
		return 0
	}
	return *t.Offset
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Offset == nil {
		var v uint32 = 0
		t.Offset = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"expr-index": t.ExprIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/port-list YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList struct {
	Description  *string                                                                                                                                                                                       `path:"description" module:"nokia-conf"`
	Port         map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port_PortNumber_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port `path:"port" module:"nokia-conf"`
	PortListName *string                                                                                                                                                                                       `path:"port-list-name" module:"nokia-conf"`
	Range        map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range            `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_Key represents the key for list Range of element /nokia-conf/configure/groups/group/application-assurance/group/partition/port-list.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_Key struct {
	Start NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_Start_Union `path:"start"`
	End   NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_End_Union   `path:"end"`
}

// NewPort creates a new entry in the Port list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) NewPort(PortNumber NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port_PortNumber_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port_PortNumber_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port)
	}

	key := PortNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port{
		PortNumber: PortNumber,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) RenamePort(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port_PortNumber_Union) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.PortNumber = newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) GetOrCreatePort(PortNumber NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port_PortNumber_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port {

	key := PortNumber

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(PortNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) GetPort(PortNumber NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port_PortNumber_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port {

	if t == nil {
		return nil
	}

	key := PortNumber

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) DeletePort(PortNumber NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port_PortNumber_Union) {
	key := PortNumber

	delete(t.Port, key)
}

// AppendPort appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port struct to the
// list Port of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) AppendPort(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port) error {
	key := v.PortNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port_PortNumber_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) NewRange(Start NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_Start_Union, End NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_End_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range)
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range{
		Start: Start,
		End:   End,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) RenameRange(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_Key) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.Start = newK.Start
	e.End = newK.End

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) GetOrCreateRange(Start NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_Start_Union, End NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_End_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range {

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) GetRange(Start NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_Start_Union, End NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_End_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) DeleteRange(Start NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_Start_Union, End NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_End_Union) {
	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range struct to the
// list Range of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) AppendRange(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range) error {
	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_Key{
		Start: v.Start,
		End:   v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPortListName retrieves the value of the leaf PortListName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortListName is set, it can
// safely use t.GetPortListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) GetPortListName() string {
	if t == nil || t.PortListName == nil {
		return ""
	}
	return *t.PortListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortListName == nil {
		return nil, fmt.Errorf("nil value for key PortListName")
	}

	return map[string]interface{}{
		"port-list-name": *t.PortListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/port-list/port YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port struct {
	PortNumber NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port_PortNumber_Union `path:"port-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port) IsYANGGoStruct() {
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port) GetPortNumber() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port_PortNumber_Union {
	if t == nil || t.PortNumber == nil {
		return nil
	}
	return t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"port-number": t.PortNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/port-list/range YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range struct {
	End   NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_End_Union   `path:"end" module:"nokia-conf"`
	Start NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range) GetEnd() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range) GetStart() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"end":   t.End,
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_PortList_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/sctp-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter struct {
	Description    *string                                                                                     `path:"description" module:"nokia-conf"`
	EventLog       *string                                                                                     `path:"event-log" module:"nokia-conf"`
	Ppid           *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid      `path:"ppid" module:"nokia-conf"`
	PpidRange      *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange `path:"ppid-range" module:"nokia-conf"`
	SctpFilterName *string                                                                                     `path:"sctp-filter-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter) IsYANGGoStruct() {
}

// GetOrCreatePpid retrieves the value of the Ppid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter) GetOrCreatePpid() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid {
	if t.Ppid != nil {
		return t.Ppid
	}
	t.Ppid = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid{}
	return t.Ppid
}

// GetOrCreatePpidRange retrieves the value of the PpidRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter) GetOrCreatePpidRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange {
	if t.PpidRange != nil {
		return t.PpidRange
	}
	t.PpidRange = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange{}
	return t.PpidRange
}

// GetPpid returns the value of the Ppid struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter. If the receiver or the field Ppid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter) GetPpid() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid {
	if t != nil && t.Ppid != nil {
		return t.Ppid
	}
	return nil
}

// GetPpidRange returns the value of the PpidRange struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter. If the receiver or the field PpidRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter) GetPpidRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange {
	if t != nil && t.PpidRange != nil {
		return t.PpidRange
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// GetSctpFilterName retrieves the value of the leaf SctpFilterName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SctpFilterName is set, it can
// safely use t.GetSctpFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SctpFilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter) GetSctpFilterName() string {
	if t == nil || t.SctpFilterName == nil {
		return ""
	}
	return *t.SctpFilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ppid.PopulateDefaults()
	t.PpidRange.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SctpFilterName == nil {
		return nil, fmt.Errorf("nil value for key SctpFilterName")
	}

	return map[string]interface{}{
		"sctp-filter-name": *t.SctpFilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/sctp-filter/ppid YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid struct {
	DefaultAction E_NokiaTypesApplicationAssurance_PermitDenyAction                                                                                                                                                          `path:"default-action" module:"nokia-conf"`
	Entry         map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) NewEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) GetEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) AppendEntry(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) GetDefaultAction() E_NokiaTypesApplicationAssurance_PermitDenyAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	return t.DefaultAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/sctp-filter/ppid-range YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange struct {
	Max *uint32 `path:"max" module:"nokia-conf"`
	Min *uint32 `path:"min" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange) IsYANGGoStruct() {
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 4294967295
	}
	return *t.Max
}

// GetMin retrieves the value of the leaf Min from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange) GetMin() uint32 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Max == nil {
		var v uint32 = 4294967295
		t.Max = &v
	}
	if t.Min == nil {
		var v uint32 = 0
		t.Min = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/sctp-filter/ppid/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry struct {
	Action  E_NokiaTypesApplicationAssurance_PermitDenyActionNoDefault                                                `path:"action" module:"nokia-conf"`
	EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Value   NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry_Value_Union   `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) IsYANGGoStruct() {
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) GetAction() E_NokiaTypesApplicationAssurance_PermitDenyActionNoDefault {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) GetValue() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/session-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter struct {
	DefaultAction     *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction                                                                                                     `path:"default-action" module:"nokia-conf"`
	Description       *string                                                                                                                                                                                                `path:"description" module:"nokia-conf"`
	Entry             map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry `path:"entry" module:"nokia-conf"`
	SessionFilterName *string                                                                                                                                                                                                `path:"session-filter-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter) NewEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter) GetEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter) AppendEntry(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter) GetOrCreateDefaultAction() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction{}
	return t.DefaultAction
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter) GetDefaultAction() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSessionFilterName retrieves the value of the leaf SessionFilterName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionFilterName is set, it can
// safely use t.GetSessionFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionFilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter) GetSessionFilterName() string {
	if t == nil || t.SessionFilterName == nil {
		return ""
	}
	return *t.SessionFilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefaultAction.PopulateDefaults()
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SessionFilterName == nil {
		return nil, fmt.Errorf("nil value for key SessionFilterName")
	}

	return map[string]interface{}{
		"session-filter-name": *t.SessionFilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/session-filter/default-action YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction struct {
	Action   E_NokiaTypesApplicationAssurance_PermitDenyAction `path:"action" module:"nokia-conf"`
	EventLog *string                                           `path:"event-log" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction) IsYANGGoStruct() {
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction) GetAction() E_NokiaTypesApplicationAssurance_PermitDenyAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesApplicationAssurance_PermitDenyAction_deny
	}
	return t.Action
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesApplicationAssurance_PermitDenyAction_deny
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/session-filter/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action       `path:"action" module:"nokia-conf"`
	Description *string                                                                                                 `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match        `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry) IsYANGGoStruct() {
}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry) GetAction() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/session-filter/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action struct {
	Deny         YANGEmpty `path:"deny" module:"nokia-conf"`
	EventLog     *string   `path:"event-log" module:"nokia-conf"`
	HttpRedirect *string   `path:"http-redirect" module:"nokia-conf"`
	Permit       YANGEmpty `path:"permit" module:"nokia-conf"`
	TcpOptimizer *string   `path:"tcp-optimizer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) IsYANGGoStruct() {
}

// GetDeny retrieves the value of the leaf Deny from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Deny is set, it can
// safely use t.GetDeny() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Deny == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) GetDeny() YANGEmpty {
	if t == nil || t.Deny == false {
		return false
	}
	return t.Deny
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// GetHttpRedirect retrieves the value of the leaf HttpRedirect from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpRedirect is set, it can
// safely use t.GetHttpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) GetHttpRedirect() string {
	if t == nil || t.HttpRedirect == nil {
		return ""
	}
	return *t.HttpRedirect
}

// GetPermit retrieves the value of the leaf Permit from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Permit is set, it can
// safely use t.GetPermit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Permit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) GetPermit() YANGEmpty {
	if t == nil || t.Permit == false {
		return false
	}
	return t.Permit
}

// GetTcpOptimizer retrieves the value of the leaf TcpOptimizer from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpOptimizer is set, it can
// safely use t.GetTcpOptimizer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpOptimizer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) GetTcpOptimizer() string {
	if t == nil || t.TcpOptimizer == nil {
		return ""
	}
	return *t.TcpOptimizer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/session-filter/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match struct {
	DstIp      *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp           `path:"dst-ip" module:"nokia-conf"`
	DstPort    *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort         `path:"dst-port" module:"nokia-conf"`
	IpProtocol NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_IpProtocol_Union `path:"ip-protocol" module:"nokia-conf"`
	SrcIp      *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp           `path:"src-ip" module:"nokia-conf"`
	SrcPort    *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort         `path:"src-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) IsYANGGoStruct() {
}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) GetDstIp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) GetSrcIp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetIpProtocol retrieves the value of the leaf IpProtocol from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpProtocol is set, it can
// safely use t.GetIpProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpProtocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) GetIpProtocol() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_IpProtocol_Union {
	if t == nil || t.IpProtocol == nil {
		return nil
	}
	return t.IpProtocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/session-filter/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp struct {
	DnsIpCache   *string `path:"dns-ip-cache" module:"nokia-conf"`
	IpPrefix     *string `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp) IsYANGGoStruct() {
}

// GetDnsIpCache retrieves the value of the leaf DnsIpCache from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnsIpCache is set, it can
// safely use t.GetDnsIpCache() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnsIpCache == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp) GetDnsIpCache() string {
	if t == nil || t.DnsIpCache == nil {
		return ""
	}
	return *t.DnsIpCache
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/session-filter/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort struct {
	Eq       *int32                                                                                                         `path:"eq" module:"nokia-conf"`
	Gt       *int32                                                                                                         `path:"gt" module:"nokia-conf"`
	Lt       *int32                                                                                                         `path:"lt" module:"nokia-conf"`
	PortList *string                                                                                                        `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Eq == nil {
		var v int32 = 0
		t.Eq = &v
	}
	if t.Gt == nil {
		var v int32 = 0
		t.Gt = &v
	}
	if t.Lt == nil {
		var v int32 = 0
		t.Lt = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/session-filter/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 1
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v int32 = 1
		t.End = &v
	}
	if t.Start == nil {
		var v int32 = 0
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/session-filter/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp struct {
	IpPrefix     *string `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/session-filter/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort struct {
	Eq       *int32                                                                                                         `path:"eq" module:"nokia-conf"`
	Gt       *int32                                                                                                         `path:"gt" module:"nokia-conf"`
	Lt       *int32                                                                                                         `path:"lt" module:"nokia-conf"`
	PortList *string                                                                                                        `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Eq == nil {
		var v int32 = 0
		t.Eq = &v
	}
	if t.Gt == nil {
		var v int32 = 0
		t.Gt = &v
	}
	if t.Lt == nil {
		var v int32 = 0
		t.Lt = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/session-filter/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 1
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v int32 = 1
		t.End = &v
	}
	if t.Start == nil {
		var v int32 = 0
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/statistics YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics struct {
	AaAdmitDeny   *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny                                                                                                                `path:"aa-admit-deny" module:"nokia-conf" yangPresence:"true"`
	AaAppGroup    *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup                                                                                                                 `path:"aa-app-group" module:"nokia-conf" yangPresence:"true"`
	AaApplication *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaApplication                                                                                                              `path:"aa-application" module:"nokia-conf" yangPresence:"true"`
	AaPartition   *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition                                                                                                                `path:"aa-partition" module:"nokia-conf" yangPresence:"true"`
	AaProtocol    *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol                                                                                                                 `path:"aa-protocol" module:"nokia-conf" yangPresence:"true"`
	AaSub         *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub                                                                                                                      `path:"aa-sub" module:"nokia-conf" yangPresence:"true"`
	AaSubStudy    map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_StudyType_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy `path:"aa-sub-study" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) IsYANGGoStruct() {
}

// NewAaSubStudy creates a new entry in the AaSubStudy list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) NewAaSubStudy(StudyType NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_StudyType_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AaSubStudy == nil {
		t.AaSubStudy = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_StudyType_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy)
	}

	key := StudyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AaSubStudy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AaSubStudy", key)
	}

	t.AaSubStudy[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy{
		StudyType: StudyType,
	}

	return t.AaSubStudy[key], nil
}

// RenameAaSubStudy renames an entry in the list AaSubStudy within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) RenameAaSubStudy(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_StudyType_Union) error {
	if _, ok := t.AaSubStudy[newK]; ok {
		return fmt.Errorf("key %v already exists in AaSubStudy", newK)
	}

	e, ok := t.AaSubStudy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AaSubStudy", oldK)
	}
	e.StudyType = newK

	t.AaSubStudy[newK] = e
	delete(t.AaSubStudy, oldK)
	return nil
}

// GetOrCreateAaSubStudy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) GetOrCreateAaSubStudy(StudyType NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_StudyType_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy {

	key := StudyType

	if v, ok := t.AaSubStudy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAaSubStudy(StudyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAaSubStudy got unexpected error: %v", err))
	}
	return v
}

// GetAaSubStudy retrieves the value with the specified key from
// the AaSubStudy map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) GetAaSubStudy(StudyType NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_StudyType_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy {

	if t == nil {
		return nil
	}

	key := StudyType

	if lm, ok := t.AaSubStudy[key]; ok {
		return lm
	}
	return nil
}

// DeleteAaSubStudy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) DeleteAaSubStudy(StudyType NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_StudyType_Union) {
	key := StudyType

	delete(t.AaSubStudy, key)
}

// AppendAaSubStudy appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy struct to the
// list AaSubStudy of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) AppendAaSubStudy(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) error {
	key := v.StudyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AaSubStudy == nil {
		t.AaSubStudy = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_StudyType_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy)
	}

	if _, ok := t.AaSubStudy[key]; ok {
		return fmt.Errorf("duplicate key for list AaSubStudy %v", key)
	}

	t.AaSubStudy[key] = v
	return nil
}

// GetOrCreateAaAdmitDeny retrieves the value of the AaAdmitDeny field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) GetOrCreateAaAdmitDeny() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny {
	if t.AaAdmitDeny != nil {
		return t.AaAdmitDeny
	}
	t.AaAdmitDeny = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny{}
	return t.AaAdmitDeny
}

// GetOrCreateAaAppGroup retrieves the value of the AaAppGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) GetOrCreateAaAppGroup() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup {
	if t.AaAppGroup != nil {
		return t.AaAppGroup
	}
	t.AaAppGroup = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup{}
	return t.AaAppGroup
}

// GetOrCreateAaApplication retrieves the value of the AaApplication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) GetOrCreateAaApplication() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaApplication {
	if t.AaApplication != nil {
		return t.AaApplication
	}
	t.AaApplication = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaApplication{}
	return t.AaApplication
}

// GetOrCreateAaPartition retrieves the value of the AaPartition field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) GetOrCreateAaPartition() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition {
	if t.AaPartition != nil {
		return t.AaPartition
	}
	t.AaPartition = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition{}
	return t.AaPartition
}

// GetOrCreateAaProtocol retrieves the value of the AaProtocol field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) GetOrCreateAaProtocol() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol {
	if t.AaProtocol != nil {
		return t.AaProtocol
	}
	t.AaProtocol = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol{}
	return t.AaProtocol
}

// GetOrCreateAaSub retrieves the value of the AaSub field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) GetOrCreateAaSub() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub {
	if t.AaSub != nil {
		return t.AaSub
	}
	t.AaSub = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub{}
	return t.AaSub
}

// GetAaAdmitDeny returns the value of the AaAdmitDeny struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics. If the receiver or the field AaAdmitDeny is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) GetAaAdmitDeny() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny {
	if t != nil && t.AaAdmitDeny != nil {
		return t.AaAdmitDeny
	}
	return nil
}

// GetAaAppGroup returns the value of the AaAppGroup struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics. If the receiver or the field AaAppGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) GetAaAppGroup() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup {
	if t != nil && t.AaAppGroup != nil {
		return t.AaAppGroup
	}
	return nil
}

// GetAaApplication returns the value of the AaApplication struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics. If the receiver or the field AaApplication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) GetAaApplication() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaApplication {
	if t != nil && t.AaApplication != nil {
		return t.AaApplication
	}
	return nil
}

// GetAaPartition returns the value of the AaPartition struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics. If the receiver or the field AaPartition is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) GetAaPartition() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition {
	if t != nil && t.AaPartition != nil {
		return t.AaPartition
	}
	return nil
}

// GetAaProtocol returns the value of the AaProtocol struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics. If the receiver or the field AaProtocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) GetAaProtocol() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol {
	if t != nil && t.AaProtocol != nil {
		return t.AaProtocol
	}
	return nil
}

// GetAaSub returns the value of the AaSub struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics. If the receiver or the field AaSub is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) GetAaSub() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub {
	if t != nil && t.AaSub != nil {
		return t.AaSub
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AaAdmitDeny.PopulateDefaults()
	t.AaAppGroup.PopulateDefaults()
	t.AaApplication.PopulateDefaults()
	t.AaPartition.PopulateDefaults()
	t.AaProtocol.PopulateDefaults()
	t.AaSub.PopulateDefaults()
	for _, e := range t.AaSubStudy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/statistics/aa-admit-deny YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny struct {
	AccountingPolicy      *uint32 `path:"accounting-policy" module:"nokia-conf"`
	CollectStats          *bool   `path:"collect-stats" module:"nokia-conf"`
	GtpFilterStats        *bool   `path:"gtp-filter-stats" module:"nokia-conf"`
	PolicerStats          *bool   `path:"policer-stats" module:"nokia-conf"`
	PolicerStatsResources *bool   `path:"policer-stats-resources" module:"nokia-conf"`
	SctpFilterStats       *bool   `path:"sctp-filter-stats" module:"nokia-conf"`
	SessionFilterStats    *bool   `path:"session-filter-stats" module:"nokia-conf"`
	TcpValidateStats      *bool   `path:"tcp-validate-stats" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) IsYANGGoStruct() {
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetGtpFilterStats retrieves the value of the leaf GtpFilterStats from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GtpFilterStats is set, it can
// safely use t.GetGtpFilterStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GtpFilterStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) GetGtpFilterStats() bool {
	if t == nil || t.GtpFilterStats == nil {
		return false
	}
	return *t.GtpFilterStats
}

// GetPolicerStats retrieves the value of the leaf PolicerStats from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerStats is set, it can
// safely use t.GetPolicerStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) GetPolicerStats() bool {
	if t == nil || t.PolicerStats == nil {
		return false
	}
	return *t.PolicerStats
}

// GetPolicerStatsResources retrieves the value of the leaf PolicerStatsResources from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerStatsResources is set, it can
// safely use t.GetPolicerStatsResources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerStatsResources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) GetPolicerStatsResources() bool {
	if t == nil || t.PolicerStatsResources == nil {
		return false
	}
	return *t.PolicerStatsResources
}

// GetSctpFilterStats retrieves the value of the leaf SctpFilterStats from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SctpFilterStats is set, it can
// safely use t.GetSctpFilterStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SctpFilterStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) GetSctpFilterStats() bool {
	if t == nil || t.SctpFilterStats == nil {
		return false
	}
	return *t.SctpFilterStats
}

// GetSessionFilterStats retrieves the value of the leaf SessionFilterStats from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionFilterStats is set, it can
// safely use t.GetSessionFilterStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionFilterStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) GetSessionFilterStats() bool {
	if t == nil || t.SessionFilterStats == nil {
		return false
	}
	return *t.SessionFilterStats
}

// GetTcpValidateStats retrieves the value of the leaf TcpValidateStats from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpValidateStats is set, it can
// safely use t.GetTcpValidateStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpValidateStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) GetTcpValidateStats() bool {
	if t == nil || t.TcpValidateStats == nil {
		return false
	}
	return *t.TcpValidateStats
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.GtpFilterStats == nil {
		var v bool = false
		t.GtpFilterStats = &v
	}
	if t.PolicerStats == nil {
		var v bool = false
		t.PolicerStats = &v
	}
	if t.PolicerStatsResources == nil {
		var v bool = false
		t.PolicerStatsResources = &v
	}
	if t.SctpFilterStats == nil {
		var v bool = false
		t.SctpFilterStats = &v
	}
	if t.SessionFilterStats == nil {
		var v bool = false
		t.SessionFilterStats = &v
	}
	if t.TcpValidateStats == nil {
		var v bool = false
		t.TcpValidateStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/statistics/aa-app-group YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup struct {
	AccountingPolicy *uint32 `path:"accounting-policy" module:"nokia-conf"`
	CollectStats     *bool   `path:"collect-stats" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup) IsYANGGoStruct() {
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaApplication represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/statistics/aa-application YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaApplication struct {
	AccountingPolicy *uint32 `path:"accounting-policy" module:"nokia-conf"`
	CollectStats     *bool   `path:"collect-stats" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaApplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaApplication) IsYANGGoStruct() {
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaApplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaApplication) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaApplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaApplication) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaApplication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaApplication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaApplication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaApplication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaApplication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaApplication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaApplication.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaApplication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/statistics/aa-partition YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition struct {
	AccountingPolicy *uint32 `path:"accounting-policy" module:"nokia-conf"`
	CollectStats     *bool   `path:"collect-stats" module:"nokia-conf"`
	TetheringStats   *bool   `path:"tethering-stats" module:"nokia-conf"`
	TrafficTypeStats *bool   `path:"traffic-type-stats" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition) IsYANGGoStruct() {
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetTetheringStats retrieves the value of the leaf TetheringStats from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TetheringStats is set, it can
// safely use t.GetTetheringStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TetheringStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition) GetTetheringStats() bool {
	if t == nil || t.TetheringStats == nil {
		return false
	}
	return *t.TetheringStats
}

// GetTrafficTypeStats retrieves the value of the leaf TrafficTypeStats from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrafficTypeStats is set, it can
// safely use t.GetTrafficTypeStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrafficTypeStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition) GetTrafficTypeStats() bool {
	if t == nil || t.TrafficTypeStats == nil {
		return false
	}
	return *t.TrafficTypeStats
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.TetheringStats == nil {
		var v bool = false
		t.TetheringStats = &v
	}
	if t.TrafficTypeStats == nil {
		var v bool = false
		t.TrafficTypeStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaPartition) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/statistics/aa-protocol YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol struct {
	AccountingPolicy *uint32                     `path:"accounting-policy" module:"nokia-conf"`
	AdminState       E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	CollectStats     *bool                       `path:"collect-stats" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol) IsYANGGoStruct() {
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaProtocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/statistics/aa-sub YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub struct {
	AccountingPolicy          *uint32                                                                                                              `path:"accounting-policy" module:"nokia-conf"`
	AggregateStatsExportUsing []E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AggregateStatsExportUsing `path:"aggregate-stats-export-using" module:"nokia-conf"`
	AppGroup                  map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup          `path:"app-group" module:"nokia-conf"`
	Application               map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application       `path:"application" module:"nokia-conf"`
	ChargingGroup             map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup     `path:"charging-group" module:"nokia-conf"`
	CollectStats              *bool                                                                                                                `path:"collect-stats" module:"nokia-conf"`
	ExcludeTcpRetrans         *bool                                                                                                                `path:"exclude-tcp-retrans" module:"nokia-conf"`
	MaxThroughputStats        *bool                                                                                                                `path:"max-throughput-stats" module:"nokia-conf"`
	Protocol                  map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol          `path:"protocol" module:"nokia-conf"`
	RadiusAccountingPolicy    *string                                                                                                              `path:"radius-accounting-policy" module:"nokia-conf"`
	UsageMonitoring           *bool                                                                                                                `path:"usage-monitoring" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) IsYANGGoStruct() {
}

// NewAppGroup creates a new entry in the AppGroup list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) NewAppGroup(AppGroupName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AppGroup == nil {
		t.AppGroup = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup)
	}

	key := AppGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AppGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AppGroup", key)
	}

	t.AppGroup[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup{
		AppGroupName: &AppGroupName,
	}

	return t.AppGroup[key], nil
}

// RenameAppGroup renames an entry in the list AppGroup within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) RenameAppGroup(oldK, newK string) error {
	if _, ok := t.AppGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AppGroup", newK)
	}

	e, ok := t.AppGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AppGroup", oldK)
	}
	e.AppGroupName = &newK

	t.AppGroup[newK] = e
	delete(t.AppGroup, oldK)
	return nil
}

// GetOrCreateAppGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetOrCreateAppGroup(AppGroupName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup {

	key := AppGroupName

	if v, ok := t.AppGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAppGroup(AppGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAppGroup got unexpected error: %v", err))
	}
	return v
}

// GetAppGroup retrieves the value with the specified key from
// the AppGroup map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetAppGroup(AppGroupName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup {

	if t == nil {
		return nil
	}

	key := AppGroupName

	if lm, ok := t.AppGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAppGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) DeleteAppGroup(AppGroupName string) {
	key := AppGroupName

	delete(t.AppGroup, key)
}

// AppendAppGroup appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup struct to the
// list AppGroup of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) AppendAppGroup(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) error {
	if v.AppGroupName == nil {
		return fmt.Errorf("invalid nil key received for AppGroupName")
	}

	key := *v.AppGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AppGroup == nil {
		t.AppGroup = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup)
	}

	if _, ok := t.AppGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AppGroup %v", key)
	}

	t.AppGroup[key] = v
	return nil
}

// NewApplication creates a new entry in the Application list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) NewApplication(ApplicationName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application)
	}

	key := ApplicationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Application[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Application", key)
	}

	t.Application[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application{
		ApplicationName: &ApplicationName,
	}

	return t.Application[key], nil
}

// RenameApplication renames an entry in the list Application within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) RenameApplication(oldK, newK string) error {
	if _, ok := t.Application[newK]; ok {
		return fmt.Errorf("key %v already exists in Application", newK)
	}

	e, ok := t.Application[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Application", oldK)
	}
	e.ApplicationName = &newK

	t.Application[newK] = e
	delete(t.Application, oldK)
	return nil
}

// GetOrCreateApplication retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetOrCreateApplication(ApplicationName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application {

	key := ApplicationName

	if v, ok := t.Application[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewApplication(ApplicationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateApplication got unexpected error: %v", err))
	}
	return v
}

// GetApplication retrieves the value with the specified key from
// the Application map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetApplication(ApplicationName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application {

	if t == nil {
		return nil
	}

	key := ApplicationName

	if lm, ok := t.Application[key]; ok {
		return lm
	}
	return nil
}

// DeleteApplication deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) DeleteApplication(ApplicationName string) {
	key := ApplicationName

	delete(t.Application, key)
}

// AppendApplication appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application struct to the
// list Application of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) AppendApplication(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) error {
	if v.ApplicationName == nil {
		return fmt.Errorf("invalid nil key received for ApplicationName")
	}

	key := *v.ApplicationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application)
	}

	if _, ok := t.Application[key]; ok {
		return fmt.Errorf("duplicate key for list Application %v", key)
	}

	t.Application[key] = v
	return nil
}

// NewChargingGroup creates a new entry in the ChargingGroup list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) NewChargingGroup(ChargingGroupName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChargingGroup == nil {
		t.ChargingGroup = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup)
	}

	key := ChargingGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ChargingGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ChargingGroup", key)
	}

	t.ChargingGroup[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup{
		ChargingGroupName: &ChargingGroupName,
	}

	return t.ChargingGroup[key], nil
}

// RenameChargingGroup renames an entry in the list ChargingGroup within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) RenameChargingGroup(oldK, newK string) error {
	if _, ok := t.ChargingGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ChargingGroup", newK)
	}

	e, ok := t.ChargingGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ChargingGroup", oldK)
	}
	e.ChargingGroupName = &newK

	t.ChargingGroup[newK] = e
	delete(t.ChargingGroup, oldK)
	return nil
}

// GetOrCreateChargingGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetOrCreateChargingGroup(ChargingGroupName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup {

	key := ChargingGroupName

	if v, ok := t.ChargingGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChargingGroup(ChargingGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChargingGroup got unexpected error: %v", err))
	}
	return v
}

// GetChargingGroup retrieves the value with the specified key from
// the ChargingGroup map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetChargingGroup(ChargingGroupName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup {

	if t == nil {
		return nil
	}

	key := ChargingGroupName

	if lm, ok := t.ChargingGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteChargingGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) DeleteChargingGroup(ChargingGroupName string) {
	key := ChargingGroupName

	delete(t.ChargingGroup, key)
}

// AppendChargingGroup appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup struct to the
// list ChargingGroup of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) AppendChargingGroup(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) error {
	if v.ChargingGroupName == nil {
		return fmt.Errorf("invalid nil key received for ChargingGroupName")
	}

	key := *v.ChargingGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChargingGroup == nil {
		t.ChargingGroup = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup)
	}

	if _, ok := t.ChargingGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ChargingGroup %v", key)
	}

	t.ChargingGroup[key] = v
	return nil
}

// NewProtocol creates a new entry in the Protocol list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) NewProtocol(ProtocolName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Protocol == nil {
		t.Protocol = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol)
	}

	key := ProtocolName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Protocol[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Protocol", key)
	}

	t.Protocol[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol{
		ProtocolName: &ProtocolName,
	}

	return t.Protocol[key], nil
}

// RenameProtocol renames an entry in the list Protocol within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) RenameProtocol(oldK, newK string) error {
	if _, ok := t.Protocol[newK]; ok {
		return fmt.Errorf("key %v already exists in Protocol", newK)
	}

	e, ok := t.Protocol[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Protocol", oldK)
	}
	e.ProtocolName = &newK

	t.Protocol[newK] = e
	delete(t.Protocol, oldK)
	return nil
}

// GetOrCreateProtocol retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetOrCreateProtocol(ProtocolName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol {

	key := ProtocolName

	if v, ok := t.Protocol[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProtocol(ProtocolName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProtocol got unexpected error: %v", err))
	}
	return v
}

// GetProtocol retrieves the value with the specified key from
// the Protocol map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetProtocol(ProtocolName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol {

	if t == nil {
		return nil
	}

	key := ProtocolName

	if lm, ok := t.Protocol[key]; ok {
		return lm
	}
	return nil
}

// DeleteProtocol deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) DeleteProtocol(ProtocolName string) {
	key := ProtocolName

	delete(t.Protocol, key)
}

// AppendProtocol appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol struct to the
// list Protocol of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) AppendProtocol(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) error {
	if v.ProtocolName == nil {
		return fmt.Errorf("invalid nil key received for ProtocolName")
	}

	key := *v.ProtocolName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Protocol == nil {
		t.Protocol = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol)
	}

	if _, ok := t.Protocol[key]; ok {
		return fmt.Errorf("duplicate key for list Protocol %v", key)
	}

	t.Protocol[key] = v
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAggregateStatsExportUsing retrieves the value of the leaf AggregateStatsExportUsing from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregateStatsExportUsing is set, it can
// safely use t.GetAggregateStatsExportUsing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregateStatsExportUsing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetAggregateStatsExportUsing() []E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AggregateStatsExportUsing {
	if t == nil || t.AggregateStatsExportUsing == nil {
		return nil
	}
	return t.AggregateStatsExportUsing
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetExcludeTcpRetrans retrieves the value of the leaf ExcludeTcpRetrans from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExcludeTcpRetrans is set, it can
// safely use t.GetExcludeTcpRetrans() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExcludeTcpRetrans == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetExcludeTcpRetrans() bool {
	if t == nil || t.ExcludeTcpRetrans == nil {
		return false
	}
	return *t.ExcludeTcpRetrans
}

// GetMaxThroughputStats retrieves the value of the leaf MaxThroughputStats from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxThroughputStats is set, it can
// safely use t.GetMaxThroughputStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxThroughputStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetMaxThroughputStats() bool {
	if t == nil || t.MaxThroughputStats == nil {
		return false
	}
	return *t.MaxThroughputStats
}

// GetRadiusAccountingPolicy retrieves the value of the leaf RadiusAccountingPolicy from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAccountingPolicy is set, it can
// safely use t.GetRadiusAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetRadiusAccountingPolicy() string {
	if t == nil || t.RadiusAccountingPolicy == nil {
		return ""
	}
	return *t.RadiusAccountingPolicy
}

// GetUsageMonitoring retrieves the value of the leaf UsageMonitoring from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsageMonitoring is set, it can
// safely use t.GetUsageMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsageMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetUsageMonitoring() bool {
	if t == nil || t.UsageMonitoring == nil {
		return false
	}
	return *t.UsageMonitoring
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.ExcludeTcpRetrans == nil {
		var v bool = false
		t.ExcludeTcpRetrans = &v
	}
	if t.MaxThroughputStats == nil {
		var v bool = false
		t.MaxThroughputStats = &v
	}
	if t.UsageMonitoring == nil {
		var v bool = false
		t.UsageMonitoring = &v
	}
	for _, e := range t.AppGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Application {
		e.PopulateDefaults()
	}
	for _, e := range t.ChargingGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Protocol {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/statistics/aa-sub-study YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy struct {
	AaSub            *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub          `path:"aa-sub" module:"nokia-conf"`
	AccountingPolicy *uint32                                                                                                     `path:"accounting-policy" module:"nokia-conf"`
	CollectStats     *bool                                                                                                       `path:"collect-stats" module:"nokia-conf"`
	StudyType        NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_StudyType_Union `path:"study-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) IsYANGGoStruct() {
}

// GetOrCreateAaSub retrieves the value of the AaSub field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) GetOrCreateAaSub() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub {
	if t.AaSub != nil {
		return t.AaSub
	}
	t.AaSub = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub{}
	return t.AaSub
}

// GetAaSub returns the value of the AaSub struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy. If the receiver or the field AaSub is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) GetAaSub() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub {
	if t != nil && t.AaSub != nil {
		return t.AaSub
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetStudyType retrieves the value of the leaf StudyType from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StudyType is set, it can
// safely use t.GetStudyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StudyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) GetStudyType() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_StudyType_Union {
	if t == nil || t.StudyType == nil {
		return nil
	}
	return t.StudyType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	t.AaSub.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"study-type": t.StudyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/statistics/aa-sub-study/aa-sub YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct {
	Esm      map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm      `path:"esm" module:"nokia-conf"`
	EsmMac   map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac   `path:"esm-mac" module:"nokia-conf"`
	Sap      map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap      `path:"sap" module:"nokia-conf"`
	SpokeSdp map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
	Transit  map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit  `path:"transit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) IsYANGGoStruct() {
}

// NewEsm creates a new entry in the Esm list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) NewEsm(EsmSubName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Esm == nil {
		t.Esm = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm)
	}

	key := EsmSubName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Esm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Esm", key)
	}

	t.Esm[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm{
		EsmSubName: &EsmSubName,
	}

	return t.Esm[key], nil
}

// RenameEsm renames an entry in the list Esm within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) RenameEsm(oldK, newK string) error {
	if _, ok := t.Esm[newK]; ok {
		return fmt.Errorf("key %v already exists in Esm", newK)
	}

	e, ok := t.Esm[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Esm", oldK)
	}
	e.EsmSubName = &newK

	t.Esm[newK] = e
	delete(t.Esm, oldK)
	return nil
}

// GetOrCreateEsm retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) GetOrCreateEsm(EsmSubName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm {

	key := EsmSubName

	if v, ok := t.Esm[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEsm(EsmSubName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEsm got unexpected error: %v", err))
	}
	return v
}

// GetEsm retrieves the value with the specified key from
// the Esm map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) GetEsm(EsmSubName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm {

	if t == nil {
		return nil
	}

	key := EsmSubName

	if lm, ok := t.Esm[key]; ok {
		return lm
	}
	return nil
}

// DeleteEsm deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) DeleteEsm(EsmSubName string) {
	key := EsmSubName

	delete(t.Esm, key)
}

// AppendEsm appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm struct to the
// list Esm of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) AppendEsm(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm) error {
	if v.EsmSubName == nil {
		return fmt.Errorf("invalid nil key received for EsmSubName")
	}

	key := *v.EsmSubName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Esm == nil {
		t.Esm = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm)
	}

	if _, ok := t.Esm[key]; ok {
		return fmt.Errorf("duplicate key for list Esm %v", key)
	}

	t.Esm[key] = v
	return nil
}

// NewEsmMac creates a new entry in the EsmMac list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) NewEsmMac(EsmMacSubName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EsmMac == nil {
		t.EsmMac = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac)
	}

	key := EsmMacSubName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EsmMac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EsmMac", key)
	}

	t.EsmMac[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac{
		EsmMacSubName: &EsmMacSubName,
	}

	return t.EsmMac[key], nil
}

// RenameEsmMac renames an entry in the list EsmMac within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) RenameEsmMac(oldK, newK string) error {
	if _, ok := t.EsmMac[newK]; ok {
		return fmt.Errorf("key %v already exists in EsmMac", newK)
	}

	e, ok := t.EsmMac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EsmMac", oldK)
	}
	e.EsmMacSubName = &newK

	t.EsmMac[newK] = e
	delete(t.EsmMac, oldK)
	return nil
}

// GetOrCreateEsmMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) GetOrCreateEsmMac(EsmMacSubName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac {

	key := EsmMacSubName

	if v, ok := t.EsmMac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEsmMac(EsmMacSubName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEsmMac got unexpected error: %v", err))
	}
	return v
}

// GetEsmMac retrieves the value with the specified key from
// the EsmMac map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) GetEsmMac(EsmMacSubName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac {

	if t == nil {
		return nil
	}

	key := EsmMacSubName

	if lm, ok := t.EsmMac[key]; ok {
		return lm
	}
	return nil
}

// DeleteEsmMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) DeleteEsmMac(EsmMacSubName string) {
	key := EsmMacSubName

	delete(t.EsmMac, key)
}

// AppendEsmMac appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac struct to the
// list EsmMac of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) AppendEsmMac(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac) error {
	if v.EsmMacSubName == nil {
		return fmt.Errorf("invalid nil key received for EsmMacSubName")
	}

	key := *v.EsmMacSubName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EsmMac == nil {
		t.EsmMac = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac)
	}

	if _, ok := t.EsmMac[key]; ok {
		return fmt.Errorf("duplicate key for list EsmMac %v", key)
	}

	t.EsmMac[key] = v
	return nil
}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) NewSap(SapId string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) GetOrCreateSap(SapId string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) GetSap(SapId string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap struct to the
// list Sap of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) AppendSap(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) AppendSpokeSdp(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// NewTransit creates a new entry in the Transit list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) NewTransit(TransitSubName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Transit == nil {
		t.Transit = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit)
	}

	key := TransitSubName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Transit[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Transit", key)
	}

	t.Transit[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit{
		TransitSubName: &TransitSubName,
	}

	return t.Transit[key], nil
}

// RenameTransit renames an entry in the list Transit within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) RenameTransit(oldK, newK string) error {
	if _, ok := t.Transit[newK]; ok {
		return fmt.Errorf("key %v already exists in Transit", newK)
	}

	e, ok := t.Transit[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Transit", oldK)
	}
	e.TransitSubName = &newK

	t.Transit[newK] = e
	delete(t.Transit, oldK)
	return nil
}

// GetOrCreateTransit retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) GetOrCreateTransit(TransitSubName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit {

	key := TransitSubName

	if v, ok := t.Transit[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTransit(TransitSubName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTransit got unexpected error: %v", err))
	}
	return v
}

// GetTransit retrieves the value with the specified key from
// the Transit map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) GetTransit(TransitSubName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit {

	if t == nil {
		return nil
	}

	key := TransitSubName

	if lm, ok := t.Transit[key]; ok {
		return lm
	}
	return nil
}

// DeleteTransit deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) DeleteTransit(TransitSubName string) {
	key := TransitSubName

	delete(t.Transit, key)
}

// AppendTransit appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit struct to the
// list Transit of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) AppendTransit(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit) error {
	if v.TransitSubName == nil {
		return fmt.Errorf("invalid nil key received for TransitSubName")
	}

	key := *v.TransitSubName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Transit == nil {
		t.Transit = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit)
	}

	if _, ok := t.Transit[key]; ok {
		return fmt.Errorf("duplicate key for list Transit %v", key)
	}

	t.Transit[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Esm {
		e.PopulateDefaults()
	}
	for _, e := range t.EsmMac {
		e.PopulateDefaults()
	}
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
	for _, e := range t.Transit {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/statistics/aa-sub-study/aa-sub/esm YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm struct {
	EsmSubName *string `path:"esm-sub-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm) IsYANGGoStruct() {
}

// GetEsmSubName retrieves the value of the leaf EsmSubName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsmSubName is set, it can
// safely use t.GetEsmSubName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsmSubName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm) GetEsmSubName() string {
	if t == nil || t.EsmSubName == nil {
		return ""
	}
	return *t.EsmSubName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EsmSubName == nil {
		return nil, fmt.Errorf("nil value for key EsmSubName")
	}

	return map[string]interface{}{
		"esm-sub-name": *t.EsmSubName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/statistics/aa-sub-study/aa-sub/esm-mac YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac struct {
	EsmMacSubName *string `path:"esm-mac-sub-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac) IsYANGGoStruct() {
}

// GetEsmMacSubName retrieves the value of the leaf EsmMacSubName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsmMacSubName is set, it can
// safely use t.GetEsmMacSubName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsmMacSubName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac) GetEsmMacSubName() string {
	if t == nil || t.EsmMacSubName == nil {
		return ""
	}
	return *t.EsmMacSubName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EsmMacSubName == nil {
		return nil, fmt.Errorf("nil value for key EsmMacSubName")
	}

	return map[string]interface{}{
		"esm-mac-sub-name": *t.EsmMacSubName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/statistics/aa-sub-study/aa-sub/sap YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap struct {
	SapId *string `path:"sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap) IsYANGGoStruct() {
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/statistics/aa-sub-study/aa-sub/spoke-sdp YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp struct {
	SdpBindId *string `path:"sdp-bind-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp) IsYANGGoStruct() {
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/statistics/aa-sub-study/aa-sub/transit YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit struct {
	TransitSubName *string `path:"transit-sub-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit) IsYANGGoStruct() {
}

// GetTransitSubName retrieves the value of the leaf TransitSubName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitSubName is set, it can
// safely use t.GetTransitSubName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitSubName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit) GetTransitSubName() string {
	if t == nil || t.TransitSubName == nil {
		return ""
	}
	return *t.TransitSubName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TransitSubName == nil {
		return nil, fmt.Errorf("nil value for key TransitSubName")
	}

	return map[string]interface{}{
		"transit-sub-name": *t.TransitSubName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/statistics/aa-sub/app-group YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup struct {
	AppGroupName *string                                                                                                         `path:"app-group-name" module:"nokia-conf"`
	ExportUsing  []E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup_ExportUsing `path:"export-using" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) IsYANGGoStruct() {
}

// GetAppGroupName retrieves the value of the leaf AppGroupName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppGroupName is set, it can
// safely use t.GetAppGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) GetAppGroupName() string {
	if t == nil || t.AppGroupName == nil {
		return ""
	}
	return *t.AppGroupName
}

// GetExportUsing retrieves the value of the leaf ExportUsing from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportUsing is set, it can
// safely use t.GetExportUsing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportUsing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) GetExportUsing() []E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup_ExportUsing {
	if t == nil || t.ExportUsing == nil {
		return nil
	}
	return t.ExportUsing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AppGroupName == nil {
		return nil, fmt.Errorf("nil value for key AppGroupName")
	}

	return map[string]interface{}{
		"app-group-name": *t.AppGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/statistics/aa-sub/application YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application struct {
	ApplicationName *string                                                                                                            `path:"application-name" module:"nokia-conf"`
	ExportUsing     []E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application_ExportUsing `path:"export-using" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) IsYANGGoStruct() {
}

// GetApplicationName retrieves the value of the leaf ApplicationName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplicationName is set, it can
// safely use t.GetApplicationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplicationName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) GetApplicationName() string {
	if t == nil || t.ApplicationName == nil {
		return ""
	}
	return *t.ApplicationName
}

// GetExportUsing retrieves the value of the leaf ExportUsing from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportUsing is set, it can
// safely use t.GetExportUsing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportUsing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) GetExportUsing() []E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application_ExportUsing {
	if t == nil || t.ExportUsing == nil {
		return nil
	}
	return t.ExportUsing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ApplicationName == nil {
		return nil, fmt.Errorf("nil value for key ApplicationName")
	}

	return map[string]interface{}{
		"application-name": *t.ApplicationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/statistics/aa-sub/charging-group YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup struct {
	ChargingGroupName *string                                                                                                              `path:"charging-group-name" module:"nokia-conf"`
	ExportUsing       []E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup_ExportUsing `path:"export-using" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) IsYANGGoStruct() {
}

// GetChargingGroupName retrieves the value of the leaf ChargingGroupName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChargingGroupName is set, it can
// safely use t.GetChargingGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChargingGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) GetChargingGroupName() string {
	if t == nil || t.ChargingGroupName == nil {
		return ""
	}
	return *t.ChargingGroupName
}

// GetExportUsing retrieves the value of the leaf ExportUsing from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportUsing is set, it can
// safely use t.GetExportUsing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportUsing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) GetExportUsing() []E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup_ExportUsing {
	if t == nil || t.ExportUsing == nil {
		return nil
	}
	return t.ExportUsing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ChargingGroupName == nil {
		return nil, fmt.Errorf("nil value for key ChargingGroupName")
	}

	return map[string]interface{}{
		"charging-group-name": *t.ChargingGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/statistics/aa-sub/protocol YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol struct {
	ExportUsing  []E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol_ExportUsing `path:"export-using" module:"nokia-conf"`
	ProtocolName *string                                                                                                         `path:"protocol-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) IsYANGGoStruct() {
}

// GetExportUsing retrieves the value of the leaf ExportUsing from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportUsing is set, it can
// safely use t.GetExportUsing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportUsing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) GetExportUsing() []E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol_ExportUsing {
	if t == nil || t.ExportUsing == nil {
		return nil
	}
	return t.ExportUsing
}

// GetProtocolName retrieves the value of the leaf ProtocolName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolName is set, it can
// safely use t.GetProtocolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) GetProtocolName() string {
	if t == nil || t.ProtocolName == nil {
		return ""
	}
	return *t.ProtocolName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ProtocolName == nil {
		return nil, fmt.Errorf("nil value for key ProtocolName")
	}

	return map[string]interface{}{
		"protocol-name": *t.ProtocolName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/tcp-validate YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate struct {
	Description     *string                                                                                `path:"description" module:"nokia-conf"`
	Log             *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate_Log `path:"log" module:"nokia-conf"`
	Strict          *bool                                                                                  `path:"strict" module:"nokia-conf"`
	TcpValidateName *string                                                                                `path:"tcp-validate-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate) IsYANGGoStruct() {
}

// GetOrCreateLog retrieves the value of the Log field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate) GetOrCreateLog() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate_Log {
	if t.Log != nil {
		return t.Log
	}
	t.Log = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate_Log{}
	return t.Log
}

// GetLog returns the value of the Log struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate. If the receiver or the field Log is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate) GetLog() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate_Log {
	if t != nil && t.Log != nil {
		return t.Log
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetStrict retrieves the value of the leaf Strict from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Strict is set, it can
// safely use t.GetStrict() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Strict == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate) GetStrict() bool {
	if t == nil || t.Strict == nil {
		return false
	}
	return *t.Strict
}

// GetTcpValidateName retrieves the value of the leaf TcpValidateName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpValidateName is set, it can
// safely use t.GetTcpValidateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpValidateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate) GetTcpValidateName() string {
	if t == nil || t.TcpValidateName == nil {
		return ""
	}
	return *t.TcpValidateName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Strict == nil {
		var v bool = false
		t.Strict = &v
	}
	t.Log.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TcpValidateName == nil {
		return nil, fmt.Errorf("nil value for key TcpValidateName")
	}

	return map[string]interface{}{
		"tcp-validate-name": *t.TcpValidateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate_Log represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/tcp-validate/log YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate_Log struct {
	All      *bool   `path:"all" module:"nokia-conf"`
	EventLog *string `path:"event-log" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate_Log implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate_Log) IsYANGGoStruct() {
}

// GetAll retrieves the value of the leaf All from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if All is set, it can
// safely use t.GetAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.All == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate_Log) GetAll() bool {
	if t == nil || t.All == nil {
		return false
	}
	return *t.All
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate_Log) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate_Log
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate_Log) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.All == nil {
		var v bool = false
		t.All = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate_Log) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate_Log"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate_Log) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate_Log) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate_Log.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TcpValidate_Log) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/tethering-detection YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection struct {
	AdminState   E_NokiaTypesSros_AdminState                                                                            `path:"admin-state" module:"nokia-conf"`
	SingleDevice *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice `path:"single-device" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection) IsYANGGoStruct() {
}

// GetOrCreateSingleDevice retrieves the value of the SingleDevice field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection) GetOrCreateSingleDevice() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice {
	if t.SingleDevice != nil {
		return t.SingleDevice
	}
	t.SingleDevice = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice{}
	return t.SingleDevice
}

// GetSingleDevice returns the value of the SingleDevice struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection. If the receiver or the field SingleDevice is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection) GetSingleDevice() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice {
	if t != nil && t.SingleDevice != nil {
		return t.SingleDevice
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.SingleDevice.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/tethering-detection/single-device YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice struct {
	ExpectedTtl map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl_Ttl_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl `path:"expected-ttl" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) IsYANGGoStruct() {
}

// NewExpectedTtl creates a new entry in the ExpectedTtl list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) NewExpectedTtl(Ttl NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl_Ttl_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExpectedTtl == nil {
		t.ExpectedTtl = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl_Ttl_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl)
	}

	key := Ttl

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExpectedTtl[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExpectedTtl", key)
	}

	t.ExpectedTtl[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl{
		Ttl: Ttl,
	}

	return t.ExpectedTtl[key], nil
}

// RenameExpectedTtl renames an entry in the list ExpectedTtl within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) RenameExpectedTtl(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl_Ttl_Union) error {
	if _, ok := t.ExpectedTtl[newK]; ok {
		return fmt.Errorf("key %v already exists in ExpectedTtl", newK)
	}

	e, ok := t.ExpectedTtl[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExpectedTtl", oldK)
	}
	e.Ttl = newK

	t.ExpectedTtl[newK] = e
	delete(t.ExpectedTtl, oldK)
	return nil
}

// GetOrCreateExpectedTtl retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) GetOrCreateExpectedTtl(Ttl NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl_Ttl_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl {

	key := Ttl

	if v, ok := t.ExpectedTtl[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExpectedTtl(Ttl)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExpectedTtl got unexpected error: %v", err))
	}
	return v
}

// GetExpectedTtl retrieves the value with the specified key from
// the ExpectedTtl map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) GetExpectedTtl(Ttl NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl_Ttl_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl {

	if t == nil {
		return nil
	}

	key := Ttl

	if lm, ok := t.ExpectedTtl[key]; ok {
		return lm
	}
	return nil
}

// DeleteExpectedTtl deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) DeleteExpectedTtl(Ttl NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl_Ttl_Union) {
	key := Ttl

	delete(t.ExpectedTtl, key)
}

// AppendExpectedTtl appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl struct to the
// list ExpectedTtl of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) AppendExpectedTtl(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl) error {
	key := v.Ttl

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExpectedTtl == nil {
		t.ExpectedTtl = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl_Ttl_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl)
	}

	if _, ok := t.ExpectedTtl[key]; ok {
		return fmt.Errorf("duplicate key for list ExpectedTtl %v", key)
	}

	t.ExpectedTtl[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ExpectedTtl {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/tethering-detection/single-device/expected-ttl YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl struct {
	Ttl NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl_Ttl_Union `path:"ttl" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl) IsYANGGoStruct() {
}

// GetTtl retrieves the value of the leaf Ttl from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ttl is set, it can
// safely use t.GetTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ttl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl) GetTtl() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl_Ttl_Union {
	if t == nil || t.Ttl == nil {
		return nil
	}
	return t.Ttl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"ttl": t.Ttl,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/threshold-crossing-alert YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct {
	Criteria           map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria                     `path:"criteria" module:"nokia-conf"`
	GtpFilter          map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter                   `path:"gtp-filter" module:"nokia-conf"`
	GtpFilterEntry     map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry         `path:"gtp-filter-entry" module:"nokia-conf"`
	Policer            map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer                       `path:"policer" module:"nokia-conf"`
	SctpFilter         map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter                 `path:"sctp-filter" module:"nokia-conf"`
	SctpFilterEntry    map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry       `path:"sctp-filter-entry" module:"nokia-conf"`
	SessionFilter      map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter           `path:"session-filter" module:"nokia-conf"`
	SessionFilterEntry map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry `path:"session-filter-entry" module:"nokia-conf"`
	TcpValidate        map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate               `path:"tcp-validate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key represents the key for list Criteria of element /nokia-conf/configure/groups/group/application-assurance/group/partition/threshold-crossing-alert.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key struct {
	CriteriaId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_CriteriaId_Union `path:"criteria-id"`
	Direction  NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Direction_Union  `path:"direction"`
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key represents the key for list GtpFilter of element /nokia-conf/configure/groups/group/application-assurance/group/partition/threshold-crossing-alert.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key struct {
	GtpFilterName string                                                                                                                 `path:"gtp-filter-name"`
	Criteria      NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Criteria_Union  `path:"criteria"`
	Direction     NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Direction_Union `path:"direction"`
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key represents the key for list GtpFilterEntry of element /nokia-conf/configure/groups/group/application-assurance/group/partition/threshold-crossing-alert.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key struct {
	GtpFilterName string                                                                                                                      `path:"gtp-filter-name"`
	EntryId       NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_EntryId_Union   `path:"entry-id"`
	Direction     NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Direction_Union `path:"direction"`
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key represents the key for list Policer of element /nokia-conf/configure/groups/group/application-assurance/group/partition/threshold-crossing-alert.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key struct {
	PolicerName string                                                                                                               `path:"policer-name"`
	Direction   NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Direction_Union `path:"direction"`
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key represents the key for list SctpFilter of element /nokia-conf/configure/groups/group/application-assurance/group/partition/threshold-crossing-alert.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key struct {
	SctpFilterName string                                                                                                                  `path:"sctp-filter-name"`
	Criteria       NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Criteria_Union  `path:"criteria"`
	Direction      NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Direction_Union `path:"direction"`
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key represents the key for list SctpFilterEntry of element /nokia-conf/configure/groups/group/application-assurance/group/partition/threshold-crossing-alert.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key struct {
	SctpFilterName string                                                                                                                       `path:"sctp-filter-name"`
	EntryId        NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_EntryId_Union   `path:"entry-id"`
	Direction      NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Direction_Union `path:"direction"`
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key represents the key for list SessionFilter of element /nokia-conf/configure/groups/group/application-assurance/group/partition/threshold-crossing-alert.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key struct {
	SessionFilterName string                                                                                                                     `path:"session-filter-name"`
	Criteria          NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Criteria_Union  `path:"criteria"`
	Direction         NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Direction_Union `path:"direction"`
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key represents the key for list SessionFilterEntry of element /nokia-conf/configure/groups/group/application-assurance/group/partition/threshold-crossing-alert.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key struct {
	SessionFilterName string                                                                                                                          `path:"session-filter-name"`
	EntryId           NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_EntryId_Union   `path:"entry-id"`
	Direction         NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Direction_Union `path:"direction"`
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key represents the key for list TcpValidate of element /nokia-conf/configure/groups/group/application-assurance/group/partition/threshold-crossing-alert.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key struct {
	TcpValidateName string                                                                                                                   `path:"tcp-validate-name"`
	Direction       NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Direction_Union `path:"direction"`
}

// NewCriteria creates a new entry in the Criteria list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) NewCriteria(CriteriaId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_CriteriaId_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Direction_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Criteria == nil {
		t.Criteria = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria)
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key{
		CriteriaId: CriteriaId,
		Direction:  Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Criteria[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Criteria", key)
	}

	t.Criteria[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria{
		CriteriaId: CriteriaId,
		Direction:  Direction,
	}

	return t.Criteria[key], nil
}

// RenameCriteria renames an entry in the list Criteria within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) RenameCriteria(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key) error {
	if _, ok := t.Criteria[newK]; ok {
		return fmt.Errorf("key %v already exists in Criteria", newK)
	}

	e, ok := t.Criteria[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Criteria", oldK)
	}
	e.CriteriaId = newK.CriteriaId
	e.Direction = newK.Direction

	t.Criteria[newK] = e
	delete(t.Criteria, oldK)
	return nil
}

// GetOrCreateCriteria retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetOrCreateCriteria(CriteriaId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_CriteriaId_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Direction_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria {

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key{
		CriteriaId: CriteriaId,
		Direction:  Direction,
	}

	if v, ok := t.Criteria[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCriteria(CriteriaId, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCriteria got unexpected error: %v", err))
	}
	return v
}

// GetCriteria retrieves the value with the specified key from
// the Criteria map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetCriteria(CriteriaId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_CriteriaId_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Direction_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key{
		CriteriaId: CriteriaId,
		Direction:  Direction,
	}

	if lm, ok := t.Criteria[key]; ok {
		return lm
	}
	return nil
}

// DeleteCriteria deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) DeleteCriteria(CriteriaId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_CriteriaId_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Direction_Union) {
	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key{
		CriteriaId: CriteriaId,
		Direction:  Direction,
	}

	delete(t.Criteria, key)
}

// AppendCriteria appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria struct to the
// list Criteria of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) AppendCriteria(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) error {
	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key{
		CriteriaId: v.CriteriaId,
		Direction:  v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Criteria == nil {
		t.Criteria = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria)
	}

	if _, ok := t.Criteria[key]; ok {
		return fmt.Errorf("duplicate key for list Criteria %v", key)
	}

	t.Criteria[key] = v
	return nil
}

// NewGtpFilter creates a new entry in the GtpFilter list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) NewGtpFilter(GtpFilterName string, Criteria NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Criteria_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Direction_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GtpFilter == nil {
		t.GtpFilter = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter)
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key{
		GtpFilterName: GtpFilterName,
		Criteria:      Criteria,
		Direction:     Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GtpFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GtpFilter", key)
	}

	t.GtpFilter[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter{
		GtpFilterName: &GtpFilterName,
		Criteria:      Criteria,
		Direction:     Direction,
	}

	return t.GtpFilter[key], nil
}

// RenameGtpFilter renames an entry in the list GtpFilter within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) RenameGtpFilter(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key) error {
	if _, ok := t.GtpFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in GtpFilter", newK)
	}

	e, ok := t.GtpFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GtpFilter", oldK)
	}
	e.GtpFilterName = &newK.GtpFilterName
	e.Criteria = newK.Criteria
	e.Direction = newK.Direction

	t.GtpFilter[newK] = e
	delete(t.GtpFilter, oldK)
	return nil
}

// GetOrCreateGtpFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetOrCreateGtpFilter(GtpFilterName string, Criteria NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Criteria_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Direction_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter {

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key{
		GtpFilterName: GtpFilterName,
		Criteria:      Criteria,
		Direction:     Direction,
	}

	if v, ok := t.GtpFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGtpFilter(GtpFilterName, Criteria, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGtpFilter got unexpected error: %v", err))
	}
	return v
}

// GetGtpFilter retrieves the value with the specified key from
// the GtpFilter map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetGtpFilter(GtpFilterName string, Criteria NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Criteria_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Direction_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key{
		GtpFilterName: GtpFilterName,
		Criteria:      Criteria,
		Direction:     Direction,
	}

	if lm, ok := t.GtpFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteGtpFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) DeleteGtpFilter(GtpFilterName string, Criteria NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Criteria_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Direction_Union) {
	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key{
		GtpFilterName: GtpFilterName,
		Criteria:      Criteria,
		Direction:     Direction,
	}

	delete(t.GtpFilter, key)
}

// AppendGtpFilter appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter struct to the
// list GtpFilter of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) AppendGtpFilter(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) error {
	if v.GtpFilterName == nil {
		return fmt.Errorf("invalid nil key for GtpFilterName")
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key{
		GtpFilterName: *v.GtpFilterName,
		Criteria:      v.Criteria,
		Direction:     v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GtpFilter == nil {
		t.GtpFilter = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter)
	}

	if _, ok := t.GtpFilter[key]; ok {
		return fmt.Errorf("duplicate key for list GtpFilter %v", key)
	}

	t.GtpFilter[key] = v
	return nil
}

// NewGtpFilterEntry creates a new entry in the GtpFilterEntry list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) NewGtpFilterEntry(GtpFilterName string, EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_EntryId_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Direction_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GtpFilterEntry == nil {
		t.GtpFilterEntry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry)
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key{
		GtpFilterName: GtpFilterName,
		EntryId:       EntryId,
		Direction:     Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GtpFilterEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GtpFilterEntry", key)
	}

	t.GtpFilterEntry[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry{
		GtpFilterName: &GtpFilterName,
		EntryId:       EntryId,
		Direction:     Direction,
	}

	return t.GtpFilterEntry[key], nil
}

// RenameGtpFilterEntry renames an entry in the list GtpFilterEntry within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) RenameGtpFilterEntry(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key) error {
	if _, ok := t.GtpFilterEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in GtpFilterEntry", newK)
	}

	e, ok := t.GtpFilterEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GtpFilterEntry", oldK)
	}
	e.GtpFilterName = &newK.GtpFilterName
	e.EntryId = newK.EntryId
	e.Direction = newK.Direction

	t.GtpFilterEntry[newK] = e
	delete(t.GtpFilterEntry, oldK)
	return nil
}

// GetOrCreateGtpFilterEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetOrCreateGtpFilterEntry(GtpFilterName string, EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_EntryId_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Direction_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry {

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key{
		GtpFilterName: GtpFilterName,
		EntryId:       EntryId,
		Direction:     Direction,
	}

	if v, ok := t.GtpFilterEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGtpFilterEntry(GtpFilterName, EntryId, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGtpFilterEntry got unexpected error: %v", err))
	}
	return v
}

// GetGtpFilterEntry retrieves the value with the specified key from
// the GtpFilterEntry map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetGtpFilterEntry(GtpFilterName string, EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_EntryId_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Direction_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key{
		GtpFilterName: GtpFilterName,
		EntryId:       EntryId,
		Direction:     Direction,
	}

	if lm, ok := t.GtpFilterEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteGtpFilterEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) DeleteGtpFilterEntry(GtpFilterName string, EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_EntryId_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Direction_Union) {
	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key{
		GtpFilterName: GtpFilterName,
		EntryId:       EntryId,
		Direction:     Direction,
	}

	delete(t.GtpFilterEntry, key)
}

// AppendGtpFilterEntry appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry struct to the
// list GtpFilterEntry of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) AppendGtpFilterEntry(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) error {
	if v.GtpFilterName == nil {
		return fmt.Errorf("invalid nil key for GtpFilterName")
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key{
		GtpFilterName: *v.GtpFilterName,
		EntryId:       v.EntryId,
		Direction:     v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GtpFilterEntry == nil {
		t.GtpFilterEntry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry)
	}

	if _, ok := t.GtpFilterEntry[key]; ok {
		return fmt.Errorf("duplicate key for list GtpFilterEntry %v", key)
	}

	t.GtpFilterEntry[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) NewPolicer(PolicerName string, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Direction_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer)
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key{
		PolicerName: PolicerName,
		Direction:   Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer{
		PolicerName: &PolicerName,
		Direction:   Direction,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) RenamePolicer(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerName = &newK.PolicerName
	e.Direction = newK.Direction

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetOrCreatePolicer(PolicerName string, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Direction_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer {

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key{
		PolicerName: PolicerName,
		Direction:   Direction,
	}

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerName, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetPolicer(PolicerName string, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Direction_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key{
		PolicerName: PolicerName,
		Direction:   Direction,
	}

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) DeletePolicer(PolicerName string, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Direction_Union) {
	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key{
		PolicerName: PolicerName,
		Direction:   Direction,
	}

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer struct to the
// list Policer of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) AppendPolicer(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) error {
	if v.PolicerName == nil {
		return fmt.Errorf("invalid nil key for PolicerName")
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key{
		PolicerName: *v.PolicerName,
		Direction:   v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewSctpFilter creates a new entry in the SctpFilter list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) NewSctpFilter(SctpFilterName string, Criteria NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Criteria_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Direction_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SctpFilter == nil {
		t.SctpFilter = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter)
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key{
		SctpFilterName: SctpFilterName,
		Criteria:       Criteria,
		Direction:      Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SctpFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SctpFilter", key)
	}

	t.SctpFilter[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter{
		SctpFilterName: &SctpFilterName,
		Criteria:       Criteria,
		Direction:      Direction,
	}

	return t.SctpFilter[key], nil
}

// RenameSctpFilter renames an entry in the list SctpFilter within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) RenameSctpFilter(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key) error {
	if _, ok := t.SctpFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in SctpFilter", newK)
	}

	e, ok := t.SctpFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SctpFilter", oldK)
	}
	e.SctpFilterName = &newK.SctpFilterName
	e.Criteria = newK.Criteria
	e.Direction = newK.Direction

	t.SctpFilter[newK] = e
	delete(t.SctpFilter, oldK)
	return nil
}

// GetOrCreateSctpFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetOrCreateSctpFilter(SctpFilterName string, Criteria NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Criteria_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Direction_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter {

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key{
		SctpFilterName: SctpFilterName,
		Criteria:       Criteria,
		Direction:      Direction,
	}

	if v, ok := t.SctpFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSctpFilter(SctpFilterName, Criteria, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSctpFilter got unexpected error: %v", err))
	}
	return v
}

// GetSctpFilter retrieves the value with the specified key from
// the SctpFilter map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetSctpFilter(SctpFilterName string, Criteria NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Criteria_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Direction_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key{
		SctpFilterName: SctpFilterName,
		Criteria:       Criteria,
		Direction:      Direction,
	}

	if lm, ok := t.SctpFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteSctpFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) DeleteSctpFilter(SctpFilterName string, Criteria NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Criteria_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Direction_Union) {
	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key{
		SctpFilterName: SctpFilterName,
		Criteria:       Criteria,
		Direction:      Direction,
	}

	delete(t.SctpFilter, key)
}

// AppendSctpFilter appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter struct to the
// list SctpFilter of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) AppendSctpFilter(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) error {
	if v.SctpFilterName == nil {
		return fmt.Errorf("invalid nil key for SctpFilterName")
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key{
		SctpFilterName: *v.SctpFilterName,
		Criteria:       v.Criteria,
		Direction:      v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SctpFilter == nil {
		t.SctpFilter = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter)
	}

	if _, ok := t.SctpFilter[key]; ok {
		return fmt.Errorf("duplicate key for list SctpFilter %v", key)
	}

	t.SctpFilter[key] = v
	return nil
}

// NewSctpFilterEntry creates a new entry in the SctpFilterEntry list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) NewSctpFilterEntry(SctpFilterName string, EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_EntryId_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Direction_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SctpFilterEntry == nil {
		t.SctpFilterEntry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry)
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key{
		SctpFilterName: SctpFilterName,
		EntryId:        EntryId,
		Direction:      Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SctpFilterEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SctpFilterEntry", key)
	}

	t.SctpFilterEntry[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry{
		SctpFilterName: &SctpFilterName,
		EntryId:        EntryId,
		Direction:      Direction,
	}

	return t.SctpFilterEntry[key], nil
}

// RenameSctpFilterEntry renames an entry in the list SctpFilterEntry within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) RenameSctpFilterEntry(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key) error {
	if _, ok := t.SctpFilterEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in SctpFilterEntry", newK)
	}

	e, ok := t.SctpFilterEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SctpFilterEntry", oldK)
	}
	e.SctpFilterName = &newK.SctpFilterName
	e.EntryId = newK.EntryId
	e.Direction = newK.Direction

	t.SctpFilterEntry[newK] = e
	delete(t.SctpFilterEntry, oldK)
	return nil
}

// GetOrCreateSctpFilterEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetOrCreateSctpFilterEntry(SctpFilterName string, EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_EntryId_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Direction_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry {

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key{
		SctpFilterName: SctpFilterName,
		EntryId:        EntryId,
		Direction:      Direction,
	}

	if v, ok := t.SctpFilterEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSctpFilterEntry(SctpFilterName, EntryId, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSctpFilterEntry got unexpected error: %v", err))
	}
	return v
}

// GetSctpFilterEntry retrieves the value with the specified key from
// the SctpFilterEntry map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetSctpFilterEntry(SctpFilterName string, EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_EntryId_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Direction_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key{
		SctpFilterName: SctpFilterName,
		EntryId:        EntryId,
		Direction:      Direction,
	}

	if lm, ok := t.SctpFilterEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteSctpFilterEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) DeleteSctpFilterEntry(SctpFilterName string, EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_EntryId_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Direction_Union) {
	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key{
		SctpFilterName: SctpFilterName,
		EntryId:        EntryId,
		Direction:      Direction,
	}

	delete(t.SctpFilterEntry, key)
}

// AppendSctpFilterEntry appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry struct to the
// list SctpFilterEntry of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) AppendSctpFilterEntry(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) error {
	if v.SctpFilterName == nil {
		return fmt.Errorf("invalid nil key for SctpFilterName")
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key{
		SctpFilterName: *v.SctpFilterName,
		EntryId:        v.EntryId,
		Direction:      v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SctpFilterEntry == nil {
		t.SctpFilterEntry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry)
	}

	if _, ok := t.SctpFilterEntry[key]; ok {
		return fmt.Errorf("duplicate key for list SctpFilterEntry %v", key)
	}

	t.SctpFilterEntry[key] = v
	return nil
}

// NewSessionFilter creates a new entry in the SessionFilter list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) NewSessionFilter(SessionFilterName string, Criteria NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Criteria_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Direction_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SessionFilter == nil {
		t.SessionFilter = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter)
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key{
		SessionFilterName: SessionFilterName,
		Criteria:          Criteria,
		Direction:         Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SessionFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SessionFilter", key)
	}

	t.SessionFilter[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter{
		SessionFilterName: &SessionFilterName,
		Criteria:          Criteria,
		Direction:         Direction,
	}

	return t.SessionFilter[key], nil
}

// RenameSessionFilter renames an entry in the list SessionFilter within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) RenameSessionFilter(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key) error {
	if _, ok := t.SessionFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in SessionFilter", newK)
	}

	e, ok := t.SessionFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SessionFilter", oldK)
	}
	e.SessionFilterName = &newK.SessionFilterName
	e.Criteria = newK.Criteria
	e.Direction = newK.Direction

	t.SessionFilter[newK] = e
	delete(t.SessionFilter, oldK)
	return nil
}

// GetOrCreateSessionFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetOrCreateSessionFilter(SessionFilterName string, Criteria NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Criteria_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Direction_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter {

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key{
		SessionFilterName: SessionFilterName,
		Criteria:          Criteria,
		Direction:         Direction,
	}

	if v, ok := t.SessionFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSessionFilter(SessionFilterName, Criteria, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSessionFilter got unexpected error: %v", err))
	}
	return v
}

// GetSessionFilter retrieves the value with the specified key from
// the SessionFilter map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetSessionFilter(SessionFilterName string, Criteria NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Criteria_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Direction_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key{
		SessionFilterName: SessionFilterName,
		Criteria:          Criteria,
		Direction:         Direction,
	}

	if lm, ok := t.SessionFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteSessionFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) DeleteSessionFilter(SessionFilterName string, Criteria NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Criteria_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Direction_Union) {
	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key{
		SessionFilterName: SessionFilterName,
		Criteria:          Criteria,
		Direction:         Direction,
	}

	delete(t.SessionFilter, key)
}

// AppendSessionFilter appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter struct to the
// list SessionFilter of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) AppendSessionFilter(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) error {
	if v.SessionFilterName == nil {
		return fmt.Errorf("invalid nil key for SessionFilterName")
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key{
		SessionFilterName: *v.SessionFilterName,
		Criteria:          v.Criteria,
		Direction:         v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SessionFilter == nil {
		t.SessionFilter = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter)
	}

	if _, ok := t.SessionFilter[key]; ok {
		return fmt.Errorf("duplicate key for list SessionFilter %v", key)
	}

	t.SessionFilter[key] = v
	return nil
}

// NewSessionFilterEntry creates a new entry in the SessionFilterEntry list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) NewSessionFilterEntry(SessionFilterName string, EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_EntryId_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Direction_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SessionFilterEntry == nil {
		t.SessionFilterEntry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry)
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key{
		SessionFilterName: SessionFilterName,
		EntryId:           EntryId,
		Direction:         Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SessionFilterEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SessionFilterEntry", key)
	}

	t.SessionFilterEntry[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry{
		SessionFilterName: &SessionFilterName,
		EntryId:           EntryId,
		Direction:         Direction,
	}

	return t.SessionFilterEntry[key], nil
}

// RenameSessionFilterEntry renames an entry in the list SessionFilterEntry within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) RenameSessionFilterEntry(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key) error {
	if _, ok := t.SessionFilterEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in SessionFilterEntry", newK)
	}

	e, ok := t.SessionFilterEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SessionFilterEntry", oldK)
	}
	e.SessionFilterName = &newK.SessionFilterName
	e.EntryId = newK.EntryId
	e.Direction = newK.Direction

	t.SessionFilterEntry[newK] = e
	delete(t.SessionFilterEntry, oldK)
	return nil
}

// GetOrCreateSessionFilterEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetOrCreateSessionFilterEntry(SessionFilterName string, EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_EntryId_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Direction_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry {

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key{
		SessionFilterName: SessionFilterName,
		EntryId:           EntryId,
		Direction:         Direction,
	}

	if v, ok := t.SessionFilterEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSessionFilterEntry(SessionFilterName, EntryId, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSessionFilterEntry got unexpected error: %v", err))
	}
	return v
}

// GetSessionFilterEntry retrieves the value with the specified key from
// the SessionFilterEntry map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetSessionFilterEntry(SessionFilterName string, EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_EntryId_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Direction_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key{
		SessionFilterName: SessionFilterName,
		EntryId:           EntryId,
		Direction:         Direction,
	}

	if lm, ok := t.SessionFilterEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteSessionFilterEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) DeleteSessionFilterEntry(SessionFilterName string, EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_EntryId_Union, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Direction_Union) {
	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key{
		SessionFilterName: SessionFilterName,
		EntryId:           EntryId,
		Direction:         Direction,
	}

	delete(t.SessionFilterEntry, key)
}

// AppendSessionFilterEntry appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry struct to the
// list SessionFilterEntry of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) AppendSessionFilterEntry(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) error {
	if v.SessionFilterName == nil {
		return fmt.Errorf("invalid nil key for SessionFilterName")
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key{
		SessionFilterName: *v.SessionFilterName,
		EntryId:           v.EntryId,
		Direction:         v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SessionFilterEntry == nil {
		t.SessionFilterEntry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry)
	}

	if _, ok := t.SessionFilterEntry[key]; ok {
		return fmt.Errorf("duplicate key for list SessionFilterEntry %v", key)
	}

	t.SessionFilterEntry[key] = v
	return nil
}

// NewTcpValidate creates a new entry in the TcpValidate list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) NewTcpValidate(TcpValidateName string, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Direction_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TcpValidate == nil {
		t.TcpValidate = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate)
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key{
		TcpValidateName: TcpValidateName,
		Direction:       Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TcpValidate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TcpValidate", key)
	}

	t.TcpValidate[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate{
		TcpValidateName: &TcpValidateName,
		Direction:       Direction,
	}

	return t.TcpValidate[key], nil
}

// RenameTcpValidate renames an entry in the list TcpValidate within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) RenameTcpValidate(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key) error {
	if _, ok := t.TcpValidate[newK]; ok {
		return fmt.Errorf("key %v already exists in TcpValidate", newK)
	}

	e, ok := t.TcpValidate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TcpValidate", oldK)
	}
	e.TcpValidateName = &newK.TcpValidateName
	e.Direction = newK.Direction

	t.TcpValidate[newK] = e
	delete(t.TcpValidate, oldK)
	return nil
}

// GetOrCreateTcpValidate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetOrCreateTcpValidate(TcpValidateName string, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Direction_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate {

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key{
		TcpValidateName: TcpValidateName,
		Direction:       Direction,
	}

	if v, ok := t.TcpValidate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTcpValidate(TcpValidateName, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTcpValidate got unexpected error: %v", err))
	}
	return v
}

// GetTcpValidate retrieves the value with the specified key from
// the TcpValidate map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetTcpValidate(TcpValidateName string, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Direction_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key{
		TcpValidateName: TcpValidateName,
		Direction:       Direction,
	}

	if lm, ok := t.TcpValidate[key]; ok {
		return lm
	}
	return nil
}

// DeleteTcpValidate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) DeleteTcpValidate(TcpValidateName string, Direction NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Direction_Union) {
	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key{
		TcpValidateName: TcpValidateName,
		Direction:       Direction,
	}

	delete(t.TcpValidate, key)
}

// AppendTcpValidate appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate struct to the
// list TcpValidate of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) AppendTcpValidate(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) error {
	if v.TcpValidateName == nil {
		return fmt.Errorf("invalid nil key for TcpValidateName")
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key{
		TcpValidateName: *v.TcpValidateName,
		Direction:       v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TcpValidate == nil {
		t.TcpValidate = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate)
	}

	if _, ok := t.TcpValidate[key]; ok {
		return fmt.Errorf("duplicate key for list TcpValidate %v", key)
	}

	t.TcpValidate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Criteria {
		e.PopulateDefaults()
	}
	for _, e := range t.GtpFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.GtpFilterEntry {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.SctpFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.SctpFilterEntry {
		e.PopulateDefaults()
	}
	for _, e := range t.SessionFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.SessionFilterEntry {
		e.PopulateDefaults()
	}
	for _, e := range t.TcpValidate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/threshold-crossing-alert/criteria YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria struct {
	CriteriaId    NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_CriteriaId_Union `path:"criteria-id" module:"nokia-conf"`
	Direction     NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Direction_Union  `path:"direction" module:"nokia-conf"`
	HighWatermark *uint32                                                                                                                `path:"high-watermark" module:"nokia-conf"`
	LowWatermark  *uint32                                                                                                                `path:"low-watermark" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) IsYANGGoStruct() {
}

// GetCriteriaId retrieves the value of the leaf CriteriaId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CriteriaId is set, it can
// safely use t.GetCriteriaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CriteriaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) GetCriteriaId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_CriteriaId_Union {
	if t == nil || t.CriteriaId == nil {
		return nil
	}
	return t.CriteriaId
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) GetDirection() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) GetHighWatermark() uint32 {
	if t == nil || t.HighWatermark == nil {
		return 4294967295
	}
	return *t.HighWatermark
}

// GetLowWatermark retrieves the value of the leaf LowWatermark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWatermark is set, it can
// safely use t.GetLowWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) GetLowWatermark() uint32 {
	if t == nil || t.LowWatermark == nil {
		return 0
	}
	return *t.LowWatermark
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWatermark == nil {
		var v uint32 = 4294967295
		t.HighWatermark = &v
	}
	if t.LowWatermark == nil {
		var v uint32 = 0
		t.LowWatermark = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"criteria-id": t.CriteriaId,
		"direction":   t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/threshold-crossing-alert/gtp-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter struct {
	Criteria      NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Criteria_Union  `path:"criteria" module:"nokia-conf"`
	Direction     NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Direction_Union `path:"direction" module:"nokia-conf"`
	GtpFilterName *string                                                                                                                `path:"gtp-filter-name" module:"nokia-conf"`
	HighWatermark *uint32                                                                                                                `path:"high-watermark" module:"nokia-conf"`
	LowWatermark  *uint32                                                                                                                `path:"low-watermark" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) IsYANGGoStruct() {
}

// GetCriteria retrieves the value of the leaf Criteria from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Criteria is set, it can
// safely use t.GetCriteria() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Criteria == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) GetCriteria() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Criteria_Union {
	if t == nil || t.Criteria == nil {
		return nil
	}
	return t.Criteria
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) GetDirection() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetGtpFilterName retrieves the value of the leaf GtpFilterName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GtpFilterName is set, it can
// safely use t.GetGtpFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GtpFilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) GetGtpFilterName() string {
	if t == nil || t.GtpFilterName == nil {
		return ""
	}
	return *t.GtpFilterName
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) GetHighWatermark() uint32 {
	if t == nil || t.HighWatermark == nil {
		return 4294967295
	}
	return *t.HighWatermark
}

// GetLowWatermark retrieves the value of the leaf LowWatermark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWatermark is set, it can
// safely use t.GetLowWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) GetLowWatermark() uint32 {
	if t == nil || t.LowWatermark == nil {
		return 0
	}
	return *t.LowWatermark
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWatermark == nil {
		var v uint32 = 4294967295
		t.HighWatermark = &v
	}
	if t.LowWatermark == nil {
		var v uint32 = 0
		t.LowWatermark = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) ΛListKeyMap() (map[string]interface{}, error) {

	if t.GtpFilterName == nil {
		return nil, fmt.Errorf("nil value for key GtpFilterName")
	}

	return map[string]interface{}{
		"criteria":        t.Criteria,
		"direction":       t.Direction,
		"gtp-filter-name": *t.GtpFilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/threshold-crossing-alert/gtp-filter-entry YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry struct {
	Direction     NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Direction_Union `path:"direction" module:"nokia-conf"`
	EntryId       NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_EntryId_Union   `path:"entry-id" module:"nokia-conf"`
	GtpFilterName *string                                                                                                                     `path:"gtp-filter-name" module:"nokia-conf"`
	HighWatermark *uint32                                                                                                                     `path:"high-watermark" module:"nokia-conf"`
	LowWatermark  *uint32                                                                                                                     `path:"low-watermark" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) IsYANGGoStruct() {
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) GetDirection() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) GetEntryId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetGtpFilterName retrieves the value of the leaf GtpFilterName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GtpFilterName is set, it can
// safely use t.GetGtpFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GtpFilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) GetGtpFilterName() string {
	if t == nil || t.GtpFilterName == nil {
		return ""
	}
	return *t.GtpFilterName
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) GetHighWatermark() uint32 {
	if t == nil || t.HighWatermark == nil {
		return 4294967295
	}
	return *t.HighWatermark
}

// GetLowWatermark retrieves the value of the leaf LowWatermark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWatermark is set, it can
// safely use t.GetLowWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) GetLowWatermark() uint32 {
	if t == nil || t.LowWatermark == nil {
		return 0
	}
	return *t.LowWatermark
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWatermark == nil {
		var v uint32 = 4294967295
		t.HighWatermark = &v
	}
	if t.LowWatermark == nil {
		var v uint32 = 0
		t.LowWatermark = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) ΛListKeyMap() (map[string]interface{}, error) {

	if t.GtpFilterName == nil {
		return nil, fmt.Errorf("nil value for key GtpFilterName")
	}

	return map[string]interface{}{
		"direction":       t.Direction,
		"entry-id":        t.EntryId,
		"gtp-filter-name": *t.GtpFilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/threshold-crossing-alert/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer struct {
	Direction     NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Direction_Union `path:"direction" module:"nokia-conf"`
	HighWatermark *uint32                                                                                                              `path:"high-watermark" module:"nokia-conf"`
	LowWatermark  *uint32                                                                                                              `path:"low-watermark" module:"nokia-conf"`
	PolicerName   *string                                                                                                              `path:"policer-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) IsYANGGoStruct() {
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) GetDirection() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) GetHighWatermark() uint32 {
	if t == nil || t.HighWatermark == nil {
		return 4294967295
	}
	return *t.HighWatermark
}

// GetLowWatermark retrieves the value of the leaf LowWatermark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWatermark is set, it can
// safely use t.GetLowWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) GetLowWatermark() uint32 {
	if t == nil || t.LowWatermark == nil {
		return 0
	}
	return *t.LowWatermark
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWatermark == nil {
		var v uint32 = 4294967295
		t.HighWatermark = &v
	}
	if t.LowWatermark == nil {
		var v uint32 = 0
		t.LowWatermark = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	if t.PolicerName == nil {
		return nil, fmt.Errorf("nil value for key PolicerName")
	}

	return map[string]interface{}{
		"direction":    t.Direction,
		"policer-name": *t.PolicerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/threshold-crossing-alert/sctp-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter struct {
	Criteria       NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Criteria_Union  `path:"criteria" module:"nokia-conf"`
	Direction      NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Direction_Union `path:"direction" module:"nokia-conf"`
	HighWatermark  *uint32                                                                                                                 `path:"high-watermark" module:"nokia-conf"`
	LowWatermark   *uint32                                                                                                                 `path:"low-watermark" module:"nokia-conf"`
	SctpFilterName *string                                                                                                                 `path:"sctp-filter-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) IsYANGGoStruct() {
}

// GetCriteria retrieves the value of the leaf Criteria from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Criteria is set, it can
// safely use t.GetCriteria() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Criteria == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) GetCriteria() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Criteria_Union {
	if t == nil || t.Criteria == nil {
		return nil
	}
	return t.Criteria
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) GetDirection() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) GetHighWatermark() uint32 {
	if t == nil || t.HighWatermark == nil {
		return 4294967295
	}
	return *t.HighWatermark
}

// GetLowWatermark retrieves the value of the leaf LowWatermark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWatermark is set, it can
// safely use t.GetLowWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) GetLowWatermark() uint32 {
	if t == nil || t.LowWatermark == nil {
		return 0
	}
	return *t.LowWatermark
}

// GetSctpFilterName retrieves the value of the leaf SctpFilterName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SctpFilterName is set, it can
// safely use t.GetSctpFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SctpFilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) GetSctpFilterName() string {
	if t == nil || t.SctpFilterName == nil {
		return ""
	}
	return *t.SctpFilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWatermark == nil {
		var v uint32 = 4294967295
		t.HighWatermark = &v
	}
	if t.LowWatermark == nil {
		var v uint32 = 0
		t.LowWatermark = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) ΛListKeyMap() (map[string]interface{}, error) {

	if t.SctpFilterName == nil {
		return nil, fmt.Errorf("nil value for key SctpFilterName")
	}

	return map[string]interface{}{
		"criteria":         t.Criteria,
		"direction":        t.Direction,
		"sctp-filter-name": *t.SctpFilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/threshold-crossing-alert/sctp-filter-entry YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry struct {
	Direction      NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Direction_Union `path:"direction" module:"nokia-conf"`
	EntryId        NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_EntryId_Union   `path:"entry-id" module:"nokia-conf"`
	HighWatermark  *uint32                                                                                                                      `path:"high-watermark" module:"nokia-conf"`
	LowWatermark   *uint32                                                                                                                      `path:"low-watermark" module:"nokia-conf"`
	SctpFilterName *string                                                                                                                      `path:"sctp-filter-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) IsYANGGoStruct() {
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) GetDirection() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) GetEntryId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) GetHighWatermark() uint32 {
	if t == nil || t.HighWatermark == nil {
		return 4294967295
	}
	return *t.HighWatermark
}

// GetLowWatermark retrieves the value of the leaf LowWatermark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWatermark is set, it can
// safely use t.GetLowWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) GetLowWatermark() uint32 {
	if t == nil || t.LowWatermark == nil {
		return 0
	}
	return *t.LowWatermark
}

// GetSctpFilterName retrieves the value of the leaf SctpFilterName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SctpFilterName is set, it can
// safely use t.GetSctpFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SctpFilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) GetSctpFilterName() string {
	if t == nil || t.SctpFilterName == nil {
		return ""
	}
	return *t.SctpFilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWatermark == nil {
		var v uint32 = 4294967295
		t.HighWatermark = &v
	}
	if t.LowWatermark == nil {
		var v uint32 = 0
		t.LowWatermark = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) ΛListKeyMap() (map[string]interface{}, error) {

	if t.SctpFilterName == nil {
		return nil, fmt.Errorf("nil value for key SctpFilterName")
	}

	return map[string]interface{}{
		"direction":        t.Direction,
		"entry-id":         t.EntryId,
		"sctp-filter-name": *t.SctpFilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/threshold-crossing-alert/session-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter struct {
	Criteria          NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Criteria_Union  `path:"criteria" module:"nokia-conf"`
	Direction         NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Direction_Union `path:"direction" module:"nokia-conf"`
	HighWatermark     *uint32                                                                                                                    `path:"high-watermark" module:"nokia-conf"`
	LowWatermark      *uint32                                                                                                                    `path:"low-watermark" module:"nokia-conf"`
	SessionFilterName *string                                                                                                                    `path:"session-filter-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) IsYANGGoStruct() {
}

// GetCriteria retrieves the value of the leaf Criteria from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Criteria is set, it can
// safely use t.GetCriteria() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Criteria == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) GetCriteria() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Criteria_Union {
	if t == nil || t.Criteria == nil {
		return nil
	}
	return t.Criteria
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) GetDirection() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) GetHighWatermark() uint32 {
	if t == nil || t.HighWatermark == nil {
		return 4294967295
	}
	return *t.HighWatermark
}

// GetLowWatermark retrieves the value of the leaf LowWatermark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWatermark is set, it can
// safely use t.GetLowWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) GetLowWatermark() uint32 {
	if t == nil || t.LowWatermark == nil {
		return 0
	}
	return *t.LowWatermark
}

// GetSessionFilterName retrieves the value of the leaf SessionFilterName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionFilterName is set, it can
// safely use t.GetSessionFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionFilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) GetSessionFilterName() string {
	if t == nil || t.SessionFilterName == nil {
		return ""
	}
	return *t.SessionFilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWatermark == nil {
		var v uint32 = 4294967295
		t.HighWatermark = &v
	}
	if t.LowWatermark == nil {
		var v uint32 = 0
		t.LowWatermark = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) ΛListKeyMap() (map[string]interface{}, error) {

	if t.SessionFilterName == nil {
		return nil, fmt.Errorf("nil value for key SessionFilterName")
	}

	return map[string]interface{}{
		"criteria":            t.Criteria,
		"direction":           t.Direction,
		"session-filter-name": *t.SessionFilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/threshold-crossing-alert/session-filter-entry YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry struct {
	Direction         NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Direction_Union `path:"direction" module:"nokia-conf"`
	EntryId           NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_EntryId_Union   `path:"entry-id" module:"nokia-conf"`
	HighWatermark     *uint32                                                                                                                         `path:"high-watermark" module:"nokia-conf"`
	LowWatermark      *uint32                                                                                                                         `path:"low-watermark" module:"nokia-conf"`
	SessionFilterName *string                                                                                                                         `path:"session-filter-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) IsYANGGoStruct() {
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) GetDirection() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) GetEntryId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) GetHighWatermark() uint32 {
	if t == nil || t.HighWatermark == nil {
		return 4294967295
	}
	return *t.HighWatermark
}

// GetLowWatermark retrieves the value of the leaf LowWatermark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWatermark is set, it can
// safely use t.GetLowWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) GetLowWatermark() uint32 {
	if t == nil || t.LowWatermark == nil {
		return 0
	}
	return *t.LowWatermark
}

// GetSessionFilterName retrieves the value of the leaf SessionFilterName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionFilterName is set, it can
// safely use t.GetSessionFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionFilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) GetSessionFilterName() string {
	if t == nil || t.SessionFilterName == nil {
		return ""
	}
	return *t.SessionFilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWatermark == nil {
		var v uint32 = 4294967295
		t.HighWatermark = &v
	}
	if t.LowWatermark == nil {
		var v uint32 = 0
		t.LowWatermark = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) ΛListKeyMap() (map[string]interface{}, error) {

	if t.SessionFilterName == nil {
		return nil, fmt.Errorf("nil value for key SessionFilterName")
	}

	return map[string]interface{}{
		"direction":           t.Direction,
		"entry-id":            t.EntryId,
		"session-filter-name": *t.SessionFilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/threshold-crossing-alert/tcp-validate YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate struct {
	Direction       NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Direction_Union `path:"direction" module:"nokia-conf"`
	HighWatermark   *uint32                                                                                                                  `path:"high-watermark" module:"nokia-conf"`
	LowWatermark    *uint32                                                                                                                  `path:"low-watermark" module:"nokia-conf"`
	TcpValidateName *string                                                                                                                  `path:"tcp-validate-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) IsYANGGoStruct() {
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) GetDirection() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) GetHighWatermark() uint32 {
	if t == nil || t.HighWatermark == nil {
		return 4294967295
	}
	return *t.HighWatermark
}

// GetLowWatermark retrieves the value of the leaf LowWatermark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWatermark is set, it can
// safely use t.GetLowWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) GetLowWatermark() uint32 {
	if t == nil || t.LowWatermark == nil {
		return 0
	}
	return *t.LowWatermark
}

// GetTcpValidateName retrieves the value of the leaf TcpValidateName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpValidateName is set, it can
// safely use t.GetTcpValidateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpValidateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) GetTcpValidateName() string {
	if t == nil || t.TcpValidateName == nil {
		return ""
	}
	return *t.TcpValidateName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWatermark == nil {
		var v uint32 = 4294967295
		t.HighWatermark = &v
	}
	if t.LowWatermark == nil {
		var v uint32 = 0
		t.LowWatermark = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) ΛListKeyMap() (map[string]interface{}, error) {

	if t.TcpValidateName == nil {
		return nil, fmt.Errorf("nil value for key TcpValidateName")
	}

	return map[string]interface{}{
		"direction":         t.Direction,
		"tcp-validate-name": *t.TcpValidateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/transit-ip-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy struct {
	DefaultAppProfile       *string                                                                                                       `path:"default-app-profile" module:"nokia-conf"`
	Description             *string                                                                                                       `path:"description" module:"nokia-conf"`
	DetectSeenIp            *bool                                                                                                         `path:"detect-seen-ip" module:"nokia-conf"`
	Dhcp                    *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp                   `path:"dhcp" module:"nokia-conf"`
	Diameter                *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter               `path:"diameter" module:"nokia-conf"`
	IpPolicyId              NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_IpPolicyId_Union        `path:"ip-policy-id" module:"nokia-conf"`
	Ipv6AddressPrefixLength *uint32                                                                                                       `path:"ipv6-address-prefix-length" module:"nokia-conf"`
	Radius                  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius                 `path:"radius" module:"nokia-conf"`
	StaticAaSub             map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub `path:"static-aa-sub" module:"nokia-conf"`
	SubIdentPolicy          *string                                                                                                       `path:"sub-ident-policy" module:"nokia-conf"`
	TransitAutoCreate       *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate      `path:"transit-auto-create" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) IsYANGGoStruct() {
}

// NewStaticAaSub creates a new entry in the StaticAaSub list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) NewStaticAaSub(TransitAaSubName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticAaSub == nil {
		t.StaticAaSub = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub)
	}

	key := TransitAaSubName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticAaSub[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticAaSub", key)
	}

	t.StaticAaSub[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub{
		TransitAaSubName: &TransitAaSubName,
	}

	return t.StaticAaSub[key], nil
}

// RenameStaticAaSub renames an entry in the list StaticAaSub within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) RenameStaticAaSub(oldK, newK string) error {
	if _, ok := t.StaticAaSub[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticAaSub", newK)
	}

	e, ok := t.StaticAaSub[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticAaSub", oldK)
	}
	e.TransitAaSubName = &newK

	t.StaticAaSub[newK] = e
	delete(t.StaticAaSub, oldK)
	return nil
}

// GetOrCreateStaticAaSub retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetOrCreateStaticAaSub(TransitAaSubName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub {

	key := TransitAaSubName

	if v, ok := t.StaticAaSub[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticAaSub(TransitAaSubName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticAaSub got unexpected error: %v", err))
	}
	return v
}

// GetStaticAaSub retrieves the value with the specified key from
// the StaticAaSub map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetStaticAaSub(TransitAaSubName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub {

	if t == nil {
		return nil
	}

	key := TransitAaSubName

	if lm, ok := t.StaticAaSub[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticAaSub deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) DeleteStaticAaSub(TransitAaSubName string) {
	key := TransitAaSubName

	delete(t.StaticAaSub, key)
}

// AppendStaticAaSub appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub struct to the
// list StaticAaSub of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) AppendStaticAaSub(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) error {
	if v.TransitAaSubName == nil {
		return fmt.Errorf("invalid nil key received for TransitAaSubName")
	}

	key := *v.TransitAaSubName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticAaSub == nil {
		t.StaticAaSub = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub)
	}

	if _, ok := t.StaticAaSub[key]; ok {
		return fmt.Errorf("duplicate key for list StaticAaSub %v", key)
	}

	t.StaticAaSub[key] = v
	return nil
}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetOrCreateDhcp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp{}
	return t.Dhcp
}

// GetOrCreateDiameter retrieves the value of the Diameter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetOrCreateDiameter() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter {
	if t.Diameter != nil {
		return t.Diameter
	}
	t.Diameter = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter{}
	return t.Diameter
}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetOrCreateRadius() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius{}
	return t.Radius
}

// GetOrCreateTransitAutoCreate retrieves the value of the TransitAutoCreate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetOrCreateTransitAutoCreate() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate {
	if t.TransitAutoCreate != nil {
		return t.TransitAutoCreate
	}
	t.TransitAutoCreate = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate{}
	return t.TransitAutoCreate
}

// GetDhcp returns the value of the Dhcp struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetDhcp() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetDiameter returns the value of the Diameter struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy. If the receiver or the field Diameter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetDiameter() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter {
	if t != nil && t.Diameter != nil {
		return t.Diameter
	}
	return nil
}

// GetRadius returns the value of the Radius struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetRadius() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetTransitAutoCreate returns the value of the TransitAutoCreate struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy. If the receiver or the field TransitAutoCreate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetTransitAutoCreate() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate {
	if t != nil && t.TransitAutoCreate != nil {
		return t.TransitAutoCreate
	}
	return nil
}

// GetDefaultAppProfile retrieves the value of the leaf DefaultAppProfile from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAppProfile is set, it can
// safely use t.GetDefaultAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetDefaultAppProfile() string {
	if t == nil || t.DefaultAppProfile == nil {
		return ""
	}
	return *t.DefaultAppProfile
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDetectSeenIp retrieves the value of the leaf DetectSeenIp from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DetectSeenIp is set, it can
// safely use t.GetDetectSeenIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DetectSeenIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetDetectSeenIp() bool {
	if t == nil || t.DetectSeenIp == nil {
		return false
	}
	return *t.DetectSeenIp
}

// GetIpPolicyId retrieves the value of the leaf IpPolicyId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPolicyId is set, it can
// safely use t.GetIpPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetIpPolicyId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_IpPolicyId_Union {
	if t == nil || t.IpPolicyId == nil {
		return nil
	}
	return t.IpPolicyId
}

// GetIpv6AddressPrefixLength retrieves the value of the leaf Ipv6AddressPrefixLength from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6AddressPrefixLength is set, it can
// safely use t.GetIpv6AddressPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6AddressPrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetIpv6AddressPrefixLength() uint32 {
	if t == nil || t.Ipv6AddressPrefixLength == nil {
		return 0
	}
	return *t.Ipv6AddressPrefixLength
}

// GetSubIdentPolicy retrieves the value of the leaf SubIdentPolicy from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubIdentPolicy is set, it can
// safely use t.GetSubIdentPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubIdentPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetSubIdentPolicy() string {
	if t == nil || t.SubIdentPolicy == nil {
		return ""
	}
	return *t.SubIdentPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DetectSeenIp == nil {
		var v bool = false
		t.DetectSeenIp = &v
	}
	t.Dhcp.PopulateDefaults()
	t.Diameter.PopulateDefaults()
	t.Radius.PopulateDefaults()
	t.TransitAutoCreate.PopulateDefaults()
	for _, e := range t.StaticAaSub {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"ip-policy-id": t.IpPolicyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/transit-ip-policy/dhcp YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/transit-ip-policy/diameter YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter struct {
	AdminState        E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplicationPolicy *string                     `path:"application-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplicationPolicy retrieves the value of the leaf ApplicationPolicy from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplicationPolicy is set, it can
// safely use t.GetApplicationPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplicationPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter) GetApplicationPolicy() string {
	if t == nil || t.ApplicationPolicy == nil {
		return ""
	}
	return *t.ApplicationPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/transit-ip-policy/radius YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius struct {
	AdminState             E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	AuthenticationPolicy   *string                     `path:"authentication-policy" module:"nokia-conf"`
	SeenIpRadiusAcctPolicy *string                     `path:"seen-ip-radius-acct-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAuthenticationPolicy retrieves the value of the leaf AuthenticationPolicy from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationPolicy is set, it can
// safely use t.GetAuthenticationPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius) GetAuthenticationPolicy() string {
	if t == nil || t.AuthenticationPolicy == nil {
		return ""
	}
	return *t.AuthenticationPolicy
}

// GetSeenIpRadiusAcctPolicy retrieves the value of the leaf SeenIpRadiusAcctPolicy from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SeenIpRadiusAcctPolicy is set, it can
// safely use t.GetSeenIpRadiusAcctPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SeenIpRadiusAcctPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius) GetSeenIpRadiusAcctPolicy() string {
	if t == nil || t.SeenIpRadiusAcctPolicy == nil {
		return ""
	}
	return *t.SeenIpRadiusAcctPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/transit-ip-policy/static-aa-sub YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub struct {
	AppProfile       *string                                                                                                          `path:"app-profile" module:"nokia-conf"`
	Ip               map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip `path:"ip" module:"nokia-conf"`
	TransitAaSubName *string                                                                                                          `path:"transit-aa-sub-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) IsYANGGoStruct() {
}

// NewIp creates a new entry in the Ip list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) NewIp(Address string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ip == nil {
		t.Ip = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ip[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ip", key)
	}

	t.Ip[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip{
		Address: &Address,
	}

	return t.Ip[key], nil
}

// RenameIp renames an entry in the list Ip within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) RenameIp(oldK, newK string) error {
	if _, ok := t.Ip[newK]; ok {
		return fmt.Errorf("key %v already exists in Ip", newK)
	}

	e, ok := t.Ip[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ip", oldK)
	}
	e.Address = &newK

	t.Ip[newK] = e
	delete(t.Ip, oldK)
	return nil
}

// GetOrCreateIp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) GetOrCreateIp(Address string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip {

	key := Address

	if v, ok := t.Ip[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIp(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIp got unexpected error: %v", err))
	}
	return v
}

// GetIp retrieves the value with the specified key from
// the Ip map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) GetIp(Address string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Ip[key]; ok {
		return lm
	}
	return nil
}

// DeleteIp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) DeleteIp(Address string) {
	key := Address

	delete(t.Ip, key)
}

// AppendIp appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip struct to the
// list Ip of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) AppendIp(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ip == nil {
		t.Ip = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip)
	}

	if _, ok := t.Ip[key]; ok {
		return fmt.Errorf("duplicate key for list Ip %v", key)
	}

	t.Ip[key] = v
	return nil
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetTransitAaSubName retrieves the value of the leaf TransitAaSubName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitAaSubName is set, it can
// safely use t.GetTransitAaSubName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitAaSubName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) GetTransitAaSubName() string {
	if t == nil || t.TransitAaSubName == nil {
		return ""
	}
	return *t.TransitAaSubName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ip {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TransitAaSubName == nil {
		return nil, fmt.Errorf("nil value for key TransitAaSubName")
	}

	return map[string]interface{}{
		"transit-aa-sub-name": *t.TransitAaSubName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/transit-ip-policy/static-aa-sub/ip YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/transit-ip-policy/transit-auto-create YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate struct {
	AdminState        E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	InactivityMonitor *bool                       `path:"inactivity-monitor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetInactivityMonitor retrieves the value of the leaf InactivityMonitor from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InactivityMonitor is set, it can
// safely use t.GetInactivityMonitor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InactivityMonitor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate) GetInactivityMonitor() bool {
	if t == nil || t.InactivityMonitor == nil {
		return false
	}
	return *t.InactivityMonitor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.InactivityMonitor == nil {
		var v bool = false
		t.InactivityMonitor = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/transit-prefix-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy struct {
	Description    *string                                                                                                                                                                                                            `path:"description" module:"nokia-conf"`
	Entry          map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry `path:"entry" module:"nokia-conf"`
	PrefixPolicyId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_PrefixPolicyId_Union                                                                                                     `path:"prefix-policy-id" module:"nokia-conf"`
	StaticAaSub    map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub                                                                                                  `path:"static-aa-sub" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) NewEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) GetEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) AppendEntry(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// NewStaticAaSub creates a new entry in the StaticAaSub list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) NewStaticAaSub(TransitAaSubName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticAaSub == nil {
		t.StaticAaSub = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub)
	}

	key := TransitAaSubName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticAaSub[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticAaSub", key)
	}

	t.StaticAaSub[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub{
		TransitAaSubName: &TransitAaSubName,
	}

	return t.StaticAaSub[key], nil
}

// RenameStaticAaSub renames an entry in the list StaticAaSub within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) RenameStaticAaSub(oldK, newK string) error {
	if _, ok := t.StaticAaSub[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticAaSub", newK)
	}

	e, ok := t.StaticAaSub[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticAaSub", oldK)
	}
	e.TransitAaSubName = &newK

	t.StaticAaSub[newK] = e
	delete(t.StaticAaSub, oldK)
	return nil
}

// GetOrCreateStaticAaSub retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) GetOrCreateStaticAaSub(TransitAaSubName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub {

	key := TransitAaSubName

	if v, ok := t.StaticAaSub[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticAaSub(TransitAaSubName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticAaSub got unexpected error: %v", err))
	}
	return v
}

// GetStaticAaSub retrieves the value with the specified key from
// the StaticAaSub map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) GetStaticAaSub(TransitAaSubName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub {

	if t == nil {
		return nil
	}

	key := TransitAaSubName

	if lm, ok := t.StaticAaSub[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticAaSub deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) DeleteStaticAaSub(TransitAaSubName string) {
	key := TransitAaSubName

	delete(t.StaticAaSub, key)
}

// AppendStaticAaSub appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub struct to the
// list StaticAaSub of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) AppendStaticAaSub(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) error {
	if v.TransitAaSubName == nil {
		return fmt.Errorf("invalid nil key received for TransitAaSubName")
	}

	key := *v.TransitAaSubName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticAaSub == nil {
		t.StaticAaSub = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub)
	}

	if _, ok := t.StaticAaSub[key]; ok {
		return fmt.Errorf("duplicate key for list StaticAaSub %v", key)
	}

	t.StaticAaSub[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPrefixPolicyId retrieves the value of the leaf PrefixPolicyId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixPolicyId is set, it can
// safely use t.GetPrefixPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixPolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) GetPrefixPolicyId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_PrefixPolicyId_Union {
	if t == nil || t.PrefixPolicyId == nil {
		return nil
	}
	return t.PrefixPolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
	for _, e := range t.StaticAaSub {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"prefix-policy-id": t.PrefixPolicyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/transit-prefix-policy/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry struct {
	AaSub   *string                                                                                                       `path:"aa-sub" module:"nokia-conf"`
	EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Match   *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match        `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) IsYANGGoStruct() {
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAaSub retrieves the value of the leaf AaSub from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AaSub is set, it can
// safely use t.GetAaSub() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AaSub == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) GetAaSub() string {
	if t == nil || t.AaSub == nil {
		return ""
	}
	return *t.AaSub
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/transit-prefix-policy/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match struct {
	AaSubIp   *string `path:"aa-sub-ip" module:"nokia-conf"`
	NetworkIp *string `path:"network-ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match) IsYANGGoStruct() {
}

// GetAaSubIp retrieves the value of the leaf AaSubIp from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AaSubIp is set, it can
// safely use t.GetAaSubIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AaSubIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match) GetAaSubIp() string {
	if t == nil || t.AaSubIp == nil {
		return ""
	}
	return *t.AaSubIp
}

// GetNetworkIp retrieves the value of the leaf NetworkIp from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkIp is set, it can
// safely use t.GetNetworkIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match) GetNetworkIp() string {
	if t == nil || t.NetworkIp == nil {
		return ""
	}
	return *t.NetworkIp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/transit-prefix-policy/static-aa-sub YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub struct {
	AppProfile       *string `path:"app-profile" module:"nokia-conf"`
	IsRemote         *bool   `path:"is-remote" module:"nokia-conf"`
	TransitAaSubName *string `path:"transit-aa-sub-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) IsYANGGoStruct() {
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetIsRemote retrieves the value of the leaf IsRemote from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IsRemote is set, it can
// safely use t.GetIsRemote() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IsRemote == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) GetIsRemote() bool {
	if t == nil || t.IsRemote == nil {
		return false
	}
	return *t.IsRemote
}

// GetTransitAaSubName retrieves the value of the leaf TransitAaSubName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitAaSubName is set, it can
// safely use t.GetTransitAaSubName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitAaSubName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) GetTransitAaSubName() string {
	if t == nil || t.TransitAaSubName == nil {
		return ""
	}
	return *t.TransitAaSubName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TransitAaSubName == nil {
		return nil, fmt.Errorf("nil value for key TransitAaSubName")
	}

	return map[string]interface{}{
		"transit-aa-sub-name": *t.TransitAaSubName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Wap1X represents the /nokia-conf/configure/groups/group/application-assurance/group/partition/wap1x YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Wap1X struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Wap1X implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Wap1X) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Wap1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Wap1X) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Wap1X
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Wap1X) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Wap1X) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Wap1X"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Wap1X) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Wap1X) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Wap1X.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Partition_Wap1X) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer represents the /nokia-conf/configure/groups/group/application-assurance/group/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer struct {
	AnlBandwidthPolicer          map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer          `path:"anl-bandwidth-policer" module:"nokia-conf"`
	DualBucketBandwidthPolicer   map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer   `path:"dual-bucket-bandwidth-policer" module:"nokia-conf"`
	FlowCountLimitPolicer        map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer        `path:"flow-count-limit-policer" module:"nokia-conf"`
	FlowSetupRatePolicer         map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer         `path:"flow-setup-rate-policer" module:"nokia-conf"`
	SingleBucketBandwidthPolicer map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer `path:"single-bucket-bandwidth-policer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) IsYANGGoStruct() {}

// NewAnlBandwidthPolicer creates a new entry in the AnlBandwidthPolicer list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) NewAnlBandwidthPolicer(PolicerName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AnlBandwidthPolicer == nil {
		t.AnlBandwidthPolicer = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer)
	}

	key := PolicerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AnlBandwidthPolicer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AnlBandwidthPolicer", key)
	}

	t.AnlBandwidthPolicer[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer{
		PolicerName: &PolicerName,
	}

	return t.AnlBandwidthPolicer[key], nil
}

// RenameAnlBandwidthPolicer renames an entry in the list AnlBandwidthPolicer within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) RenameAnlBandwidthPolicer(oldK, newK string) error {
	if _, ok := t.AnlBandwidthPolicer[newK]; ok {
		return fmt.Errorf("key %v already exists in AnlBandwidthPolicer", newK)
	}

	e, ok := t.AnlBandwidthPolicer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AnlBandwidthPolicer", oldK)
	}
	e.PolicerName = &newK

	t.AnlBandwidthPolicer[newK] = e
	delete(t.AnlBandwidthPolicer, oldK)
	return nil
}

// GetOrCreateAnlBandwidthPolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) GetOrCreateAnlBandwidthPolicer(PolicerName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer {

	key := PolicerName

	if v, ok := t.AnlBandwidthPolicer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAnlBandwidthPolicer(PolicerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAnlBandwidthPolicer got unexpected error: %v", err))
	}
	return v
}

// GetAnlBandwidthPolicer retrieves the value with the specified key from
// the AnlBandwidthPolicer map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) GetAnlBandwidthPolicer(PolicerName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer {

	if t == nil {
		return nil
	}

	key := PolicerName

	if lm, ok := t.AnlBandwidthPolicer[key]; ok {
		return lm
	}
	return nil
}

// DeleteAnlBandwidthPolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) DeleteAnlBandwidthPolicer(PolicerName string) {
	key := PolicerName

	delete(t.AnlBandwidthPolicer, key)
}

// AppendAnlBandwidthPolicer appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer struct to the
// list AnlBandwidthPolicer of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) AppendAnlBandwidthPolicer(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) error {
	if v.PolicerName == nil {
		return fmt.Errorf("invalid nil key received for PolicerName")
	}

	key := *v.PolicerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AnlBandwidthPolicer == nil {
		t.AnlBandwidthPolicer = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer)
	}

	if _, ok := t.AnlBandwidthPolicer[key]; ok {
		return fmt.Errorf("duplicate key for list AnlBandwidthPolicer %v", key)
	}

	t.AnlBandwidthPolicer[key] = v
	return nil
}

// NewDualBucketBandwidthPolicer creates a new entry in the DualBucketBandwidthPolicer list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) NewDualBucketBandwidthPolicer(PolicerName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DualBucketBandwidthPolicer == nil {
		t.DualBucketBandwidthPolicer = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer)
	}

	key := PolicerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DualBucketBandwidthPolicer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DualBucketBandwidthPolicer", key)
	}

	t.DualBucketBandwidthPolicer[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer{
		PolicerName: &PolicerName,
	}

	return t.DualBucketBandwidthPolicer[key], nil
}

// RenameDualBucketBandwidthPolicer renames an entry in the list DualBucketBandwidthPolicer within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) RenameDualBucketBandwidthPolicer(oldK, newK string) error {
	if _, ok := t.DualBucketBandwidthPolicer[newK]; ok {
		return fmt.Errorf("key %v already exists in DualBucketBandwidthPolicer", newK)
	}

	e, ok := t.DualBucketBandwidthPolicer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DualBucketBandwidthPolicer", oldK)
	}
	e.PolicerName = &newK

	t.DualBucketBandwidthPolicer[newK] = e
	delete(t.DualBucketBandwidthPolicer, oldK)
	return nil
}

// GetOrCreateDualBucketBandwidthPolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) GetOrCreateDualBucketBandwidthPolicer(PolicerName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer {

	key := PolicerName

	if v, ok := t.DualBucketBandwidthPolicer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDualBucketBandwidthPolicer(PolicerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDualBucketBandwidthPolicer got unexpected error: %v", err))
	}
	return v
}

// GetDualBucketBandwidthPolicer retrieves the value with the specified key from
// the DualBucketBandwidthPolicer map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) GetDualBucketBandwidthPolicer(PolicerName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer {

	if t == nil {
		return nil
	}

	key := PolicerName

	if lm, ok := t.DualBucketBandwidthPolicer[key]; ok {
		return lm
	}
	return nil
}

// DeleteDualBucketBandwidthPolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) DeleteDualBucketBandwidthPolicer(PolicerName string) {
	key := PolicerName

	delete(t.DualBucketBandwidthPolicer, key)
}

// AppendDualBucketBandwidthPolicer appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer struct to the
// list DualBucketBandwidthPolicer of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) AppendDualBucketBandwidthPolicer(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) error {
	if v.PolicerName == nil {
		return fmt.Errorf("invalid nil key received for PolicerName")
	}

	key := *v.PolicerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DualBucketBandwidthPolicer == nil {
		t.DualBucketBandwidthPolicer = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer)
	}

	if _, ok := t.DualBucketBandwidthPolicer[key]; ok {
		return fmt.Errorf("duplicate key for list DualBucketBandwidthPolicer %v", key)
	}

	t.DualBucketBandwidthPolicer[key] = v
	return nil
}

// NewFlowCountLimitPolicer creates a new entry in the FlowCountLimitPolicer list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) NewFlowCountLimitPolicer(PolicerName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlowCountLimitPolicer == nil {
		t.FlowCountLimitPolicer = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer)
	}

	key := PolicerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FlowCountLimitPolicer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FlowCountLimitPolicer", key)
	}

	t.FlowCountLimitPolicer[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer{
		PolicerName: &PolicerName,
	}

	return t.FlowCountLimitPolicer[key], nil
}

// RenameFlowCountLimitPolicer renames an entry in the list FlowCountLimitPolicer within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) RenameFlowCountLimitPolicer(oldK, newK string) error {
	if _, ok := t.FlowCountLimitPolicer[newK]; ok {
		return fmt.Errorf("key %v already exists in FlowCountLimitPolicer", newK)
	}

	e, ok := t.FlowCountLimitPolicer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FlowCountLimitPolicer", oldK)
	}
	e.PolicerName = &newK

	t.FlowCountLimitPolicer[newK] = e
	delete(t.FlowCountLimitPolicer, oldK)
	return nil
}

// GetOrCreateFlowCountLimitPolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) GetOrCreateFlowCountLimitPolicer(PolicerName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer {

	key := PolicerName

	if v, ok := t.FlowCountLimitPolicer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlowCountLimitPolicer(PolicerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlowCountLimitPolicer got unexpected error: %v", err))
	}
	return v
}

// GetFlowCountLimitPolicer retrieves the value with the specified key from
// the FlowCountLimitPolicer map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) GetFlowCountLimitPolicer(PolicerName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer {

	if t == nil {
		return nil
	}

	key := PolicerName

	if lm, ok := t.FlowCountLimitPolicer[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlowCountLimitPolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) DeleteFlowCountLimitPolicer(PolicerName string) {
	key := PolicerName

	delete(t.FlowCountLimitPolicer, key)
}

// AppendFlowCountLimitPolicer appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer struct to the
// list FlowCountLimitPolicer of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) AppendFlowCountLimitPolicer(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) error {
	if v.PolicerName == nil {
		return fmt.Errorf("invalid nil key received for PolicerName")
	}

	key := *v.PolicerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlowCountLimitPolicer == nil {
		t.FlowCountLimitPolicer = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer)
	}

	if _, ok := t.FlowCountLimitPolicer[key]; ok {
		return fmt.Errorf("duplicate key for list FlowCountLimitPolicer %v", key)
	}

	t.FlowCountLimitPolicer[key] = v
	return nil
}

// NewFlowSetupRatePolicer creates a new entry in the FlowSetupRatePolicer list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) NewFlowSetupRatePolicer(PolicerName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlowSetupRatePolicer == nil {
		t.FlowSetupRatePolicer = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer)
	}

	key := PolicerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FlowSetupRatePolicer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FlowSetupRatePolicer", key)
	}

	t.FlowSetupRatePolicer[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer{
		PolicerName: &PolicerName,
	}

	return t.FlowSetupRatePolicer[key], nil
}

// RenameFlowSetupRatePolicer renames an entry in the list FlowSetupRatePolicer within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) RenameFlowSetupRatePolicer(oldK, newK string) error {
	if _, ok := t.FlowSetupRatePolicer[newK]; ok {
		return fmt.Errorf("key %v already exists in FlowSetupRatePolicer", newK)
	}

	e, ok := t.FlowSetupRatePolicer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FlowSetupRatePolicer", oldK)
	}
	e.PolicerName = &newK

	t.FlowSetupRatePolicer[newK] = e
	delete(t.FlowSetupRatePolicer, oldK)
	return nil
}

// GetOrCreateFlowSetupRatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) GetOrCreateFlowSetupRatePolicer(PolicerName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer {

	key := PolicerName

	if v, ok := t.FlowSetupRatePolicer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlowSetupRatePolicer(PolicerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlowSetupRatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetFlowSetupRatePolicer retrieves the value with the specified key from
// the FlowSetupRatePolicer map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) GetFlowSetupRatePolicer(PolicerName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer {

	if t == nil {
		return nil
	}

	key := PolicerName

	if lm, ok := t.FlowSetupRatePolicer[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlowSetupRatePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) DeleteFlowSetupRatePolicer(PolicerName string) {
	key := PolicerName

	delete(t.FlowSetupRatePolicer, key)
}

// AppendFlowSetupRatePolicer appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer struct to the
// list FlowSetupRatePolicer of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) AppendFlowSetupRatePolicer(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) error {
	if v.PolicerName == nil {
		return fmt.Errorf("invalid nil key received for PolicerName")
	}

	key := *v.PolicerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlowSetupRatePolicer == nil {
		t.FlowSetupRatePolicer = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer)
	}

	if _, ok := t.FlowSetupRatePolicer[key]; ok {
		return fmt.Errorf("duplicate key for list FlowSetupRatePolicer %v", key)
	}

	t.FlowSetupRatePolicer[key] = v
	return nil
}

// NewSingleBucketBandwidthPolicer creates a new entry in the SingleBucketBandwidthPolicer list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) NewSingleBucketBandwidthPolicer(PolicerName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SingleBucketBandwidthPolicer == nil {
		t.SingleBucketBandwidthPolicer = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer)
	}

	key := PolicerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SingleBucketBandwidthPolicer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SingleBucketBandwidthPolicer", key)
	}

	t.SingleBucketBandwidthPolicer[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer{
		PolicerName: &PolicerName,
	}

	return t.SingleBucketBandwidthPolicer[key], nil
}

// RenameSingleBucketBandwidthPolicer renames an entry in the list SingleBucketBandwidthPolicer within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) RenameSingleBucketBandwidthPolicer(oldK, newK string) error {
	if _, ok := t.SingleBucketBandwidthPolicer[newK]; ok {
		return fmt.Errorf("key %v already exists in SingleBucketBandwidthPolicer", newK)
	}

	e, ok := t.SingleBucketBandwidthPolicer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SingleBucketBandwidthPolicer", oldK)
	}
	e.PolicerName = &newK

	t.SingleBucketBandwidthPolicer[newK] = e
	delete(t.SingleBucketBandwidthPolicer, oldK)
	return nil
}

// GetOrCreateSingleBucketBandwidthPolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) GetOrCreateSingleBucketBandwidthPolicer(PolicerName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer {

	key := PolicerName

	if v, ok := t.SingleBucketBandwidthPolicer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSingleBucketBandwidthPolicer(PolicerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSingleBucketBandwidthPolicer got unexpected error: %v", err))
	}
	return v
}

// GetSingleBucketBandwidthPolicer retrieves the value with the specified key from
// the SingleBucketBandwidthPolicer map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) GetSingleBucketBandwidthPolicer(PolicerName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer {

	if t == nil {
		return nil
	}

	key := PolicerName

	if lm, ok := t.SingleBucketBandwidthPolicer[key]; ok {
		return lm
	}
	return nil
}

// DeleteSingleBucketBandwidthPolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) DeleteSingleBucketBandwidthPolicer(PolicerName string) {
	key := PolicerName

	delete(t.SingleBucketBandwidthPolicer, key)
}

// AppendSingleBucketBandwidthPolicer appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer struct to the
// list SingleBucketBandwidthPolicer of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) AppendSingleBucketBandwidthPolicer(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) error {
	if v.PolicerName == nil {
		return fmt.Errorf("invalid nil key received for PolicerName")
	}

	key := *v.PolicerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SingleBucketBandwidthPolicer == nil {
		t.SingleBucketBandwidthPolicer = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer)
	}

	if _, ok := t.SingleBucketBandwidthPolicer[key]; ok {
		return fmt.Errorf("duplicate key for list SingleBucketBandwidthPolicer %v", key)
	}

	t.SingleBucketBandwidthPolicer[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AnlBandwidthPolicer {
		e.PopulateDefaults()
	}
	for _, e := range t.DualBucketBandwidthPolicer {
		e.PopulateDefaults()
	}
	for _, e := range t.FlowCountLimitPolicer {
		e.PopulateDefaults()
	}
	for _, e := range t.FlowSetupRatePolicer {
		e.PopulateDefaults()
	}
	for _, e := range t.SingleBucketBandwidthPolicer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/anl-bandwidth-policer YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer struct {
	Action                E_NokiaTypesApplicationAssurance_PolicerAction                                                          `path:"action" module:"nokia-conf"`
	AdaptationRule        *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule `path:"adaptation-rule" module:"nokia-conf"`
	Description           *string                                                                                                 `path:"description" module:"nokia-conf"`
	Mbs                   *int32                                                                                                  `path:"mbs" module:"nokia-conf"`
	PolicerName           *string                                                                                                 `path:"policer-name" module:"nokia-conf"`
	RatePercentage        *int32                                                                                                  `path:"rate-percentage" module:"nokia-conf"`
	RatePercentageStage_2 *int32                                                                                                  `path:"rate-percentage-stage-2" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule{}
	return t.AdaptationRule
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) GetAction() E_NokiaTypesApplicationAssurance_PolicerAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesApplicationAssurance_PolicerAction_permit_deny
	}
	return t.Action
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// GetRatePercentage retrieves the value of the leaf RatePercentage from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RatePercentage is set, it can
// safely use t.GetRatePercentage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RatePercentage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) GetRatePercentage() int32 {
	if t == nil || t.RatePercentage == nil {
		return 0
	}
	return *t.RatePercentage
}

// GetRatePercentageStage_2 retrieves the value of the leaf RatePercentageStage_2 from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RatePercentageStage_2 is set, it can
// safely use t.GetRatePercentageStage_2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RatePercentageStage_2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) GetRatePercentageStage_2() int32 {
	if t == nil || t.RatePercentageStage_2 == nil {
		return 0
	}
	return *t.RatePercentageStage_2
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesApplicationAssurance_PolicerAction_permit_deny
	}
	if t.Mbs == nil {
		var v int32 = 0
		t.Mbs = &v
	}
	t.AdaptationRule.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerName == nil {
		return nil, fmt.Errorf("nil value for key PolicerName")
	}

	return map[string]interface{}{
		"policer-name": *t.PolicerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/anl-bandwidth-policer/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule struct {
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule) IsYANGGoStruct() {
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/dual-bucket-bandwidth-policer YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer struct {
	AdaptationRule            *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule                                                                                                                                             `path:"adaptation-rule" module:"nokia-conf"`
	Cbs                       *int32                                                                                                                                                                                                                                                     `path:"cbs" module:"nokia-conf"`
	Cir                       NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_Cir_Union                                                                                                                                                   `path:"cir" module:"nokia-conf"`
	CongestionOverride        *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride                                                                                                                                         `path:"congestion-override" module:"nokia-conf"`
	CongestionOverrideStage_2 *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2                                                                                                                                  `path:"congestion-override-stage-2" module:"nokia-conf"`
	Description               *string                                                                                                                                                                                                                                                    `path:"description" module:"nokia-conf"`
	Mbs                       *int32                                                                                                                                                                                                                                                     `path:"mbs" module:"nokia-conf"`
	Pir                       NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_Pir_Union                                                                                                                                                   `path:"pir" module:"nokia-conf"`
	PolicerName               *string                                                                                                                                                                                                                                                    `path:"policer-name" module:"nokia-conf"`
	TimeOfDayOverride         map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TodOverrideId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride `path:"time-of-day-override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) IsYANGGoStruct() {
}

// NewTimeOfDayOverride creates a new entry in the TimeOfDayOverride list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) NewTimeOfDayOverride(TodOverrideId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TodOverrideId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TimeOfDayOverride == nil {
		t.TimeOfDayOverride = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TodOverrideId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride)
	}

	key := TodOverrideId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TimeOfDayOverride[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TimeOfDayOverride", key)
	}

	t.TimeOfDayOverride[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride{
		TodOverrideId: TodOverrideId,
	}

	return t.TimeOfDayOverride[key], nil
}

// RenameTimeOfDayOverride renames an entry in the list TimeOfDayOverride within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) RenameTimeOfDayOverride(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TodOverrideId_Union) error {
	if _, ok := t.TimeOfDayOverride[newK]; ok {
		return fmt.Errorf("key %v already exists in TimeOfDayOverride", newK)
	}

	e, ok := t.TimeOfDayOverride[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TimeOfDayOverride", oldK)
	}
	e.TodOverrideId = newK

	t.TimeOfDayOverride[newK] = e
	delete(t.TimeOfDayOverride, oldK)
	return nil
}

// GetOrCreateTimeOfDayOverride retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetOrCreateTimeOfDayOverride(TodOverrideId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TodOverrideId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride {

	key := TodOverrideId

	if v, ok := t.TimeOfDayOverride[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTimeOfDayOverride(TodOverrideId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTimeOfDayOverride got unexpected error: %v", err))
	}
	return v
}

// GetTimeOfDayOverride retrieves the value with the specified key from
// the TimeOfDayOverride map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetTimeOfDayOverride(TodOverrideId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TodOverrideId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride {

	if t == nil {
		return nil
	}

	key := TodOverrideId

	if lm, ok := t.TimeOfDayOverride[key]; ok {
		return lm
	}
	return nil
}

// DeleteTimeOfDayOverride deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) DeleteTimeOfDayOverride(TodOverrideId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TodOverrideId_Union) {
	key := TodOverrideId

	delete(t.TimeOfDayOverride, key)
}

// AppendTimeOfDayOverride appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride struct to the
// list TimeOfDayOverride of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) AppendTimeOfDayOverride(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) error {
	key := v.TodOverrideId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TimeOfDayOverride == nil {
		t.TimeOfDayOverride = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TodOverrideId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride)
	}

	if _, ok := t.TimeOfDayOverride[key]; ok {
		return fmt.Errorf("duplicate key for list TimeOfDayOverride %v", key)
	}

	t.TimeOfDayOverride[key] = v
	return nil
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateCongestionOverride retrieves the value of the CongestionOverride field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetOrCreateCongestionOverride() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride {
	if t.CongestionOverride != nil {
		return t.CongestionOverride
	}
	t.CongestionOverride = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride{}
	return t.CongestionOverride
}

// GetOrCreateCongestionOverrideStage_2 retrieves the value of the CongestionOverrideStage_2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetOrCreateCongestionOverrideStage_2() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2 {
	if t.CongestionOverrideStage_2 != nil {
		return t.CongestionOverrideStage_2
	}
	t.CongestionOverrideStage_2 = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2{}
	return t.CongestionOverrideStage_2
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetCongestionOverride returns the value of the CongestionOverride struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer. If the receiver or the field CongestionOverride is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetCongestionOverride() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride {
	if t != nil && t.CongestionOverride != nil {
		return t.CongestionOverride
	}
	return nil
}

// GetCongestionOverrideStage_2 returns the value of the CongestionOverrideStage_2 struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer. If the receiver or the field CongestionOverrideStage_2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetCongestionOverrideStage_2() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2 {
	if t != nil && t.CongestionOverrideStage_2 != nil {
		return t.CongestionOverrideStage_2
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetCir() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetPir() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	return t.Pir
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		var v int32 = 0
		t.Cbs = &v
	}
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.Mbs == nil {
		var v int32 = 0
		t.Mbs = &v
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	t.AdaptationRule.PopulateDefaults()
	t.CongestionOverride.PopulateDefaults()
	t.CongestionOverrideStage_2.PopulateDefaults()
	for _, e := range t.TimeOfDayOverride {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerName == nil {
		return nil, fmt.Errorf("nil value for key PolicerName")
	}

	return map[string]interface{}{
		"policer-name": *t.PolicerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/dual-bucket-bandwidth-policer/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/dual-bucket-bandwidth-policer/congestion-override YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride struct {
	Cbs *int32                                                                                                                      `path:"cbs" module:"nokia-conf"`
	Cir NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride_Cir_Union `path:"cir" module:"nokia-conf"`
	Mbs *int32                                                                                                                      `path:"mbs" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride) IsYANGGoStruct() {
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride) GetCir() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride) GetPir() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		var v int32 = 0
		t.Cbs = &v
	}
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.Mbs == nil {
		var v int32 = 0
		t.Mbs = &v
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2 represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/dual-bucket-bandwidth-policer/congestion-override-stage-2 YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2 struct {
	Cbs *int32                                                                                                                             `path:"cbs" module:"nokia-conf"`
	Cir NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2_Cir_Union `path:"cir" module:"nokia-conf"`
	Mbs *int32                                                                                                                             `path:"mbs" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2) IsYANGGoStruct() {
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2) GetCir() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2) GetPir() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		var v int32 = 0
		t.Cbs = &v
	}
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.Mbs == nil {
		var v int32 = 0
		t.Mbs = &v
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/dual-bucket-bandwidth-policer/time-of-day-override YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride struct {
	AdminState    E_NokiaTypesSros_AdminState                                                                                                          `path:"admin-state" module:"nokia-conf"`
	Cbs           *int32                                                                                                                               `path:"cbs" module:"nokia-conf"`
	Cir           NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_Cir_Union           `path:"cir" module:"nokia-conf"`
	Description   *string                                                                                                                              `path:"description" module:"nokia-conf"`
	Mbs           *int32                                                                                                                               `path:"mbs" module:"nokia-conf"`
	Pir           NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_Pir_Union           `path:"pir" module:"nokia-conf"`
	TimeRange     *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange          `path:"time-range" module:"nokia-conf"`
	TodOverrideId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TodOverrideId_Union `path:"tod-override-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) IsYANGGoStruct() {
}

// GetOrCreateTimeRange retrieves the value of the TimeRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) GetOrCreateTimeRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange {
	if t.TimeRange != nil {
		return t.TimeRange
	}
	t.TimeRange = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange{}
	return t.TimeRange
}

// GetTimeRange returns the value of the TimeRange struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride. If the receiver or the field TimeRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) GetTimeRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange {
	if t != nil && t.TimeRange != nil {
		return t.TimeRange
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) GetCir() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) GetPir() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	return t.Pir
}

// GetTodOverrideId retrieves the value of the leaf TodOverrideId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TodOverrideId is set, it can
// safely use t.GetTodOverrideId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TodOverrideId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) GetTodOverrideId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TodOverrideId_Union {
	if t == nil || t.TodOverrideId == nil {
		return nil
	}
	return t.TodOverrideId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Cbs == nil {
		var v int32 = 0
		t.Cbs = &v
	}
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.Mbs == nil {
		var v int32 = 0
		t.Mbs = &v
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	t.TimeRange.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"tod-override-id": t.TodOverrideId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/dual-bucket-bandwidth-policer/time-of-day-override/time-range YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange struct {
	Daily  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily  `path:"daily" module:"nokia-conf" yangPresence:"true"`
	Weekly *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly `path:"weekly" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) IsYANGGoStruct() {
}

// GetOrCreateDaily retrieves the value of the Daily field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) GetOrCreateDaily() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily {
	if t.Daily != nil {
		return t.Daily
	}
	t.Daily = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily{}
	return t.Daily
}

// GetOrCreateWeekly retrieves the value of the Weekly field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) GetOrCreateWeekly() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly {
	if t.Weekly != nil {
		return t.Weekly
	}
	t.Weekly = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly{}
	return t.Weekly
}

// GetDaily returns the value of the Daily struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange. If the receiver or the field Daily is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) GetDaily() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily {
	if t != nil && t.Daily != nil {
		return t.Daily
	}
	return nil
}

// GetWeekly returns the value of the Weekly struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange. If the receiver or the field Weekly is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) GetWeekly() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly {
	if t != nil && t.Weekly != nil {
		return t.Weekly
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Daily.PopulateDefaults()
	t.Weekly.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/dual-bucket-bandwidth-policer/time-of-day-override/time-range/daily YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily struct {
	AllDays YANGEmpty                                                                                                                               `path:"all-days" module:"nokia-conf"`
	End     *string                                                                                                                                 `path:"end" module:"nokia-conf"`
	On      []E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily_On `path:"on" module:"nokia-conf"`
	Start   *string                                                                                                                                 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) IsYANGGoStruct() {
}

// GetAllDays retrieves the value of the leaf AllDays from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllDays is set, it can
// safely use t.GetAllDays() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllDays == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) GetAllDays() YANGEmpty {
	if t == nil || t.AllDays == false {
		return false
	}
	return t.AllDays
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetOn retrieves the value of the leaf On from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if On is set, it can
// safely use t.GetOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.On == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) GetOn() []E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily_On {
	if t == nil || t.On == nil {
		return nil
	}
	return t.On
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/dual-bucket-bandwidth-policer/time-of-day-override/time-range/weekly YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly struct {
	End   *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End   `path:"end" module:"nokia-conf" yangPresence:"true"`
	Start *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start `path:"start" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) IsYANGGoStruct() {
}

// GetOrCreateEnd retrieves the value of the End field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) GetOrCreateEnd() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End {
	if t.End != nil {
		return t.End
	}
	t.End = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End{}
	return t.End
}

// GetOrCreateStart retrieves the value of the Start field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) GetOrCreateStart() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start {
	if t.Start != nil {
		return t.Start
	}
	t.Start = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start{}
	return t.Start
}

// GetEnd returns the value of the End struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly. If the receiver or the field End is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) GetEnd() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End {
	if t != nil && t.End != nil {
		return t.End
	}
	return nil
}

// GetStart returns the value of the Start struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly. If the receiver or the field Start is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) GetStart() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start {
	if t != nil && t.Start != nil {
		return t.Start
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.End.PopulateDefaults()
	t.Start.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/dual-bucket-bandwidth-policer/time-of-day-override/time-range/weekly/end YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End struct {
	Day  E_NokiaTypesApplicationAssurance_DayOfWeek `path:"day" module:"nokia-conf"`
	Time *string                                    `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) IsYANGGoStruct() {
}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) GetDay() E_NokiaTypesApplicationAssurance_DayOfWeek {
	if t == nil || t.Day == 0 {
		return 0
	}
	return t.Day
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) GetTime() string {
	if t == nil || t.Time == nil {
		return ""
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/dual-bucket-bandwidth-policer/time-of-day-override/time-range/weekly/start YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start struct {
	Day  E_NokiaTypesApplicationAssurance_DayOfWeek `path:"day" module:"nokia-conf"`
	Time *string                                    `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) IsYANGGoStruct() {
}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) GetDay() E_NokiaTypesApplicationAssurance_DayOfWeek {
	if t == nil || t.Day == 0 {
		return 0
	}
	return t.Day
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) GetTime() string {
	if t == nil || t.Time == nil {
		return ""
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/flow-count-limit-policer YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer struct {
	Action            E_NokiaTypesApplicationAssurance_PolicerAction                                                                                                                                                                                                   `path:"action" module:"nokia-conf"`
	Description       *string                                                                                                                                                                                                                                          `path:"description" module:"nokia-conf"`
	Granularity       E_NokiaTypesApplicationAssurance_PolicerGranularity                                                                                                                                                                                              `path:"granularity" module:"nokia-conf"`
	LimitGtpFlows     *bool                                                                                                                                                                                                                                            `path:"limit-gtp-flows" module:"nokia-conf"`
	PeakFlowCount     NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_PeakFlowCount_Union                                                                                                                                    `path:"peak-flow-count" module:"nokia-conf"`
	PolicerName       *string                                                                                                                                                                                                                                          `path:"policer-name" module:"nokia-conf"`
	TimeOfDayOverride map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TodOverrideId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride `path:"time-of-day-override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) IsYANGGoStruct() {
}

// NewTimeOfDayOverride creates a new entry in the TimeOfDayOverride list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) NewTimeOfDayOverride(TodOverrideId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TodOverrideId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TimeOfDayOverride == nil {
		t.TimeOfDayOverride = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TodOverrideId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride)
	}

	key := TodOverrideId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TimeOfDayOverride[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TimeOfDayOverride", key)
	}

	t.TimeOfDayOverride[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride{
		TodOverrideId: TodOverrideId,
	}

	return t.TimeOfDayOverride[key], nil
}

// RenameTimeOfDayOverride renames an entry in the list TimeOfDayOverride within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) RenameTimeOfDayOverride(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TodOverrideId_Union) error {
	if _, ok := t.TimeOfDayOverride[newK]; ok {
		return fmt.Errorf("key %v already exists in TimeOfDayOverride", newK)
	}

	e, ok := t.TimeOfDayOverride[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TimeOfDayOverride", oldK)
	}
	e.TodOverrideId = newK

	t.TimeOfDayOverride[newK] = e
	delete(t.TimeOfDayOverride, oldK)
	return nil
}

// GetOrCreateTimeOfDayOverride retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) GetOrCreateTimeOfDayOverride(TodOverrideId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TodOverrideId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride {

	key := TodOverrideId

	if v, ok := t.TimeOfDayOverride[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTimeOfDayOverride(TodOverrideId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTimeOfDayOverride got unexpected error: %v", err))
	}
	return v
}

// GetTimeOfDayOverride retrieves the value with the specified key from
// the TimeOfDayOverride map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) GetTimeOfDayOverride(TodOverrideId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TodOverrideId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride {

	if t == nil {
		return nil
	}

	key := TodOverrideId

	if lm, ok := t.TimeOfDayOverride[key]; ok {
		return lm
	}
	return nil
}

// DeleteTimeOfDayOverride deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) DeleteTimeOfDayOverride(TodOverrideId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TodOverrideId_Union) {
	key := TodOverrideId

	delete(t.TimeOfDayOverride, key)
}

// AppendTimeOfDayOverride appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride struct to the
// list TimeOfDayOverride of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) AppendTimeOfDayOverride(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) error {
	key := v.TodOverrideId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TimeOfDayOverride == nil {
		t.TimeOfDayOverride = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TodOverrideId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride)
	}

	if _, ok := t.TimeOfDayOverride[key]; ok {
		return fmt.Errorf("duplicate key for list TimeOfDayOverride %v", key)
	}

	t.TimeOfDayOverride[key] = v
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) GetAction() E_NokiaTypesApplicationAssurance_PolicerAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesApplicationAssurance_PolicerAction_permit_deny
	}
	return t.Action
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGranularity retrieves the value of the leaf Granularity from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Granularity is set, it can
// safely use t.GetGranularity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Granularity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) GetGranularity() E_NokiaTypesApplicationAssurance_PolicerGranularity {
	if t == nil || t.Granularity == 0 {
		return 0
	}
	return t.Granularity
}

// GetLimitGtpFlows retrieves the value of the leaf LimitGtpFlows from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitGtpFlows is set, it can
// safely use t.GetLimitGtpFlows() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitGtpFlows == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) GetLimitGtpFlows() bool {
	if t == nil || t.LimitGtpFlows == nil {
		return false
	}
	return *t.LimitGtpFlows
}

// GetPeakFlowCount retrieves the value of the leaf PeakFlowCount from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeakFlowCount is set, it can
// safely use t.GetPeakFlowCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeakFlowCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) GetPeakFlowCount() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_PeakFlowCount_Union {
	if t == nil || t.PeakFlowCount == nil {
		return NokiaTypesApplicationAssurance_PolicerFlowCountLimit_Enum_max
	}
	return t.PeakFlowCount
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesApplicationAssurance_PolicerAction_permit_deny
	}
	if t.LimitGtpFlows == nil {
		var v bool = false
		t.LimitGtpFlows = &v
	}
	if t.PeakFlowCount == nil {
		t.PeakFlowCount = NokiaTypesApplicationAssurance_PolicerFlowCountLimit_Enum_max
	}
	for _, e := range t.TimeOfDayOverride {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerName == nil {
		return nil, fmt.Errorf("nil value for key PolicerName")
	}

	return map[string]interface{}{
		"policer-name": *t.PolicerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/flow-count-limit-policer/time-of-day-override YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride struct {
	AdminState    E_NokiaTypesSros_AdminState                                                                                                     `path:"admin-state" module:"nokia-conf"`
	Description   *string                                                                                                                         `path:"description" module:"nokia-conf"`
	PeakFlowCount NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_PeakFlowCount_Union `path:"peak-flow-count" module:"nokia-conf"`
	TimeRange     *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange          `path:"time-range" module:"nokia-conf"`
	TodOverrideId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TodOverrideId_Union `path:"tod-override-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) IsYANGGoStruct() {
}

// GetOrCreateTimeRange retrieves the value of the TimeRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) GetOrCreateTimeRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange {
	if t.TimeRange != nil {
		return t.TimeRange
	}
	t.TimeRange = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange{}
	return t.TimeRange
}

// GetTimeRange returns the value of the TimeRange struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride. If the receiver or the field TimeRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) GetTimeRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange {
	if t != nil && t.TimeRange != nil {
		return t.TimeRange
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPeakFlowCount retrieves the value of the leaf PeakFlowCount from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeakFlowCount is set, it can
// safely use t.GetPeakFlowCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeakFlowCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) GetPeakFlowCount() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_PeakFlowCount_Union {
	if t == nil || t.PeakFlowCount == nil {
		return NokiaTypesApplicationAssurance_PolicerFlowCountLimit_Enum_max
	}
	return t.PeakFlowCount
}

// GetTodOverrideId retrieves the value of the leaf TodOverrideId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TodOverrideId is set, it can
// safely use t.GetTodOverrideId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TodOverrideId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) GetTodOverrideId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TodOverrideId_Union {
	if t == nil || t.TodOverrideId == nil {
		return nil
	}
	return t.TodOverrideId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.PeakFlowCount == nil {
		t.PeakFlowCount = NokiaTypesApplicationAssurance_PolicerFlowCountLimit_Enum_max
	}
	t.TimeRange.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"tod-override-id": t.TodOverrideId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/flow-count-limit-policer/time-of-day-override/time-range YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange struct {
	Daily  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily  `path:"daily" module:"nokia-conf" yangPresence:"true"`
	Weekly *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly `path:"weekly" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange) IsYANGGoStruct() {
}

// GetOrCreateDaily retrieves the value of the Daily field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange) GetOrCreateDaily() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily {
	if t.Daily != nil {
		return t.Daily
	}
	t.Daily = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily{}
	return t.Daily
}

// GetOrCreateWeekly retrieves the value of the Weekly field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange) GetOrCreateWeekly() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly {
	if t.Weekly != nil {
		return t.Weekly
	}
	t.Weekly = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly{}
	return t.Weekly
}

// GetDaily returns the value of the Daily struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange. If the receiver or the field Daily is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange) GetDaily() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily {
	if t != nil && t.Daily != nil {
		return t.Daily
	}
	return nil
}

// GetWeekly returns the value of the Weekly struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange. If the receiver or the field Weekly is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange) GetWeekly() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly {
	if t != nil && t.Weekly != nil {
		return t.Weekly
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Daily.PopulateDefaults()
	t.Weekly.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/flow-count-limit-policer/time-of-day-override/time-range/daily YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily struct {
	AllDays YANGEmpty                                                                                                                          `path:"all-days" module:"nokia-conf"`
	End     *string                                                                                                                            `path:"end" module:"nokia-conf"`
	On      []E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily_On `path:"on" module:"nokia-conf"`
	Start   *string                                                                                                                            `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily) IsYANGGoStruct() {
}

// GetAllDays retrieves the value of the leaf AllDays from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllDays is set, it can
// safely use t.GetAllDays() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllDays == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily) GetAllDays() YANGEmpty {
	if t == nil || t.AllDays == false {
		return false
	}
	return t.AllDays
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetOn retrieves the value of the leaf On from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if On is set, it can
// safely use t.GetOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.On == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily) GetOn() []E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily_On {
	if t == nil || t.On == nil {
		return nil
	}
	return t.On
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/flow-count-limit-policer/time-of-day-override/time-range/weekly YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly struct {
	End   *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End   `path:"end" module:"nokia-conf" yangPresence:"true"`
	Start *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start `path:"start" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly) IsYANGGoStruct() {
}

// GetOrCreateEnd retrieves the value of the End field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly) GetOrCreateEnd() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End {
	if t.End != nil {
		return t.End
	}
	t.End = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End{}
	return t.End
}

// GetOrCreateStart retrieves the value of the Start field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly) GetOrCreateStart() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start {
	if t.Start != nil {
		return t.Start
	}
	t.Start = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start{}
	return t.Start
}

// GetEnd returns the value of the End struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly. If the receiver or the field End is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly) GetEnd() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End {
	if t != nil && t.End != nil {
		return t.End
	}
	return nil
}

// GetStart returns the value of the Start struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly. If the receiver or the field Start is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly) GetStart() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start {
	if t != nil && t.Start != nil {
		return t.Start
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.End.PopulateDefaults()
	t.Start.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/flow-count-limit-policer/time-of-day-override/time-range/weekly/end YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End struct {
	Day  E_NokiaTypesApplicationAssurance_DayOfWeek `path:"day" module:"nokia-conf"`
	Time *string                                    `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End) IsYANGGoStruct() {
}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End) GetDay() E_NokiaTypesApplicationAssurance_DayOfWeek {
	if t == nil || t.Day == 0 {
		return 0
	}
	return t.Day
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End) GetTime() string {
	if t == nil || t.Time == nil {
		return ""
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/flow-count-limit-policer/time-of-day-override/time-range/weekly/start YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start struct {
	Day  E_NokiaTypesApplicationAssurance_DayOfWeek `path:"day" module:"nokia-conf"`
	Time *string                                    `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) IsYANGGoStruct() {
}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) GetDay() E_NokiaTypesApplicationAssurance_DayOfWeek {
	if t == nil || t.Day == 0 {
		return 0
	}
	return t.Day
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) GetTime() string {
	if t == nil || t.Time == nil {
		return ""
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/flow-setup-rate-policer YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer struct {
	Action                 E_NokiaTypesApplicationAssurance_PolicerAction                                                                                                                                                                                                 `path:"action" module:"nokia-conf"`
	AdaptationRule         *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule                                                                                                                                       `path:"adaptation-rule" module:"nokia-conf"`
	Description            *string                                                                                                                                                                                                                                        `path:"description" module:"nokia-conf"`
	FlowSetupRateBurstSize *int32                                                                                                                                                                                                                                         `path:"flow-setup-rate-burst-size" module:"nokia-conf"`
	Granularity            E_NokiaTypesApplicationAssurance_PolicerGranularity                                                                                                                                                                                            `path:"granularity" module:"nokia-conf"`
	PeakFlowSetupRate      NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_PeakFlowSetupRate_Union                                                                                                                               `path:"peak-flow-setup-rate" module:"nokia-conf"`
	PolicerName            *string                                                                                                                                                                                                                                        `path:"policer-name" module:"nokia-conf"`
	TimeOfDayOverride      map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TodOverrideId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride `path:"time-of-day-override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) IsYANGGoStruct() {
}

// NewTimeOfDayOverride creates a new entry in the TimeOfDayOverride list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) NewTimeOfDayOverride(TodOverrideId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TodOverrideId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TimeOfDayOverride == nil {
		t.TimeOfDayOverride = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TodOverrideId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride)
	}

	key := TodOverrideId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TimeOfDayOverride[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TimeOfDayOverride", key)
	}

	t.TimeOfDayOverride[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride{
		TodOverrideId: TodOverrideId,
	}

	return t.TimeOfDayOverride[key], nil
}

// RenameTimeOfDayOverride renames an entry in the list TimeOfDayOverride within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) RenameTimeOfDayOverride(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TodOverrideId_Union) error {
	if _, ok := t.TimeOfDayOverride[newK]; ok {
		return fmt.Errorf("key %v already exists in TimeOfDayOverride", newK)
	}

	e, ok := t.TimeOfDayOverride[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TimeOfDayOverride", oldK)
	}
	e.TodOverrideId = newK

	t.TimeOfDayOverride[newK] = e
	delete(t.TimeOfDayOverride, oldK)
	return nil
}

// GetOrCreateTimeOfDayOverride retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetOrCreateTimeOfDayOverride(TodOverrideId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TodOverrideId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride {

	key := TodOverrideId

	if v, ok := t.TimeOfDayOverride[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTimeOfDayOverride(TodOverrideId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTimeOfDayOverride got unexpected error: %v", err))
	}
	return v
}

// GetTimeOfDayOverride retrieves the value with the specified key from
// the TimeOfDayOverride map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetTimeOfDayOverride(TodOverrideId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TodOverrideId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride {

	if t == nil {
		return nil
	}

	key := TodOverrideId

	if lm, ok := t.TimeOfDayOverride[key]; ok {
		return lm
	}
	return nil
}

// DeleteTimeOfDayOverride deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) DeleteTimeOfDayOverride(TodOverrideId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TodOverrideId_Union) {
	key := TodOverrideId

	delete(t.TimeOfDayOverride, key)
}

// AppendTimeOfDayOverride appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride struct to the
// list TimeOfDayOverride of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) AppendTimeOfDayOverride(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) error {
	key := v.TodOverrideId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TimeOfDayOverride == nil {
		t.TimeOfDayOverride = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TodOverrideId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride)
	}

	if _, ok := t.TimeOfDayOverride[key]; ok {
		return fmt.Errorf("duplicate key for list TimeOfDayOverride %v", key)
	}

	t.TimeOfDayOverride[key] = v
	return nil
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule{}
	return t.AdaptationRule
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetAction() E_NokiaTypesApplicationAssurance_PolicerAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesApplicationAssurance_PolicerAction_permit_deny
	}
	return t.Action
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFlowSetupRateBurstSize retrieves the value of the leaf FlowSetupRateBurstSize from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowSetupRateBurstSize is set, it can
// safely use t.GetFlowSetupRateBurstSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowSetupRateBurstSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetFlowSetupRateBurstSize() int32 {
	if t == nil || t.FlowSetupRateBurstSize == nil {
		return 0
	}
	return *t.FlowSetupRateBurstSize
}

// GetGranularity retrieves the value of the leaf Granularity from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Granularity is set, it can
// safely use t.GetGranularity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Granularity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetGranularity() E_NokiaTypesApplicationAssurance_PolicerGranularity {
	if t == nil || t.Granularity == 0 {
		return 0
	}
	return t.Granularity
}

// GetPeakFlowSetupRate retrieves the value of the leaf PeakFlowSetupRate from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeakFlowSetupRate is set, it can
// safely use t.GetPeakFlowSetupRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeakFlowSetupRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetPeakFlowSetupRate() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_PeakFlowSetupRate_Union {
	if t == nil || t.PeakFlowSetupRate == nil {
		return NokiaTypesApplicationAssurance_PolicerFlowRate_Enum_max
	}
	return t.PeakFlowSetupRate
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesApplicationAssurance_PolicerAction_permit_deny
	}
	if t.FlowSetupRateBurstSize == nil {
		var v int32 = 0
		t.FlowSetupRateBurstSize = &v
	}
	if t.PeakFlowSetupRate == nil {
		t.PeakFlowSetupRate = NokiaTypesApplicationAssurance_PolicerFlowRate_Enum_max
	}
	t.AdaptationRule.PopulateDefaults()
	for _, e := range t.TimeOfDayOverride {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerName == nil {
		return nil, fmt.Errorf("nil value for key PolicerName")
	}

	return map[string]interface{}{
		"policer-name": *t.PolicerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/flow-setup-rate-policer/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule struct {
	PeakFlowSetupRate E_NokiaTypesQos_AdaptationRule `path:"peak-flow-setup-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule) IsYANGGoStruct() {
}

// GetPeakFlowSetupRate retrieves the value of the leaf PeakFlowSetupRate from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeakFlowSetupRate is set, it can
// safely use t.GetPeakFlowSetupRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeakFlowSetupRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule) GetPeakFlowSetupRate() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.PeakFlowSetupRate == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.PeakFlowSetupRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PeakFlowSetupRate == 0 {
		t.PeakFlowSetupRate = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/flow-setup-rate-policer/time-of-day-override YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride struct {
	AdminState             E_NokiaTypesSros_AdminState                                                                                                        `path:"admin-state" module:"nokia-conf"`
	Description            *string                                                                                                                            `path:"description" module:"nokia-conf"`
	FlowSetupRateBurstSize *int32                                                                                                                             `path:"flow-setup-rate-burst-size" module:"nokia-conf"`
	PeakFlowSetupRate      NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_PeakFlowSetupRate_Union `path:"peak-flow-setup-rate" module:"nokia-conf"`
	TimeRange              *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange              `path:"time-range" module:"nokia-conf"`
	TodOverrideId          NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TodOverrideId_Union     `path:"tod-override-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) IsYANGGoStruct() {
}

// GetOrCreateTimeRange retrieves the value of the TimeRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) GetOrCreateTimeRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange {
	if t.TimeRange != nil {
		return t.TimeRange
	}
	t.TimeRange = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange{}
	return t.TimeRange
}

// GetTimeRange returns the value of the TimeRange struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride. If the receiver or the field TimeRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) GetTimeRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange {
	if t != nil && t.TimeRange != nil {
		return t.TimeRange
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFlowSetupRateBurstSize retrieves the value of the leaf FlowSetupRateBurstSize from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowSetupRateBurstSize is set, it can
// safely use t.GetFlowSetupRateBurstSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowSetupRateBurstSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) GetFlowSetupRateBurstSize() int32 {
	if t == nil || t.FlowSetupRateBurstSize == nil {
		return 0
	}
	return *t.FlowSetupRateBurstSize
}

// GetPeakFlowSetupRate retrieves the value of the leaf PeakFlowSetupRate from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeakFlowSetupRate is set, it can
// safely use t.GetPeakFlowSetupRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeakFlowSetupRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) GetPeakFlowSetupRate() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_PeakFlowSetupRate_Union {
	if t == nil || t.PeakFlowSetupRate == nil {
		return NokiaTypesApplicationAssurance_PolicerFlowRate_Enum_max
	}
	return t.PeakFlowSetupRate
}

// GetTodOverrideId retrieves the value of the leaf TodOverrideId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TodOverrideId is set, it can
// safely use t.GetTodOverrideId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TodOverrideId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) GetTodOverrideId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TodOverrideId_Union {
	if t == nil || t.TodOverrideId == nil {
		return nil
	}
	return t.TodOverrideId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.FlowSetupRateBurstSize == nil {
		var v int32 = 0
		t.FlowSetupRateBurstSize = &v
	}
	if t.PeakFlowSetupRate == nil {
		t.PeakFlowSetupRate = NokiaTypesApplicationAssurance_PolicerFlowRate_Enum_max
	}
	t.TimeRange.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"tod-override-id": t.TodOverrideId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/flow-setup-rate-policer/time-of-day-override/time-range YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange struct {
	Daily  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily  `path:"daily" module:"nokia-conf" yangPresence:"true"`
	Weekly *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly `path:"weekly" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange) IsYANGGoStruct() {
}

// GetOrCreateDaily retrieves the value of the Daily field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange) GetOrCreateDaily() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily {
	if t.Daily != nil {
		return t.Daily
	}
	t.Daily = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily{}
	return t.Daily
}

// GetOrCreateWeekly retrieves the value of the Weekly field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange) GetOrCreateWeekly() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly {
	if t.Weekly != nil {
		return t.Weekly
	}
	t.Weekly = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly{}
	return t.Weekly
}

// GetDaily returns the value of the Daily struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange. If the receiver or the field Daily is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange) GetDaily() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily {
	if t != nil && t.Daily != nil {
		return t.Daily
	}
	return nil
}

// GetWeekly returns the value of the Weekly struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange. If the receiver or the field Weekly is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange) GetWeekly() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly {
	if t != nil && t.Weekly != nil {
		return t.Weekly
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Daily.PopulateDefaults()
	t.Weekly.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/flow-setup-rate-policer/time-of-day-override/time-range/daily YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily struct {
	AllDays YANGEmpty                                                                                                                         `path:"all-days" module:"nokia-conf"`
	End     *string                                                                                                                           `path:"end" module:"nokia-conf"`
	On      []E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily_On `path:"on" module:"nokia-conf"`
	Start   *string                                                                                                                           `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily) IsYANGGoStruct() {
}

// GetAllDays retrieves the value of the leaf AllDays from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllDays is set, it can
// safely use t.GetAllDays() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllDays == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily) GetAllDays() YANGEmpty {
	if t == nil || t.AllDays == false {
		return false
	}
	return t.AllDays
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetOn retrieves the value of the leaf On from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if On is set, it can
// safely use t.GetOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.On == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily) GetOn() []E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily_On {
	if t == nil || t.On == nil {
		return nil
	}
	return t.On
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/flow-setup-rate-policer/time-of-day-override/time-range/weekly YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly struct {
	End   *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End   `path:"end" module:"nokia-conf" yangPresence:"true"`
	Start *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start `path:"start" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly) IsYANGGoStruct() {
}

// GetOrCreateEnd retrieves the value of the End field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly) GetOrCreateEnd() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End {
	if t.End != nil {
		return t.End
	}
	t.End = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End{}
	return t.End
}

// GetOrCreateStart retrieves the value of the Start field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly) GetOrCreateStart() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start {
	if t.Start != nil {
		return t.Start
	}
	t.Start = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start{}
	return t.Start
}

// GetEnd returns the value of the End struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly. If the receiver or the field End is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly) GetEnd() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End {
	if t != nil && t.End != nil {
		return t.End
	}
	return nil
}

// GetStart returns the value of the Start struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly. If the receiver or the field Start is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly) GetStart() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start {
	if t != nil && t.Start != nil {
		return t.Start
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.End.PopulateDefaults()
	t.Start.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/flow-setup-rate-policer/time-of-day-override/time-range/weekly/end YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End struct {
	Day  E_NokiaTypesApplicationAssurance_DayOfWeek `path:"day" module:"nokia-conf"`
	Time *string                                    `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End) IsYANGGoStruct() {
}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End) GetDay() E_NokiaTypesApplicationAssurance_DayOfWeek {
	if t == nil || t.Day == 0 {
		return 0
	}
	return t.Day
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End) GetTime() string {
	if t == nil || t.Time == nil {
		return ""
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/flow-setup-rate-policer/time-of-day-override/time-range/weekly/start YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start struct {
	Day  E_NokiaTypesApplicationAssurance_DayOfWeek `path:"day" module:"nokia-conf"`
	Time *string                                    `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start) IsYANGGoStruct() {
}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start) GetDay() E_NokiaTypesApplicationAssurance_DayOfWeek {
	if t == nil || t.Day == 0 {
		return 0
	}
	return t.Day
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start) GetTime() string {
	if t == nil || t.Time == nil {
		return ""
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/single-bucket-bandwidth-policer YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer struct {
	Action                    E_NokiaTypesApplicationAssurance_PolicerAction                                                                                                                                                                                                                 `path:"action" module:"nokia-conf"`
	AdaptationRule            *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule                                                                                                                                               `path:"adaptation-rule" module:"nokia-conf"`
	CongestionOverride        *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride                                                                                                                                           `path:"congestion-override" module:"nokia-conf"`
	CongestionOverrideStage_2 *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2                                                                                                                                    `path:"congestion-override-stage-2" module:"nokia-conf"`
	Description               *string                                                                                                                                                                                                                                                        `path:"description" module:"nokia-conf"`
	Granularity               E_NokiaTypesApplicationAssurance_PolicerGranularity                                                                                                                                                                                                            `path:"granularity" module:"nokia-conf"`
	Mbs                       *int32                                                                                                                                                                                                                                                         `path:"mbs" module:"nokia-conf"`
	Pir                       NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_Pir_Union                                                                                                                                                     `path:"pir" module:"nokia-conf"`
	PolicerName               *string                                                                                                                                                                                                                                                        `path:"policer-name" module:"nokia-conf"`
	TimeOfDayOverride         map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TodOverrideId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride `path:"time-of-day-override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) IsYANGGoStruct() {
}

// NewTimeOfDayOverride creates a new entry in the TimeOfDayOverride list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) NewTimeOfDayOverride(TodOverrideId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TodOverrideId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TimeOfDayOverride == nil {
		t.TimeOfDayOverride = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TodOverrideId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride)
	}

	key := TodOverrideId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TimeOfDayOverride[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TimeOfDayOverride", key)
	}

	t.TimeOfDayOverride[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride{
		TodOverrideId: TodOverrideId,
	}

	return t.TimeOfDayOverride[key], nil
}

// RenameTimeOfDayOverride renames an entry in the list TimeOfDayOverride within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) RenameTimeOfDayOverride(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TodOverrideId_Union) error {
	if _, ok := t.TimeOfDayOverride[newK]; ok {
		return fmt.Errorf("key %v already exists in TimeOfDayOverride", newK)
	}

	e, ok := t.TimeOfDayOverride[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TimeOfDayOverride", oldK)
	}
	e.TodOverrideId = newK

	t.TimeOfDayOverride[newK] = e
	delete(t.TimeOfDayOverride, oldK)
	return nil
}

// GetOrCreateTimeOfDayOverride retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetOrCreateTimeOfDayOverride(TodOverrideId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TodOverrideId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride {

	key := TodOverrideId

	if v, ok := t.TimeOfDayOverride[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTimeOfDayOverride(TodOverrideId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTimeOfDayOverride got unexpected error: %v", err))
	}
	return v
}

// GetTimeOfDayOverride retrieves the value with the specified key from
// the TimeOfDayOverride map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetTimeOfDayOverride(TodOverrideId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TodOverrideId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride {

	if t == nil {
		return nil
	}

	key := TodOverrideId

	if lm, ok := t.TimeOfDayOverride[key]; ok {
		return lm
	}
	return nil
}

// DeleteTimeOfDayOverride deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) DeleteTimeOfDayOverride(TodOverrideId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TodOverrideId_Union) {
	key := TodOverrideId

	delete(t.TimeOfDayOverride, key)
}

// AppendTimeOfDayOverride appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride struct to the
// list TimeOfDayOverride of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) AppendTimeOfDayOverride(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) error {
	key := v.TodOverrideId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TimeOfDayOverride == nil {
		t.TimeOfDayOverride = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TodOverrideId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride)
	}

	if _, ok := t.TimeOfDayOverride[key]; ok {
		return fmt.Errorf("duplicate key for list TimeOfDayOverride %v", key)
	}

	t.TimeOfDayOverride[key] = v
	return nil
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateCongestionOverride retrieves the value of the CongestionOverride field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetOrCreateCongestionOverride() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride {
	if t.CongestionOverride != nil {
		return t.CongestionOverride
	}
	t.CongestionOverride = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride{}
	return t.CongestionOverride
}

// GetOrCreateCongestionOverrideStage_2 retrieves the value of the CongestionOverrideStage_2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetOrCreateCongestionOverrideStage_2() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2 {
	if t.CongestionOverrideStage_2 != nil {
		return t.CongestionOverrideStage_2
	}
	t.CongestionOverrideStage_2 = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2{}
	return t.CongestionOverrideStage_2
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetCongestionOverride returns the value of the CongestionOverride struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer. If the receiver or the field CongestionOverride is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetCongestionOverride() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride {
	if t != nil && t.CongestionOverride != nil {
		return t.CongestionOverride
	}
	return nil
}

// GetCongestionOverrideStage_2 returns the value of the CongestionOverrideStage_2 struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer. If the receiver or the field CongestionOverrideStage_2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetCongestionOverrideStage_2() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2 {
	if t != nil && t.CongestionOverrideStage_2 != nil {
		return t.CongestionOverrideStage_2
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetAction() E_NokiaTypesApplicationAssurance_PolicerAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesApplicationAssurance_PolicerAction_permit_deny
	}
	return t.Action
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGranularity retrieves the value of the leaf Granularity from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Granularity is set, it can
// safely use t.GetGranularity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Granularity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetGranularity() E_NokiaTypesApplicationAssurance_PolicerGranularity {
	if t == nil || t.Granularity == 0 {
		return 0
	}
	return t.Granularity
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetPir() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	return t.Pir
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesApplicationAssurance_PolicerAction_permit_deny
	}
	if t.Mbs == nil {
		var v int32 = 0
		t.Mbs = &v
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	t.AdaptationRule.PopulateDefaults()
	t.CongestionOverride.PopulateDefaults()
	t.CongestionOverrideStage_2.PopulateDefaults()
	for _, e := range t.TimeOfDayOverride {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerName == nil {
		return nil, fmt.Errorf("nil value for key PolicerName")
	}

	return map[string]interface{}{
		"policer-name": *t.PolicerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/single-bucket-bandwidth-policer/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule struct {
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule) IsYANGGoStruct() {
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/single-bucket-bandwidth-policer/congestion-override YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride struct {
	Mbs *int32                                                                                                                        `path:"mbs" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride) IsYANGGoStruct() {
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride) GetPir() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mbs == nil {
		var v int32 = 0
		t.Mbs = &v
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2 represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/single-bucket-bandwidth-policer/congestion-override-stage-2 YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2 struct {
	Mbs *int32                                                                                                                               `path:"mbs" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2) IsYANGGoStruct() {
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2) GetPir() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mbs == nil {
		var v int32 = 0
		t.Mbs = &v
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/single-bucket-bandwidth-policer/time-of-day-override YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride struct {
	AdminState    E_NokiaTypesSros_AdminState                                                                                                            `path:"admin-state" module:"nokia-conf"`
	Description   *string                                                                                                                                `path:"description" module:"nokia-conf"`
	Mbs           *int32                                                                                                                                 `path:"mbs" module:"nokia-conf"`
	Pir           NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_Pir_Union           `path:"pir" module:"nokia-conf"`
	TimeRange     *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange          `path:"time-range" module:"nokia-conf"`
	TodOverrideId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TodOverrideId_Union `path:"tod-override-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) IsYANGGoStruct() {
}

// GetOrCreateTimeRange retrieves the value of the TimeRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) GetOrCreateTimeRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange {
	if t.TimeRange != nil {
		return t.TimeRange
	}
	t.TimeRange = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange{}
	return t.TimeRange
}

// GetTimeRange returns the value of the TimeRange struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride. If the receiver or the field TimeRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) GetTimeRange() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange {
	if t != nil && t.TimeRange != nil {
		return t.TimeRange
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) GetPir() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	return t.Pir
}

// GetTodOverrideId retrieves the value of the leaf TodOverrideId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TodOverrideId is set, it can
// safely use t.GetTodOverrideId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TodOverrideId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) GetTodOverrideId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TodOverrideId_Union {
	if t == nil || t.TodOverrideId == nil {
		return nil
	}
	return t.TodOverrideId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Mbs == nil {
		var v int32 = 0
		t.Mbs = &v
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	t.TimeRange.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"tod-override-id": t.TodOverrideId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/single-bucket-bandwidth-policer/time-of-day-override/time-range YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange struct {
	Daily  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily  `path:"daily" module:"nokia-conf" yangPresence:"true"`
	Weekly *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly `path:"weekly" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) IsYANGGoStruct() {
}

// GetOrCreateDaily retrieves the value of the Daily field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) GetOrCreateDaily() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily {
	if t.Daily != nil {
		return t.Daily
	}
	t.Daily = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily{}
	return t.Daily
}

// GetOrCreateWeekly retrieves the value of the Weekly field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) GetOrCreateWeekly() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly {
	if t.Weekly != nil {
		return t.Weekly
	}
	t.Weekly = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly{}
	return t.Weekly
}

// GetDaily returns the value of the Daily struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange. If the receiver or the field Daily is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) GetDaily() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily {
	if t != nil && t.Daily != nil {
		return t.Daily
	}
	return nil
}

// GetWeekly returns the value of the Weekly struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange. If the receiver or the field Weekly is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) GetWeekly() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly {
	if t != nil && t.Weekly != nil {
		return t.Weekly
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Daily.PopulateDefaults()
	t.Weekly.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/single-bucket-bandwidth-policer/time-of-day-override/time-range/daily YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily struct {
	AllDays YANGEmpty                                                                                                                                 `path:"all-days" module:"nokia-conf"`
	End     *string                                                                                                                                   `path:"end" module:"nokia-conf"`
	On      []E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily_On `path:"on" module:"nokia-conf"`
	Start   *string                                                                                                                                   `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) IsYANGGoStruct() {
}

// GetAllDays retrieves the value of the leaf AllDays from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllDays is set, it can
// safely use t.GetAllDays() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllDays == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) GetAllDays() YANGEmpty {
	if t == nil || t.AllDays == false {
		return false
	}
	return t.AllDays
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetOn retrieves the value of the leaf On from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if On is set, it can
// safely use t.GetOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.On == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) GetOn() []E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily_On {
	if t == nil || t.On == nil {
		return nil
	}
	return t.On
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/single-bucket-bandwidth-policer/time-of-day-override/time-range/weekly YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly struct {
	End   *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End   `path:"end" module:"nokia-conf" yangPresence:"true"`
	Start *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start `path:"start" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) IsYANGGoStruct() {
}

// GetOrCreateEnd retrieves the value of the End field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) GetOrCreateEnd() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End {
	if t.End != nil {
		return t.End
	}
	t.End = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End{}
	return t.End
}

// GetOrCreateStart retrieves the value of the Start field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) GetOrCreateStart() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start {
	if t.Start != nil {
		return t.Start
	}
	t.Start = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start{}
	return t.Start
}

// GetEnd returns the value of the End struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly. If the receiver or the field End is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) GetEnd() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End {
	if t != nil && t.End != nil {
		return t.End
	}
	return nil
}

// GetStart returns the value of the Start struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly. If the receiver or the field Start is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) GetStart() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start {
	if t != nil && t.Start != nil {
		return t.Start
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.End.PopulateDefaults()
	t.Start.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/single-bucket-bandwidth-policer/time-of-day-override/time-range/weekly/end YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End struct {
	Day  E_NokiaTypesApplicationAssurance_DayOfWeek `path:"day" module:"nokia-conf"`
	Time *string                                    `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) IsYANGGoStruct() {
}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) GetDay() E_NokiaTypesApplicationAssurance_DayOfWeek {
	if t == nil || t.Day == 0 {
		return 0
	}
	return t.Day
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) GetTime() string {
	if t == nil || t.Time == nil {
		return ""
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start represents the /nokia-conf/configure/groups/group/application-assurance/group/policer/single-bucket-bandwidth-policer/time-of-day-override/time-range/weekly/start YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start struct {
	Day  E_NokiaTypesApplicationAssurance_DayOfWeek `path:"day" module:"nokia-conf"`
	Time *string                                    `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) IsYANGGoStruct() {
}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) GetDay() E_NokiaTypesApplicationAssurance_DayOfWeek {
	if t == nil || t.Day == 0 {
		return 0
	}
	return t.Day
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) GetTime() string {
	if t == nil || t.Time == nil {
		return ""
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer represents the /nokia-conf/configure/groups/group/application-assurance/group/tcp-optimizer YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer struct {
	DackTimeout         *uint32                                                                                           `path:"dack-timeout" module:"nokia-conf"`
	Description         *string                                                                                           `path:"description" module:"nokia-conf"`
	InitialCwnd         *uint32                                                                                           `path:"initial-cwnd" module:"nokia-conf"`
	InitialSsThreshold  NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer_InitialSsThreshold_Union `path:"initial-ss-threshold" module:"nokia-conf"`
	NetworkRttThreshold *uint32                                                                                           `path:"network-rtt-threshold" module:"nokia-conf"`
	TcpOptimizerName    *string                                                                                           `path:"tcp-optimizer-name" module:"nokia-conf"`
	TcpStack            E_NokiaTypesApplicationAssurance_TcpOptimizerStack                                                `path:"tcp-stack" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer) IsYANGGoStruct() {}

// GetDackTimeout retrieves the value of the leaf DackTimeout from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DackTimeout is set, it can
// safely use t.GetDackTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DackTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer) GetDackTimeout() uint32 {
	if t == nil || t.DackTimeout == nil {
		return 0
	}
	return *t.DackTimeout
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInitialCwnd retrieves the value of the leaf InitialCwnd from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialCwnd is set, it can
// safely use t.GetInitialCwnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialCwnd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer) GetInitialCwnd() uint32 {
	if t == nil || t.InitialCwnd == nil {
		return 8
	}
	return *t.InitialCwnd
}

// GetInitialSsThreshold retrieves the value of the leaf InitialSsThreshold from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialSsThreshold is set, it can
// safely use t.GetInitialSsThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialSsThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer) GetInitialSsThreshold() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer_InitialSsThreshold_Union {
	if t == nil || t.InitialSsThreshold == nil {
		return UnionUint32(1000000)
	}
	return t.InitialSsThreshold
}

// GetNetworkRttThreshold retrieves the value of the leaf NetworkRttThreshold from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkRttThreshold is set, it can
// safely use t.GetNetworkRttThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkRttThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer) GetNetworkRttThreshold() uint32 {
	if t == nil || t.NetworkRttThreshold == nil {
		return 0
	}
	return *t.NetworkRttThreshold
}

// GetTcpOptimizerName retrieves the value of the leaf TcpOptimizerName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpOptimizerName is set, it can
// safely use t.GetTcpOptimizerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpOptimizerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer) GetTcpOptimizerName() string {
	if t == nil || t.TcpOptimizerName == nil {
		return ""
	}
	return *t.TcpOptimizerName
}

// GetTcpStack retrieves the value of the leaf TcpStack from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpStack is set, it can
// safely use t.GetTcpStack() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpStack == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer) GetTcpStack() E_NokiaTypesApplicationAssurance_TcpOptimizerStack {
	if t == nil || t.TcpStack == 0 {
		return NokiaTypesApplicationAssurance_TcpOptimizerStack_westwood
	}
	return t.TcpStack
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialCwnd == nil {
		var v uint32 = 8
		t.InitialCwnd = &v
	}
	if t.InitialSsThreshold == nil {
		t.InitialSsThreshold = UnionUint32(1000000)
	}
	if t.TcpStack == 0 {
		t.TcpStack = NokiaTypesApplicationAssurance_TcpOptimizerStack_westwood
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TcpOptimizerName == nil {
		return nil, fmt.Errorf("nil value for key TcpOptimizerName")
	}

	return map[string]interface{}{
		"tcp-optimizer-name": *t.TcpOptimizerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_TcpOptimizer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter represents the /nokia-conf/configure/groups/group/application-assurance/group/url-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter struct {
	AdminState                     E_NokiaTypesSros_AdminState                                                                  `path:"admin-state" module:"nokia-conf"`
	ApplyFunctionSpecificBehaviour *bool                                                                                        `path:"apply-function-specific-behaviour" module:"nokia-conf"`
	DefaultAction                  *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction         `path:"default-action" module:"nokia-conf"`
	Description                    *string                                                                                      `path:"description" module:"nokia-conf"`
	HttpRedirect                   *string                                                                                      `path:"http-redirect" module:"nokia-conf"`
	HttpRequestFiltering           E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_HttpRequestFiltering `path:"http-request-filtering" module:"nokia-conf"`
	Icap                           *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap                  `path:"icap" module:"nokia-conf"`
	LocalFiltering                 *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering        `path:"local-filtering" module:"nokia-conf"`
	UrlFilterName                  *string                                                                                      `path:"url-filter-name" module:"nokia-conf"`
	WebService                     *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService            `path:"web-service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) IsYANGGoStruct() {}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) GetOrCreateDefaultAction() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction{}
	return t.DefaultAction
}

// GetOrCreateIcap retrieves the value of the Icap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) GetOrCreateIcap() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap {
	if t.Icap != nil {
		return t.Icap
	}
	t.Icap = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap{}
	return t.Icap
}

// GetOrCreateLocalFiltering retrieves the value of the LocalFiltering field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) GetOrCreateLocalFiltering() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering {
	if t.LocalFiltering != nil {
		return t.LocalFiltering
	}
	t.LocalFiltering = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering{}
	return t.LocalFiltering
}

// GetOrCreateWebService retrieves the value of the WebService field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) GetOrCreateWebService() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService {
	if t.WebService != nil {
		return t.WebService
	}
	t.WebService = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService{}
	return t.WebService
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) GetDefaultAction() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetIcap returns the value of the Icap struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter. If the receiver or the field Icap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) GetIcap() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap {
	if t != nil && t.Icap != nil {
		return t.Icap
	}
	return nil
}

// GetLocalFiltering returns the value of the LocalFiltering struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter. If the receiver or the field LocalFiltering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) GetLocalFiltering() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering {
	if t != nil && t.LocalFiltering != nil {
		return t.LocalFiltering
	}
	return nil
}

// GetWebService returns the value of the WebService struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter. If the receiver or the field WebService is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) GetWebService() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService {
	if t != nil && t.WebService != nil {
		return t.WebService
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyFunctionSpecificBehaviour retrieves the value of the leaf ApplyFunctionSpecificBehaviour from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyFunctionSpecificBehaviour is set, it can
// safely use t.GetApplyFunctionSpecificBehaviour() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyFunctionSpecificBehaviour == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) GetApplyFunctionSpecificBehaviour() bool {
	if t == nil || t.ApplyFunctionSpecificBehaviour == nil {
		return false
	}
	return *t.ApplyFunctionSpecificBehaviour
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHttpRedirect retrieves the value of the leaf HttpRedirect from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpRedirect is set, it can
// safely use t.GetHttpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) GetHttpRedirect() string {
	if t == nil || t.HttpRedirect == nil {
		return ""
	}
	return *t.HttpRedirect
}

// GetHttpRequestFiltering retrieves the value of the leaf HttpRequestFiltering from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpRequestFiltering is set, it can
// safely use t.GetHttpRequestFiltering() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpRequestFiltering == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) GetHttpRequestFiltering() E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_HttpRequestFiltering {
	if t == nil || t.HttpRequestFiltering == 0 {
		return NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_HttpRequestFiltering_all
	}
	return t.HttpRequestFiltering
}

// GetUrlFilterName retrieves the value of the leaf UrlFilterName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UrlFilterName is set, it can
// safely use t.GetUrlFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UrlFilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) GetUrlFilterName() string {
	if t == nil || t.UrlFilterName == nil {
		return ""
	}
	return *t.UrlFilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ApplyFunctionSpecificBehaviour == nil {
		var v bool = false
		t.ApplyFunctionSpecificBehaviour = &v
	}
	if t.HttpRequestFiltering == 0 {
		t.HttpRequestFiltering = NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_HttpRequestFiltering_all
	}
	t.DefaultAction.PopulateDefaults()
	t.Icap.PopulateDefaults()
	t.LocalFiltering.PopulateDefaults()
	t.WebService.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.UrlFilterName == nil {
		return nil, fmt.Errorf("nil value for key UrlFilterName")
	}

	return map[string]interface{}{
		"url-filter-name": *t.UrlFilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction represents the /nokia-conf/configure/groups/group/application-assurance/group/url-filter/default-action YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction struct {
	Allow             YANGEmpty `path:"allow" module:"nokia-conf"`
	BlockAll          YANGEmpty `path:"block-all" module:"nokia-conf"`
	BlockHttpRedirect *string   `path:"block-http-redirect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction) IsYANGGoStruct() {
}

// GetAllow retrieves the value of the leaf Allow from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Allow is set, it can
// safely use t.GetAllow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Allow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction) GetAllow() YANGEmpty {
	if t == nil || t.Allow == false {
		return false
	}
	return t.Allow
}

// GetBlockAll retrieves the value of the leaf BlockAll from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockAll is set, it can
// safely use t.GetBlockAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockAll == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction) GetBlockAll() YANGEmpty {
	if t == nil || t.BlockAll == false {
		return false
	}
	return t.BlockAll
}

// GetBlockHttpRedirect retrieves the value of the leaf BlockHttpRedirect from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockHttpRedirect is set, it can
// safely use t.GetBlockHttpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockHttpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction) GetBlockHttpRedirect() string {
	if t == nil || t.BlockHttpRedirect == nil {
		return ""
	}
	return *t.BlockHttpRedirect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap represents the /nokia-conf/configure/groups/group/application-assurance/group/url-filter/icap YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap struct {
	CustomXHeader *string                                                                                                                                                                      `path:"custom-x-header" module:"nokia-conf"`
	DefaultAction *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction                                                                                    `path:"default-action" module:"nokia-conf"`
	HttpRedirect  *string                                                                                                                                                                      `path:"http-redirect" module:"nokia-conf"`
	Server        map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server `path:"server" module:"nokia-conf"`
	VlanId        *int32                                                                                                                                                                       `path:"vlan-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key represents the key for list Server of element /nokia-conf/configure/groups/group/application-assurance/group/url-filter/icap.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key struct {
	IpAddress string                                                                                       `path:"ip-address"`
	Port      NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server_Port_Union `path:"port"`
}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap) NewServer(IpAddress string, Port NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server_Port_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server)
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server{
		IpAddress: &IpAddress,
		Port:      Port,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap) RenameServer(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.IpAddress = &newK.IpAddress
	e.Port = newK.Port

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap) GetOrCreateServer(IpAddress string, Port NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server_Port_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server {

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(IpAddress, Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap) GetServer(IpAddress string, Port NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server_Port_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap) DeleteServer(IpAddress string, Port NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server_Port_Union) {
	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server struct to the
// list Server of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap) AppendServer(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key for IpAddress")
	}

	key := NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key{
		IpAddress: *v.IpAddress,
		Port:      v.Port,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap) GetOrCreateDefaultAction() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction{}
	return t.DefaultAction
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap) GetDefaultAction() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetCustomXHeader retrieves the value of the leaf CustomXHeader from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CustomXHeader is set, it can
// safely use t.GetCustomXHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CustomXHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap) GetCustomXHeader() string {
	if t == nil || t.CustomXHeader == nil {
		return ""
	}
	return *t.CustomXHeader
}

// GetHttpRedirect retrieves the value of the leaf HttpRedirect from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpRedirect is set, it can
// safely use t.GetHttpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap) GetHttpRedirect() string {
	if t == nil || t.HttpRedirect == nil {
		return ""
	}
	return *t.HttpRedirect
}

// GetVlanId retrieves the value of the leaf VlanId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap) GetVlanId() int32 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefaultAction.PopulateDefaults()
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction represents the /nokia-conf/configure/groups/group/application-assurance/group/url-filter/icap/default-action YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction struct {
	Allow             YANGEmpty `path:"allow" module:"nokia-conf"`
	BlockAll          YANGEmpty `path:"block-all" module:"nokia-conf"`
	BlockHttpRedirect *string   `path:"block-http-redirect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction) IsYANGGoStruct() {
}

// GetAllow retrieves the value of the leaf Allow from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Allow is set, it can
// safely use t.GetAllow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Allow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction) GetAllow() YANGEmpty {
	if t == nil || t.Allow == false {
		return false
	}
	return t.Allow
}

// GetBlockAll retrieves the value of the leaf BlockAll from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockAll is set, it can
// safely use t.GetBlockAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockAll == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction) GetBlockAll() YANGEmpty {
	if t == nil || t.BlockAll == false {
		return false
	}
	return t.BlockAll
}

// GetBlockHttpRedirect retrieves the value of the leaf BlockHttpRedirect from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockHttpRedirect is set, it can
// safely use t.GetBlockHttpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockHttpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction) GetBlockHttpRedirect() string {
	if t == nil || t.BlockHttpRedirect == nil {
		return ""
	}
	return *t.BlockHttpRedirect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server represents the /nokia-conf/configure/groups/group/application-assurance/group/url-filter/icap/server YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server struct {
	AdminState  E_NokiaTypesSros_AdminState                                                                  `path:"admin-state" module:"nokia-conf"`
	Description *string                                                                                      `path:"description" module:"nokia-conf"`
	IpAddress   *string                                                                                      `path:"ip-address" module:"nokia-conf"`
	Port        NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server_Port_Union `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server) GetPort() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server_Port_Union {
	if t == nil || t.Port == nil {
		return nil
	}
	return t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
		"port":       t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_Icap_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering represents the /nokia-conf/configure/groups/group/application-assurance/group/url-filter/local-filtering YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering struct {
	AllowList *string                                                                                                   `path:"allow-list" module:"nokia-conf"`
	DenyList  map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList `path:"deny-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering) IsYANGGoStruct() {
}

// NewDenyList creates a new entry in the DenyList list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering) NewDenyList(UrlListName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DenyList == nil {
		t.DenyList = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList)
	}

	key := UrlListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DenyList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DenyList", key)
	}

	t.DenyList[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList{
		UrlListName: &UrlListName,
	}

	return t.DenyList[key], nil
}

// RenameDenyList renames an entry in the list DenyList within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering) RenameDenyList(oldK, newK string) error {
	if _, ok := t.DenyList[newK]; ok {
		return fmt.Errorf("key %v already exists in DenyList", newK)
	}

	e, ok := t.DenyList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DenyList", oldK)
	}
	e.UrlListName = &newK

	t.DenyList[newK] = e
	delete(t.DenyList, oldK)
	return nil
}

// GetOrCreateDenyList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering) GetOrCreateDenyList(UrlListName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList {

	key := UrlListName

	if v, ok := t.DenyList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDenyList(UrlListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDenyList got unexpected error: %v", err))
	}
	return v
}

// GetDenyList retrieves the value with the specified key from
// the DenyList map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering) GetDenyList(UrlListName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList {

	if t == nil {
		return nil
	}

	key := UrlListName

	if lm, ok := t.DenyList[key]; ok {
		return lm
	}
	return nil
}

// DeleteDenyList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering) DeleteDenyList(UrlListName string) {
	key := UrlListName

	delete(t.DenyList, key)
}

// AppendDenyList appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList struct to the
// list DenyList of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering) AppendDenyList(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) error {
	if v.UrlListName == nil {
		return fmt.Errorf("invalid nil key received for UrlListName")
	}

	key := *v.UrlListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DenyList == nil {
		t.DenyList = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList)
	}

	if _, ok := t.DenyList[key]; ok {
		return fmt.Errorf("duplicate key for list DenyList %v", key)
	}

	t.DenyList[key] = v
	return nil
}

// GetAllowList retrieves the value of the leaf AllowList from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowList is set, it can
// safely use t.GetAllowList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering) GetAllowList() string {
	if t == nil || t.AllowList == nil {
		return ""
	}
	return *t.AllowList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.DenyList {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList represents the /nokia-conf/configure/groups/group/application-assurance/group/url-filter/local-filtering/deny-list YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList struct {
	DefaultAction *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction `path:"default-action" module:"nokia-conf"`
	HttpRedirect  *string                                                                                                      `path:"http-redirect" module:"nokia-conf"`
	UrlListName   *string                                                                                                      `path:"url-list-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) IsYANGGoStruct() {
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) GetOrCreateDefaultAction() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction{}
	return t.DefaultAction
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) GetDefaultAction() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetHttpRedirect retrieves the value of the leaf HttpRedirect from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpRedirect is set, it can
// safely use t.GetHttpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) GetHttpRedirect() string {
	if t == nil || t.HttpRedirect == nil {
		return ""
	}
	return *t.HttpRedirect
}

// GetUrlListName retrieves the value of the leaf UrlListName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UrlListName is set, it can
// safely use t.GetUrlListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UrlListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) GetUrlListName() string {
	if t == nil || t.UrlListName == nil {
		return ""
	}
	return *t.UrlListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefaultAction.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.UrlListName == nil {
		return nil, fmt.Errorf("nil value for key UrlListName")
	}

	return map[string]interface{}{
		"url-list-name": *t.UrlListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction represents the /nokia-conf/configure/groups/group/application-assurance/group/url-filter/local-filtering/deny-list/default-action YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction struct {
	Allow             YANGEmpty `path:"allow" module:"nokia-conf"`
	BlockAll          YANGEmpty `path:"block-all" module:"nokia-conf"`
	BlockHttpRedirect *string   `path:"block-http-redirect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction) IsYANGGoStruct() {
}

// GetAllow retrieves the value of the leaf Allow from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Allow is set, it can
// safely use t.GetAllow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Allow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction) GetAllow() YANGEmpty {
	if t == nil || t.Allow == false {
		return false
	}
	return t.Allow
}

// GetBlockAll retrieves the value of the leaf BlockAll from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockAll is set, it can
// safely use t.GetBlockAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockAll == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction) GetBlockAll() YANGEmpty {
	if t == nil || t.BlockAll == false {
		return false
	}
	return t.BlockAll
}

// GetBlockHttpRedirect retrieves the value of the leaf BlockHttpRedirect from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockHttpRedirect is set, it can
// safely use t.GetBlockHttpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockHttpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction) GetBlockHttpRedirect() string {
	if t == nil || t.BlockHttpRedirect == nil {
		return ""
	}
	return *t.BlockHttpRedirect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService represents the /nokia-conf/configure/groups/group/application-assurance/group/url-filter/web-service YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService struct {
	CategorySet             *uint32                                                                                                   `path:"category-set" module:"nokia-conf"`
	ClassificationOverrides *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides `path:"classification-overrides" module:"nokia-conf"`
	Classifier              E_NokiaTypesApplicationAssurance_WebServClassifierId                                                      `path:"classifier" module:"nokia-conf"`
	DefaultAction           *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction           `path:"default-action" module:"nokia-conf"`
	DefaultProfile          *string                                                                                                   `path:"default-profile" module:"nokia-conf"`
	DnsServer               *string                                                                                                   `path:"dns-server" module:"nokia-conf"`
	Fqdn                    *string                                                                                                   `path:"fqdn" module:"nokia-conf"`
	HttpRedirect            *string                                                                                                   `path:"http-redirect" module:"nokia-conf"`
	Profile                 map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile      `path:"profile" module:"nokia-conf"`
	VlanId                  *int32                                                                                                    `path:"vlan-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) IsYANGGoStruct() {
}

// NewProfile creates a new entry in the Profile list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) NewProfile(ProfileName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Profile == nil {
		t.Profile = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile)
	}

	key := ProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Profile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Profile", key)
	}

	t.Profile[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile{
		ProfileName: &ProfileName,
	}

	return t.Profile[key], nil
}

// RenameProfile renames an entry in the list Profile within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) RenameProfile(oldK, newK string) error {
	if _, ok := t.Profile[newK]; ok {
		return fmt.Errorf("key %v already exists in Profile", newK)
	}

	e, ok := t.Profile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Profile", oldK)
	}
	e.ProfileName = &newK

	t.Profile[newK] = e
	delete(t.Profile, oldK)
	return nil
}

// GetOrCreateProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) GetOrCreateProfile(ProfileName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile {

	key := ProfileName

	if v, ok := t.Profile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProfile(ProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProfile got unexpected error: %v", err))
	}
	return v
}

// GetProfile retrieves the value with the specified key from
// the Profile map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) GetProfile(ProfileName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile {

	if t == nil {
		return nil
	}

	key := ProfileName

	if lm, ok := t.Profile[key]; ok {
		return lm
	}
	return nil
}

// DeleteProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) DeleteProfile(ProfileName string) {
	key := ProfileName

	delete(t.Profile, key)
}

// AppendProfile appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile struct to the
// list Profile of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) AppendProfile(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile) error {
	if v.ProfileName == nil {
		return fmt.Errorf("invalid nil key received for ProfileName")
	}

	key := *v.ProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Profile == nil {
		t.Profile = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile)
	}

	if _, ok := t.Profile[key]; ok {
		return fmt.Errorf("duplicate key for list Profile %v", key)
	}

	t.Profile[key] = v
	return nil
}

// GetOrCreateClassificationOverrides retrieves the value of the ClassificationOverrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) GetOrCreateClassificationOverrides() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides {
	if t.ClassificationOverrides != nil {
		return t.ClassificationOverrides
	}
	t.ClassificationOverrides = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides{}
	return t.ClassificationOverrides
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) GetOrCreateDefaultAction() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction{}
	return t.DefaultAction
}

// GetClassificationOverrides returns the value of the ClassificationOverrides struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService. If the receiver or the field ClassificationOverrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) GetClassificationOverrides() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides {
	if t != nil && t.ClassificationOverrides != nil {
		return t.ClassificationOverrides
	}
	return nil
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) GetDefaultAction() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetCategorySet retrieves the value of the leaf CategorySet from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CategorySet is set, it can
// safely use t.GetCategorySet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CategorySet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) GetCategorySet() uint32 {
	if t == nil || t.CategorySet == nil {
		return 0
	}
	return *t.CategorySet
}

// GetClassifier retrieves the value of the leaf Classifier from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Classifier is set, it can
// safely use t.GetClassifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Classifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) GetClassifier() E_NokiaTypesApplicationAssurance_WebServClassifierId {
	if t == nil || t.Classifier == 0 {
		return 0
	}
	return t.Classifier
}

// GetDefaultProfile retrieves the value of the leaf DefaultProfile from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultProfile is set, it can
// safely use t.GetDefaultProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) GetDefaultProfile() string {
	if t == nil || t.DefaultProfile == nil {
		return ""
	}
	return *t.DefaultProfile
}

// GetDnsServer retrieves the value of the leaf DnsServer from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnsServer is set, it can
// safely use t.GetDnsServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnsServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) GetDnsServer() string {
	if t == nil || t.DnsServer == nil {
		return ""
	}
	return *t.DnsServer
}

// GetFqdn retrieves the value of the leaf Fqdn from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fqdn is set, it can
// safely use t.GetFqdn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fqdn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) GetFqdn() string {
	if t == nil || t.Fqdn == nil {
		return ""
	}
	return *t.Fqdn
}

// GetHttpRedirect retrieves the value of the leaf HttpRedirect from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpRedirect is set, it can
// safely use t.GetHttpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) GetHttpRedirect() string {
	if t == nil || t.HttpRedirect == nil {
		return ""
	}
	return *t.HttpRedirect
}

// GetVlanId retrieves the value of the leaf VlanId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) GetVlanId() int32 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ClassificationOverrides.PopulateDefaults()
	t.DefaultAction.PopulateDefaults()
	for _, e := range t.Profile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides represents the /nokia-conf/configure/groups/group/application-assurance/group/url-filter/web-service/classification-overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides struct {
	Entry map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) NewEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) GetEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) AppendEntry(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry represents the /nokia-conf/configure/groups/group/application-assurance/group/url-filter/web-service/classification-overrides/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry struct {
	CategoryName *string                                                                                                                      `path:"category-name" module:"nokia-conf"`
	EntryId      NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Expression   *string                                                                                                                      `path:"expression" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) IsYANGGoStruct() {
}

// GetCategoryName retrieves the value of the leaf CategoryName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CategoryName is set, it can
// safely use t.GetCategoryName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CategoryName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) GetCategoryName() string {
	if t == nil || t.CategoryName == nil {
		return ""
	}
	return *t.CategoryName
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction represents the /nokia-conf/configure/groups/group/application-assurance/group/url-filter/web-service/default-action YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction struct {
	Allow             YANGEmpty `path:"allow" module:"nokia-conf"`
	BlockAll          YANGEmpty `path:"block-all" module:"nokia-conf"`
	BlockHttpRedirect *string   `path:"block-http-redirect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction) IsYANGGoStruct() {
}

// GetAllow retrieves the value of the leaf Allow from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Allow is set, it can
// safely use t.GetAllow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Allow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction) GetAllow() YANGEmpty {
	if t == nil || t.Allow == false {
		return false
	}
	return t.Allow
}

// GetBlockAll retrieves the value of the leaf BlockAll from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockAll is set, it can
// safely use t.GetBlockAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockAll == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction) GetBlockAll() YANGEmpty {
	if t == nil || t.BlockAll == false {
		return false
	}
	return t.BlockAll
}

// GetBlockHttpRedirect retrieves the value of the leaf BlockHttpRedirect from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockHttpRedirect is set, it can
// safely use t.GetBlockHttpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockHttpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction) GetBlockHttpRedirect() string {
	if t == nil || t.BlockHttpRedirect == nil {
		return ""
	}
	return *t.BlockHttpRedirect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile represents the /nokia-conf/configure/groups/group/application-assurance/group/url-filter/web-service/profile YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile struct {
	Block       *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block `path:"block" module:"nokia-conf"`
	Description *string                                                                                         `path:"description" module:"nokia-conf"`
	ProfileName *string                                                                                         `path:"profile-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile) IsYANGGoStruct() {
}

// GetOrCreateBlock retrieves the value of the Block field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile) GetOrCreateBlock() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block {
	if t.Block != nil {
		return t.Block
	}
	t.Block = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block{}
	return t.Block
}

// GetBlock returns the value of the Block struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile. If the receiver or the field Block is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile) GetBlock() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block {
	if t != nil && t.Block != nil {
		return t.Block
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetProfileName retrieves the value of the leaf ProfileName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfileName is set, it can
// safely use t.GetProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile) GetProfileName() string {
	if t == nil || t.ProfileName == nil {
		return ""
	}
	return *t.ProfileName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Block.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ProfileName == nil {
		return nil, fmt.Errorf("nil value for key ProfileName")
	}

	return map[string]interface{}{
		"profile-name": *t.ProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block represents the /nokia-conf/configure/groups/group/application-assurance/group/url-filter/web-service/profile/block YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block struct {
	Category map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category `path:"category" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) IsYANGGoStruct() {
}

// NewCategory creates a new entry in the Category list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) NewCategory(CategoryName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Category == nil {
		t.Category = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category)
	}

	key := CategoryName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Category[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Category", key)
	}

	t.Category[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category{
		CategoryName: &CategoryName,
	}

	return t.Category[key], nil
}

// RenameCategory renames an entry in the list Category within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) RenameCategory(oldK, newK string) error {
	if _, ok := t.Category[newK]; ok {
		return fmt.Errorf("key %v already exists in Category", newK)
	}

	e, ok := t.Category[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Category", oldK)
	}
	e.CategoryName = &newK

	t.Category[newK] = e
	delete(t.Category, oldK)
	return nil
}

// GetOrCreateCategory retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) GetOrCreateCategory(CategoryName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category {

	key := CategoryName

	if v, ok := t.Category[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCategory(CategoryName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCategory got unexpected error: %v", err))
	}
	return v
}

// GetCategory retrieves the value with the specified key from
// the Category map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) GetCategory(CategoryName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category {

	if t == nil {
		return nil
	}

	key := CategoryName

	if lm, ok := t.Category[key]; ok {
		return lm
	}
	return nil
}

// DeleteCategory deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) DeleteCategory(CategoryName string) {
	key := CategoryName

	delete(t.Category, key)
}

// AppendCategory appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category struct to the
// list Category of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) AppendCategory(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category) error {
	if v.CategoryName == nil {
		return fmt.Errorf("invalid nil key received for CategoryName")
	}

	key := *v.CategoryName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Category == nil {
		t.Category = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category)
	}

	if _, ok := t.Category[key]; ok {
		return fmt.Errorf("duplicate key for list Category %v", key)
	}

	t.Category[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Category {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category represents the /nokia-conf/configure/groups/group/application-assurance/group/url-filter/web-service/profile/block/category YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category struct {
	CategoryName *string `path:"category-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category) IsYANGGoStruct() {
}

// GetCategoryName retrieves the value of the leaf CategoryName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CategoryName is set, it can
// safely use t.GetCategoryName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CategoryName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category) GetCategoryName() string {
	if t == nil || t.CategoryName == nil {
		return ""
	}
	return *t.CategoryName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CategoryName == nil {
		return nil, fmt.Errorf("nil value for key CategoryName")
	}

	return map[string]interface{}{
		"category-name": *t.CategoryName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList represents the /nokia-conf/configure/groups/group/application-assurance/group/url-list YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList struct {
	AdminState      E_NokiaTypesSros_AdminState                                                `path:"admin-state" module:"nokia-conf"`
	Description     *string                                                                    `path:"description" module:"nokia-conf"`
	File            *string                                                                    `path:"file" module:"nokia-conf"`
	HostExpressions *bool                                                                      `path:"host-expressions" module:"nokia-conf"`
	Key             *string                                                                    `path:"key" module:"nokia-conf"`
	Size            E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList_Size `path:"size" module:"nokia-conf"`
	UrlListName     *string                                                                    `path:"url-list-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFile retrieves the value of the leaf File from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if File is set, it can
// safely use t.GetFile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.File == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList) GetFile() string {
	if t == nil || t.File == nil {
		return ""
	}
	return *t.File
}

// GetHostExpressions retrieves the value of the leaf HostExpressions from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostExpressions is set, it can
// safely use t.GetHostExpressions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostExpressions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList) GetHostExpressions() bool {
	if t == nil || t.HostExpressions == nil {
		return false
	}
	return *t.HostExpressions
}

// GetKey retrieves the value of the leaf Key from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// GetSize retrieves the value of the leaf Size from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList) GetSize() E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList_Size {
	if t == nil || t.Size == 0 {
		return NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList_Size_standard
	}
	return t.Size
}

// GetUrlListName retrieves the value of the leaf UrlListName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UrlListName is set, it can
// safely use t.GetUrlListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UrlListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList) GetUrlListName() string {
	if t == nil || t.UrlListName == nil {
		return ""
	}
	return *t.UrlListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HostExpressions == nil {
		var v bool = false
		t.HostExpressions = &v
	}
	if t.Size == 0 {
		t.Size = NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList_Size_standard
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.UrlListName == nil {
		return nil, fmt.Errorf("nil value for key UrlListName")
	}

	return map[string]interface{}{
		"url-list-name": *t.UrlListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Group_UrlList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich represents the /nokia-conf/configure/groups/group/application-assurance/http-enrich YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich struct {
	Field map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field `path:"field" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich) IsYANGGoStruct() {}

// NewField creates a new entry in the Field list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich) NewField(FieldName string) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field)
	}

	key := FieldName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Field[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Field", key)
	}

	t.Field[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field{
		FieldName: &FieldName,
	}

	return t.Field[key], nil
}

// RenameField renames an entry in the list Field within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich) RenameField(oldK, newK string) error {
	if _, ok := t.Field[newK]; ok {
		return fmt.Errorf("key %v already exists in Field", newK)
	}

	e, ok := t.Field[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Field", oldK)
	}
	e.FieldName = &newK

	t.Field[newK] = e
	delete(t.Field, oldK)
	return nil
}

// GetOrCreateField retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich) GetOrCreateField(FieldName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field {

	key := FieldName

	if v, ok := t.Field[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewField(FieldName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateField got unexpected error: %v", err))
	}
	return v
}

// GetField retrieves the value with the specified key from
// the Field map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich) GetField(FieldName string) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field {

	if t == nil {
		return nil
	}

	key := FieldName

	if lm, ok := t.Field[key]; ok {
		return lm
	}
	return nil
}

// DeleteField deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich) DeleteField(FieldName string) {
	key := FieldName

	delete(t.Field, key)
}

// AppendField appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field struct to the
// list Field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich) AppendField(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field) error {
	if v.FieldName == nil {
		return fmt.Errorf("invalid nil key received for FieldName")
	}

	key := *v.FieldName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field)
	}

	if _, ok := t.Field[key]; ok {
		return fmt.Errorf("duplicate key for list Field %v", key)
	}

	t.Field[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Field {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field represents the /nokia-conf/configure/groups/group/application-assurance/http-enrich/field YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field struct {
	Comment   *string `path:"comment" module:"nokia-conf"`
	FieldName *string `path:"field-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field) IsYANGGoStruct() {}

// GetComment retrieves the value of the leaf Comment from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Comment is set, it can
// safely use t.GetComment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Comment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field) GetComment() string {
	if t == nil || t.Comment == nil {
		return ""
	}
	return *t.Comment
}

// GetFieldName retrieves the value of the leaf FieldName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldName is set, it can
// safely use t.GetFieldName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field) GetFieldName() string {
	if t == nil || t.FieldName == nil {
		return ""
	}
	return *t.FieldName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FieldName == nil {
		return nil, fmt.Errorf("nil value for key FieldName")
	}

	return map[string]interface{}{
		"field-name": *t.FieldName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpEnrich_Field) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect represents the /nokia-conf/configure/groups/group/application-assurance/http-error-redirect YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect struct {
	ErrorCode map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode_ErrorCodeNumber_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode `path:"error-code" module:"nokia-conf"`
	Template  map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template_TemplateId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template        `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect) IsYANGGoStruct() {}

// NewErrorCode creates a new entry in the ErrorCode list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect) NewErrorCode(ErrorCodeNumber NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode_ErrorCodeNumber_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ErrorCode == nil {
		t.ErrorCode = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode_ErrorCodeNumber_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode)
	}

	key := ErrorCodeNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ErrorCode[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ErrorCode", key)
	}

	t.ErrorCode[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode{
		ErrorCodeNumber: ErrorCodeNumber,
	}

	return t.ErrorCode[key], nil
}

// RenameErrorCode renames an entry in the list ErrorCode within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect) RenameErrorCode(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode_ErrorCodeNumber_Union) error {
	if _, ok := t.ErrorCode[newK]; ok {
		return fmt.Errorf("key %v already exists in ErrorCode", newK)
	}

	e, ok := t.ErrorCode[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ErrorCode", oldK)
	}
	e.ErrorCodeNumber = newK

	t.ErrorCode[newK] = e
	delete(t.ErrorCode, oldK)
	return nil
}

// GetOrCreateErrorCode retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect) GetOrCreateErrorCode(ErrorCodeNumber NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode_ErrorCodeNumber_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode {

	key := ErrorCodeNumber

	if v, ok := t.ErrorCode[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewErrorCode(ErrorCodeNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateErrorCode got unexpected error: %v", err))
	}
	return v
}

// GetErrorCode retrieves the value with the specified key from
// the ErrorCode map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect) GetErrorCode(ErrorCodeNumber NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode_ErrorCodeNumber_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode {

	if t == nil {
		return nil
	}

	key := ErrorCodeNumber

	if lm, ok := t.ErrorCode[key]; ok {
		return lm
	}
	return nil
}

// DeleteErrorCode deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect) DeleteErrorCode(ErrorCodeNumber NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode_ErrorCodeNumber_Union) {
	key := ErrorCodeNumber

	delete(t.ErrorCode, key)
}

// AppendErrorCode appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode struct to the
// list ErrorCode of NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect) AppendErrorCode(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode) error {
	key := v.ErrorCodeNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ErrorCode == nil {
		t.ErrorCode = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode_ErrorCodeNumber_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode)
	}

	if _, ok := t.ErrorCode[key]; ok {
		return fmt.Errorf("duplicate key for list ErrorCode %v", key)
	}

	t.ErrorCode[key] = v
	return nil
}

// NewTemplate creates a new entry in the Template list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect) NewTemplate(TemplateId NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template_TemplateId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template_TemplateId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template)
	}

	key := TemplateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Template[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Template", key)
	}

	t.Template[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template{
		TemplateId: TemplateId,
	}

	return t.Template[key], nil
}

// RenameTemplate renames an entry in the list Template within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect) RenameTemplate(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template_TemplateId_Union) error {
	if _, ok := t.Template[newK]; ok {
		return fmt.Errorf("key %v already exists in Template", newK)
	}

	e, ok := t.Template[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Template", oldK)
	}
	e.TemplateId = newK

	t.Template[newK] = e
	delete(t.Template, oldK)
	return nil
}

// GetOrCreateTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect) GetOrCreateTemplate(TemplateId NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template_TemplateId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template {

	key := TemplateId

	if v, ok := t.Template[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTemplate(TemplateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTemplate got unexpected error: %v", err))
	}
	return v
}

// GetTemplate retrieves the value with the specified key from
// the Template map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect) GetTemplate(TemplateId NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template_TemplateId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template {

	if t == nil {
		return nil
	}

	key := TemplateId

	if lm, ok := t.Template[key]; ok {
		return lm
	}
	return nil
}

// DeleteTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect) DeleteTemplate(TemplateId NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template_TemplateId_Union) {
	key := TemplateId

	delete(t.Template, key)
}

// AppendTemplate appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template struct to the
// list Template of NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect) AppendTemplate(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template) error {
	key := v.TemplateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template_TemplateId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template)
	}

	if _, ok := t.Template[key]; ok {
		return fmt.Errorf("duplicate key for list Template %v", key)
	}

	t.Template[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ErrorCode {
		e.PopulateDefaults()
	}
	for _, e := range t.Template {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode represents the /nokia-conf/configure/groups/group/application-assurance/http-error-redirect/error-code YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode struct {
	Comment         *string                                                                                                 `path:"comment" module:"nokia-conf"`
	ErrorCodeNumber NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode_ErrorCodeNumber_Union `path:"error-code-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode) IsYANGGoStruct() {
}

// GetComment retrieves the value of the leaf Comment from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Comment is set, it can
// safely use t.GetComment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Comment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode) GetComment() string {
	if t == nil || t.Comment == nil {
		return ""
	}
	return *t.Comment
}

// GetErrorCodeNumber retrieves the value of the leaf ErrorCodeNumber from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorCodeNumber is set, it can
// safely use t.GetErrorCodeNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorCodeNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode) GetErrorCodeNumber() NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode_ErrorCodeNumber_Union {
	if t == nil || t.ErrorCodeNumber == nil {
		return nil
	}
	return t.ErrorCodeNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"error-code-number": t.ErrorCodeNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_ErrorCode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template represents the /nokia-conf/configure/groups/group/application-assurance/http-error-redirect/template YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template struct {
	Comment    *string                                                                                           `path:"comment" module:"nokia-conf"`
	TemplateId NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template_TemplateId_Union `path:"template-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template) IsYANGGoStruct() {
}

// GetComment retrieves the value of the leaf Comment from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Comment is set, it can
// safely use t.GetComment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Comment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template) GetComment() string {
	if t == nil || t.Comment == nil {
		return ""
	}
	return *t.Comment
}

// GetTemplateId retrieves the value of the leaf TemplateId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateId is set, it can
// safely use t.GetTemplateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template) GetTemplateId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template_TemplateId_Union {
	if t == nil || t.TemplateId == nil {
		return nil
	}
	return t.TemplateId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"template-id": t.TemplateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpErrorRedirect_Template) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification represents the /nokia-conf/configure/groups/group/application-assurance/http-notification YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification struct {
	Template map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template_TemplateId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification) IsYANGGoStruct() {}

// NewTemplate creates a new entry in the Template list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification) NewTemplate(TemplateId NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template_TemplateId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template_TemplateId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template)
	}

	key := TemplateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Template[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Template", key)
	}

	t.Template[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template{
		TemplateId: TemplateId,
	}

	return t.Template[key], nil
}

// RenameTemplate renames an entry in the list Template within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification) RenameTemplate(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template_TemplateId_Union) error {
	if _, ok := t.Template[newK]; ok {
		return fmt.Errorf("key %v already exists in Template", newK)
	}

	e, ok := t.Template[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Template", oldK)
	}
	e.TemplateId = newK

	t.Template[newK] = e
	delete(t.Template, oldK)
	return nil
}

// GetOrCreateTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification) GetOrCreateTemplate(TemplateId NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template_TemplateId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template {

	key := TemplateId

	if v, ok := t.Template[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTemplate(TemplateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTemplate got unexpected error: %v", err))
	}
	return v
}

// GetTemplate retrieves the value with the specified key from
// the Template map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification) GetTemplate(TemplateId NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template_TemplateId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template {

	if t == nil {
		return nil
	}

	key := TemplateId

	if lm, ok := t.Template[key]; ok {
		return lm
	}
	return nil
}

// DeleteTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification) DeleteTemplate(TemplateId NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template_TemplateId_Union) {
	key := TemplateId

	delete(t.Template, key)
}

// AppendTemplate appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template struct to the
// list Template of NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification) AppendTemplate(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template) error {
	key := v.TemplateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template_TemplateId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template)
	}

	if _, ok := t.Template[key]; ok {
		return fmt.Errorf("duplicate key for list Template %v", key)
	}

	t.Template[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Template {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template represents the /nokia-conf/configure/groups/group/application-assurance/http-notification/template YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template struct {
	Comment    *string                                                                                          `path:"comment" module:"nokia-conf"`
	TemplateId NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template_TemplateId_Union `path:"template-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template) IsYANGGoStruct() {
}

// GetComment retrieves the value of the leaf Comment from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Comment is set, it can
// safely use t.GetComment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Comment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template) GetComment() string {
	if t == nil || t.Comment == nil {
		return ""
	}
	return *t.Comment
}

// GetTemplateId retrieves the value of the leaf TemplateId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateId is set, it can
// safely use t.GetTemplateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template) GetTemplateId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template_TemplateId_Union {
	if t == nil || t.TemplateId == nil {
		return nil
	}
	return t.TemplateId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"template-id": t.TemplateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpNotification_Template) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect represents the /nokia-conf/configure/groups/group/application-assurance/http-redirect YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect struct {
	Template map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template_TemplateId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect) IsYANGGoStruct() {}

// NewTemplate creates a new entry in the Template list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect) NewTemplate(TemplateId NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template_TemplateId_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template_TemplateId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template)
	}

	key := TemplateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Template[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Template", key)
	}

	t.Template[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template{
		TemplateId: TemplateId,
	}

	return t.Template[key], nil
}

// RenameTemplate renames an entry in the list Template within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect) RenameTemplate(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template_TemplateId_Union) error {
	if _, ok := t.Template[newK]; ok {
		return fmt.Errorf("key %v already exists in Template", newK)
	}

	e, ok := t.Template[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Template", oldK)
	}
	e.TemplateId = newK

	t.Template[newK] = e
	delete(t.Template, oldK)
	return nil
}

// GetOrCreateTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect) GetOrCreateTemplate(TemplateId NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template_TemplateId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template {

	key := TemplateId

	if v, ok := t.Template[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTemplate(TemplateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTemplate got unexpected error: %v", err))
	}
	return v
}

// GetTemplate retrieves the value with the specified key from
// the Template map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect) GetTemplate(TemplateId NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template_TemplateId_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template {

	if t == nil {
		return nil
	}

	key := TemplateId

	if lm, ok := t.Template[key]; ok {
		return lm
	}
	return nil
}

// DeleteTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect) DeleteTemplate(TemplateId NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template_TemplateId_Union) {
	key := TemplateId

	delete(t.Template, key)
}

// AppendTemplate appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template struct to the
// list Template of NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect) AppendTemplate(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template) error {
	key := v.TemplateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template_TemplateId_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template)
	}

	if _, ok := t.Template[key]; ok {
		return fmt.Errorf("duplicate key for list Template %v", key)
	}

	t.Template[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Template {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template represents the /nokia-conf/configure/groups/group/application-assurance/http-redirect/template YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template struct {
	Comment    *string                                                                                      `path:"comment" module:"nokia-conf"`
	TemplateId NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template_TemplateId_Union `path:"template-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template) IsYANGGoStruct() {
}

// GetComment retrieves the value of the leaf Comment from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Comment is set, it can
// safely use t.GetComment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Comment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template) GetComment() string {
	if t == nil || t.Comment == nil {
		return ""
	}
	return *t.Comment
}

// GetTemplateId retrieves the value of the leaf TemplateId from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateId is set, it can
// safely use t.GetTemplateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template) GetTemplateId() NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template_TemplateId_Union {
	if t == nil || t.TemplateId == nil {
		return nil
	}
	return t.TemplateId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"template-id": t.TemplateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_HttpRedirect_Template) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol represents the /nokia-conf/configure/groups/group/application-assurance/protocol YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol struct {
	AdminState   E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ProtocolName *string                     `path:"protocol-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetProtocolName retrieves the value of the leaf ProtocolName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolName is set, it can
// safely use t.GetProtocolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol) GetProtocolName() string {
	if t == nil || t.ProtocolName == nil {
		return ""
	}
	return *t.ProtocolName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ProtocolName == nil {
		return nil, fmt.Errorf("nil value for key ProtocolName")
	}

	return map[string]interface{}{
		"protocol-name": *t.ProtocolName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_Protocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy represents the /nokia-conf/configure/groups/group/application-assurance/radius-accounting-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy struct {
	Description            *string                                                                                              `path:"description" module:"nokia-conf"`
	InterimUpdateInterval  *uint32                                                                                              `path:"interim-update-interval" module:"nokia-conf"`
	RadAcctPlcyName        *string                                                                                              `path:"rad-acct-plcy-name" module:"nokia-conf"`
	RadiusAccountingServer *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer `path:"radius-accounting-server" module:"nokia-conf"`
	SignificantChange      *uint32                                                                                              `path:"significant-change" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy) IsYANGGoStruct() {
}

// GetOrCreateRadiusAccountingServer retrieves the value of the RadiusAccountingServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy) GetOrCreateRadiusAccountingServer() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer {
	if t.RadiusAccountingServer != nil {
		return t.RadiusAccountingServer
	}
	t.RadiusAccountingServer = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer{}
	return t.RadiusAccountingServer
}

// GetRadiusAccountingServer returns the value of the RadiusAccountingServer struct pointer
// from NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy. If the receiver or the field RadiusAccountingServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy) GetRadiusAccountingServer() *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer {
	if t != nil && t.RadiusAccountingServer != nil {
		return t.RadiusAccountingServer
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInterimUpdateInterval retrieves the value of the leaf InterimUpdateInterval from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterimUpdateInterval is set, it can
// safely use t.GetInterimUpdateInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterimUpdateInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy) GetInterimUpdateInterval() uint32 {
	if t == nil || t.InterimUpdateInterval == nil {
		return 0
	}
	return *t.InterimUpdateInterval
}

// GetRadAcctPlcyName retrieves the value of the leaf RadAcctPlcyName from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadAcctPlcyName is set, it can
// safely use t.GetRadAcctPlcyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadAcctPlcyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy) GetRadAcctPlcyName() string {
	if t == nil || t.RadAcctPlcyName == nil {
		return ""
	}
	return *t.RadAcctPlcyName
}

// GetSignificantChange retrieves the value of the leaf SignificantChange from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignificantChange is set, it can
// safely use t.GetSignificantChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignificantChange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy) GetSignificantChange() uint32 {
	if t == nil || t.SignificantChange == nil {
		return 0
	}
	return *t.SignificantChange
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RadiusAccountingServer.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RadAcctPlcyName == nil {
		return nil, fmt.Errorf("nil value for key RadAcctPlcyName")
	}

	return map[string]interface{}{
		"rad-acct-plcy-name": *t.RadAcctPlcyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer represents the /nokia-conf/configure/groups/group/application-assurance/radius-accounting-policy/radius-accounting-server YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer struct {
	AccessAlgorithm E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_AccessAlgorithm                                                                                                                        `path:"access-algorithm" module:"nokia-conf"`
	Retry           *uint32                                                                                                                                                                                                                                      `path:"retry" module:"nokia-conf"`
	RouterInstance  *string                                                                                                                                                                                                                                      `path:"router-instance" module:"nokia-conf"`
	Server          map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server_ServerIndex_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server `path:"server" module:"nokia-conf"`
	SourceAddress   *string                                                                                                                                                                                                                                      `path:"source-address" module:"nokia-conf"`
	Timeout         *uint32                                                                                                                                                                                                                                      `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) IsYANGGoStruct() {
}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) NewServer(ServerIndex NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server_ServerIndex_Union) (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server_ServerIndex_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server)
	}

	key := ServerIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server{
		ServerIndex: ServerIndex,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) RenameServer(oldK, newK NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server_ServerIndex_Union) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.ServerIndex = newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) GetOrCreateServer(ServerIndex NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server_ServerIndex_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server {

	key := ServerIndex

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(ServerIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) GetServer(ServerIndex NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server_ServerIndex_Union) *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server {

	if t == nil {
		return nil
	}

	key := ServerIndex

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) DeleteServer(ServerIndex NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server_ServerIndex_Union) {
	key := ServerIndex

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server struct to the
// list Server of NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) AppendServer(v *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) error {
	key := v.ServerIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server_ServerIndex_Union]*NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetAccessAlgorithm retrieves the value of the leaf AccessAlgorithm from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessAlgorithm is set, it can
// safely use t.GetAccessAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) GetAccessAlgorithm() E_NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_AccessAlgorithm {
	if t == nil || t.AccessAlgorithm == 0 {
		return NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_AccessAlgorithm_direct
	}
	return t.AccessAlgorithm
}

// GetRetry retrieves the value of the leaf Retry from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Retry is set, it can
// safely use t.GetRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Retry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) GetRetry() uint32 {
	if t == nil || t.Retry == nil {
		return 3
	}
	return *t.Retry
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 5
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AccessAlgorithm == 0 {
		t.AccessAlgorithm = NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_AccessAlgorithm_direct
	}
	if t.Retry == nil {
		var v uint32 = 3
		t.Retry = &v
	}
	if t.Timeout == nil {
		var v uint32 = 5
		t.Timeout = &v
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server represents the /nokia-conf/configure/groups/group/application-assurance/radius-accounting-policy/radius-accounting-server/server YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server struct {
	Address     *string                                                                                                                      `path:"address" module:"nokia-conf"`
	Port        *uint16                                                                                                                      `path:"port" module:"nokia-conf"`
	Secret      *string                                                                                                                      `path:"secret" module:"nokia-conf"`
	ServerIndex NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server_ServerIndex_Union `path:"server-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 1813
	}
	return *t.Port
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// GetServerIndex retrieves the value of the leaf ServerIndex from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerIndex is set, it can
// safely use t.GetServerIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) GetServerIndex() NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server_ServerIndex_Union {
	if t == nil || t.ServerIndex == nil {
		return nil
	}
	return t.ServerIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v uint16 = 1813
		t.Port = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"server-index": t.ServerIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds represents the /nokia-conf/configure/groups/group/application-assurance/usage-alert-thresholds YANG schema element.
type NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds struct {
	BitRateHighWmark       NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds_BitRateHighWmark_Union       `path:"bit-rate-high-wmark" module:"nokia-conf"`
	BitRateLowWmark        *uint32                                                                                                 `path:"bit-rate-low-wmark" module:"nokia-conf"`
	DatapathCpuHighWmark   NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds_DatapathCpuHighWmark_Union   `path:"datapath-cpu-high-wmark" module:"nokia-conf"`
	DatapathCpuLowWmark    *int32                                                                                                  `path:"datapath-cpu-low-wmark" module:"nokia-conf"`
	FlowSetupRateHighWmark NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds_FlowSetupRateHighWmark_Union `path:"flow-setup-rate-high-wmark" module:"nokia-conf"`
	FlowSetupRateLowWmark  *uint32                                                                                                 `path:"flow-setup-rate-low-wmark" module:"nokia-conf"`
	FlowTableHighWmark     *int32                                                                                                  `path:"flow-table-high-wmark" module:"nokia-conf"`
	FlowTableLowWmark      *int32                                                                                                  `path:"flow-table-low-wmark" module:"nokia-conf"`
	PacketRateHighWmark    NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds_PacketRateHighWmark_Union    `path:"packet-rate-high-wmark" module:"nokia-conf"`
	PacketRateLowWmark     *uint32                                                                                                 `path:"packet-rate-low-wmark" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds) IsYANGGoStruct() {}

// GetBitRateHighWmark retrieves the value of the leaf BitRateHighWmark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitRateHighWmark is set, it can
// safely use t.GetBitRateHighWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitRateHighWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds) GetBitRateHighWmark() NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds_BitRateHighWmark_Union {
	if t == nil || t.BitRateHighWmark == nil {
		return NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds_BitRateHighWmark_Enum_max
	}
	return t.BitRateHighWmark
}

// GetBitRateLowWmark retrieves the value of the leaf BitRateLowWmark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitRateLowWmark is set, it can
// safely use t.GetBitRateLowWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitRateLowWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds) GetBitRateLowWmark() uint32 {
	if t == nil || t.BitRateLowWmark == nil {
		return 0
	}
	return *t.BitRateLowWmark
}

// GetDatapathCpuHighWmark retrieves the value of the leaf DatapathCpuHighWmark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DatapathCpuHighWmark is set, it can
// safely use t.GetDatapathCpuHighWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DatapathCpuHighWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds) GetDatapathCpuHighWmark() NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds_DatapathCpuHighWmark_Union {
	if t == nil || t.DatapathCpuHighWmark == nil {
		return UnionInt32(95)
	}
	return t.DatapathCpuHighWmark
}

// GetDatapathCpuLowWmark retrieves the value of the leaf DatapathCpuLowWmark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DatapathCpuLowWmark is set, it can
// safely use t.GetDatapathCpuLowWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DatapathCpuLowWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds) GetDatapathCpuLowWmark() int32 {
	if t == nil || t.DatapathCpuLowWmark == nil {
		return 90
	}
	return *t.DatapathCpuLowWmark
}

// GetFlowSetupRateHighWmark retrieves the value of the leaf FlowSetupRateHighWmark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowSetupRateHighWmark is set, it can
// safely use t.GetFlowSetupRateHighWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowSetupRateHighWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds) GetFlowSetupRateHighWmark() NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds_FlowSetupRateHighWmark_Union {
	if t == nil || t.FlowSetupRateHighWmark == nil {
		return NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds_FlowSetupRateHighWmark_Enum_max
	}
	return t.FlowSetupRateHighWmark
}

// GetFlowSetupRateLowWmark retrieves the value of the leaf FlowSetupRateLowWmark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowSetupRateLowWmark is set, it can
// safely use t.GetFlowSetupRateLowWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowSetupRateLowWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds) GetFlowSetupRateLowWmark() uint32 {
	if t == nil || t.FlowSetupRateLowWmark == nil {
		return 0
	}
	return *t.FlowSetupRateLowWmark
}

// GetFlowTableHighWmark retrieves the value of the leaf FlowTableHighWmark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowTableHighWmark is set, it can
// safely use t.GetFlowTableHighWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowTableHighWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds) GetFlowTableHighWmark() int32 {
	if t == nil || t.FlowTableHighWmark == nil {
		return 95
	}
	return *t.FlowTableHighWmark
}

// GetFlowTableLowWmark retrieves the value of the leaf FlowTableLowWmark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowTableLowWmark is set, it can
// safely use t.GetFlowTableLowWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowTableLowWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds) GetFlowTableLowWmark() int32 {
	if t == nil || t.FlowTableLowWmark == nil {
		return 90
	}
	return *t.FlowTableLowWmark
}

// GetPacketRateHighWmark retrieves the value of the leaf PacketRateHighWmark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketRateHighWmark is set, it can
// safely use t.GetPacketRateHighWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketRateHighWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds) GetPacketRateHighWmark() NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds_PacketRateHighWmark_Union {
	if t == nil || t.PacketRateHighWmark == nil {
		return NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds_PacketRateHighWmark_Enum_max
	}
	return t.PacketRateHighWmark
}

// GetPacketRateLowWmark retrieves the value of the leaf PacketRateLowWmark from the NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketRateLowWmark is set, it can
// safely use t.GetPacketRateLowWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketRateLowWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds) GetPacketRateLowWmark() uint32 {
	if t == nil || t.PacketRateLowWmark == nil {
		return 0
	}
	return *t.PacketRateLowWmark
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitRateHighWmark == nil {
		t.BitRateHighWmark = NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds_BitRateHighWmark_Enum_max
	}
	if t.BitRateLowWmark == nil {
		var v uint32 = 0
		t.BitRateLowWmark = &v
	}
	if t.DatapathCpuHighWmark == nil {
		t.DatapathCpuHighWmark = UnionInt32(95)
	}
	if t.DatapathCpuLowWmark == nil {
		var v int32 = 90
		t.DatapathCpuLowWmark = &v
	}
	if t.FlowSetupRateHighWmark == nil {
		t.FlowSetupRateHighWmark = NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds_FlowSetupRateHighWmark_Enum_max
	}
	if t.FlowSetupRateLowWmark == nil {
		var v uint32 = 0
		t.FlowSetupRateLowWmark = &v
	}
	if t.FlowTableHighWmark == nil {
		var v int32 = 95
		t.FlowTableHighWmark = &v
	}
	if t.FlowTableLowWmark == nil {
		var v int32 = 90
		t.FlowTableLowWmark = &v
	}
	if t.PacketRateHighWmark == nil {
		t.PacketRateHighWmark = NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds_PacketRateHighWmark_Enum_max
	}
	if t.PacketRateLowWmark == nil {
		var v uint32 = 0
		t.PacketRateLowWmark = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds.
func (*NokiaConf_Configure_Groups_Group_ApplicationAssurance_UsageAlertThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aps represents the /nokia-conf/configure/groups/group/aps YANG schema element.
type NokiaConf_Configure_Groups_Group_Aps struct {
	AdvertiseInterval *uint32                                              `path:"advertise-interval" module:"nokia-conf"`
	Annexb            *NokiaConf_Configure_Groups_Group_Aps_Annexb         `path:"annexb" module:"nokia-conf" yangPresence:"true"`
	GroupId           NokiaConf_Configure_Groups_Group_Aps_GroupId_Union   `path:"group-id" module:"nokia-conf"`
	HoldTime          *uint32                                              `path:"hold-time" module:"nokia-conf"`
	Neighbor          *string                                              `path:"neighbor" module:"nokia-conf"`
	ProtectCircuit    *string                                              `path:"protect-circuit" module:"nokia-conf"`
	Revert            *NokiaConf_Configure_Groups_Group_Aps_Revert         `path:"revert" module:"nokia-conf" yangPresence:"true"`
	SwitchingMode     E_NokiaConf_Configure_Groups_Group_Aps_SwitchingMode `path:"switching-mode" module:"nokia-conf"`
	WorkingCircuit    *string                                              `path:"working-circuit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aps) IsYANGGoStruct() {}

// GetOrCreateAnnexb retrieves the value of the Annexb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aps) GetOrCreateAnnexb() *NokiaConf_Configure_Groups_Group_Aps_Annexb {
	if t.Annexb != nil {
		return t.Annexb
	}
	t.Annexb = &NokiaConf_Configure_Groups_Group_Aps_Annexb{}
	return t.Annexb
}

// GetOrCreateRevert retrieves the value of the Revert field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Aps) GetOrCreateRevert() *NokiaConf_Configure_Groups_Group_Aps_Revert {
	if t.Revert != nil {
		return t.Revert
	}
	t.Revert = &NokiaConf_Configure_Groups_Group_Aps_Revert{}
	return t.Revert
}

// GetAnnexb returns the value of the Annexb struct pointer
// from NokiaConf_Configure_Groups_Group_Aps. If the receiver or the field Annexb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aps) GetAnnexb() *NokiaConf_Configure_Groups_Group_Aps_Annexb {
	if t != nil && t.Annexb != nil {
		return t.Annexb
	}
	return nil
}

// GetRevert returns the value of the Revert struct pointer
// from NokiaConf_Configure_Groups_Group_Aps. If the receiver or the field Revert is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Aps) GetRevert() *NokiaConf_Configure_Groups_Group_Aps_Revert {
	if t != nil && t.Revert != nil {
		return t.Revert
	}
	return nil
}

// GetAdvertiseInterval retrieves the value of the leaf AdvertiseInterval from the NokiaConf_Configure_Groups_Group_Aps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseInterval is set, it can
// safely use t.GetAdvertiseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aps) GetAdvertiseInterval() uint32 {
	if t == nil || t.AdvertiseInterval == nil {
		return 10
	}
	return *t.AdvertiseInterval
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Groups_Group_Aps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aps) GetGroupId() NokiaConf_Configure_Groups_Group_Aps_GroupId_Union {
	if t == nil || t.GroupId == nil {
		return nil
	}
	return t.GroupId
}

// GetHoldTime retrieves the value of the leaf HoldTime from the NokiaConf_Configure_Groups_Group_Aps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aps) GetHoldTime() uint32 {
	if t == nil || t.HoldTime == nil {
		return 30
	}
	return *t.HoldTime
}

// GetNeighbor retrieves the value of the leaf Neighbor from the NokiaConf_Configure_Groups_Group_Aps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neighbor is set, it can
// safely use t.GetNeighbor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neighbor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aps) GetNeighbor() string {
	if t == nil || t.Neighbor == nil {
		return ""
	}
	return *t.Neighbor
}

// GetProtectCircuit retrieves the value of the leaf ProtectCircuit from the NokiaConf_Configure_Groups_Group_Aps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectCircuit is set, it can
// safely use t.GetProtectCircuit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectCircuit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aps) GetProtectCircuit() string {
	if t == nil || t.ProtectCircuit == nil {
		return ""
	}
	return *t.ProtectCircuit
}

// GetSwitchingMode retrieves the value of the leaf SwitchingMode from the NokiaConf_Configure_Groups_Group_Aps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SwitchingMode is set, it can
// safely use t.GetSwitchingMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SwitchingMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aps) GetSwitchingMode() E_NokiaConf_Configure_Groups_Group_Aps_SwitchingMode {
	if t == nil || t.SwitchingMode == 0 {
		return NokiaConf_Configure_Groups_Group_Aps_SwitchingMode_bi_directional
	}
	return t.SwitchingMode
}

// GetWorkingCircuit retrieves the value of the leaf WorkingCircuit from the NokiaConf_Configure_Groups_Group_Aps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WorkingCircuit is set, it can
// safely use t.GetWorkingCircuit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WorkingCircuit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aps) GetWorkingCircuit() string {
	if t == nil || t.WorkingCircuit == nil {
		return ""
	}
	return *t.WorkingCircuit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseInterval == nil {
		var v uint32 = 10
		t.AdvertiseInterval = &v
	}
	if t.HoldTime == nil {
		var v uint32 = 30
		t.HoldTime = &v
	}
	if t.SwitchingMode == 0 {
		t.SwitchingMode = NokiaConf_Configure_Groups_Group_Aps_SwitchingMode_bi_directional
	}
	t.Annexb.PopulateDefaults()
	t.Revert.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Aps struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Aps) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"group-id": t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aps) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aps.
func (*NokiaConf_Configure_Groups_Group_Aps) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aps_Annexb represents the /nokia-conf/configure/groups/group/aps/annexb YANG schema element.
type NokiaConf_Configure_Groups_Group_Aps_Annexb struct {
	WaitToRestoreTime *uint32  `path:"wait-to-restore-time" module:"nokia-conf"`
	WorkingCircuit    []string `path:"working-circuit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aps_Annexb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aps_Annexb) IsYANGGoStruct() {}

// GetWaitToRestoreTime retrieves the value of the leaf WaitToRestoreTime from the NokiaConf_Configure_Groups_Group_Aps_Annexb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaitToRestoreTime is set, it can
// safely use t.GetWaitToRestoreTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaitToRestoreTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aps_Annexb) GetWaitToRestoreTime() uint32 {
	if t == nil || t.WaitToRestoreTime == nil {
		return 300
	}
	return *t.WaitToRestoreTime
}

// GetWorkingCircuit retrieves the value of the leaf WorkingCircuit from the NokiaConf_Configure_Groups_Group_Aps_Annexb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WorkingCircuit is set, it can
// safely use t.GetWorkingCircuit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WorkingCircuit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aps_Annexb) GetWorkingCircuit() []string {
	if t == nil || t.WorkingCircuit == nil {
		return nil
	}
	return t.WorkingCircuit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aps_Annexb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aps_Annexb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.WaitToRestoreTime == nil {
		var v uint32 = 300
		t.WaitToRestoreTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aps_Annexb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aps_Annexb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aps_Annexb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aps_Annexb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aps_Annexb.
func (*NokiaConf_Configure_Groups_Group_Aps_Annexb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Aps_Revert represents the /nokia-conf/configure/groups/group/aps/revert YANG schema element.
type NokiaConf_Configure_Groups_Group_Aps_Revert struct {
	Time *uint32 `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Aps_Revert implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Aps_Revert) IsYANGGoStruct() {}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Groups_Group_Aps_Revert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Aps_Revert) GetTime() uint32 {
	if t == nil || t.Time == nil {
		return 300
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Aps_Revert
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Aps_Revert) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Time == nil {
		var v uint32 = 300
		t.Time = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aps_Revert) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Aps_Revert"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Aps_Revert) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Aps_Revert) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Aps_Revert.
func (*NokiaConf_Configure_Groups_Group_Aps_Revert) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Bfd represents the /nokia-conf/configure/groups/group/bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Bfd struct {
	BfdTemplate map[string]*NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate `path:"bfd-template" module:"nokia-conf"`
	SeamlessBfd *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd            `path:"seamless-bfd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Bfd) IsYANGGoStruct() {}

// NewBfdTemplate creates a new entry in the BfdTemplate list of the
// NokiaConf_Configure_Groups_Group_Bfd struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Bfd) NewBfdTemplate(Name string) (*NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BfdTemplate == nil {
		t.BfdTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BfdTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BfdTemplate", key)
	}

	t.BfdTemplate[key] = &NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate{
		Name: &Name,
	}

	return t.BfdTemplate[key], nil
}

// RenameBfdTemplate renames an entry in the list BfdTemplate within
// the NokiaConf_Configure_Groups_Group_Bfd struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Bfd) RenameBfdTemplate(oldK, newK string) error {
	if _, ok := t.BfdTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in BfdTemplate", newK)
	}

	e, ok := t.BfdTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BfdTemplate", oldK)
	}
	e.Name = &newK

	t.BfdTemplate[newK] = e
	delete(t.BfdTemplate, oldK)
	return nil
}

// GetOrCreateBfdTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Bfd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Bfd) GetOrCreateBfdTemplate(Name string) *NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate {

	key := Name

	if v, ok := t.BfdTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBfdTemplate(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBfdTemplate got unexpected error: %v", err))
	}
	return v
}

// GetBfdTemplate retrieves the value with the specified key from
// the BfdTemplate map field of NokiaConf_Configure_Groups_Group_Bfd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Bfd) GetBfdTemplate(Name string) *NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.BfdTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteBfdTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Bfd. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Bfd) DeleteBfdTemplate(Name string) {
	key := Name

	delete(t.BfdTemplate, key)
}

// AppendBfdTemplate appends the supplied NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate struct to the
// list BfdTemplate of NokiaConf_Configure_Groups_Group_Bfd. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Bfd) AppendBfdTemplate(v *NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BfdTemplate == nil {
		t.BfdTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate)
	}

	if _, ok := t.BfdTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list BfdTemplate %v", key)
	}

	t.BfdTemplate[key] = v
	return nil
}

// GetOrCreateSeamlessBfd retrieves the value of the SeamlessBfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Bfd) GetOrCreateSeamlessBfd() *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd {
	if t.SeamlessBfd != nil {
		return t.SeamlessBfd
	}
	t.SeamlessBfd = &NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd{}
	return t.SeamlessBfd
}

// GetSeamlessBfd returns the value of the SeamlessBfd struct pointer
// from NokiaConf_Configure_Groups_Group_Bfd. If the receiver or the field SeamlessBfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Bfd) GetSeamlessBfd() *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd {
	if t != nil && t.SeamlessBfd != nil {
		return t.SeamlessBfd
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SeamlessBfd.PopulateDefaults()
	for _, e := range t.BfdTemplate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Bfd.
func (*NokiaConf_Configure_Groups_Group_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate represents the /nokia-conf/configure/groups/group/bfd/bfd-template YANG schema element.
type NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate struct {
	EchoReceive      *uint32                                                 `path:"echo-receive" module:"nokia-conf"`
	Multiplier       *uint32                                                 `path:"multiplier" module:"nokia-conf"`
	Name             *string                                                 `path:"name" module:"nokia-conf"`
	ReceiveInterval  *uint32                                                 `path:"receive-interval" module:"nokia-conf"`
	TransmitInterval *uint32                                                 `path:"transmit-interval" module:"nokia-conf"`
	Type             E_NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate) IsYANGGoStruct() {}

// GetEchoReceive retrieves the value of the leaf EchoReceive from the NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoReceive is set, it can
// safely use t.GetEchoReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoReceive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate) GetEchoReceive() uint32 {
	if t == nil || t.EchoReceive == nil {
		return 100
	}
	return *t.EchoReceive
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetReceiveInterval retrieves the value of the leaf ReceiveInterval from the NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveInterval is set, it can
// safely use t.GetReceiveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate) GetReceiveInterval() uint32 {
	if t == nil || t.ReceiveInterval == nil {
		return 100
	}
	return *t.ReceiveInterval
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 100
	}
	return *t.TransmitInterval
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate) GetType() E_NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EchoReceive == nil {
		var v uint32 = 100
		t.EchoReceive = &v
	}
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
	if t.ReceiveInterval == nil {
		var v uint32 = 100
		t.ReceiveInterval = &v
	}
	if t.TransmitInterval == nil {
		var v uint32 = 100
		t.TransmitInterval = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate.
func (*NokiaConf_Configure_Groups_Group_Bfd_BfdTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd represents the /nokia-conf/configure/groups/group/bfd/seamless-bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd struct {
	Reflector map[string]*NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector `path:"reflector" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd) IsYANGGoStruct() {}

// NewReflector creates a new entry in the Reflector list of the
// NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd) NewReflector(Name string) (*NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Reflector == nil {
		t.Reflector = make(map[string]*NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Reflector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Reflector", key)
	}

	t.Reflector[key] = &NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector{
		Name: &Name,
	}

	return t.Reflector[key], nil
}

// RenameReflector renames an entry in the list Reflector within
// the NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd) RenameReflector(oldK, newK string) error {
	if _, ok := t.Reflector[newK]; ok {
		return fmt.Errorf("key %v already exists in Reflector", newK)
	}

	e, ok := t.Reflector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Reflector", oldK)
	}
	e.Name = &newK

	t.Reflector[newK] = e
	delete(t.Reflector, oldK)
	return nil
}

// GetOrCreateReflector retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd) GetOrCreateReflector(Name string) *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector {

	key := Name

	if v, ok := t.Reflector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewReflector(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateReflector got unexpected error: %v", err))
	}
	return v
}

// GetReflector retrieves the value with the specified key from
// the Reflector map field of NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd) GetReflector(Name string) *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Reflector[key]; ok {
		return lm
	}
	return nil
}

// DeleteReflector deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd) DeleteReflector(Name string) {
	key := Name

	delete(t.Reflector, key)
}

// AppendReflector appends the supplied NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector struct to the
// list Reflector of NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd) AppendReflector(v *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Reflector == nil {
		t.Reflector = make(map[string]*NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector)
	}

	if _, ok := t.Reflector[key]; ok {
		return fmt.Errorf("duplicate key for list Reflector %v", key)
	}

	t.Reflector[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Reflector {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd.
func (*NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector represents the /nokia-conf/configure/groups/group/bfd/seamless-bfd/reflector YANG schema element.
type NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector struct {
	AdminState    E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	Description   *string                                                                 `path:"description" module:"nokia-conf"`
	Discriminator *uint32                                                                 `path:"discriminator" module:"nokia-conf"`
	LocalState    E_NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector_LocalState `path:"local-state" module:"nokia-conf"`
	Name          *string                                                                 `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDiscriminator retrieves the value of the leaf Discriminator from the NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Discriminator is set, it can
// safely use t.GetDiscriminator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Discriminator == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector) GetDiscriminator() uint32 {
	if t == nil || t.Discriminator == nil {
		return 0
	}
	return *t.Discriminator
}

// GetLocalState retrieves the value of the leaf LocalState from the NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalState is set, it can
// safely use t.GetLocalState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector) GetLocalState() E_NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector_LocalState {
	if t == nil || t.LocalState == 0 {
		return NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector_LocalState_up
	}
	return t.LocalState
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.LocalState == 0 {
		t.LocalState = NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector_LocalState_up
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector.
func (*NokiaConf_Configure_Groups_Group_Bfd_SeamlessBfd_Reflector) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Bmp represents the /nokia-conf/configure/groups/group/bmp YANG schema element.
type NokiaConf_Configure_Groups_Group_Bmp struct {
	AdminState E_NokiaTypesSros_AdminState                              `path:"admin-state" module:"nokia-conf"`
	Collector  *NokiaConf_Configure_Groups_Group_Bmp_Collector          `path:"collector" module:"nokia-conf" yangPresence:"true"`
	Station    map[string]*NokiaConf_Configure_Groups_Group_Bmp_Station `path:"station" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Bmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Bmp) IsYANGGoStruct() {}

// NewStation creates a new entry in the Station list of the
// NokiaConf_Configure_Groups_Group_Bmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Bmp) NewStation(Name string) (*NokiaConf_Configure_Groups_Group_Bmp_Station, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Groups_Group_Bmp_Station)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Station[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Station", key)
	}

	t.Station[key] = &NokiaConf_Configure_Groups_Group_Bmp_Station{
		Name: &Name,
	}

	return t.Station[key], nil
}

// RenameStation renames an entry in the list Station within
// the NokiaConf_Configure_Groups_Group_Bmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Bmp) RenameStation(oldK, newK string) error {
	if _, ok := t.Station[newK]; ok {
		return fmt.Errorf("key %v already exists in Station", newK)
	}

	e, ok := t.Station[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Station", oldK)
	}
	e.Name = &newK

	t.Station[newK] = e
	delete(t.Station, oldK)
	return nil
}

// GetOrCreateStation retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Bmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Bmp) GetOrCreateStation(Name string) *NokiaConf_Configure_Groups_Group_Bmp_Station {

	key := Name

	if v, ok := t.Station[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStation(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStation got unexpected error: %v", err))
	}
	return v
}

// GetStation retrieves the value with the specified key from
// the Station map field of NokiaConf_Configure_Groups_Group_Bmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Bmp) GetStation(Name string) *NokiaConf_Configure_Groups_Group_Bmp_Station {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Station[key]; ok {
		return lm
	}
	return nil
}

// DeleteStation deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Bmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Bmp) DeleteStation(Name string) {
	key := Name

	delete(t.Station, key)
}

// AppendStation appends the supplied NokiaConf_Configure_Groups_Group_Bmp_Station struct to the
// list Station of NokiaConf_Configure_Groups_Group_Bmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Bmp_Station already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Bmp) AppendStation(v *NokiaConf_Configure_Groups_Group_Bmp_Station) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Groups_Group_Bmp_Station)
	}

	if _, ok := t.Station[key]; ok {
		return fmt.Errorf("duplicate key for list Station %v", key)
	}

	t.Station[key] = v
	return nil
}

// GetOrCreateCollector retrieves the value of the Collector field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Bmp) GetOrCreateCollector() *NokiaConf_Configure_Groups_Group_Bmp_Collector {
	if t.Collector != nil {
		return t.Collector
	}
	t.Collector = &NokiaConf_Configure_Groups_Group_Bmp_Collector{}
	return t.Collector
}

// GetCollector returns the value of the Collector struct pointer
// from NokiaConf_Configure_Groups_Group_Bmp. If the receiver or the field Collector is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Bmp) GetCollector() *NokiaConf_Configure_Groups_Group_Bmp_Collector {
	if t != nil && t.Collector != nil {
		return t.Collector
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Bmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Bmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Bmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Collector.PopulateDefaults()
	for _, e := range t.Station {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Bmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Bmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Bmp.
func (*NokiaConf_Configure_Groups_Group_Bmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Bmp_Collector represents the /nokia-conf/configure/groups/group/bmp/collector YANG schema element.
type NokiaConf_Configure_Groups_Group_Bmp_Collector struct {
	AdminState E_NokiaTypesSros_AdminState                                `path:"admin-state" module:"nokia-conf"`
	Connection *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection `path:"connection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Bmp_Collector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Bmp_Collector) IsYANGGoStruct() {}

// GetOrCreateConnection retrieves the value of the Connection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector) GetOrCreateConnection() *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection {
	if t.Connection != nil {
		return t.Connection
	}
	t.Connection = &NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection{}
	return t.Connection
}

// GetConnection returns the value of the Connection struct pointer
// from NokiaConf_Configure_Groups_Group_Bmp_Collector. If the receiver or the field Connection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector) GetConnection() *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection {
	if t != nil && t.Connection != nil {
		return t.Connection
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Bmp_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Bmp_Collector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Connection.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Bmp_Collector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Bmp_Collector.
func (*NokiaConf_Configure_Groups_Group_Bmp_Collector) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection represents the /nokia-conf/configure/groups/group/bmp/collector/connection YANG schema element.
type NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection struct {
	Ipv4 *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6 *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection) GetIpv4() *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection) GetIpv6() *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection.
func (*NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv4 represents the /nokia-conf/configure/groups/group/bmp/collector/connection/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv4 struct {
	Address *string `path:"address" module:"nokia-conf"`
	Port    *int32  `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv4) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv4) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv4) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 4210
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v int32 = 4210
		t.Port = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv6 represents the /nokia-conf/configure/groups/group/bmp/collector/connection/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv6 struct {
	Address *string `path:"address" module:"nokia-conf"`
	Port    *int32  `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv6) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv6) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv6) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 4210
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v int32 = 4210
		t.Port = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Bmp_Collector_Connection_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Bmp_Station represents the /nokia-conf/configure/groups/group/bmp/station YANG schema element.
type NokiaConf_Configure_Groups_Group_Bmp_Station struct {
	AdminState          E_NokiaTypesSros_AdminState                              `path:"admin-state" module:"nokia-conf"`
	Connection          *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection `path:"connection" module:"nokia-conf"`
	Description         *string                                                  `path:"description" module:"nokia-conf"`
	Family              *NokiaConf_Configure_Groups_Group_Bmp_Station_Family     `path:"family" module:"nokia-conf"`
	InitiationMessage   *string                                                  `path:"initiation-message" module:"nokia-conf"`
	Name                *string                                                  `path:"name" module:"nokia-conf"`
	ReportLocalRoutes   *bool                                                    `path:"report-local-routes" module:"nokia-conf"`
	StatsReportInterval *uint32                                                  `path:"stats-report-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Bmp_Station implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Bmp_Station) IsYANGGoStruct() {}

// GetOrCreateConnection retrieves the value of the Connection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station) GetOrCreateConnection() *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection {
	if t.Connection != nil {
		return t.Connection
	}
	t.Connection = &NokiaConf_Configure_Groups_Group_Bmp_Station_Connection{}
	return t.Connection
}

// GetOrCreateFamily retrieves the value of the Family field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station) GetOrCreateFamily() *NokiaConf_Configure_Groups_Group_Bmp_Station_Family {
	if t.Family != nil {
		return t.Family
	}
	t.Family = &NokiaConf_Configure_Groups_Group_Bmp_Station_Family{}
	return t.Family
}

// GetConnection returns the value of the Connection struct pointer
// from NokiaConf_Configure_Groups_Group_Bmp_Station. If the receiver or the field Connection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station) GetConnection() *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection {
	if t != nil && t.Connection != nil {
		return t.Connection
	}
	return nil
}

// GetFamily returns the value of the Family struct pointer
// from NokiaConf_Configure_Groups_Group_Bmp_Station. If the receiver or the field Family is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station) GetFamily() *NokiaConf_Configure_Groups_Group_Bmp_Station_Family {
	if t != nil && t.Family != nil {
		return t.Family
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Bmp_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Bmp_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInitiationMessage retrieves the value of the leaf InitiationMessage from the NokiaConf_Configure_Groups_Group_Bmp_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitiationMessage is set, it can
// safely use t.GetInitiationMessage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitiationMessage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station) GetInitiationMessage() string {
	if t == nil || t.InitiationMessage == nil {
		return ""
	}
	return *t.InitiationMessage
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Bmp_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetReportLocalRoutes retrieves the value of the leaf ReportLocalRoutes from the NokiaConf_Configure_Groups_Group_Bmp_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReportLocalRoutes is set, it can
// safely use t.GetReportLocalRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReportLocalRoutes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station) GetReportLocalRoutes() bool {
	if t == nil || t.ReportLocalRoutes == nil {
		return false
	}
	return *t.ReportLocalRoutes
}

// GetStatsReportInterval retrieves the value of the leaf StatsReportInterval from the NokiaConf_Configure_Groups_Group_Bmp_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatsReportInterval is set, it can
// safely use t.GetStatsReportInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatsReportInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station) GetStatsReportInterval() uint32 {
	if t == nil || t.StatsReportInterval == nil {
		return 0
	}
	return *t.StatsReportInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Bmp_Station
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ReportLocalRoutes == nil {
		var v bool = false
		t.ReportLocalRoutes = &v
	}
	t.Connection.PopulateDefaults()
	t.Family.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Bmp_Station struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Bmp_Station"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Bmp_Station.
func (*NokiaConf_Configure_Groups_Group_Bmp_Station) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Bmp_Station_Connection represents the /nokia-conf/configure/groups/group/bmp/station/connection YANG schema element.
type NokiaConf_Configure_Groups_Group_Bmp_Station_Connection struct {
	ConnectRetry   *uint32                                                                 `path:"connect-retry" module:"nokia-conf"`
	LocalAddress   *string                                                                 `path:"local-address" module:"nokia-conf"`
	RouterInstance *string                                                                 `path:"router-instance" module:"nokia-conf"`
	StationAddress *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_StationAddress `path:"station-address" module:"nokia-conf"`
	TcpKeepalive   *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive   `path:"tcp-keepalive" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Bmp_Station_Connection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Bmp_Station_Connection) IsYANGGoStruct() {}

// GetOrCreateStationAddress retrieves the value of the StationAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection) GetOrCreateStationAddress() *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_StationAddress {
	if t.StationAddress != nil {
		return t.StationAddress
	}
	t.StationAddress = &NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_StationAddress{}
	return t.StationAddress
}

// GetOrCreateTcpKeepalive retrieves the value of the TcpKeepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection) GetOrCreateTcpKeepalive() *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive {
	if t.TcpKeepalive != nil {
		return t.TcpKeepalive
	}
	t.TcpKeepalive = &NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive{}
	return t.TcpKeepalive
}

// GetStationAddress returns the value of the StationAddress struct pointer
// from NokiaConf_Configure_Groups_Group_Bmp_Station_Connection. If the receiver or the field StationAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection) GetStationAddress() *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_StationAddress {
	if t != nil && t.StationAddress != nil {
		return t.StationAddress
	}
	return nil
}

// GetTcpKeepalive returns the value of the TcpKeepalive struct pointer
// from NokiaConf_Configure_Groups_Group_Bmp_Station_Connection. If the receiver or the field TcpKeepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection) GetTcpKeepalive() *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive {
	if t != nil && t.TcpKeepalive != nil {
		return t.TcpKeepalive
	}
	return nil
}

// GetConnectRetry retrieves the value of the leaf ConnectRetry from the NokiaConf_Configure_Groups_Group_Bmp_Station_Connection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectRetry is set, it can
// safely use t.GetConnectRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection) GetConnectRetry() uint32 {
	if t == nil || t.ConnectRetry == nil {
		return 120
	}
	return *t.ConnectRetry
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Bmp_Station_Connection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Bmp_Station_Connection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "Base"
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Bmp_Station_Connection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ConnectRetry == nil {
		var v uint32 = 120
		t.ConnectRetry = &v
	}
	if t.RouterInstance == nil {
		var v string = "Base"
		t.RouterInstance = &v
	}
	t.StationAddress.PopulateDefaults()
	t.TcpKeepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Bmp_Station_Connection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Bmp_Station_Connection.
func (*NokiaConf_Configure_Groups_Group_Bmp_Station_Connection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_StationAddress represents the /nokia-conf/configure/groups/group/bmp/station/connection/station-address YANG schema element.
type NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_StationAddress struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
	Port      *int32  `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_StationAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_StationAddress) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_StationAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_StationAddress) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_StationAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_StationAddress) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_StationAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_StationAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_StationAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_StationAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_StationAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_StationAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_StationAddress.
func (*NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_StationAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive represents the /nokia-conf/configure/groups/group/bmp/station/connection/tcp-keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive struct {
	AdminState   E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	KeepCount    *uint32                     `path:"keep-count" module:"nokia-conf"`
	KeepIdle     *uint32                     `path:"keep-idle" module:"nokia-conf"`
	KeepInterval *uint32                     `path:"keep-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetKeepCount retrieves the value of the leaf KeepCount from the NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepCount is set, it can
// safely use t.GetKeepCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive) GetKeepCount() uint32 {
	if t == nil || t.KeepCount == nil {
		return 4
	}
	return *t.KeepCount
}

// GetKeepIdle retrieves the value of the leaf KeepIdle from the NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepIdle is set, it can
// safely use t.GetKeepIdle() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepIdle == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive) GetKeepIdle() uint32 {
	if t == nil || t.KeepIdle == nil {
		return 600
	}
	return *t.KeepIdle
}

// GetKeepInterval retrieves the value of the leaf KeepInterval from the NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepInterval is set, it can
// safely use t.GetKeepInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive) GetKeepInterval() uint32 {
	if t == nil || t.KeepInterval == nil {
		return 15
	}
	return *t.KeepInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.KeepCount == nil {
		var v uint32 = 4
		t.KeepCount = &v
	}
	if t.KeepIdle == nil {
		var v uint32 = 600
		t.KeepIdle = &v
	}
	if t.KeepInterval == nil {
		var v uint32 = 15
		t.KeepInterval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive.
func (*NokiaConf_Configure_Groups_Group_Bmp_Station_Connection_TcpKeepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Bmp_Station_Family represents the /nokia-conf/configure/groups/group/bmp/station/family YANG schema element.
type NokiaConf_Configure_Groups_Group_Bmp_Station_Family struct {
	Evpn         *bool `path:"evpn" module:"nokia-conf"`
	Ipv4         *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6         *bool `path:"ipv6" module:"nokia-conf"`
	L2Vpn        *bool `path:"l2-vpn" module:"nokia-conf"`
	LabelIpv4    *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6    *bool `path:"label-ipv6" module:"nokia-conf"`
	McastIpv4    *bool `path:"mcast-ipv4" module:"nokia-conf"`
	McastIpv6    *bool `path:"mcast-ipv6" module:"nokia-conf"`
	McastVpnIpv4 *bool `path:"mcast-vpn-ipv4" module:"nokia-conf"`
	McastVpnIpv6 *bool `path:"mcast-vpn-ipv6" module:"nokia-conf"`
	VpnIpv4      *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6      *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Bmp_Station_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Bmp_Station_Family) IsYANGGoStruct() {}

// GetEvpn retrieves the value of the leaf Evpn from the NokiaConf_Configure_Groups_Group_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evpn is set, it can
// safely use t.GetEvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Family) GetEvpn() bool {
	if t == nil || t.Evpn == nil {
		return false
	}
	return *t.Evpn
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Family) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return true
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Family) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetL2Vpn retrieves the value of the leaf L2Vpn from the NokiaConf_Configure_Groups_Group_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Vpn is set, it can
// safely use t.GetL2Vpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Vpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Family) GetL2Vpn() bool {
	if t == nil || t.L2Vpn == nil {
		return false
	}
	return *t.L2Vpn
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Family) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Family) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetMcastIpv4 retrieves the value of the leaf McastIpv4 from the NokiaConf_Configure_Groups_Group_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv4 is set, it can
// safely use t.GetMcastIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Family) GetMcastIpv4() bool {
	if t == nil || t.McastIpv4 == nil {
		return false
	}
	return *t.McastIpv4
}

// GetMcastIpv6 retrieves the value of the leaf McastIpv6 from the NokiaConf_Configure_Groups_Group_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv6 is set, it can
// safely use t.GetMcastIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Family) GetMcastIpv6() bool {
	if t == nil || t.McastIpv6 == nil {
		return false
	}
	return *t.McastIpv6
}

// GetMcastVpnIpv4 retrieves the value of the leaf McastVpnIpv4 from the NokiaConf_Configure_Groups_Group_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastVpnIpv4 is set, it can
// safely use t.GetMcastVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastVpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Family) GetMcastVpnIpv4() bool {
	if t == nil || t.McastVpnIpv4 == nil {
		return false
	}
	return *t.McastVpnIpv4
}

// GetMcastVpnIpv6 retrieves the value of the leaf McastVpnIpv6 from the NokiaConf_Configure_Groups_Group_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastVpnIpv6 is set, it can
// safely use t.GetMcastVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastVpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Family) GetMcastVpnIpv6() bool {
	if t == nil || t.McastVpnIpv6 == nil {
		return false
	}
	return *t.McastVpnIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Family) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Family) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Bmp_Station_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Evpn == nil {
		var v bool = false
		t.Evpn = &v
	}
	if t.Ipv4 == nil {
		var v bool = true
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.L2Vpn == nil {
		var v bool = false
		t.L2Vpn = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.McastIpv4 == nil {
		var v bool = false
		t.McastIpv4 = &v
	}
	if t.McastIpv6 == nil {
		var v bool = false
		t.McastIpv6 = &v
	}
	if t.McastVpnIpv4 == nil {
		var v bool = false
		t.McastVpnIpv4 = &v
	}
	if t.McastVpnIpv6 == nil {
		var v bool = false
		t.McastVpnIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Bmp_Station_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Bmp_Station_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Bmp_Station_Family.
func (*NokiaConf_Configure_Groups_Group_Bmp_Station_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_CallTrace represents the /nokia-conf/configure/groups/group/call-trace YANG schema element.
type NokiaConf_Configure_Groups_Group_CallTrace struct {
	Buffering      *bool                                                                                                                           `path:"buffering" module:"nokia-conf"`
	Location       map[NokiaConf_Configure_Groups_Group_CallTrace_Location_LocationType_Union]*NokiaConf_Configure_Groups_Group_CallTrace_Location `path:"location" module:"nokia-conf"`
	MaxFilesNumber *uint32                                                                                                                         `path:"max-files-number" module:"nokia-conf"`
	PrimaryCf      E_NokiaConf_Configure_Groups_Group_CallTrace_PrimaryCf                                                                          `path:"primary-cf" module:"nokia-conf"`
	TraceProfile   map[string]*NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile                                                             `path:"trace-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_CallTrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_CallTrace) IsYANGGoStruct() {}

// NewLocation creates a new entry in the Location list of the
// NokiaConf_Configure_Groups_Group_CallTrace struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_CallTrace) NewLocation(LocationType NokiaConf_Configure_Groups_Group_CallTrace_Location_LocationType_Union) (*NokiaConf_Configure_Groups_Group_CallTrace_Location, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Location == nil {
		t.Location = make(map[NokiaConf_Configure_Groups_Group_CallTrace_Location_LocationType_Union]*NokiaConf_Configure_Groups_Group_CallTrace_Location)
	}

	key := LocationType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Location[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Location", key)
	}

	t.Location[key] = &NokiaConf_Configure_Groups_Group_CallTrace_Location{
		LocationType: LocationType,
	}

	return t.Location[key], nil
}

// RenameLocation renames an entry in the list Location within
// the NokiaConf_Configure_Groups_Group_CallTrace struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace) RenameLocation(oldK, newK NokiaConf_Configure_Groups_Group_CallTrace_Location_LocationType_Union) error {
	if _, ok := t.Location[newK]; ok {
		return fmt.Errorf("key %v already exists in Location", newK)
	}

	e, ok := t.Location[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Location", oldK)
	}
	e.LocationType = newK

	t.Location[newK] = e
	delete(t.Location, oldK)
	return nil
}

// GetOrCreateLocation retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_CallTrace. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_CallTrace) GetOrCreateLocation(LocationType NokiaConf_Configure_Groups_Group_CallTrace_Location_LocationType_Union) *NokiaConf_Configure_Groups_Group_CallTrace_Location {

	key := LocationType

	if v, ok := t.Location[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocation(LocationType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocation got unexpected error: %v", err))
	}
	return v
}

// GetLocation retrieves the value with the specified key from
// the Location map field of NokiaConf_Configure_Groups_Group_CallTrace. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_CallTrace) GetLocation(LocationType NokiaConf_Configure_Groups_Group_CallTrace_Location_LocationType_Union) *NokiaConf_Configure_Groups_Group_CallTrace_Location {

	if t == nil {
		return nil
	}

	key := LocationType

	if lm, ok := t.Location[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocation deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_CallTrace. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_CallTrace) DeleteLocation(LocationType NokiaConf_Configure_Groups_Group_CallTrace_Location_LocationType_Union) {
	key := LocationType

	delete(t.Location, key)
}

// AppendLocation appends the supplied NokiaConf_Configure_Groups_Group_CallTrace_Location struct to the
// list Location of NokiaConf_Configure_Groups_Group_CallTrace. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_CallTrace_Location already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_CallTrace) AppendLocation(v *NokiaConf_Configure_Groups_Group_CallTrace_Location) error {
	key := v.LocationType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Location == nil {
		t.Location = make(map[NokiaConf_Configure_Groups_Group_CallTrace_Location_LocationType_Union]*NokiaConf_Configure_Groups_Group_CallTrace_Location)
	}

	if _, ok := t.Location[key]; ok {
		return fmt.Errorf("duplicate key for list Location %v", key)
	}

	t.Location[key] = v
	return nil
}

// NewTraceProfile creates a new entry in the TraceProfile list of the
// NokiaConf_Configure_Groups_Group_CallTrace struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_CallTrace) NewTraceProfile(Name string) (*NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TraceProfile == nil {
		t.TraceProfile = make(map[string]*NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TraceProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TraceProfile", key)
	}

	t.TraceProfile[key] = &NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile{
		Name: &Name,
	}

	return t.TraceProfile[key], nil
}

// RenameTraceProfile renames an entry in the list TraceProfile within
// the NokiaConf_Configure_Groups_Group_CallTrace struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace) RenameTraceProfile(oldK, newK string) error {
	if _, ok := t.TraceProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in TraceProfile", newK)
	}

	e, ok := t.TraceProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TraceProfile", oldK)
	}
	e.Name = &newK

	t.TraceProfile[newK] = e
	delete(t.TraceProfile, oldK)
	return nil
}

// GetOrCreateTraceProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_CallTrace. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_CallTrace) GetOrCreateTraceProfile(Name string) *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile {

	key := Name

	if v, ok := t.TraceProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTraceProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTraceProfile got unexpected error: %v", err))
	}
	return v
}

// GetTraceProfile retrieves the value with the specified key from
// the TraceProfile map field of NokiaConf_Configure_Groups_Group_CallTrace. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_CallTrace) GetTraceProfile(Name string) *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.TraceProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteTraceProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_CallTrace. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_CallTrace) DeleteTraceProfile(Name string) {
	key := Name

	delete(t.TraceProfile, key)
}

// AppendTraceProfile appends the supplied NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile struct to the
// list TraceProfile of NokiaConf_Configure_Groups_Group_CallTrace. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_CallTrace) AppendTraceProfile(v *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TraceProfile == nil {
		t.TraceProfile = make(map[string]*NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile)
	}

	if _, ok := t.TraceProfile[key]; ok {
		return fmt.Errorf("duplicate key for list TraceProfile %v", key)
	}

	t.TraceProfile[key] = v
	return nil
}

// GetBuffering retrieves the value of the leaf Buffering from the NokiaConf_Configure_Groups_Group_CallTrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Buffering is set, it can
// safely use t.GetBuffering() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Buffering == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace) GetBuffering() bool {
	if t == nil || t.Buffering == nil {
		return false
	}
	return *t.Buffering
}

// GetMaxFilesNumber retrieves the value of the leaf MaxFilesNumber from the NokiaConf_Configure_Groups_Group_CallTrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxFilesNumber is set, it can
// safely use t.GetMaxFilesNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxFilesNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace) GetMaxFilesNumber() uint32 {
	if t == nil || t.MaxFilesNumber == nil {
		return 200
	}
	return *t.MaxFilesNumber
}

// GetPrimaryCf retrieves the value of the leaf PrimaryCf from the NokiaConf_Configure_Groups_Group_CallTrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryCf is set, it can
// safely use t.GetPrimaryCf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryCf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace) GetPrimaryCf() E_NokiaConf_Configure_Groups_Group_CallTrace_PrimaryCf {
	if t == nil || t.PrimaryCf == 0 {
		return NokiaConf_Configure_Groups_Group_CallTrace_PrimaryCf_cf1
	}
	return t.PrimaryCf
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_CallTrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_CallTrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Buffering == nil {
		var v bool = false
		t.Buffering = &v
	}
	if t.MaxFilesNumber == nil {
		var v uint32 = 200
		t.MaxFilesNumber = &v
	}
	if t.PrimaryCf == 0 {
		t.PrimaryCf = NokiaConf_Configure_Groups_Group_CallTrace_PrimaryCf_cf1
	}
	for _, e := range t.Location {
		e.PopulateDefaults()
	}
	for _, e := range t.TraceProfile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_CallTrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_CallTrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_CallTrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_CallTrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_CallTrace.
func (*NokiaConf_Configure_Groups_Group_CallTrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_CallTrace_Location represents the /nokia-conf/configure/groups/group/call-trace/location YANG schema element.
type NokiaConf_Configure_Groups_Group_CallTrace_Location struct {
	AdminState   E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	LocationType NokiaConf_Configure_Groups_Group_CallTrace_Location_LocationType_Union `path:"location-type" module:"nokia-conf"`
	SizeLimit    NokiaConf_Configure_Groups_Group_CallTrace_Location_SizeLimit_Union    `path:"size-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_CallTrace_Location implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_CallTrace_Location) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_CallTrace_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_Location) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetLocationType retrieves the value of the leaf LocationType from the NokiaConf_Configure_Groups_Group_CallTrace_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocationType is set, it can
// safely use t.GetLocationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_Location) GetLocationType() NokiaConf_Configure_Groups_Group_CallTrace_Location_LocationType_Union {
	if t == nil || t.LocationType == nil {
		return nil
	}
	return t.LocationType
}

// GetSizeLimit retrieves the value of the leaf SizeLimit from the NokiaConf_Configure_Groups_Group_CallTrace_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeLimit is set, it can
// safely use t.GetSizeLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_Location) GetSizeLimit() NokiaConf_Configure_Groups_Group_CallTrace_Location_SizeLimit_Union {
	if t == nil || t.SizeLimit == nil {
		return UnionUint32(1000)
	}
	return t.SizeLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_CallTrace_Location
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_Location) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.SizeLimit == nil {
		t.SizeLimit = UnionUint32(1000)
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_CallTrace_Location struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_Location) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"location-type": t.LocationType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_Location) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_CallTrace_Location"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_Location) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_Location) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_CallTrace_Location.
func (*NokiaConf_Configure_Groups_Group_CallTrace_Location) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile represents the /nokia-conf/configure/groups/group/call-trace/trace-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile struct {
	Applications *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications `path:"applications" module:"nokia-conf"`
	Description  *string                                                               `path:"description" module:"nokia-conf"`
	Events       E_NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Events      `path:"events" module:"nokia-conf"`
	Name         *string                                                               `path:"name" module:"nokia-conf"`
	Output       *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output       `path:"output" module:"nokia-conf"`
	SizeLimit    *uint32                                                               `path:"size-limit" module:"nokia-conf"`
	TimeLimit    *uint32                                                               `path:"time-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile) IsYANGGoStruct() {}

// GetOrCreateApplications retrieves the value of the Applications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile) GetOrCreateApplications() *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications {
	if t.Applications != nil {
		return t.Applications
	}
	t.Applications = &NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications{}
	return t.Applications
}

// GetOrCreateOutput retrieves the value of the Output field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile) GetOrCreateOutput() *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output {
	if t.Output != nil {
		return t.Output
	}
	t.Output = &NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output{}
	return t.Output
}

// GetApplications returns the value of the Applications struct pointer
// from NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile. If the receiver or the field Applications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile) GetApplications() *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications {
	if t != nil && t.Applications != nil {
		return t.Applications
	}
	return nil
}

// GetOutput returns the value of the Output struct pointer
// from NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile. If the receiver or the field Output is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile) GetOutput() *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output {
	if t != nil && t.Output != nil {
		return t.Output
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEvents retrieves the value of the leaf Events from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Events is set, it can
// safely use t.GetEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Events == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile) GetEvents() E_NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Events {
	if t == nil || t.Events == 0 {
		return 0
	}
	return t.Events
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSizeLimit retrieves the value of the leaf SizeLimit from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeLimit is set, it can
// safely use t.GetSizeLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile) GetSizeLimit() uint32 {
	if t == nil || t.SizeLimit == nil {
		return 10
	}
	return *t.SizeLimit
}

// GetTimeLimit retrieves the value of the leaf TimeLimit from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeLimit is set, it can
// safely use t.GetTimeLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile) GetTimeLimit() uint32 {
	if t == nil || t.TimeLimit == nil {
		return 86400
	}
	return *t.TimeLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SizeLimit == nil {
		var v uint32 = 10
		t.SizeLimit = &v
	}
	if t.TimeLimit == nil {
		var v uint32 = 86400
		t.TimeLimit = &v
	}
	t.Applications.PopulateDefaults()
	t.Output.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile.
func (*NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications represents the /nokia-conf/configure/groups/group/call-trace/trace-profile/applications YANG schema element.
type NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications struct {
	ConnectivityManagement *bool `path:"connectivity-management" module:"nokia-conf"`
	Gx                     *bool `path:"gx" module:"nokia-conf"`
	Gy                     *bool `path:"gy" module:"nokia-conf"`
	Ludb                   *bool `path:"ludb" module:"nokia-conf"`
	Msap                   *bool `path:"msap" module:"nokia-conf"`
	Nasreq                 *bool `path:"nasreq" module:"nokia-conf"`
	PppEvent               *bool `path:"ppp-event" module:"nokia-conf"`
	Python                 *bool `path:"python" module:"nokia-conf"`
	RadiusAcct             *bool `path:"radius-acct" module:"nokia-conf"`
	RadiusAuth             *bool `path:"radius-auth" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications) IsYANGGoStruct() {}

// GetConnectivityManagement retrieves the value of the leaf ConnectivityManagement from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectivityManagement is set, it can
// safely use t.GetConnectivityManagement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectivityManagement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications) GetConnectivityManagement() bool {
	if t == nil || t.ConnectivityManagement == nil {
		return true
	}
	return *t.ConnectivityManagement
}

// GetGx retrieves the value of the leaf Gx from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gx is set, it can
// safely use t.GetGx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gx == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications) GetGx() bool {
	if t == nil || t.Gx == nil {
		return false
	}
	return *t.Gx
}

// GetGy retrieves the value of the leaf Gy from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gy is set, it can
// safely use t.GetGy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications) GetGy() bool {
	if t == nil || t.Gy == nil {
		return false
	}
	return *t.Gy
}

// GetLudb retrieves the value of the leaf Ludb from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ludb is set, it can
// safely use t.GetLudb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ludb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications) GetLudb() bool {
	if t == nil || t.Ludb == nil {
		return true
	}
	return *t.Ludb
}

// GetMsap retrieves the value of the leaf Msap from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Msap is set, it can
// safely use t.GetMsap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Msap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications) GetMsap() bool {
	if t == nil || t.Msap == nil {
		return true
	}
	return *t.Msap
}

// GetNasreq retrieves the value of the leaf Nasreq from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Nasreq is set, it can
// safely use t.GetNasreq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Nasreq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications) GetNasreq() bool {
	if t == nil || t.Nasreq == nil {
		return false
	}
	return *t.Nasreq
}

// GetPppEvent retrieves the value of the leaf PppEvent from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppEvent is set, it can
// safely use t.GetPppEvent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppEvent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications) GetPppEvent() bool {
	if t == nil || t.PppEvent == nil {
		return false
	}
	return *t.PppEvent
}

// GetPython retrieves the value of the leaf Python from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Python is set, it can
// safely use t.GetPython() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Python == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications) GetPython() bool {
	if t == nil || t.Python == nil {
		return true
	}
	return *t.Python
}

// GetRadiusAcct retrieves the value of the leaf RadiusAcct from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAcct is set, it can
// safely use t.GetRadiusAcct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAcct == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications) GetRadiusAcct() bool {
	if t == nil || t.RadiusAcct == nil {
		return true
	}
	return *t.RadiusAcct
}

// GetRadiusAuth retrieves the value of the leaf RadiusAuth from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAuth is set, it can
// safely use t.GetRadiusAuth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAuth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications) GetRadiusAuth() bool {
	if t == nil || t.RadiusAuth == nil {
		return true
	}
	return *t.RadiusAuth
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ConnectivityManagement == nil {
		var v bool = true
		t.ConnectivityManagement = &v
	}
	if t.Ludb == nil {
		var v bool = true
		t.Ludb = &v
	}
	if t.Msap == nil {
		var v bool = true
		t.Msap = &v
	}
	if t.PppEvent == nil {
		var v bool = false
		t.PppEvent = &v
	}
	if t.Python == nil {
		var v bool = true
		t.Python = &v
	}
	if t.RadiusAcct == nil {
		var v bool = true
		t.RadiusAcct = &v
	}
	if t.RadiusAuth == nil {
		var v bool = true
		t.RadiusAuth = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications.
func (*NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Applications) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output represents the /nokia-conf/configure/groups/group/call-trace/trace-profile/output YANG schema element.
type NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output struct {
	Debug        YANGEmpty                                                            `path:"debug" module:"nokia-conf"`
	Live         *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live `path:"live" module:"nokia-conf" yangPresence:"true"`
	LocalStorage YANGEmpty                                                            `path:"local-storage" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output) IsYANGGoStruct() {}

// GetOrCreateLive retrieves the value of the Live field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output) GetOrCreateLive() *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live {
	if t.Live != nil {
		return t.Live
	}
	t.Live = &NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live{}
	return t.Live
}

// GetLive returns the value of the Live struct pointer
// from NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output. If the receiver or the field Live is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output) GetLive() *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live {
	if t != nil && t.Live != nil {
		return t.Live
	}
	return nil
}

// GetDebug retrieves the value of the leaf Debug from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Debug is set, it can
// safely use t.GetDebug() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Debug == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output) GetDebug() YANGEmpty {
	if t == nil || t.Debug == false {
		return false
	}
	return t.Debug
}

// GetLocalStorage retrieves the value of the leaf LocalStorage from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalStorage is set, it can
// safely use t.GetLocalStorage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalStorage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output) GetLocalStorage() YANGEmpty {
	if t == nil || t.LocalStorage == false {
		return false
	}
	return t.LocalStorage
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Live.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output.
func (*NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live represents the /nokia-conf/configure/groups/group/call-trace/trace-profile/output/live YANG schema element.
type NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live struct {
	Fqdn           *string `path:"fqdn" module:"nokia-conf"`
	IpAddress      *string `path:"ip-address" module:"nokia-conf"`
	Port           *uint32 `path:"port" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live) IsYANGGoStruct() {}

// GetFqdn retrieves the value of the leaf Fqdn from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fqdn is set, it can
// safely use t.GetFqdn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fqdn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live) GetFqdn() string {
	if t == nil || t.Fqdn == nil {
		return ""
	}
	return *t.Fqdn
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live) GetPort() uint32 {
	if t == nil || t.Port == nil {
		return 29770
	}
	return *t.Port
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "Base"
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v uint32 = 29770
		t.Port = &v
	}
	if t.RouterInstance == nil {
		var v string = "Base"
		t.RouterInstance = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live.
func (*NokiaConf_Configure_Groups_Group_CallTrace_TraceProfile_Output_Live) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card represents the /nokia-conf/configure/groups/group/card YANG schema element.
type NokiaConf_Configure_Groups_Group_Card struct {
	AdminState                 E_NokiaTypesSros_AdminState                                                                                         `path:"admin-state" module:"nokia-conf"`
	CardType                   E_NokiaTypesCard_SrosIomType                                                                                        `path:"card-type" module:"nokia-conf"`
	Event                      map[NokiaConf_Configure_Groups_Group_Card_Event_Type_Union]*NokiaConf_Configure_Groups_Group_Card_Event             `path:"event" module:"nokia-conf"`
	FailOnError                *bool                                                                                                               `path:"fail-on-error" module:"nokia-conf"`
	FilterProfile              E_NokiaTypesCard_FilterProfile                                                                                      `path:"filter-profile" module:"nokia-conf"`
	Fp                         map[NokiaConf_Configure_Groups_Group_Card_Fp_FpNumber_Union]*NokiaConf_Configure_Groups_Group_Card_Fp               `path:"fp" module:"nokia-conf"`
	HashSeedShift              *uint32                                                                                                             `path:"hash-seed-shift" module:"nokia-conf"`
	Level                      E_NokiaTypesCard_SrosIomLevel                                                                                       `path:"level" module:"nokia-conf"`
	Mda                        map[NokiaConf_Configure_Groups_Group_Card_Mda_MdaSlot_Union]*NokiaConf_Configure_Groups_Group_Card_Mda              `path:"mda" module:"nokia-conf"`
	PowerSave                  *bool                                                                                                               `path:"power-save" module:"nokia-conf"`
	ResetOnRecoverableError    *bool                                                                                                               `path:"reset-on-recoverable-error" module:"nokia-conf"`
	SlotNumber                 NokiaConf_Configure_Groups_Group_Card_SlotNumber_Union                                                              `path:"slot-number" module:"nokia-conf"`
	Upgrade                    map[NokiaConf_Configure_Groups_Group_Card_Upgrade_UpgradeIndex_Union]*NokiaConf_Configure_Groups_Group_Card_Upgrade `path:"upgrade" module:"nokia-conf"`
	VirtualSchedulerAdjustment *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment                                                   `path:"virtual-scheduler-adjustment" module:"nokia-conf" yangPresence:"true"`
	Xiom                       map[string]*NokiaConf_Configure_Groups_Group_Card_Xiom                                                              `path:"xiom" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// NokiaConf_Configure_Groups_Group_Card struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card) NewEvent(Type NokiaConf_Configure_Groups_Group_Card_Event_Type_Union) (*NokiaConf_Configure_Groups_Group_Card_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[NokiaConf_Configure_Groups_Group_Card_Event_Type_Union]*NokiaConf_Configure_Groups_Group_Card_Event)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &NokiaConf_Configure_Groups_Group_Card_Event{
		Type: Type,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the NokiaConf_Configure_Groups_Group_Card struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card) RenameEvent(oldK, newK NokiaConf_Configure_Groups_Group_Card_Event_Type_Union) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.Type = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card) GetOrCreateEvent(Type NokiaConf_Configure_Groups_Group_Card_Event_Type_Union) *NokiaConf_Configure_Groups_Group_Card_Event {

	key := Type

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of NokiaConf_Configure_Groups_Group_Card. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card) GetEvent(Type NokiaConf_Configure_Groups_Group_Card_Event_Type_Union) *NokiaConf_Configure_Groups_Group_Card_Event {

	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card) DeleteEvent(Type NokiaConf_Configure_Groups_Group_Card_Event_Type_Union) {
	key := Type

	delete(t.Event, key)
}

// AppendEvent appends the supplied NokiaConf_Configure_Groups_Group_Card_Event struct to the
// list Event of NokiaConf_Configure_Groups_Group_Card. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Event already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card) AppendEvent(v *NokiaConf_Configure_Groups_Group_Card_Event) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[NokiaConf_Configure_Groups_Group_Card_Event_Type_Union]*NokiaConf_Configure_Groups_Group_Card_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// NewFp creates a new entry in the Fp list of the
// NokiaConf_Configure_Groups_Group_Card struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card) NewFp(FpNumber NokiaConf_Configure_Groups_Group_Card_Fp_FpNumber_Union) (*NokiaConf_Configure_Groups_Group_Card_Fp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fp == nil {
		t.Fp = make(map[NokiaConf_Configure_Groups_Group_Card_Fp_FpNumber_Union]*NokiaConf_Configure_Groups_Group_Card_Fp)
	}

	key := FpNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fp", key)
	}

	t.Fp[key] = &NokiaConf_Configure_Groups_Group_Card_Fp{
		FpNumber: FpNumber,
	}

	return t.Fp[key], nil
}

// RenameFp renames an entry in the list Fp within
// the NokiaConf_Configure_Groups_Group_Card struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card) RenameFp(oldK, newK NokiaConf_Configure_Groups_Group_Card_Fp_FpNumber_Union) error {
	if _, ok := t.Fp[newK]; ok {
		return fmt.Errorf("key %v already exists in Fp", newK)
	}

	e, ok := t.Fp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fp", oldK)
	}
	e.FpNumber = newK

	t.Fp[newK] = e
	delete(t.Fp, oldK)
	return nil
}

// GetOrCreateFp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card) GetOrCreateFp(FpNumber NokiaConf_Configure_Groups_Group_Card_Fp_FpNumber_Union) *NokiaConf_Configure_Groups_Group_Card_Fp {

	key := FpNumber

	if v, ok := t.Fp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFp(FpNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFp got unexpected error: %v", err))
	}
	return v
}

// GetFp retrieves the value with the specified key from
// the Fp map field of NokiaConf_Configure_Groups_Group_Card. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card) GetFp(FpNumber NokiaConf_Configure_Groups_Group_Card_Fp_FpNumber_Union) *NokiaConf_Configure_Groups_Group_Card_Fp {

	if t == nil {
		return nil
	}

	key := FpNumber

	if lm, ok := t.Fp[key]; ok {
		return lm
	}
	return nil
}

// DeleteFp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card) DeleteFp(FpNumber NokiaConf_Configure_Groups_Group_Card_Fp_FpNumber_Union) {
	key := FpNumber

	delete(t.Fp, key)
}

// AppendFp appends the supplied NokiaConf_Configure_Groups_Group_Card_Fp struct to the
// list Fp of NokiaConf_Configure_Groups_Group_Card. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Fp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card) AppendFp(v *NokiaConf_Configure_Groups_Group_Card_Fp) error {
	key := v.FpNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fp == nil {
		t.Fp = make(map[NokiaConf_Configure_Groups_Group_Card_Fp_FpNumber_Union]*NokiaConf_Configure_Groups_Group_Card_Fp)
	}

	if _, ok := t.Fp[key]; ok {
		return fmt.Errorf("duplicate key for list Fp %v", key)
	}

	t.Fp[key] = v
	return nil
}

// NewMda creates a new entry in the Mda list of the
// NokiaConf_Configure_Groups_Group_Card struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card) NewMda(MdaSlot NokiaConf_Configure_Groups_Group_Card_Mda_MdaSlot_Union) (*NokiaConf_Configure_Groups_Group_Card_Mda, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[NokiaConf_Configure_Groups_Group_Card_Mda_MdaSlot_Union]*NokiaConf_Configure_Groups_Group_Card_Mda)
	}

	key := MdaSlot

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mda[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mda", key)
	}

	t.Mda[key] = &NokiaConf_Configure_Groups_Group_Card_Mda{
		MdaSlot: MdaSlot,
	}

	return t.Mda[key], nil
}

// RenameMda renames an entry in the list Mda within
// the NokiaConf_Configure_Groups_Group_Card struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card) RenameMda(oldK, newK NokiaConf_Configure_Groups_Group_Card_Mda_MdaSlot_Union) error {
	if _, ok := t.Mda[newK]; ok {
		return fmt.Errorf("key %v already exists in Mda", newK)
	}

	e, ok := t.Mda[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mda", oldK)
	}
	e.MdaSlot = newK

	t.Mda[newK] = e
	delete(t.Mda, oldK)
	return nil
}

// GetOrCreateMda retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card) GetOrCreateMda(MdaSlot NokiaConf_Configure_Groups_Group_Card_Mda_MdaSlot_Union) *NokiaConf_Configure_Groups_Group_Card_Mda {

	key := MdaSlot

	if v, ok := t.Mda[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMda(MdaSlot)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMda got unexpected error: %v", err))
	}
	return v
}

// GetMda retrieves the value with the specified key from
// the Mda map field of NokiaConf_Configure_Groups_Group_Card. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card) GetMda(MdaSlot NokiaConf_Configure_Groups_Group_Card_Mda_MdaSlot_Union) *NokiaConf_Configure_Groups_Group_Card_Mda {

	if t == nil {
		return nil
	}

	key := MdaSlot

	if lm, ok := t.Mda[key]; ok {
		return lm
	}
	return nil
}

// DeleteMda deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card) DeleteMda(MdaSlot NokiaConf_Configure_Groups_Group_Card_Mda_MdaSlot_Union) {
	key := MdaSlot

	delete(t.Mda, key)
}

// AppendMda appends the supplied NokiaConf_Configure_Groups_Group_Card_Mda struct to the
// list Mda of NokiaConf_Configure_Groups_Group_Card. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Mda already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card) AppendMda(v *NokiaConf_Configure_Groups_Group_Card_Mda) error {
	key := v.MdaSlot

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[NokiaConf_Configure_Groups_Group_Card_Mda_MdaSlot_Union]*NokiaConf_Configure_Groups_Group_Card_Mda)
	}

	if _, ok := t.Mda[key]; ok {
		return fmt.Errorf("duplicate key for list Mda %v", key)
	}

	t.Mda[key] = v
	return nil
}

// NewUpgrade creates a new entry in the Upgrade list of the
// NokiaConf_Configure_Groups_Group_Card struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card) NewUpgrade(UpgradeIndex NokiaConf_Configure_Groups_Group_Card_Upgrade_UpgradeIndex_Union) (*NokiaConf_Configure_Groups_Group_Card_Upgrade, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Upgrade == nil {
		t.Upgrade = make(map[NokiaConf_Configure_Groups_Group_Card_Upgrade_UpgradeIndex_Union]*NokiaConf_Configure_Groups_Group_Card_Upgrade)
	}

	key := UpgradeIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Upgrade[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Upgrade", key)
	}

	t.Upgrade[key] = &NokiaConf_Configure_Groups_Group_Card_Upgrade{
		UpgradeIndex: UpgradeIndex,
	}

	return t.Upgrade[key], nil
}

// RenameUpgrade renames an entry in the list Upgrade within
// the NokiaConf_Configure_Groups_Group_Card struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card) RenameUpgrade(oldK, newK NokiaConf_Configure_Groups_Group_Card_Upgrade_UpgradeIndex_Union) error {
	if _, ok := t.Upgrade[newK]; ok {
		return fmt.Errorf("key %v already exists in Upgrade", newK)
	}

	e, ok := t.Upgrade[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Upgrade", oldK)
	}
	e.UpgradeIndex = newK

	t.Upgrade[newK] = e
	delete(t.Upgrade, oldK)
	return nil
}

// GetOrCreateUpgrade retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card) GetOrCreateUpgrade(UpgradeIndex NokiaConf_Configure_Groups_Group_Card_Upgrade_UpgradeIndex_Union) *NokiaConf_Configure_Groups_Group_Card_Upgrade {

	key := UpgradeIndex

	if v, ok := t.Upgrade[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUpgrade(UpgradeIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUpgrade got unexpected error: %v", err))
	}
	return v
}

// GetUpgrade retrieves the value with the specified key from
// the Upgrade map field of NokiaConf_Configure_Groups_Group_Card. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card) GetUpgrade(UpgradeIndex NokiaConf_Configure_Groups_Group_Card_Upgrade_UpgradeIndex_Union) *NokiaConf_Configure_Groups_Group_Card_Upgrade {

	if t == nil {
		return nil
	}

	key := UpgradeIndex

	if lm, ok := t.Upgrade[key]; ok {
		return lm
	}
	return nil
}

// DeleteUpgrade deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card) DeleteUpgrade(UpgradeIndex NokiaConf_Configure_Groups_Group_Card_Upgrade_UpgradeIndex_Union) {
	key := UpgradeIndex

	delete(t.Upgrade, key)
}

// AppendUpgrade appends the supplied NokiaConf_Configure_Groups_Group_Card_Upgrade struct to the
// list Upgrade of NokiaConf_Configure_Groups_Group_Card. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Upgrade already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card) AppendUpgrade(v *NokiaConf_Configure_Groups_Group_Card_Upgrade) error {
	key := v.UpgradeIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Upgrade == nil {
		t.Upgrade = make(map[NokiaConf_Configure_Groups_Group_Card_Upgrade_UpgradeIndex_Union]*NokiaConf_Configure_Groups_Group_Card_Upgrade)
	}

	if _, ok := t.Upgrade[key]; ok {
		return fmt.Errorf("duplicate key for list Upgrade %v", key)
	}

	t.Upgrade[key] = v
	return nil
}

// NewXiom creates a new entry in the Xiom list of the
// NokiaConf_Configure_Groups_Group_Card struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card) NewXiom(XiomSlot string) (*NokiaConf_Configure_Groups_Group_Card_Xiom, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Xiom == nil {
		t.Xiom = make(map[string]*NokiaConf_Configure_Groups_Group_Card_Xiom)
	}

	key := XiomSlot

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Xiom[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Xiom", key)
	}

	t.Xiom[key] = &NokiaConf_Configure_Groups_Group_Card_Xiom{
		XiomSlot: &XiomSlot,
	}

	return t.Xiom[key], nil
}

// RenameXiom renames an entry in the list Xiom within
// the NokiaConf_Configure_Groups_Group_Card struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card) RenameXiom(oldK, newK string) error {
	if _, ok := t.Xiom[newK]; ok {
		return fmt.Errorf("key %v already exists in Xiom", newK)
	}

	e, ok := t.Xiom[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Xiom", oldK)
	}
	e.XiomSlot = &newK

	t.Xiom[newK] = e
	delete(t.Xiom, oldK)
	return nil
}

// GetOrCreateXiom retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card) GetOrCreateXiom(XiomSlot string) *NokiaConf_Configure_Groups_Group_Card_Xiom {

	key := XiomSlot

	if v, ok := t.Xiom[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewXiom(XiomSlot)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateXiom got unexpected error: %v", err))
	}
	return v
}

// GetXiom retrieves the value with the specified key from
// the Xiom map field of NokiaConf_Configure_Groups_Group_Card. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card) GetXiom(XiomSlot string) *NokiaConf_Configure_Groups_Group_Card_Xiom {

	if t == nil {
		return nil
	}

	key := XiomSlot

	if lm, ok := t.Xiom[key]; ok {
		return lm
	}
	return nil
}

// DeleteXiom deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card) DeleteXiom(XiomSlot string) {
	key := XiomSlot

	delete(t.Xiom, key)
}

// AppendXiom appends the supplied NokiaConf_Configure_Groups_Group_Card_Xiom struct to the
// list Xiom of NokiaConf_Configure_Groups_Group_Card. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Xiom already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card) AppendXiom(v *NokiaConf_Configure_Groups_Group_Card_Xiom) error {
	if v.XiomSlot == nil {
		return fmt.Errorf("invalid nil key received for XiomSlot")
	}

	key := *v.XiomSlot

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Xiom == nil {
		t.Xiom = make(map[string]*NokiaConf_Configure_Groups_Group_Card_Xiom)
	}

	if _, ok := t.Xiom[key]; ok {
		return fmt.Errorf("duplicate key for list Xiom %v", key)
	}

	t.Xiom[key] = v
	return nil
}

// GetOrCreateVirtualSchedulerAdjustment retrieves the value of the VirtualSchedulerAdjustment field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card) GetOrCreateVirtualSchedulerAdjustment() *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment {
	if t.VirtualSchedulerAdjustment != nil {
		return t.VirtualSchedulerAdjustment
	}
	t.VirtualSchedulerAdjustment = &NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment{}
	return t.VirtualSchedulerAdjustment
}

// GetVirtualSchedulerAdjustment returns the value of the VirtualSchedulerAdjustment struct pointer
// from NokiaConf_Configure_Groups_Group_Card. If the receiver or the field VirtualSchedulerAdjustment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card) GetVirtualSchedulerAdjustment() *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment {
	if t != nil && t.VirtualSchedulerAdjustment != nil {
		return t.VirtualSchedulerAdjustment
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Card
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetCardType retrieves the value of the leaf CardType from the NokiaConf_Configure_Groups_Group_Card
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CardType is set, it can
// safely use t.GetCardType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CardType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card) GetCardType() E_NokiaTypesCard_SrosIomType {
	if t == nil || t.CardType == 0 {
		return 0
	}
	return t.CardType
}

// GetFailOnError retrieves the value of the leaf FailOnError from the NokiaConf_Configure_Groups_Group_Card
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailOnError is set, it can
// safely use t.GetFailOnError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailOnError == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card) GetFailOnError() bool {
	if t == nil || t.FailOnError == nil {
		return false
	}
	return *t.FailOnError
}

// GetFilterProfile retrieves the value of the leaf FilterProfile from the NokiaConf_Configure_Groups_Group_Card
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterProfile is set, it can
// safely use t.GetFilterProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card) GetFilterProfile() E_NokiaTypesCard_FilterProfile {
	if t == nil || t.FilterProfile == 0 {
		return NokiaTypesCard_FilterProfile_none
	}
	return t.FilterProfile
}

// GetHashSeedShift retrieves the value of the leaf HashSeedShift from the NokiaConf_Configure_Groups_Group_Card
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HashSeedShift is set, it can
// safely use t.GetHashSeedShift() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HashSeedShift == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card) GetHashSeedShift() uint32 {
	if t == nil || t.HashSeedShift == nil {
		return 2
	}
	return *t.HashSeedShift
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Card
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card) GetLevel() E_NokiaTypesCard_SrosIomLevel {
	if t == nil || t.Level == 0 {
		return 0
	}
	return t.Level
}

// GetPowerSave retrieves the value of the leaf PowerSave from the NokiaConf_Configure_Groups_Group_Card
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerSave is set, it can
// safely use t.GetPowerSave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerSave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card) GetPowerSave() bool {
	if t == nil || t.PowerSave == nil {
		return false
	}
	return *t.PowerSave
}

// GetResetOnRecoverableError retrieves the value of the leaf ResetOnRecoverableError from the NokiaConf_Configure_Groups_Group_Card
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResetOnRecoverableError is set, it can
// safely use t.GetResetOnRecoverableError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResetOnRecoverableError == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card) GetResetOnRecoverableError() bool {
	if t == nil || t.ResetOnRecoverableError == nil {
		return false
	}
	return *t.ResetOnRecoverableError
}

// GetSlotNumber retrieves the value of the leaf SlotNumber from the NokiaConf_Configure_Groups_Group_Card
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlotNumber is set, it can
// safely use t.GetSlotNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlotNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card) GetSlotNumber() NokiaConf_Configure_Groups_Group_Card_SlotNumber_Union {
	if t == nil || t.SlotNumber == nil {
		return nil
	}
	return t.SlotNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.FailOnError == nil {
		var v bool = false
		t.FailOnError = &v
	}
	if t.FilterProfile == 0 {
		t.FilterProfile = NokiaTypesCard_FilterProfile_none
	}
	if t.HashSeedShift == nil {
		var v uint32 = 2
		t.HashSeedShift = &v
	}
	if t.PowerSave == nil {
		var v bool = false
		t.PowerSave = &v
	}
	if t.ResetOnRecoverableError == nil {
		var v bool = false
		t.ResetOnRecoverableError = &v
	}
	t.VirtualSchedulerAdjustment.PopulateDefaults()
	for _, e := range t.Event {
		e.PopulateDefaults()
	}
	for _, e := range t.Fp {
		e.PopulateDefaults()
	}
	for _, e := range t.Mda {
		e.PopulateDefaults()
	}
	for _, e := range t.Upgrade {
		e.PopulateDefaults()
	}
	for _, e := range t.Xiom {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"slot-number": t.SlotNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card.
func (*NokiaConf_Configure_Groups_Group_Card) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Event represents the /nokia-conf/configure/groups/group/card/event YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Event struct {
	Action E_NokiaTypesChassis_HwEventAction                      `path:"action" module:"nokia-conf"`
	Type   NokiaConf_Configure_Groups_Group_Card_Event_Type_Union `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Event) IsYANGGoStruct() {}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_Card_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Event) GetAction() E_NokiaTypesChassis_HwEventAction {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Card_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Event) GetType() NokiaConf_Configure_Groups_Group_Card_Event_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Event
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Event) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Event struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Event) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Event.
func (*NokiaConf_Configure_Groups_Group_Card_Event) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp represents the /nokia-conf/configure/groups/group/card/fp YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp struct {
	DistCpuProtection       *NokiaConf_Configure_Groups_Group_Card_Fp_DistCpuProtection    `path:"dist-cpu-protection" module:"nokia-conf"`
	Egress                  *NokiaConf_Configure_Groups_Group_Card_Fp_Egress               `path:"egress" module:"nokia-conf"`
	FpNumber                NokiaConf_Configure_Groups_Group_Card_Fp_FpNumber_Union        `path:"fp-number" module:"nokia-conf"`
	FpResourcePolicy        *string                                                        `path:"fp-resource-policy" module:"nokia-conf"`
	HiBwMcastSrc            *NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc         `path:"hi-bw-mcast-src" module:"nokia-conf" yangPresence:"true"`
	Ingress                 *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress              `path:"ingress" module:"nokia-conf"`
	IngressBufferAllocation *float64                                                       `path:"ingress-buffer-allocation" module:"nokia-conf"`
	InitExtractPrioMode     E_NokiaConf_Configure_Groups_Group_Card_Fp_InitExtractPrioMode `path:"init-extract-prio-mode" module:"nokia-conf"`
	PolicyAccounting        *uint32                                                        `path:"policy-accounting" module:"nokia-conf"`
	StablePoolSizing        *bool                                                          `path:"stable-pool-sizing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp) IsYANGGoStruct() {}

// GetOrCreateDistCpuProtection retrieves the value of the DistCpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp) GetOrCreateDistCpuProtection() *NokiaConf_Configure_Groups_Group_Card_Fp_DistCpuProtection {
	if t.DistCpuProtection != nil {
		return t.DistCpuProtection
	}
	t.DistCpuProtection = &NokiaConf_Configure_Groups_Group_Card_Fp_DistCpuProtection{}
	return t.DistCpuProtection
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Card_Fp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Card_Fp_Egress{}
	return t.Egress
}

// GetOrCreateHiBwMcastSrc retrieves the value of the HiBwMcastSrc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp) GetOrCreateHiBwMcastSrc() *NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc {
	if t.HiBwMcastSrc != nil {
		return t.HiBwMcastSrc
	}
	t.HiBwMcastSrc = &NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc{}
	return t.HiBwMcastSrc
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress{}
	return t.Ingress
}

// GetDistCpuProtection returns the value of the DistCpuProtection struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp. If the receiver or the field DistCpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp) GetDistCpuProtection() *NokiaConf_Configure_Groups_Group_Card_Fp_DistCpuProtection {
	if t != nil && t.DistCpuProtection != nil {
		return t.DistCpuProtection
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp) GetEgress() *NokiaConf_Configure_Groups_Group_Card_Fp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetHiBwMcastSrc returns the value of the HiBwMcastSrc struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp. If the receiver or the field HiBwMcastSrc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp) GetHiBwMcastSrc() *NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc {
	if t != nil && t.HiBwMcastSrc != nil {
		return t.HiBwMcastSrc
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp) GetIngress() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetFpNumber retrieves the value of the leaf FpNumber from the NokiaConf_Configure_Groups_Group_Card_Fp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpNumber is set, it can
// safely use t.GetFpNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp) GetFpNumber() NokiaConf_Configure_Groups_Group_Card_Fp_FpNumber_Union {
	if t == nil || t.FpNumber == nil {
		return nil
	}
	return t.FpNumber
}

// GetFpResourcePolicy retrieves the value of the leaf FpResourcePolicy from the NokiaConf_Configure_Groups_Group_Card_Fp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpResourcePolicy is set, it can
// safely use t.GetFpResourcePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpResourcePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp) GetFpResourcePolicy() string {
	if t == nil || t.FpResourcePolicy == nil {
		return ""
	}
	return *t.FpResourcePolicy
}

// GetIngressBufferAllocation retrieves the value of the leaf IngressBufferAllocation from the NokiaConf_Configure_Groups_Group_Card_Fp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressBufferAllocation is set, it can
// safely use t.GetIngressBufferAllocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressBufferAllocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp) GetIngressBufferAllocation() float64 {
	if t == nil || t.IngressBufferAllocation == nil {
		return 50.00
	}
	return *t.IngressBufferAllocation
}

// GetInitExtractPrioMode retrieves the value of the leaf InitExtractPrioMode from the NokiaConf_Configure_Groups_Group_Card_Fp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitExtractPrioMode is set, it can
// safely use t.GetInitExtractPrioMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitExtractPrioMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp) GetInitExtractPrioMode() E_NokiaConf_Configure_Groups_Group_Card_Fp_InitExtractPrioMode {
	if t == nil || t.InitExtractPrioMode == 0 {
		return NokiaConf_Configure_Groups_Group_Card_Fp_InitExtractPrioMode_uniform
	}
	return t.InitExtractPrioMode
}

// GetPolicyAccounting retrieves the value of the leaf PolicyAccounting from the NokiaConf_Configure_Groups_Group_Card_Fp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyAccounting is set, it can
// safely use t.GetPolicyAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp) GetPolicyAccounting() uint32 {
	if t == nil || t.PolicyAccounting == nil {
		return 0
	}
	return *t.PolicyAccounting
}

// GetStablePoolSizing retrieves the value of the leaf StablePoolSizing from the NokiaConf_Configure_Groups_Group_Card_Fp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StablePoolSizing is set, it can
// safely use t.GetStablePoolSizing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StablePoolSizing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp) GetStablePoolSizing() bool {
	if t == nil || t.StablePoolSizing == nil {
		return false
	}
	return *t.StablePoolSizing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IngressBufferAllocation == nil {
		var v float64 = 50.00
		t.IngressBufferAllocation = &v
	}
	if t.InitExtractPrioMode == 0 {
		t.InitExtractPrioMode = NokiaConf_Configure_Groups_Group_Card_Fp_InitExtractPrioMode_uniform
	}
	if t.StablePoolSizing == nil {
		var v bool = false
		t.StablePoolSizing = &v
	}
	t.DistCpuProtection.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.HiBwMcastSrc.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Fp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fp-number": t.FpNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp.
func (*NokiaConf_Configure_Groups_Group_Card_Fp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_DistCpuProtection represents the /nokia-conf/configure/groups/group/card/fp/dist-cpu-protection YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_DistCpuProtection struct {
	DynamicEnforcementPolicerPool *uint32 `path:"dynamic-enforcement-policer-pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_DistCpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_DistCpuProtection) IsYANGGoStruct() {}

// GetDynamicEnforcementPolicerPool retrieves the value of the leaf DynamicEnforcementPolicerPool from the NokiaConf_Configure_Groups_Group_Card_Fp_DistCpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicEnforcementPolicerPool is set, it can
// safely use t.GetDynamicEnforcementPolicerPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicEnforcementPolicerPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_DistCpuProtection) GetDynamicEnforcementPolicerPool() uint32 {
	if t == nil || t.DynamicEnforcementPolicerPool == nil {
		return 0
	}
	return *t.DynamicEnforcementPolicerPool
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_DistCpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_DistCpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_DistCpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_DistCpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_DistCpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_DistCpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_DistCpuProtection.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_DistCpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Egress represents the /nokia-conf/configure/groups/group/card/fp/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Egress struct {
	HsFixedHighThreshDelta *int32                                                            `path:"hs-fixed-high-thresh-delta" module:"nokia-conf"`
	HsPoolPolicy           *string                                                           `path:"hs-pool-policy" module:"nokia-conf"`
	WredQueueControl       *NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl `path:"wred-queue-control" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Egress) IsYANGGoStruct() {}

// GetOrCreateWredQueueControl retrieves the value of the WredQueueControl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Egress) GetOrCreateWredQueueControl() *NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl {
	if t.WredQueueControl != nil {
		return t.WredQueueControl
	}
	t.WredQueueControl = &NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl{}
	return t.WredQueueControl
}

// GetWredQueueControl returns the value of the WredQueueControl struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp_Egress. If the receiver or the field WredQueueControl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Egress) GetWredQueueControl() *NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl {
	if t != nil && t.WredQueueControl != nil {
		return t.WredQueueControl
	}
	return nil
}

// GetHsFixedHighThreshDelta retrieves the value of the leaf HsFixedHighThreshDelta from the NokiaConf_Configure_Groups_Group_Card_Fp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsFixedHighThreshDelta is set, it can
// safely use t.GetHsFixedHighThreshDelta() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsFixedHighThreshDelta == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Egress) GetHsFixedHighThreshDelta() int32 {
	if t == nil || t.HsFixedHighThreshDelta == nil {
		return 0
	}
	return *t.HsFixedHighThreshDelta
}

// GetHsPoolPolicy retrieves the value of the leaf HsPoolPolicy from the NokiaConf_Configure_Groups_Group_Card_Fp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsPoolPolicy is set, it can
// safely use t.GetHsPoolPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsPoolPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Egress) GetHsPoolPolicy() string {
	if t == nil || t.HsPoolPolicy == nil {
		return ""
	}
	return *t.HsPoolPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.WredQueueControl.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Egress.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl represents the /nokia-conf/configure/groups/group/card/fp/egress/wred-queue-control YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl struct {
	AdminState       E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	BufferAllocation *float64                    `path:"buffer-allocation" module:"nokia-conf"`
	ReservedCbs      *float64                    `path:"reserved-cbs" module:"nokia-conf"`
	SlopePolicy      *string                     `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBufferAllocation retrieves the value of the leaf BufferAllocation from the NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BufferAllocation is set, it can
// safely use t.GetBufferAllocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BufferAllocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl) GetBufferAllocation() float64 {
	if t == nil || t.BufferAllocation == nil {
		return 25.00
	}
	return *t.BufferAllocation
}

// GetReservedCbs retrieves the value of the leaf ReservedCbs from the NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReservedCbs is set, it can
// safely use t.GetReservedCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReservedCbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl) GetReservedCbs() float64 {
	if t == nil || t.ReservedCbs == nil {
		return 25.00
	}
	return *t.ReservedCbs
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.BufferAllocation == nil {
		var v float64 = 25.00
		t.BufferAllocation = &v
	}
	if t.ReservedCbs == nil {
		var v float64 = 25.00
		t.ReservedCbs = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Egress_WredQueueControl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc represents the /nokia-conf/configure/groups/group/card/fp/hi-bw-mcast-src YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc struct {
	Alarm            *bool   `path:"alarm" module:"nokia-conf"`
	DefaultPathsOnly *bool   `path:"default-paths-only" module:"nokia-conf"`
	Group            *uint32 `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc) IsYANGGoStruct() {}

// GetAlarm retrieves the value of the leaf Alarm from the NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Alarm is set, it can
// safely use t.GetAlarm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Alarm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc) GetAlarm() bool {
	if t == nil || t.Alarm == nil {
		return false
	}
	return *t.Alarm
}

// GetDefaultPathsOnly retrieves the value of the leaf DefaultPathsOnly from the NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultPathsOnly is set, it can
// safely use t.GetDefaultPathsOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultPathsOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc) GetDefaultPathsOnly() bool {
	if t == nil || t.DefaultPathsOnly == nil {
		return false
	}
	return *t.DefaultPathsOnly
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc) GetGroup() uint32 {
	if t == nil || t.Group == nil {
		return 0
	}
	return *t.Group
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Alarm == nil {
		var v bool = false
		t.Alarm = &v
	}
	if t.DefaultPathsOnly == nil {
		var v bool = false
		t.DefaultPathsOnly = &v
	}
	if t.Group == nil {
		var v uint32 = 0
		t.Group = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_HiBwMcastSrc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress represents the /nokia-conf/configure/groups/group/card/fp/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress struct {
	Access              *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access              `path:"access" module:"nokia-conf"`
	DistCpuProtection   *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_DistCpuProtection   `path:"dist-cpu-protection" module:"nokia-conf"`
	McastPathManagement *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_McastPathManagement `path:"mcast-path-management" module:"nokia-conf"`
	Network             *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network             `path:"network" module:"nokia-conf"`
	PolicyAccounting    *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_PolicyAccounting    `path:"policy-accounting" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress) IsYANGGoStruct() {}

// GetOrCreateAccess retrieves the value of the Access field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress) GetOrCreateAccess() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access {
	if t.Access != nil {
		return t.Access
	}
	t.Access = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access{}
	return t.Access
}

// GetOrCreateDistCpuProtection retrieves the value of the DistCpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress) GetOrCreateDistCpuProtection() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_DistCpuProtection {
	if t.DistCpuProtection != nil {
		return t.DistCpuProtection
	}
	t.DistCpuProtection = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_DistCpuProtection{}
	return t.DistCpuProtection
}

// GetOrCreateMcastPathManagement retrieves the value of the McastPathManagement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress) GetOrCreateMcastPathManagement() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_McastPathManagement {
	if t.McastPathManagement != nil {
		return t.McastPathManagement
	}
	t.McastPathManagement = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_McastPathManagement{}
	return t.McastPathManagement
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network{}
	return t.Network
}

// GetOrCreatePolicyAccounting retrieves the value of the PolicyAccounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress) GetOrCreatePolicyAccounting() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_PolicyAccounting {
	if t.PolicyAccounting != nil {
		return t.PolicyAccounting
	}
	t.PolicyAccounting = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_PolicyAccounting{}
	return t.PolicyAccounting
}

// GetAccess returns the value of the Access struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp_Ingress. If the receiver or the field Access is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress) GetAccess() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access {
	if t != nil && t.Access != nil {
		return t.Access
	}
	return nil
}

// GetDistCpuProtection returns the value of the DistCpuProtection struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp_Ingress. If the receiver or the field DistCpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress) GetDistCpuProtection() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_DistCpuProtection {
	if t != nil && t.DistCpuProtection != nil {
		return t.DistCpuProtection
	}
	return nil
}

// GetMcastPathManagement returns the value of the McastPathManagement struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp_Ingress. If the receiver or the field McastPathManagement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress) GetMcastPathManagement() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_McastPathManagement {
	if t != nil && t.McastPathManagement != nil {
		return t.McastPathManagement
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp_Ingress. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress) GetNetwork() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetPolicyAccounting returns the value of the PolicyAccounting struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp_Ingress. If the receiver or the field PolicyAccounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress) GetPolicyAccounting() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_PolicyAccounting {
	if t != nil && t.PolicyAccounting != nil {
		return t.PolicyAccounting
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Access.PopulateDefaults()
	t.DistCpuProtection.PopulateDefaults()
	t.McastPathManagement.PopulateDefaults()
	t.Network.PopulateDefaults()
	t.PolicyAccounting.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access represents the /nokia-conf/configure/groups/group/card/fp/ingress/access YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access struct {
	QueueGroup map[NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_Key]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup `path:"queue-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_Key represents the key for list QueueGroup of element /nokia-conf/configure/groups/group/card/fp/ingress/access.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_Key struct {
	QueueGroupName string                                                                              `path:"queue-group-name"`
	InstanceId     NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_InstanceId_Union `path:"instance-id"`
}

// NewQueueGroup creates a new entry in the QueueGroup list of the
// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access) NewQueueGroup(QueueGroupName string, InstanceId NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_InstanceId_Union) (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_Key]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup)
	}

	key := NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueGroup", key)
	}

	t.QueueGroup[key] = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup{
		QueueGroupName: &QueueGroupName,
		InstanceId:     InstanceId,
	}

	return t.QueueGroup[key], nil
}

// RenameQueueGroup renames an entry in the list QueueGroup within
// the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access) RenameQueueGroup(oldK, newK NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_Key) error {
	if _, ok := t.QueueGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueGroup", newK)
	}

	e, ok := t.QueueGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueGroup", oldK)
	}
	e.QueueGroupName = &newK.QueueGroupName
	e.InstanceId = newK.InstanceId

	t.QueueGroup[newK] = e
	delete(t.QueueGroup, oldK)
	return nil
}

// GetOrCreateQueueGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access) GetOrCreateQueueGroup(QueueGroupName string, InstanceId NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_InstanceId_Union) *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup {

	key := NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	if v, ok := t.QueueGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueGroup(QueueGroupName, InstanceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueGroup got unexpected error: %v", err))
	}
	return v
}

// GetQueueGroup retrieves the value with the specified key from
// the QueueGroup map field of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access) GetQueueGroup(QueueGroupName string, InstanceId NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_InstanceId_Union) *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	if lm, ok := t.QueueGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access) DeleteQueueGroup(QueueGroupName string, InstanceId NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_InstanceId_Union) {
	key := NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	delete(t.QueueGroup, key)
}

// AppendQueueGroup appends the supplied NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup struct to the
// list QueueGroup of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access) AppendQueueGroup(v *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup) error {
	if v.QueueGroupName == nil {
		return fmt.Errorf("invalid nil key for QueueGroupName")
	}

	key := NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_Key{
		QueueGroupName: *v.QueueGroupName,
		InstanceId:     v.InstanceId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_Key]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup)
	}

	if _, ok := t.QueueGroup[key]; ok {
		return fmt.Errorf("duplicate key for list QueueGroup %v", key)
	}

	t.QueueGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.QueueGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup represents the /nokia-conf/configure/groups/group/card/fp/ingress/access/queue-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup struct {
	AccountingPolicy     *uint32                                                                                  `path:"accounting-policy" module:"nokia-conf"`
	CollectStats         *bool                                                                                    `path:"collect-stats" module:"nokia-conf"`
	Description          *string                                                                                  `path:"description" module:"nokia-conf"`
	InstanceId           NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_InstanceId_Union      `path:"instance-id" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	PolicerOverrides     *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides     `path:"policer-overrides" module:"nokia-conf"`
	QueueGroupName       *string                                                                                  `path:"queue-group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup) IsYANGGoStruct() {}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreatePolicerOverrides retrieves the value of the PolicerOverrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup) GetOrCreatePolicerOverrides() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides {
	if t.PolicerOverrides != nil {
		return t.PolicerOverrides
	}
	t.PolicerOverrides = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides{}
	return t.PolicerOverrides
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup) GetPolicerControlPolicy() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetPolicerOverrides returns the value of the PolicerOverrides struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup. If the receiver or the field PolicerOverrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup) GetPolicerOverrides() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides {
	if t != nil && t.PolicerOverrides != nil {
		return t.PolicerOverrides
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInstanceId retrieves the value of the leaf InstanceId from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceId is set, it can
// safely use t.GetInstanceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup) GetInstanceId() NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_InstanceId_Union {
	if t == nil || t.InstanceId == nil {
		return nil
	}
	return t.InstanceId
}

// GetQueueGroupName retrieves the value of the leaf QueueGroupName from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupName is set, it can
// safely use t.GetQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup) GetQueueGroupName() string {
	if t == nil || t.QueueGroupName == nil {
		return ""
	}
	return *t.QueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	t.PolicerControlPolicy.PopulateDefaults()
	t.PolicerOverrides.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup) ΛListKeyMap() (map[string]interface{}, error) {

	if t.QueueGroupName == nil {
		return nil, fmt.Errorf("nil value for key QueueGroupName")
	}

	return map[string]interface{}{
		"instance-id":      t.InstanceId,
		"queue-group-name": *t.QueueGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy represents the /nokia-conf/configure/groups/group/card/fp/ingress/access/queue-group/policer-control-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                                            `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/groups/group/card/fp/ingress/access/queue-group/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides struct {
	MaxRate               NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides) GetPriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides) GetMaxRate() NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds represents the /nokia-conf/configure/groups/group/card/fp/ingress/access/queue-group/policer-control-policy/overrides/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds struct {
	MinThresholdSeparation NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_MinThresholdSeparation_Union                                                                                                                               `path:"min-threshold-separation" module:"nokia-conf"`
	Priority               map[NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_Level_Union]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) NewPriority(Level NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_Level_Union) (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_Level_Union]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority)
	}

	key := Level

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority{
		Level: Level,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) RenamePriority(oldK, newK NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_Level_Union) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.Level = newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) GetOrCreatePriority(Level NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_Level_Union) *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority {

	key := Level

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(Level)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) GetPriority(Level NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_Level_Union) *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := Level

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) DeletePriority(Level NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_Level_Union) {
	key := Level

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) error {
	key := v.Level

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_Level_Union]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThresholdSeparation retrieves the value of the leaf MinThresholdSeparation from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThresholdSeparation is set, it can
// safely use t.GetMinThresholdSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThresholdSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) GetMinThresholdSeparation() NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_MinThresholdSeparation_Union {
	if t == nil || t.MinThresholdSeparation == nil {
		return nil
	}
	return t.MinThresholdSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/groups/group/card/fp/ingress/access/queue-group/policer-control-policy/overrides/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority struct {
	Level           NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_Level_Union           `path:"level" module:"nokia-conf"`
	MbsContribution NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) GetLevel() NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_Level_Union {
	if t == nil || t.Level == nil {
		return nil
	}
	return t.Level
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level": t.Level,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides represents the /nokia-conf/configure/groups/group/card/fp/ingress/access/queue-group/policer-overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides struct {
	Policer map[NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer `path:"policer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) IsYANGGoStruct() {
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) NewPolicer(PolicerId NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_PolicerId_Union) (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer{
		PolicerId: PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) RenamePolicer(oldK, newK NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_PolicerId_Union) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) GetOrCreatePolicer(PolicerId NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) GetPolicer(PolicerId NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) DeletePolicer(PolicerId NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_PolicerId_Union) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer struct to the
// list Policer of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) AppendPolicer(v *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) error {
	key := v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer represents the /nokia-conf/configure/groups/group/card/fp/ingress/access/queue-group/policer-overrides/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer struct {
	Cbs              NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Cbs_Union       `path:"cbs" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Mbs_Union       `path:"mbs" module:"nokia-conf"`
	PacketByteOffset *int32                                                                                                      `path:"packet-byte-offset" module:"nokia-conf"`
	PolicerId        NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_PolicerId_Union `path:"policer-id" module:"nokia-conf"`
	Rate             *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate           `path:"rate" module:"nokia-conf"`
	StatMode         E_NokiaTypesQos_IngressPolicerStatMode                                                                      `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) IsYANGGoStruct() {
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate{}
	return t.Rate
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) GetRate() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) GetCbs() NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) GetMbs() NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) GetPolicerId() NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_PolicerId_Union {
	if t == nil || t.PolicerId == nil {
		return nil
	}
	return t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) GetStatMode() E_NokiaTypesQos_IngressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"policer-id": t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate represents the /nokia-conf/configure/groups/group/card/fp/ingress/access/queue-group/policer-overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate) GetCir() NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate) GetPir() NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_DistCpuProtection represents the /nokia-conf/configure/groups/group/card/fp/ingress/dist-cpu-protection YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_DistCpuProtection struct {
	DynamicEnforcementPolicerPool *uint32 `path:"dynamic-enforcement-policer-pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_DistCpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_DistCpuProtection) IsYANGGoStruct() {}

// GetDynamicEnforcementPolicerPool retrieves the value of the leaf DynamicEnforcementPolicerPool from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_DistCpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicEnforcementPolicerPool is set, it can
// safely use t.GetDynamicEnforcementPolicerPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicEnforcementPolicerPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_DistCpuProtection) GetDynamicEnforcementPolicerPool() uint32 {
	if t == nil || t.DynamicEnforcementPolicerPool == nil {
		return 0
	}
	return *t.DynamicEnforcementPolicerPool
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_DistCpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_DistCpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_DistCpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_DistCpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_DistCpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_DistCpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_DistCpuProtection.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_DistCpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_McastPathManagement represents the /nokia-conf/configure/groups/group/card/fp/ingress/mcast-path-management YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_McastPathManagement struct {
	AdminState      E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	BandwidthPolicy *string                     `path:"bandwidth-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_McastPathManagement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_McastPathManagement) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_McastPathManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_McastPathManagement) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBandwidthPolicy retrieves the value of the leaf BandwidthPolicy from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_McastPathManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BandwidthPolicy is set, it can
// safely use t.GetBandwidthPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BandwidthPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_McastPathManagement) GetBandwidthPolicy() string {
	if t == nil || t.BandwidthPolicy == nil {
		return ""
	}
	return *t.BandwidthPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_McastPathManagement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_McastPathManagement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_McastPathManagement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_McastPathManagement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_McastPathManagement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_McastPathManagement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_McastPathManagement.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_McastPathManagement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network represents the /nokia-conf/configure/groups/group/card/fp/ingress/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network struct {
	Pool        map[string]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool                                                                        `path:"pool" module:"nokia-conf"`
	QueueGroup  map[NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_Key]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup `path:"queue-group" module:"nokia-conf"`
	QueuePolicy *string                                                                                                                                          `path:"queue-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_Key represents the key for list QueueGroup of element /nokia-conf/configure/groups/group/card/fp/ingress/network.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_Key struct {
	QueueGroupName string                                                                               `path:"queue-group-name"`
	InstanceId     NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_InstanceId_Union `path:"instance-id"`
}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network) NewPool(Name string) (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool{
		Name: &Name,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.Name = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network) GetOrCreatePool(Name string) *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool {

	key := Name

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network) GetPool(Name string) *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network) DeletePool(Name string) {
	key := Name

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool struct to the
// list Pool of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network) AppendPool(v *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// NewQueueGroup creates a new entry in the QueueGroup list of the
// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network) NewQueueGroup(QueueGroupName string, InstanceId NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_InstanceId_Union) (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_Key]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup)
	}

	key := NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueGroup", key)
	}

	t.QueueGroup[key] = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup{
		QueueGroupName: &QueueGroupName,
		InstanceId:     InstanceId,
	}

	return t.QueueGroup[key], nil
}

// RenameQueueGroup renames an entry in the list QueueGroup within
// the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network) RenameQueueGroup(oldK, newK NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_Key) error {
	if _, ok := t.QueueGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueGroup", newK)
	}

	e, ok := t.QueueGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueGroup", oldK)
	}
	e.QueueGroupName = &newK.QueueGroupName
	e.InstanceId = newK.InstanceId

	t.QueueGroup[newK] = e
	delete(t.QueueGroup, oldK)
	return nil
}

// GetOrCreateQueueGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network) GetOrCreateQueueGroup(QueueGroupName string, InstanceId NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_InstanceId_Union) *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup {

	key := NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	if v, ok := t.QueueGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueGroup(QueueGroupName, InstanceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueGroup got unexpected error: %v", err))
	}
	return v
}

// GetQueueGroup retrieves the value with the specified key from
// the QueueGroup map field of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network) GetQueueGroup(QueueGroupName string, InstanceId NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_InstanceId_Union) *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	if lm, ok := t.QueueGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network) DeleteQueueGroup(QueueGroupName string, InstanceId NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_InstanceId_Union) {
	key := NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	delete(t.QueueGroup, key)
}

// AppendQueueGroup appends the supplied NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup struct to the
// list QueueGroup of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network) AppendQueueGroup(v *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup) error {
	if v.QueueGroupName == nil {
		return fmt.Errorf("invalid nil key for QueueGroupName")
	}

	key := NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_Key{
		QueueGroupName: *v.QueueGroupName,
		InstanceId:     v.InstanceId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_Key]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup)
	}

	if _, ok := t.QueueGroup[key]; ok {
		return fmt.Errorf("duplicate key for list QueueGroup %v", key)
	}

	t.QueueGroup[key] = v
	return nil
}

// GetQueuePolicy retrieves the value of the leaf QueuePolicy from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuePolicy is set, it can
// safely use t.GetQueuePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network) GetQueuePolicy() string {
	if t == nil || t.QueuePolicy == nil {
		return ""
	}
	return *t.QueuePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
	for _, e := range t.QueueGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool represents the /nokia-conf/configure/groups/group/card/fp/ingress/network/pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool struct {
	AmberAlarmThreshold *uint32                                                                `path:"amber-alarm-threshold" module:"nokia-conf"`
	Name                *string                                                                `path:"name" module:"nokia-conf"`
	RedAlarmThreshold   *uint32                                                                `path:"red-alarm-threshold" module:"nokia-conf"`
	ResvCbs             *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs `path:"resv-cbs" module:"nokia-conf"`
	SlopePolicy         *string                                                                `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool) IsYANGGoStruct() {}

// GetOrCreateResvCbs retrieves the value of the ResvCbs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool) GetOrCreateResvCbs() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs {
	if t.ResvCbs != nil {
		return t.ResvCbs
	}
	t.ResvCbs = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs{}
	return t.ResvCbs
}

// GetResvCbs returns the value of the ResvCbs struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool. If the receiver or the field ResvCbs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool) GetResvCbs() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs {
	if t != nil && t.ResvCbs != nil {
		return t.ResvCbs
	}
	return nil
}

// GetAmberAlarmThreshold retrieves the value of the leaf AmberAlarmThreshold from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AmberAlarmThreshold is set, it can
// safely use t.GetAmberAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AmberAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool) GetAmberAlarmThreshold() uint32 {
	if t == nil || t.AmberAlarmThreshold == nil {
		return 0
	}
	return *t.AmberAlarmThreshold
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRedAlarmThreshold retrieves the value of the leaf RedAlarmThreshold from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedAlarmThreshold is set, it can
// safely use t.GetRedAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool) GetRedAlarmThreshold() uint32 {
	if t == nil || t.RedAlarmThreshold == nil {
		return 0
	}
	return *t.RedAlarmThreshold
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ResvCbs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs represents the /nokia-conf/configure/groups/group/card/fp/ingress/network/pool/resv-cbs YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs struct {
	AmberAlarmAction *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction `path:"amber-alarm-action" module:"nokia-conf"`
	Cbs              *int32                                                                                  `path:"cbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs) IsYANGGoStruct() {}

// GetOrCreateAmberAlarmAction retrieves the value of the AmberAlarmAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs) GetOrCreateAmberAlarmAction() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction {
	if t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	t.AmberAlarmAction = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction{}
	return t.AmberAlarmAction
}

// GetAmberAlarmAction returns the value of the AmberAlarmAction struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs. If the receiver or the field AmberAlarmAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs) GetAmberAlarmAction() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction {
	if t != nil && t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AmberAlarmAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction represents the /nokia-conf/configure/groups/group/card/fp/ingress/network/pool/resv-cbs/amber-alarm-action YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction struct {
	Max  *uint32 `path:"max" module:"nokia-conf"`
	Step *uint32 `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction) IsYANGGoStruct() {
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction) GetStep() uint32 {
	if t == nil || t.Step == nil {
		return 0
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup represents the /nokia-conf/configure/groups/group/card/fp/ingress/network/queue-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup struct {
	AccountingPolicy     *uint32                                                                                   `path:"accounting-policy" module:"nokia-conf"`
	CollectStats         *bool                                                                                     `path:"collect-stats" module:"nokia-conf"`
	Description          *string                                                                                   `path:"description" module:"nokia-conf"`
	InstanceId           NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_InstanceId_Union      `path:"instance-id" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	PolicerOverrides     *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides     `path:"policer-overrides" module:"nokia-conf"`
	QueueGroupName       *string                                                                                   `path:"queue-group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup) IsYANGGoStruct() {}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreatePolicerOverrides retrieves the value of the PolicerOverrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup) GetOrCreatePolicerOverrides() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides {
	if t.PolicerOverrides != nil {
		return t.PolicerOverrides
	}
	t.PolicerOverrides = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides{}
	return t.PolicerOverrides
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup) GetPolicerControlPolicy() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetPolicerOverrides returns the value of the PolicerOverrides struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup. If the receiver or the field PolicerOverrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup) GetPolicerOverrides() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides {
	if t != nil && t.PolicerOverrides != nil {
		return t.PolicerOverrides
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInstanceId retrieves the value of the leaf InstanceId from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceId is set, it can
// safely use t.GetInstanceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup) GetInstanceId() NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_InstanceId_Union {
	if t == nil || t.InstanceId == nil {
		return nil
	}
	return t.InstanceId
}

// GetQueueGroupName retrieves the value of the leaf QueueGroupName from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupName is set, it can
// safely use t.GetQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup) GetQueueGroupName() string {
	if t == nil || t.QueueGroupName == nil {
		return ""
	}
	return *t.QueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	t.PolicerControlPolicy.PopulateDefaults()
	t.PolicerOverrides.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup) ΛListKeyMap() (map[string]interface{}, error) {

	if t.QueueGroupName == nil {
		return nil, fmt.Errorf("nil value for key QueueGroupName")
	}

	return map[string]interface{}{
		"instance-id":      t.InstanceId,
		"queue-group-name": *t.QueueGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy represents the /nokia-conf/configure/groups/group/card/fp/ingress/network/queue-group/policer-control-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                                             `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/groups/group/card/fp/ingress/network/queue-group/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides struct {
	MaxRate               NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides) GetPriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides) GetMaxRate() NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds represents the /nokia-conf/configure/groups/group/card/fp/ingress/network/queue-group/policer-control-policy/overrides/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds struct {
	MinThresholdSeparation NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_MinThresholdSeparation_Union                                                                                                                                `path:"min-threshold-separation" module:"nokia-conf"`
	Priority               map[NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_Level_Union]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) NewPriority(Level NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_Level_Union) (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_Level_Union]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority)
	}

	key := Level

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority{
		Level: Level,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) RenamePriority(oldK, newK NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_Level_Union) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.Level = newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) GetOrCreatePriority(Level NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_Level_Union) *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority {

	key := Level

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(Level)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) GetPriority(Level NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_Level_Union) *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := Level

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) DeletePriority(Level NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_Level_Union) {
	key := Level

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) error {
	key := v.Level

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_Level_Union]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThresholdSeparation retrieves the value of the leaf MinThresholdSeparation from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThresholdSeparation is set, it can
// safely use t.GetMinThresholdSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThresholdSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) GetMinThresholdSeparation() NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_MinThresholdSeparation_Union {
	if t == nil || t.MinThresholdSeparation == nil {
		return nil
	}
	return t.MinThresholdSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/groups/group/card/fp/ingress/network/queue-group/policer-control-policy/overrides/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority struct {
	Level           NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_Level_Union           `path:"level" module:"nokia-conf"`
	MbsContribution NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) GetLevel() NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_Level_Union {
	if t == nil || t.Level == nil {
		return nil
	}
	return t.Level
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level": t.Level,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides represents the /nokia-conf/configure/groups/group/card/fp/ingress/network/queue-group/policer-overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides struct {
	Policer map[NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer `path:"policer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) IsYANGGoStruct() {
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) NewPolicer(PolicerId NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_PolicerId_Union) (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer{
		PolicerId: PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) RenamePolicer(oldK, newK NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_PolicerId_Union) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) GetOrCreatePolicer(PolicerId NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) GetPolicer(PolicerId NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) DeletePolicer(PolicerId NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_PolicerId_Union) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer struct to the
// list Policer of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) AppendPolicer(v *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) error {
	key := v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer represents the /nokia-conf/configure/groups/group/card/fp/ingress/network/queue-group/policer-overrides/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer struct {
	Cbs              NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Cbs_Union       `path:"cbs" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Mbs_Union       `path:"mbs" module:"nokia-conf"`
	PacketByteOffset *int32                                                                                                       `path:"packet-byte-offset" module:"nokia-conf"`
	PolicerId        NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_PolicerId_Union `path:"policer-id" module:"nokia-conf"`
	Rate             *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate           `path:"rate" module:"nokia-conf"`
	StatMode         E_NokiaTypesQos_IngressPolicerStatMode                                                                       `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) IsYANGGoStruct() {
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate{}
	return t.Rate
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) GetRate() *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) GetCbs() NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) GetMbs() NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) GetPolicerId() NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_PolicerId_Union {
	if t == nil || t.PolicerId == nil {
		return nil
	}
	return t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) GetStatMode() E_NokiaTypesQos_IngressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"policer-id": t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate represents the /nokia-conf/configure/groups/group/card/fp/ingress/network/queue-group/policer-overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate) GetCir() NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate) GetPir() NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_PolicyAccounting represents the /nokia-conf/configure/groups/group/card/fp/ingress/policy-accounting YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_PolicyAccounting struct {
	Classes  *uint32 `path:"classes" module:"nokia-conf"`
	Policers *uint32 `path:"policers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_PolicyAccounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_PolicyAccounting) IsYANGGoStruct() {}

// GetClasses retrieves the value of the leaf Classes from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_PolicyAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Classes is set, it can
// safely use t.GetClasses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Classes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_PolicyAccounting) GetClasses() uint32 {
	if t == nil || t.Classes == nil {
		return 0
	}
	return *t.Classes
}

// GetPolicers retrieves the value of the leaf Policers from the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_PolicyAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policers is set, it can
// safely use t.GetPolicers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_PolicyAccounting) GetPolicers() uint32 {
	if t == nil || t.Policers == nil {
		return 0
	}
	return *t.Policers
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_PolicyAccounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_PolicyAccounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_PolicyAccounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_PolicyAccounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_PolicyAccounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_PolicyAccounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_PolicyAccounting.
func (*NokiaConf_Configure_Groups_Group_Card_Fp_Ingress_PolicyAccounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda represents the /nokia-conf/configure/groups/group/card/mda YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda struct {
	Access                  *NokiaConf_Configure_Groups_Group_Card_Mda_Access                                                                           `path:"access" module:"nokia-conf" yangPresence:"true"`
	AdminState              E_NokiaTypesSros_AdminState                                                                                                 `path:"admin-state" module:"nokia-conf"`
	ClockMode               *NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode                                                                        `path:"clock-mode" module:"nokia-conf"`
	Egress                  *NokiaConf_Configure_Groups_Group_Card_Mda_Egress                                                                           `path:"egress" module:"nokia-conf"`
	EgressXpl               *NokiaConf_Configure_Groups_Group_Card_Mda_EgressXpl                                                                        `path:"egress-xpl" module:"nokia-conf"`
	Event                   map[NokiaConf_Configure_Groups_Group_Card_Mda_Event_Type_Union]*NokiaConf_Configure_Groups_Group_Card_Mda_Event             `path:"event" module:"nokia-conf"`
	FailOnError             *bool                                                                                                                       `path:"fail-on-error" module:"nokia-conf"`
	IngressXpl              *NokiaConf_Configure_Groups_Group_Card_Mda_IngressXpl                                                                       `path:"ingress-xpl" module:"nokia-conf"`
	Level                   E_NokiaTypesCard_SrosMdaLevel                                                                                               `path:"level" module:"nokia-conf"`
	MdaSlot                 NokiaConf_Configure_Groups_Group_Card_Mda_MdaSlot_Union                                                                     `path:"mda-slot" module:"nokia-conf"`
	MdaType                 E_NokiaTypesCard_SrosMdaType                                                                                                `path:"mda-type" module:"nokia-conf"`
	Network                 *NokiaConf_Configure_Groups_Group_Card_Mda_Network                                                                          `path:"network" module:"nokia-conf" yangPresence:"true"`
	PowerPriorityLevel      *uint32                                                                                                                     `path:"power-priority-level" module:"nokia-conf"`
	ResetOnRecoverableError *bool                                                                                                                       `path:"reset-on-recoverable-error" module:"nokia-conf"`
	SyncE                   E_NokiaConf_Configure_Groups_Group_Card_Mda_SyncE                                                                           `path:"sync-e" module:"nokia-conf"`
	Upgrade                 map[NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade_UpgradeIndex_Union]*NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade `path:"upgrade" module:"nokia-conf"`
	Xconnect                *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect                                                                         `path:"xconnect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// NokiaConf_Configure_Groups_Group_Card_Mda struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) NewEvent(Type NokiaConf_Configure_Groups_Group_Card_Mda_Event_Type_Union) (*NokiaConf_Configure_Groups_Group_Card_Mda_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[NokiaConf_Configure_Groups_Group_Card_Mda_Event_Type_Union]*NokiaConf_Configure_Groups_Group_Card_Mda_Event)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &NokiaConf_Configure_Groups_Group_Card_Mda_Event{
		Type: Type,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the NokiaConf_Configure_Groups_Group_Card_Mda struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) RenameEvent(oldK, newK NokiaConf_Configure_Groups_Group_Card_Mda_Event_Type_Union) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.Type = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Mda. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetOrCreateEvent(Type NokiaConf_Configure_Groups_Group_Card_Mda_Event_Type_Union) *NokiaConf_Configure_Groups_Group_Card_Mda_Event {

	key := Type

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of NokiaConf_Configure_Groups_Group_Card_Mda. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetEvent(Type NokiaConf_Configure_Groups_Group_Card_Mda_Event_Type_Union) *NokiaConf_Configure_Groups_Group_Card_Mda_Event {

	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Mda. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) DeleteEvent(Type NokiaConf_Configure_Groups_Group_Card_Mda_Event_Type_Union) {
	key := Type

	delete(t.Event, key)
}

// AppendEvent appends the supplied NokiaConf_Configure_Groups_Group_Card_Mda_Event struct to the
// list Event of NokiaConf_Configure_Groups_Group_Card_Mda. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Mda_Event already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) AppendEvent(v *NokiaConf_Configure_Groups_Group_Card_Mda_Event) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[NokiaConf_Configure_Groups_Group_Card_Mda_Event_Type_Union]*NokiaConf_Configure_Groups_Group_Card_Mda_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// NewUpgrade creates a new entry in the Upgrade list of the
// NokiaConf_Configure_Groups_Group_Card_Mda struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) NewUpgrade(UpgradeIndex NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade_UpgradeIndex_Union) (*NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Upgrade == nil {
		t.Upgrade = make(map[NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade_UpgradeIndex_Union]*NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade)
	}

	key := UpgradeIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Upgrade[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Upgrade", key)
	}

	t.Upgrade[key] = &NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade{
		UpgradeIndex: UpgradeIndex,
	}

	return t.Upgrade[key], nil
}

// RenameUpgrade renames an entry in the list Upgrade within
// the NokiaConf_Configure_Groups_Group_Card_Mda struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) RenameUpgrade(oldK, newK NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade_UpgradeIndex_Union) error {
	if _, ok := t.Upgrade[newK]; ok {
		return fmt.Errorf("key %v already exists in Upgrade", newK)
	}

	e, ok := t.Upgrade[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Upgrade", oldK)
	}
	e.UpgradeIndex = newK

	t.Upgrade[newK] = e
	delete(t.Upgrade, oldK)
	return nil
}

// GetOrCreateUpgrade retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Mda. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetOrCreateUpgrade(UpgradeIndex NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade_UpgradeIndex_Union) *NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade {

	key := UpgradeIndex

	if v, ok := t.Upgrade[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUpgrade(UpgradeIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUpgrade got unexpected error: %v", err))
	}
	return v
}

// GetUpgrade retrieves the value with the specified key from
// the Upgrade map field of NokiaConf_Configure_Groups_Group_Card_Mda. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetUpgrade(UpgradeIndex NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade_UpgradeIndex_Union) *NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade {

	if t == nil {
		return nil
	}

	key := UpgradeIndex

	if lm, ok := t.Upgrade[key]; ok {
		return lm
	}
	return nil
}

// DeleteUpgrade deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Mda. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) DeleteUpgrade(UpgradeIndex NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade_UpgradeIndex_Union) {
	key := UpgradeIndex

	delete(t.Upgrade, key)
}

// AppendUpgrade appends the supplied NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade struct to the
// list Upgrade of NokiaConf_Configure_Groups_Group_Card_Mda. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) AppendUpgrade(v *NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade) error {
	key := v.UpgradeIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Upgrade == nil {
		t.Upgrade = make(map[NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade_UpgradeIndex_Union]*NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade)
	}

	if _, ok := t.Upgrade[key]; ok {
		return fmt.Errorf("duplicate key for list Upgrade %v", key)
	}

	t.Upgrade[key] = v
	return nil
}

// GetOrCreateAccess retrieves the value of the Access field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetOrCreateAccess() *NokiaConf_Configure_Groups_Group_Card_Mda_Access {
	if t.Access != nil {
		return t.Access
	}
	t.Access = &NokiaConf_Configure_Groups_Group_Card_Mda_Access{}
	return t.Access
}

// GetOrCreateClockMode retrieves the value of the ClockMode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetOrCreateClockMode() *NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode {
	if t.ClockMode != nil {
		return t.ClockMode
	}
	t.ClockMode = &NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode{}
	return t.ClockMode
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Card_Mda_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Card_Mda_Egress{}
	return t.Egress
}

// GetOrCreateEgressXpl retrieves the value of the EgressXpl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetOrCreateEgressXpl() *NokiaConf_Configure_Groups_Group_Card_Mda_EgressXpl {
	if t.EgressXpl != nil {
		return t.EgressXpl
	}
	t.EgressXpl = &NokiaConf_Configure_Groups_Group_Card_Mda_EgressXpl{}
	return t.EgressXpl
}

// GetOrCreateIngressXpl retrieves the value of the IngressXpl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetOrCreateIngressXpl() *NokiaConf_Configure_Groups_Group_Card_Mda_IngressXpl {
	if t.IngressXpl != nil {
		return t.IngressXpl
	}
	t.IngressXpl = &NokiaConf_Configure_Groups_Group_Card_Mda_IngressXpl{}
	return t.IngressXpl
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Card_Mda_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Card_Mda_Network{}
	return t.Network
}

// GetOrCreateXconnect retrieves the value of the Xconnect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetOrCreateXconnect() *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect {
	if t.Xconnect != nil {
		return t.Xconnect
	}
	t.Xconnect = &NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect{}
	return t.Xconnect
}

// GetAccess returns the value of the Access struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Mda. If the receiver or the field Access is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetAccess() *NokiaConf_Configure_Groups_Group_Card_Mda_Access {
	if t != nil && t.Access != nil {
		return t.Access
	}
	return nil
}

// GetClockMode returns the value of the ClockMode struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Mda. If the receiver or the field ClockMode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetClockMode() *NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode {
	if t != nil && t.ClockMode != nil {
		return t.ClockMode
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Mda. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetEgress() *NokiaConf_Configure_Groups_Group_Card_Mda_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEgressXpl returns the value of the EgressXpl struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Mda. If the receiver or the field EgressXpl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetEgressXpl() *NokiaConf_Configure_Groups_Group_Card_Mda_EgressXpl {
	if t != nil && t.EgressXpl != nil {
		return t.EgressXpl
	}
	return nil
}

// GetIngressXpl returns the value of the IngressXpl struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Mda. If the receiver or the field IngressXpl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetIngressXpl() *NokiaConf_Configure_Groups_Group_Card_Mda_IngressXpl {
	if t != nil && t.IngressXpl != nil {
		return t.IngressXpl
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Mda. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetNetwork() *NokiaConf_Configure_Groups_Group_Card_Mda_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetXconnect returns the value of the Xconnect struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Mda. If the receiver or the field Xconnect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetXconnect() *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect {
	if t != nil && t.Xconnect != nil {
		return t.Xconnect
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Card_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetFailOnError retrieves the value of the leaf FailOnError from the NokiaConf_Configure_Groups_Group_Card_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailOnError is set, it can
// safely use t.GetFailOnError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailOnError == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetFailOnError() bool {
	if t == nil || t.FailOnError == nil {
		return false
	}
	return *t.FailOnError
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Card_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetLevel() E_NokiaTypesCard_SrosMdaLevel {
	if t == nil || t.Level == 0 {
		return 0
	}
	return t.Level
}

// GetMdaSlot retrieves the value of the leaf MdaSlot from the NokiaConf_Configure_Groups_Group_Card_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdaSlot is set, it can
// safely use t.GetMdaSlot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdaSlot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetMdaSlot() NokiaConf_Configure_Groups_Group_Card_Mda_MdaSlot_Union {
	if t == nil || t.MdaSlot == nil {
		return nil
	}
	return t.MdaSlot
}

// GetMdaType retrieves the value of the leaf MdaType from the NokiaConf_Configure_Groups_Group_Card_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdaType is set, it can
// safely use t.GetMdaType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdaType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetMdaType() E_NokiaTypesCard_SrosMdaType {
	if t == nil || t.MdaType == 0 {
		return 0
	}
	return t.MdaType
}

// GetPowerPriorityLevel retrieves the value of the leaf PowerPriorityLevel from the NokiaConf_Configure_Groups_Group_Card_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerPriorityLevel is set, it can
// safely use t.GetPowerPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerPriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetPowerPriorityLevel() uint32 {
	if t == nil || t.PowerPriorityLevel == nil {
		return 150
	}
	return *t.PowerPriorityLevel
}

// GetResetOnRecoverableError retrieves the value of the leaf ResetOnRecoverableError from the NokiaConf_Configure_Groups_Group_Card_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResetOnRecoverableError is set, it can
// safely use t.GetResetOnRecoverableError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResetOnRecoverableError == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetResetOnRecoverableError() bool {
	if t == nil || t.ResetOnRecoverableError == nil {
		return false
	}
	return *t.ResetOnRecoverableError
}

// GetSyncE retrieves the value of the leaf SyncE from the NokiaConf_Configure_Groups_Group_Card_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncE is set, it can
// safely use t.GetSyncE() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncE == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) GetSyncE() E_NokiaConf_Configure_Groups_Group_Card_Mda_SyncE {
	if t == nil || t.SyncE == 0 {
		return 0
	}
	return t.SyncE
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.FailOnError == nil {
		var v bool = false
		t.FailOnError = &v
	}
	if t.PowerPriorityLevel == nil {
		var v uint32 = 150
		t.PowerPriorityLevel = &v
	}
	if t.ResetOnRecoverableError == nil {
		var v bool = false
		t.ResetOnRecoverableError = &v
	}
	t.Access.PopulateDefaults()
	t.ClockMode.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.EgressXpl.PopulateDefaults()
	t.IngressXpl.PopulateDefaults()
	t.Network.PopulateDefaults()
	t.Xconnect.PopulateDefaults()
	for _, e := range t.Event {
		e.PopulateDefaults()
	}
	for _, e := range t.Upgrade {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Mda struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"mda-slot": t.MdaSlot,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda.
func (*NokiaConf_Configure_Groups_Group_Card_Mda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Access represents the /nokia-conf/configure/groups/group/card/mda/access YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Access struct {
	Egress  *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress  `path:"egress" module:"nokia-conf" yangPresence:"true"`
	Ingress *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress `path:"ingress" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Access implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Access) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Mda_Access. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access) GetEgress() *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Mda_Access. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access) GetIngress() *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Access
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Access"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Access.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Access) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress represents the /nokia-conf/configure/groups/group/card/mda/access/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress struct {
	Pool map[string]*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool `path:"pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress) NewPool(Name string) (*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool{
		Name: &Name,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.Name = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress) GetOrCreatePool(Name string) *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool {

	key := Name

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress) GetPool(Name string) *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress) DeletePool(Name string) {
	key := Name

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool struct to the
// list Pool of NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress) AppendPool(v *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool represents the /nokia-conf/configure/groups/group/card/mda/access/egress/pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool struct {
	AmberAlarmThreshold *uint32                                                               `path:"amber-alarm-threshold" module:"nokia-conf"`
	Name                *string                                                               `path:"name" module:"nokia-conf"`
	RedAlarmThreshold   *uint32                                                               `path:"red-alarm-threshold" module:"nokia-conf"`
	ResvCbs             *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs `path:"resv-cbs" module:"nokia-conf"`
	SlopePolicy         *string                                                               `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool) IsYANGGoStruct() {}

// GetOrCreateResvCbs retrieves the value of the ResvCbs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool) GetOrCreateResvCbs() *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs {
	if t.ResvCbs != nil {
		return t.ResvCbs
	}
	t.ResvCbs = &NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs{}
	return t.ResvCbs
}

// GetResvCbs returns the value of the ResvCbs struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool. If the receiver or the field ResvCbs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool) GetResvCbs() *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs {
	if t != nil && t.ResvCbs != nil {
		return t.ResvCbs
	}
	return nil
}

// GetAmberAlarmThreshold retrieves the value of the leaf AmberAlarmThreshold from the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AmberAlarmThreshold is set, it can
// safely use t.GetAmberAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AmberAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool) GetAmberAlarmThreshold() uint32 {
	if t == nil || t.AmberAlarmThreshold == nil {
		return 0
	}
	return *t.AmberAlarmThreshold
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRedAlarmThreshold retrieves the value of the leaf RedAlarmThreshold from the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedAlarmThreshold is set, it can
// safely use t.GetRedAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool) GetRedAlarmThreshold() uint32 {
	if t == nil || t.RedAlarmThreshold == nil {
		return 0
	}
	return *t.RedAlarmThreshold
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ResvCbs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs represents the /nokia-conf/configure/groups/group/card/mda/access/egress/pool/resv-cbs YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs struct {
	AmberAlarmAction *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction `path:"amber-alarm-action" module:"nokia-conf"`
	Cbs              *int32                                                                                 `path:"cbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs) IsYANGGoStruct() {}

// GetOrCreateAmberAlarmAction retrieves the value of the AmberAlarmAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs) GetOrCreateAmberAlarmAction() *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction {
	if t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	t.AmberAlarmAction = &NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction{}
	return t.AmberAlarmAction
}

// GetAmberAlarmAction returns the value of the AmberAlarmAction struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs. If the receiver or the field AmberAlarmAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs) GetAmberAlarmAction() *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction {
	if t != nil && t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AmberAlarmAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction represents the /nokia-conf/configure/groups/group/card/mda/access/egress/pool/resv-cbs/amber-alarm-action YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction struct {
	Max  *uint32 `path:"max" module:"nokia-conf"`
	Step *uint32 `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction) IsYANGGoStruct() {
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction) GetStep() uint32 {
	if t == nil || t.Step == nil {
		return 0
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress represents the /nokia-conf/configure/groups/group/card/mda/access/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress struct {
	Pool map[string]*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool `path:"pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress) NewPool(Name string) (*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool{
		Name: &Name,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.Name = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress) GetOrCreatePool(Name string) *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool {

	key := Name

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress) GetPool(Name string) *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress) DeletePool(Name string) {
	key := Name

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool struct to the
// list Pool of NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress) AppendPool(v *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool represents the /nokia-conf/configure/groups/group/card/mda/access/ingress/pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool struct {
	AmberAlarmThreshold *uint32                                                                `path:"amber-alarm-threshold" module:"nokia-conf"`
	Name                *string                                                                `path:"name" module:"nokia-conf"`
	RedAlarmThreshold   *uint32                                                                `path:"red-alarm-threshold" module:"nokia-conf"`
	ResvCbs             *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs `path:"resv-cbs" module:"nokia-conf"`
	SlopePolicy         *string                                                                `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool) IsYANGGoStruct() {}

// GetOrCreateResvCbs retrieves the value of the ResvCbs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool) GetOrCreateResvCbs() *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs {
	if t.ResvCbs != nil {
		return t.ResvCbs
	}
	t.ResvCbs = &NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs{}
	return t.ResvCbs
}

// GetResvCbs returns the value of the ResvCbs struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool. If the receiver or the field ResvCbs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool) GetResvCbs() *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs {
	if t != nil && t.ResvCbs != nil {
		return t.ResvCbs
	}
	return nil
}

// GetAmberAlarmThreshold retrieves the value of the leaf AmberAlarmThreshold from the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AmberAlarmThreshold is set, it can
// safely use t.GetAmberAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AmberAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool) GetAmberAlarmThreshold() uint32 {
	if t == nil || t.AmberAlarmThreshold == nil {
		return 0
	}
	return *t.AmberAlarmThreshold
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRedAlarmThreshold retrieves the value of the leaf RedAlarmThreshold from the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedAlarmThreshold is set, it can
// safely use t.GetRedAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool) GetRedAlarmThreshold() uint32 {
	if t == nil || t.RedAlarmThreshold == nil {
		return 0
	}
	return *t.RedAlarmThreshold
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ResvCbs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs represents the /nokia-conf/configure/groups/group/card/mda/access/ingress/pool/resv-cbs YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs struct {
	AmberAlarmAction *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction `path:"amber-alarm-action" module:"nokia-conf"`
	Cbs              *int32                                                                                  `path:"cbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs) IsYANGGoStruct() {}

// GetOrCreateAmberAlarmAction retrieves the value of the AmberAlarmAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs) GetOrCreateAmberAlarmAction() *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction {
	if t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	t.AmberAlarmAction = &NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction{}
	return t.AmberAlarmAction
}

// GetAmberAlarmAction returns the value of the AmberAlarmAction struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs. If the receiver or the field AmberAlarmAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs) GetAmberAlarmAction() *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction {
	if t != nil && t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AmberAlarmAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction represents the /nokia-conf/configure/groups/group/card/mda/access/ingress/pool/resv-cbs/amber-alarm-action YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction struct {
	Max  *uint32 `path:"max" module:"nokia-conf"`
	Step *uint32 `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) IsYANGGoStruct() {
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) GetStep() uint32 {
	if t == nil || t.Step == nil {
		return 0
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode represents the /nokia-conf/configure/groups/group/card/mda/clock-mode YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode struct {
	Mode          E_NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode_Mode `path:"mode" module:"nokia-conf"`
	TimestampFreq *uint32                                                    `path:"timestamp-freq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode) IsYANGGoStruct() {}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode) GetMode() E_NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetTimestampFreq retrieves the value of the leaf TimestampFreq from the NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimestampFreq is set, it can
// safely use t.GetTimestampFreq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimestampFreq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode) GetTimestampFreq() uint32 {
	if t == nil || t.TimestampFreq == nil {
		return 0
	}
	return *t.TimestampFreq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_ClockMode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Egress represents the /nokia-conf/configure/groups/group/card/mda/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Egress struct {
	HsmdaAggregateQueueBurst *NokiaConf_Configure_Groups_Group_Card_Mda_Egress_HsmdaAggregateQueueBurst `path:"hsmda-aggregate-queue-burst" module:"nokia-conf"`
	HsmdaPoolPolicy          *string                                                                    `path:"hsmda-pool-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Egress) IsYANGGoStruct() {}

// GetOrCreateHsmdaAggregateQueueBurst retrieves the value of the HsmdaAggregateQueueBurst field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Egress) GetOrCreateHsmdaAggregateQueueBurst() *NokiaConf_Configure_Groups_Group_Card_Mda_Egress_HsmdaAggregateQueueBurst {
	if t.HsmdaAggregateQueueBurst != nil {
		return t.HsmdaAggregateQueueBurst
	}
	t.HsmdaAggregateQueueBurst = &NokiaConf_Configure_Groups_Group_Card_Mda_Egress_HsmdaAggregateQueueBurst{}
	return t.HsmdaAggregateQueueBurst
}

// GetHsmdaAggregateQueueBurst returns the value of the HsmdaAggregateQueueBurst struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Mda_Egress. If the receiver or the field HsmdaAggregateQueueBurst is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Egress) GetHsmdaAggregateQueueBurst() *NokiaConf_Configure_Groups_Group_Card_Mda_Egress_HsmdaAggregateQueueBurst {
	if t != nil && t.HsmdaAggregateQueueBurst != nil {
		return t.HsmdaAggregateQueueBurst
	}
	return nil
}

// GetHsmdaPoolPolicy retrieves the value of the leaf HsmdaPoolPolicy from the NokiaConf_Configure_Groups_Group_Card_Mda_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsmdaPoolPolicy is set, it can
// safely use t.GetHsmdaPoolPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsmdaPoolPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Egress) GetHsmdaPoolPolicy() string {
	if t == nil || t.HsmdaPoolPolicy == nil {
		return ""
	}
	return *t.HsmdaPoolPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HsmdaAggregateQueueBurst.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Egress.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_EgressXpl represents the /nokia-conf/configure/groups/group/card/mda/egress-xpl YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_EgressXpl struct {
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
	Window    *uint32 `path:"window" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_EgressXpl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_EgressXpl) IsYANGGoStruct() {}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Card_Mda_EgressXpl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_EgressXpl) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 1000
	}
	return *t.Threshold
}

// GetWindow retrieves the value of the leaf Window from the NokiaConf_Configure_Groups_Group_Card_Mda_EgressXpl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Window is set, it can
// safely use t.GetWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Window == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_EgressXpl) GetWindow() uint32 {
	if t == nil || t.Window == nil {
		return 60
	}
	return *t.Window
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_EgressXpl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_EgressXpl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Threshold == nil {
		var v uint32 = 1000
		t.Threshold = &v
	}
	if t.Window == nil {
		var v uint32 = 60
		t.Window = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_EgressXpl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_EgressXpl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_EgressXpl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_EgressXpl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_EgressXpl.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_EgressXpl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Egress_HsmdaAggregateQueueBurst represents the /nokia-conf/configure/groups/group/card/mda/egress/hsmda-aggregate-queue-burst YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Egress_HsmdaAggregateQueueBurst struct {
	HighBurstIncrease  *int32 `path:"high-burst-increase" module:"nokia-conf"`
	LowBurstMultiplier *int32 `path:"low-burst-multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Egress_HsmdaAggregateQueueBurst implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Egress_HsmdaAggregateQueueBurst) IsYANGGoStruct() {}

// GetHighBurstIncrease retrieves the value of the leaf HighBurstIncrease from the NokiaConf_Configure_Groups_Group_Card_Mda_Egress_HsmdaAggregateQueueBurst
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighBurstIncrease is set, it can
// safely use t.GetHighBurstIncrease() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighBurstIncrease == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Egress_HsmdaAggregateQueueBurst) GetHighBurstIncrease() int32 {
	if t == nil || t.HighBurstIncrease == nil {
		return 0
	}
	return *t.HighBurstIncrease
}

// GetLowBurstMultiplier retrieves the value of the leaf LowBurstMultiplier from the NokiaConf_Configure_Groups_Group_Card_Mda_Egress_HsmdaAggregateQueueBurst
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowBurstMultiplier is set, it can
// safely use t.GetLowBurstMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowBurstMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Egress_HsmdaAggregateQueueBurst) GetLowBurstMultiplier() int32 {
	if t == nil || t.LowBurstMultiplier == nil {
		return 0
	}
	return *t.LowBurstMultiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Egress_HsmdaAggregateQueueBurst
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Egress_HsmdaAggregateQueueBurst) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Egress_HsmdaAggregateQueueBurst) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Egress_HsmdaAggregateQueueBurst"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Egress_HsmdaAggregateQueueBurst) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Egress_HsmdaAggregateQueueBurst) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Egress_HsmdaAggregateQueueBurst.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Egress_HsmdaAggregateQueueBurst) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Event represents the /nokia-conf/configure/groups/group/card/mda/event YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Event struct {
	Action E_NokiaTypesChassis_HwEventAction                          `path:"action" module:"nokia-conf"`
	Type   NokiaConf_Configure_Groups_Group_Card_Mda_Event_Type_Union `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Event) IsYANGGoStruct() {}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_Card_Mda_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Event) GetAction() E_NokiaTypesChassis_HwEventAction {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Card_Mda_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Event) GetType() NokiaConf_Configure_Groups_Group_Card_Mda_Event_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Event
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Event) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Mda_Event struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Event) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Event.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Event) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_IngressXpl represents the /nokia-conf/configure/groups/group/card/mda/ingress-xpl YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_IngressXpl struct {
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
	Window    *uint32 `path:"window" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_IngressXpl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_IngressXpl) IsYANGGoStruct() {}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Card_Mda_IngressXpl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_IngressXpl) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 1000
	}
	return *t.Threshold
}

// GetWindow retrieves the value of the leaf Window from the NokiaConf_Configure_Groups_Group_Card_Mda_IngressXpl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Window is set, it can
// safely use t.GetWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Window == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_IngressXpl) GetWindow() uint32 {
	if t == nil || t.Window == nil {
		return 60
	}
	return *t.Window
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_IngressXpl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_IngressXpl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Threshold == nil {
		var v uint32 = 1000
		t.Threshold = &v
	}
	if t.Window == nil {
		var v uint32 = 60
		t.Window = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_IngressXpl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_IngressXpl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_IngressXpl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_IngressXpl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_IngressXpl.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_IngressXpl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Network represents the /nokia-conf/configure/groups/group/card/mda/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Network struct {
	Egress  *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress  `path:"egress" module:"nokia-conf" yangPresence:"true"`
	Ingress *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress `path:"ingress" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Network) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Mda_Network. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network) GetEgress() *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Mda_Network. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network) GetIngress() *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Network.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress represents the /nokia-conf/configure/groups/group/card/mda/network/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress struct {
	Pool map[string]*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool `path:"pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress) NewPool(Name string) (*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool{
		Name: &Name,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.Name = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress) GetOrCreatePool(Name string) *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool {

	key := Name

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress) GetPool(Name string) *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress) DeletePool(Name string) {
	key := Name

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool struct to the
// list Pool of NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress) AppendPool(v *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool represents the /nokia-conf/configure/groups/group/card/mda/network/egress/pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool struct {
	AmberAlarmThreshold *uint32                                                                `path:"amber-alarm-threshold" module:"nokia-conf"`
	Name                *string                                                                `path:"name" module:"nokia-conf"`
	RedAlarmThreshold   *uint32                                                                `path:"red-alarm-threshold" module:"nokia-conf"`
	ResvCbs             *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs `path:"resv-cbs" module:"nokia-conf"`
	SlopePolicy         *string                                                                `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool) IsYANGGoStruct() {}

// GetOrCreateResvCbs retrieves the value of the ResvCbs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool) GetOrCreateResvCbs() *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs {
	if t.ResvCbs != nil {
		return t.ResvCbs
	}
	t.ResvCbs = &NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs{}
	return t.ResvCbs
}

// GetResvCbs returns the value of the ResvCbs struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool. If the receiver or the field ResvCbs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool) GetResvCbs() *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs {
	if t != nil && t.ResvCbs != nil {
		return t.ResvCbs
	}
	return nil
}

// GetAmberAlarmThreshold retrieves the value of the leaf AmberAlarmThreshold from the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AmberAlarmThreshold is set, it can
// safely use t.GetAmberAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AmberAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool) GetAmberAlarmThreshold() uint32 {
	if t == nil || t.AmberAlarmThreshold == nil {
		return 0
	}
	return *t.AmberAlarmThreshold
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRedAlarmThreshold retrieves the value of the leaf RedAlarmThreshold from the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedAlarmThreshold is set, it can
// safely use t.GetRedAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool) GetRedAlarmThreshold() uint32 {
	if t == nil || t.RedAlarmThreshold == nil {
		return 0
	}
	return *t.RedAlarmThreshold
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ResvCbs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs represents the /nokia-conf/configure/groups/group/card/mda/network/egress/pool/resv-cbs YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs struct {
	AmberAlarmAction *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction `path:"amber-alarm-action" module:"nokia-conf"`
	Cbs              *int32                                                                                  `path:"cbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs) IsYANGGoStruct() {}

// GetOrCreateAmberAlarmAction retrieves the value of the AmberAlarmAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs) GetOrCreateAmberAlarmAction() *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction {
	if t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	t.AmberAlarmAction = &NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction{}
	return t.AmberAlarmAction
}

// GetAmberAlarmAction returns the value of the AmberAlarmAction struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs. If the receiver or the field AmberAlarmAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs) GetAmberAlarmAction() *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction {
	if t != nil && t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AmberAlarmAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction represents the /nokia-conf/configure/groups/group/card/mda/network/egress/pool/resv-cbs/amber-alarm-action YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction struct {
	Max  *uint32 `path:"max" module:"nokia-conf"`
	Step *uint32 `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction) IsYANGGoStruct() {
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction) GetStep() uint32 {
	if t == nil || t.Step == nil {
		return 0
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress represents the /nokia-conf/configure/groups/group/card/mda/network/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress struct {
	Pool        map[string]*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool `path:"pool" module:"nokia-conf"`
	QueuePolicy *string                                                                    `path:"queue-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress) NewPool(Name string) (*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool{
		Name: &Name,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.Name = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress) GetOrCreatePool(Name string) *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool {

	key := Name

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress) GetPool(Name string) *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress) DeletePool(Name string) {
	key := Name

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool struct to the
// list Pool of NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress) AppendPool(v *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// GetQueuePolicy retrieves the value of the leaf QueuePolicy from the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuePolicy is set, it can
// safely use t.GetQueuePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress) GetQueuePolicy() string {
	if t == nil || t.QueuePolicy == nil {
		return ""
	}
	return *t.QueuePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool represents the /nokia-conf/configure/groups/group/card/mda/network/ingress/pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool struct {
	AmberAlarmThreshold *uint32                                                                 `path:"amber-alarm-threshold" module:"nokia-conf"`
	Name                *string                                                                 `path:"name" module:"nokia-conf"`
	RedAlarmThreshold   *uint32                                                                 `path:"red-alarm-threshold" module:"nokia-conf"`
	ResvCbs             *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs `path:"resv-cbs" module:"nokia-conf"`
	SlopePolicy         *string                                                                 `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool) IsYANGGoStruct() {}

// GetOrCreateResvCbs retrieves the value of the ResvCbs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool) GetOrCreateResvCbs() *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs {
	if t.ResvCbs != nil {
		return t.ResvCbs
	}
	t.ResvCbs = &NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs{}
	return t.ResvCbs
}

// GetResvCbs returns the value of the ResvCbs struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool. If the receiver or the field ResvCbs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool) GetResvCbs() *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs {
	if t != nil && t.ResvCbs != nil {
		return t.ResvCbs
	}
	return nil
}

// GetAmberAlarmThreshold retrieves the value of the leaf AmberAlarmThreshold from the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AmberAlarmThreshold is set, it can
// safely use t.GetAmberAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AmberAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool) GetAmberAlarmThreshold() uint32 {
	if t == nil || t.AmberAlarmThreshold == nil {
		return 0
	}
	return *t.AmberAlarmThreshold
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRedAlarmThreshold retrieves the value of the leaf RedAlarmThreshold from the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedAlarmThreshold is set, it can
// safely use t.GetRedAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool) GetRedAlarmThreshold() uint32 {
	if t == nil || t.RedAlarmThreshold == nil {
		return 0
	}
	return *t.RedAlarmThreshold
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ResvCbs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs represents the /nokia-conf/configure/groups/group/card/mda/network/ingress/pool/resv-cbs YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs struct {
	AmberAlarmAction *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction `path:"amber-alarm-action" module:"nokia-conf"`
	Cbs              *int32                                                                                   `path:"cbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs) IsYANGGoStruct() {}

// GetOrCreateAmberAlarmAction retrieves the value of the AmberAlarmAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs) GetOrCreateAmberAlarmAction() *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction {
	if t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	t.AmberAlarmAction = &NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction{}
	return t.AmberAlarmAction
}

// GetAmberAlarmAction returns the value of the AmberAlarmAction struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs. If the receiver or the field AmberAlarmAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs) GetAmberAlarmAction() *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction {
	if t != nil && t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AmberAlarmAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction represents the /nokia-conf/configure/groups/group/card/mda/network/ingress/pool/resv-cbs/amber-alarm-action YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction struct {
	Max  *uint32 `path:"max" module:"nokia-conf"`
	Step *uint32 `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction) IsYANGGoStruct() {
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction) GetStep() uint32 {
	if t == nil || t.Step == nil {
		return 0
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade represents the /nokia-conf/configure/groups/group/card/mda/upgrade YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade struct {
	Path         E_NokiaTypesCard_SrosMdaLevelUpgradePath                             `path:"path" module:"nokia-conf"`
	UpgradeIndex NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade_UpgradeIndex_Union `path:"upgrade-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade) IsYANGGoStruct() {}

// GetPath retrieves the value of the leaf Path from the NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Path is set, it can
// safely use t.GetPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Path == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade) GetPath() E_NokiaTypesCard_SrosMdaLevelUpgradePath {
	if t == nil || t.Path == 0 {
		return 0
	}
	return t.Path
}

// GetUpgradeIndex retrieves the value of the leaf UpgradeIndex from the NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpgradeIndex is set, it can
// safely use t.GetUpgradeIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpgradeIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade) GetUpgradeIndex() NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade_UpgradeIndex_Union {
	if t == nil || t.UpgradeIndex == nil {
		return nil
	}
	return t.UpgradeIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"upgrade-index": t.UpgradeIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Upgrade) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect represents the /nokia-conf/configure/groups/group/card/mda/xconnect YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect struct {
	Mac map[NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_MacId_Union]*NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect) IsYANGGoStruct() {}

// NewMac creates a new entry in the Mac list of the
// NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect) NewMac(MacId NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_MacId_Union) (*NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_MacId_Union]*NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac)
	}

	key := MacId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mac", key)
	}

	t.Mac[key] = &NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac{
		MacId: MacId,
	}

	return t.Mac[key], nil
}

// RenameMac renames an entry in the list Mac within
// the NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect) RenameMac(oldK, newK NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_MacId_Union) error {
	if _, ok := t.Mac[newK]; ok {
		return fmt.Errorf("key %v already exists in Mac", newK)
	}

	e, ok := t.Mac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mac", oldK)
	}
	e.MacId = newK

	t.Mac[newK] = e
	delete(t.Mac, oldK)
	return nil
}

// GetOrCreateMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect) GetOrCreateMac(MacId NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_MacId_Union) *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac {

	key := MacId

	if v, ok := t.Mac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMac(MacId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMac got unexpected error: %v", err))
	}
	return v
}

// GetMac retrieves the value with the specified key from
// the Mac map field of NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect) GetMac(MacId NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_MacId_Union) *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac {

	if t == nil {
		return nil
	}

	key := MacId

	if lm, ok := t.Mac[key]; ok {
		return lm
	}
	return nil
}

// DeleteMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect) DeleteMac(MacId NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_MacId_Union) {
	key := MacId

	delete(t.Mac, key)
}

// AppendMac appends the supplied NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac struct to the
// list Mac of NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect) AppendMac(v *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac) error {
	key := v.MacId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_MacId_Union]*NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac)
	}

	if _, ok := t.Mac[key]; ok {
		return fmt.Errorf("duplicate key for list Mac %v", key)
	}

	t.Mac[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac represents the /nokia-conf/configure/groups/group/card/mda/xconnect/mac YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac struct {
	Description *string                                                                                                                                               `path:"description" module:"nokia-conf"`
	Loopback    map[NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback_LoopbackId_Union]*NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback `path:"loopback" module:"nokia-conf"`
	MacId       NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_MacId_Union                                                                                    `path:"mac-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac) IsYANGGoStruct() {}

// NewLoopback creates a new entry in the Loopback list of the
// NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac) NewLoopback(LoopbackId NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback_LoopbackId_Union) (*NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Loopback == nil {
		t.Loopback = make(map[NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback_LoopbackId_Union]*NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback)
	}

	key := LoopbackId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Loopback[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Loopback", key)
	}

	t.Loopback[key] = &NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback{
		LoopbackId: LoopbackId,
	}

	return t.Loopback[key], nil
}

// RenameLoopback renames an entry in the list Loopback within
// the NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac) RenameLoopback(oldK, newK NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback_LoopbackId_Union) error {
	if _, ok := t.Loopback[newK]; ok {
		return fmt.Errorf("key %v already exists in Loopback", newK)
	}

	e, ok := t.Loopback[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Loopback", oldK)
	}
	e.LoopbackId = newK

	t.Loopback[newK] = e
	delete(t.Loopback, oldK)
	return nil
}

// GetOrCreateLoopback retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac) GetOrCreateLoopback(LoopbackId NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback_LoopbackId_Union) *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback {

	key := LoopbackId

	if v, ok := t.Loopback[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLoopback(LoopbackId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLoopback got unexpected error: %v", err))
	}
	return v
}

// GetLoopback retrieves the value with the specified key from
// the Loopback map field of NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac) GetLoopback(LoopbackId NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback_LoopbackId_Union) *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback {

	if t == nil {
		return nil
	}

	key := LoopbackId

	if lm, ok := t.Loopback[key]; ok {
		return lm
	}
	return nil
}

// DeleteLoopback deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac) DeleteLoopback(LoopbackId NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback_LoopbackId_Union) {
	key := LoopbackId

	delete(t.Loopback, key)
}

// AppendLoopback appends the supplied NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback struct to the
// list Loopback of NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac) AppendLoopback(v *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback) error {
	key := v.LoopbackId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Loopback == nil {
		t.Loopback = make(map[NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback_LoopbackId_Union]*NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback)
	}

	if _, ok := t.Loopback[key]; ok {
		return fmt.Errorf("duplicate key for list Loopback %v", key)
	}

	t.Loopback[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMacId retrieves the value of the leaf MacId from the NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacId is set, it can
// safely use t.GetMacId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac) GetMacId() NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_MacId_Union {
	if t == nil || t.MacId == nil {
		return nil
	}
	return t.MacId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Loopback {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"mac-id": t.MacId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback represents the /nokia-conf/configure/groups/group/card/mda/xconnect/mac/loopback YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback struct {
	Bandwidth   *uint32                                                                          `path:"bandwidth" module:"nokia-conf"`
	Description *string                                                                          `path:"description" module:"nokia-conf"`
	LoopbackId  NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback_LoopbackId_Union `path:"loopback-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback) IsYANGGoStruct() {}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback) GetBandwidth() uint32 {
	if t == nil || t.Bandwidth == nil {
		return 100
	}
	return *t.Bandwidth
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLoopbackId retrieves the value of the leaf LoopbackId from the NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopbackId is set, it can
// safely use t.GetLoopbackId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopbackId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback) GetLoopbackId() NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback_LoopbackId_Union {
	if t == nil || t.LoopbackId == nil {
		return nil
	}
	return t.LoopbackId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Bandwidth == nil {
		var v uint32 = 100
		t.Bandwidth = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"loopback-id": t.LoopbackId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback.
func (*NokiaConf_Configure_Groups_Group_Card_Mda_Xconnect_Mac_Loopback) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Upgrade represents the /nokia-conf/configure/groups/group/card/upgrade YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Upgrade struct {
	Path         E_NokiaTypesCard_SrosIomLevelUpgradePath                         `path:"path" module:"nokia-conf"`
	UpgradeIndex NokiaConf_Configure_Groups_Group_Card_Upgrade_UpgradeIndex_Union `path:"upgrade-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Upgrade implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Upgrade) IsYANGGoStruct() {}

// GetPath retrieves the value of the leaf Path from the NokiaConf_Configure_Groups_Group_Card_Upgrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Path is set, it can
// safely use t.GetPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Path == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Upgrade) GetPath() E_NokiaTypesCard_SrosIomLevelUpgradePath {
	if t == nil || t.Path == 0 {
		return 0
	}
	return t.Path
}

// GetUpgradeIndex retrieves the value of the leaf UpgradeIndex from the NokiaConf_Configure_Groups_Group_Card_Upgrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpgradeIndex is set, it can
// safely use t.GetUpgradeIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpgradeIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Upgrade) GetUpgradeIndex() NokiaConf_Configure_Groups_Group_Card_Upgrade_UpgradeIndex_Union {
	if t == nil || t.UpgradeIndex == nil {
		return nil
	}
	return t.UpgradeIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Upgrade
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Upgrade) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Upgrade struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Upgrade) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"upgrade-index": t.UpgradeIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Upgrade) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Upgrade"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Upgrade) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Upgrade) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Upgrade.
func (*NokiaConf_Configure_Groups_Group_Card_Upgrade) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment represents the /nokia-conf/configure/groups/group/card/virtual-scheduler-adjustment YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment struct {
	InternalSchedulerWeightMode E_NokiaTypesQos_InternalSchedulerWeightMode                                `path:"internal-scheduler-weight-mode" module:"nokia-conf"`
	Interval                    *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval `path:"interval" module:"nokia-conf"`
	SlowQueueThresholdRate      *uint32                                                                    `path:"slow-queue-threshold-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment) IsYANGGoStruct() {}

// GetOrCreateInterval retrieves the value of the Interval field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment) GetOrCreateInterval() *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval {
	if t.Interval != nil {
		return t.Interval
	}
	t.Interval = &NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval{}
	return t.Interval
}

// GetInterval returns the value of the Interval struct pointer
// from NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment. If the receiver or the field Interval is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment) GetInterval() *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval {
	if t != nil && t.Interval != nil {
		return t.Interval
	}
	return nil
}

// GetInternalSchedulerWeightMode retrieves the value of the leaf InternalSchedulerWeightMode from the NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalSchedulerWeightMode is set, it can
// safely use t.GetInternalSchedulerWeightMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalSchedulerWeightMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment) GetInternalSchedulerWeightMode() E_NokiaTypesQos_InternalSchedulerWeightMode {
	if t == nil || t.InternalSchedulerWeightMode == 0 {
		return NokiaTypesQos_InternalSchedulerWeightMode_auto
	}
	return t.InternalSchedulerWeightMode
}

// GetSlowQueueThresholdRate retrieves the value of the leaf SlowQueueThresholdRate from the NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlowQueueThresholdRate is set, it can
// safely use t.GetSlowQueueThresholdRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlowQueueThresholdRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment) GetSlowQueueThresholdRate() uint32 {
	if t == nil || t.SlowQueueThresholdRate == nil {
		return 1000
	}
	return *t.SlowQueueThresholdRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InternalSchedulerWeightMode == 0 {
		t.InternalSchedulerWeightMode = NokiaTypesQos_InternalSchedulerWeightMode_auto
	}
	if t.SlowQueueThresholdRate == nil {
		var v uint32 = 1000
		t.SlowQueueThresholdRate = &v
	}
	t.Interval.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment.
func (*NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval represents the /nokia-conf/configure/groups/group/card/virtual-scheduler-adjustment/interval YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval struct {
	RateCalculationMinimum *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum `path:"rate-calculation-minimum" module:"nokia-conf"`
	SchedulerRunMinimum    *float64                                                                                          `path:"scheduler-run-minimum" module:"nokia-conf"`
	TaskScheduling         *float64                                                                                          `path:"task-scheduling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval) IsYANGGoStruct() {}

// GetOrCreateRateCalculationMinimum retrieves the value of the RateCalculationMinimum field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval) GetOrCreateRateCalculationMinimum() *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum {
	if t.RateCalculationMinimum != nil {
		return t.RateCalculationMinimum
	}
	t.RateCalculationMinimum = &NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum{}
	return t.RateCalculationMinimum
}

// GetRateCalculationMinimum returns the value of the RateCalculationMinimum struct pointer
// from NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval. If the receiver or the field RateCalculationMinimum is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval) GetRateCalculationMinimum() *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum {
	if t != nil && t.RateCalculationMinimum != nil {
		return t.RateCalculationMinimum
	}
	return nil
}

// GetSchedulerRunMinimum retrieves the value of the leaf SchedulerRunMinimum from the NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerRunMinimum is set, it can
// safely use t.GetSchedulerRunMinimum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerRunMinimum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval) GetSchedulerRunMinimum() float64 {
	if t == nil || t.SchedulerRunMinimum == nil {
		return 100.00
	}
	return *t.SchedulerRunMinimum
}

// GetTaskScheduling retrieves the value of the leaf TaskScheduling from the NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TaskScheduling is set, it can
// safely use t.GetTaskScheduling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TaskScheduling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval) GetTaskScheduling() float64 {
	if t == nil || t.TaskScheduling == nil {
		return 100.00
	}
	return *t.TaskScheduling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SchedulerRunMinimum == nil {
		var v float64 = 100.00
		t.SchedulerRunMinimum = &v
	}
	if t.TaskScheduling == nil {
		var v float64 = 100.00
		t.TaskScheduling = &v
	}
	t.RateCalculationMinimum.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval.
func (*NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum represents the /nokia-conf/configure/groups/group/card/virtual-scheduler-adjustment/interval/rate-calculation-minimum YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum struct {
	FastQueue *float64 `path:"fast-queue" module:"nokia-conf"`
	SlowQueue *float64 `path:"slow-queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum) IsYANGGoStruct() {
}

// GetFastQueue retrieves the value of the leaf FastQueue from the NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastQueue is set, it can
// safely use t.GetFastQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum) GetFastQueue() float64 {
	if t == nil || t.FastQueue == nil {
		return 100.00
	}
	return *t.FastQueue
}

// GetSlowQueue retrieves the value of the leaf SlowQueue from the NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlowQueue is set, it can
// safely use t.GetSlowQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlowQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum) GetSlowQueue() float64 {
	if t == nil || t.SlowQueue == nil {
		return 100.00
	}
	return *t.SlowQueue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastQueue == nil {
		var v float64 = 100.00
		t.FastQueue = &v
	}
	if t.SlowQueue == nil {
		var v float64 = 100.00
		t.SlowQueue = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum.
func (*NokiaConf_Configure_Groups_Group_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Xiom represents the /nokia-conf/configure/groups/group/card/xiom YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Xiom struct {
	AdminState              E_NokiaTypesSros_AdminState                                                                                                   `path:"admin-state" module:"nokia-conf"`
	FailOnError             *bool                                                                                                                         `path:"fail-on-error" module:"nokia-conf"`
	Level                   E_NokiaTypesCard_SrosXiomLevel                                                                                                `path:"level" module:"nokia-conf"`
	Mda                     map[NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_MdaSlot_Union]*NokiaConf_Configure_Groups_Group_Card_Xiom_Mda              `path:"mda" module:"nokia-conf"`
	ResetOnRecoverableError *bool                                                                                                                         `path:"reset-on-recoverable-error" module:"nokia-conf"`
	Upgrade                 map[NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade_UpgradeIndex_Union]*NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade `path:"upgrade" module:"nokia-conf"`
	XiomSlot                *string                                                                                                                       `path:"xiom-slot" module:"nokia-conf"`
	XiomType                E_NokiaTypesCard_SrosXiomType                                                                                                 `path:"xiom-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Xiom implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Xiom) IsYANGGoStruct() {}

// NewMda creates a new entry in the Mda list of the
// NokiaConf_Configure_Groups_Group_Card_Xiom struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) NewMda(MdaSlot NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_MdaSlot_Union) (*NokiaConf_Configure_Groups_Group_Card_Xiom_Mda, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_MdaSlot_Union]*NokiaConf_Configure_Groups_Group_Card_Xiom_Mda)
	}

	key := MdaSlot

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mda[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mda", key)
	}

	t.Mda[key] = &NokiaConf_Configure_Groups_Group_Card_Xiom_Mda{
		MdaSlot: MdaSlot,
	}

	return t.Mda[key], nil
}

// RenameMda renames an entry in the list Mda within
// the NokiaConf_Configure_Groups_Group_Card_Xiom struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) RenameMda(oldK, newK NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_MdaSlot_Union) error {
	if _, ok := t.Mda[newK]; ok {
		return fmt.Errorf("key %v already exists in Mda", newK)
	}

	e, ok := t.Mda[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mda", oldK)
	}
	e.MdaSlot = newK

	t.Mda[newK] = e
	delete(t.Mda, oldK)
	return nil
}

// GetOrCreateMda retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Xiom. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) GetOrCreateMda(MdaSlot NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_MdaSlot_Union) *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda {

	key := MdaSlot

	if v, ok := t.Mda[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMda(MdaSlot)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMda got unexpected error: %v", err))
	}
	return v
}

// GetMda retrieves the value with the specified key from
// the Mda map field of NokiaConf_Configure_Groups_Group_Card_Xiom. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) GetMda(MdaSlot NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_MdaSlot_Union) *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda {

	if t == nil {
		return nil
	}

	key := MdaSlot

	if lm, ok := t.Mda[key]; ok {
		return lm
	}
	return nil
}

// DeleteMda deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Xiom. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) DeleteMda(MdaSlot NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_MdaSlot_Union) {
	key := MdaSlot

	delete(t.Mda, key)
}

// AppendMda appends the supplied NokiaConf_Configure_Groups_Group_Card_Xiom_Mda struct to the
// list Mda of NokiaConf_Configure_Groups_Group_Card_Xiom. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Xiom_Mda already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) AppendMda(v *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda) error {
	key := v.MdaSlot

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_MdaSlot_Union]*NokiaConf_Configure_Groups_Group_Card_Xiom_Mda)
	}

	if _, ok := t.Mda[key]; ok {
		return fmt.Errorf("duplicate key for list Mda %v", key)
	}

	t.Mda[key] = v
	return nil
}

// NewUpgrade creates a new entry in the Upgrade list of the
// NokiaConf_Configure_Groups_Group_Card_Xiom struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) NewUpgrade(UpgradeIndex NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade_UpgradeIndex_Union) (*NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Upgrade == nil {
		t.Upgrade = make(map[NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade_UpgradeIndex_Union]*NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade)
	}

	key := UpgradeIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Upgrade[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Upgrade", key)
	}

	t.Upgrade[key] = &NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade{
		UpgradeIndex: UpgradeIndex,
	}

	return t.Upgrade[key], nil
}

// RenameUpgrade renames an entry in the list Upgrade within
// the NokiaConf_Configure_Groups_Group_Card_Xiom struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) RenameUpgrade(oldK, newK NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade_UpgradeIndex_Union) error {
	if _, ok := t.Upgrade[newK]; ok {
		return fmt.Errorf("key %v already exists in Upgrade", newK)
	}

	e, ok := t.Upgrade[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Upgrade", oldK)
	}
	e.UpgradeIndex = newK

	t.Upgrade[newK] = e
	delete(t.Upgrade, oldK)
	return nil
}

// GetOrCreateUpgrade retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Xiom. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) GetOrCreateUpgrade(UpgradeIndex NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade_UpgradeIndex_Union) *NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade {

	key := UpgradeIndex

	if v, ok := t.Upgrade[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUpgrade(UpgradeIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUpgrade got unexpected error: %v", err))
	}
	return v
}

// GetUpgrade retrieves the value with the specified key from
// the Upgrade map field of NokiaConf_Configure_Groups_Group_Card_Xiom. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) GetUpgrade(UpgradeIndex NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade_UpgradeIndex_Union) *NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade {

	if t == nil {
		return nil
	}

	key := UpgradeIndex

	if lm, ok := t.Upgrade[key]; ok {
		return lm
	}
	return nil
}

// DeleteUpgrade deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Xiom. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) DeleteUpgrade(UpgradeIndex NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade_UpgradeIndex_Union) {
	key := UpgradeIndex

	delete(t.Upgrade, key)
}

// AppendUpgrade appends the supplied NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade struct to the
// list Upgrade of NokiaConf_Configure_Groups_Group_Card_Xiom. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) AppendUpgrade(v *NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade) error {
	key := v.UpgradeIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Upgrade == nil {
		t.Upgrade = make(map[NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade_UpgradeIndex_Union]*NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade)
	}

	if _, ok := t.Upgrade[key]; ok {
		return fmt.Errorf("duplicate key for list Upgrade %v", key)
	}

	t.Upgrade[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Card_Xiom
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetFailOnError retrieves the value of the leaf FailOnError from the NokiaConf_Configure_Groups_Group_Card_Xiom
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailOnError is set, it can
// safely use t.GetFailOnError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailOnError == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) GetFailOnError() bool {
	if t == nil || t.FailOnError == nil {
		return false
	}
	return *t.FailOnError
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Card_Xiom
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) GetLevel() E_NokiaTypesCard_SrosXiomLevel {
	if t == nil || t.Level == 0 {
		return 0
	}
	return t.Level
}

// GetResetOnRecoverableError retrieves the value of the leaf ResetOnRecoverableError from the NokiaConf_Configure_Groups_Group_Card_Xiom
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResetOnRecoverableError is set, it can
// safely use t.GetResetOnRecoverableError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResetOnRecoverableError == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) GetResetOnRecoverableError() bool {
	if t == nil || t.ResetOnRecoverableError == nil {
		return false
	}
	return *t.ResetOnRecoverableError
}

// GetXiomSlot retrieves the value of the leaf XiomSlot from the NokiaConf_Configure_Groups_Group_Card_Xiom
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XiomSlot is set, it can
// safely use t.GetXiomSlot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XiomSlot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) GetXiomSlot() string {
	if t == nil || t.XiomSlot == nil {
		return ""
	}
	return *t.XiomSlot
}

// GetXiomType retrieves the value of the leaf XiomType from the NokiaConf_Configure_Groups_Group_Card_Xiom
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XiomType is set, it can
// safely use t.GetXiomType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XiomType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) GetXiomType() E_NokiaTypesCard_SrosXiomType {
	if t == nil || t.XiomType == 0 {
		return 0
	}
	return t.XiomType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Xiom
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.FailOnError == nil {
		var v bool = false
		t.FailOnError = &v
	}
	if t.ResetOnRecoverableError == nil {
		var v bool = false
		t.ResetOnRecoverableError = &v
	}
	for _, e := range t.Mda {
		e.PopulateDefaults()
	}
	for _, e := range t.Upgrade {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Xiom struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) ΛListKeyMap() (map[string]interface{}, error) {
	if t.XiomSlot == nil {
		return nil, fmt.Errorf("nil value for key XiomSlot")
	}

	return map[string]interface{}{
		"xiom-slot": *t.XiomSlot,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Xiom"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Xiom.
func (*NokiaConf_Configure_Groups_Group_Card_Xiom) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Xiom_Mda represents the /nokia-conf/configure/groups/group/card/xiom/mda YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Xiom_Mda struct {
	AdminState         E_NokiaTypesSros_AdminState                                  `path:"admin-state" module:"nokia-conf"`
	MdaSlot            NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_MdaSlot_Union `path:"mda-slot" module:"nokia-conf"`
	MdaType            E_NokiaTypesCard_SrosXiomMdaType                             `path:"mda-type" module:"nokia-conf"`
	PowerPriorityLevel *uint32                                                      `path:"power-priority-level" module:"nokia-conf"`
	SyncE              E_NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_SyncE       `path:"sync-e" module:"nokia-conf"`
	Xconnect           *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect     `path:"xconnect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Xiom_Mda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Xiom_Mda) IsYANGGoStruct() {}

// GetOrCreateXconnect retrieves the value of the Xconnect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda) GetOrCreateXconnect() *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect {
	if t.Xconnect != nil {
		return t.Xconnect
	}
	t.Xconnect = &NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect{}
	return t.Xconnect
}

// GetXconnect returns the value of the Xconnect struct pointer
// from NokiaConf_Configure_Groups_Group_Card_Xiom_Mda. If the receiver or the field Xconnect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda) GetXconnect() *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect {
	if t != nil && t.Xconnect != nil {
		return t.Xconnect
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Card_Xiom_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetMdaSlot retrieves the value of the leaf MdaSlot from the NokiaConf_Configure_Groups_Group_Card_Xiom_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdaSlot is set, it can
// safely use t.GetMdaSlot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdaSlot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda) GetMdaSlot() NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_MdaSlot_Union {
	if t == nil || t.MdaSlot == nil {
		return nil
	}
	return t.MdaSlot
}

// GetMdaType retrieves the value of the leaf MdaType from the NokiaConf_Configure_Groups_Group_Card_Xiom_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdaType is set, it can
// safely use t.GetMdaType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdaType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda) GetMdaType() E_NokiaTypesCard_SrosXiomMdaType {
	if t == nil || t.MdaType == 0 {
		return 0
	}
	return t.MdaType
}

// GetPowerPriorityLevel retrieves the value of the leaf PowerPriorityLevel from the NokiaConf_Configure_Groups_Group_Card_Xiom_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerPriorityLevel is set, it can
// safely use t.GetPowerPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerPriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda) GetPowerPriorityLevel() uint32 {
	if t == nil || t.PowerPriorityLevel == nil {
		return 150
	}
	return *t.PowerPriorityLevel
}

// GetSyncE retrieves the value of the leaf SyncE from the NokiaConf_Configure_Groups_Group_Card_Xiom_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncE is set, it can
// safely use t.GetSyncE() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncE == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda) GetSyncE() E_NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_SyncE {
	if t == nil || t.SyncE == 0 {
		return 0
	}
	return t.SyncE
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Xiom_Mda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.PowerPriorityLevel == nil {
		var v uint32 = 150
		t.PowerPriorityLevel = &v
	}
	t.Xconnect.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Xiom_Mda struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"mda-slot": t.MdaSlot,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Xiom_Mda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Xiom_Mda.
func (*NokiaConf_Configure_Groups_Group_Card_Xiom_Mda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect represents the /nokia-conf/configure/groups/group/card/xiom/mda/xconnect YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect struct {
	Mac map[NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_MacId_Union]*NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect) IsYANGGoStruct() {}

// NewMac creates a new entry in the Mac list of the
// NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect) NewMac(MacId NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_MacId_Union) (*NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_MacId_Union]*NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac)
	}

	key := MacId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mac", key)
	}

	t.Mac[key] = &NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac{
		MacId: MacId,
	}

	return t.Mac[key], nil
}

// RenameMac renames an entry in the list Mac within
// the NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect) RenameMac(oldK, newK NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_MacId_Union) error {
	if _, ok := t.Mac[newK]; ok {
		return fmt.Errorf("key %v already exists in Mac", newK)
	}

	e, ok := t.Mac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mac", oldK)
	}
	e.MacId = newK

	t.Mac[newK] = e
	delete(t.Mac, oldK)
	return nil
}

// GetOrCreateMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect) GetOrCreateMac(MacId NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_MacId_Union) *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac {

	key := MacId

	if v, ok := t.Mac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMac(MacId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMac got unexpected error: %v", err))
	}
	return v
}

// GetMac retrieves the value with the specified key from
// the Mac map field of NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect) GetMac(MacId NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_MacId_Union) *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac {

	if t == nil {
		return nil
	}

	key := MacId

	if lm, ok := t.Mac[key]; ok {
		return lm
	}
	return nil
}

// DeleteMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect) DeleteMac(MacId NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_MacId_Union) {
	key := MacId

	delete(t.Mac, key)
}

// AppendMac appends the supplied NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac struct to the
// list Mac of NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect) AppendMac(v *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac) error {
	key := v.MacId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_MacId_Union]*NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac)
	}

	if _, ok := t.Mac[key]; ok {
		return fmt.Errorf("duplicate key for list Mac %v", key)
	}

	t.Mac[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect.
func (*NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac represents the /nokia-conf/configure/groups/group/card/xiom/mda/xconnect/mac YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac struct {
	Description *string                                                                                                                                                         `path:"description" module:"nokia-conf"`
	Loopback    map[NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback_LoopbackId_Union]*NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback `path:"loopback" module:"nokia-conf"`
	MacId       NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_MacId_Union                                                                                         `path:"mac-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac) IsYANGGoStruct() {}

// NewLoopback creates a new entry in the Loopback list of the
// NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac) NewLoopback(LoopbackId NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback_LoopbackId_Union) (*NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Loopback == nil {
		t.Loopback = make(map[NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback_LoopbackId_Union]*NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback)
	}

	key := LoopbackId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Loopback[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Loopback", key)
	}

	t.Loopback[key] = &NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback{
		LoopbackId: LoopbackId,
	}

	return t.Loopback[key], nil
}

// RenameLoopback renames an entry in the list Loopback within
// the NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac) RenameLoopback(oldK, newK NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback_LoopbackId_Union) error {
	if _, ok := t.Loopback[newK]; ok {
		return fmt.Errorf("key %v already exists in Loopback", newK)
	}

	e, ok := t.Loopback[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Loopback", oldK)
	}
	e.LoopbackId = newK

	t.Loopback[newK] = e
	delete(t.Loopback, oldK)
	return nil
}

// GetOrCreateLoopback retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac) GetOrCreateLoopback(LoopbackId NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback_LoopbackId_Union) *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback {

	key := LoopbackId

	if v, ok := t.Loopback[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLoopback(LoopbackId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLoopback got unexpected error: %v", err))
	}
	return v
}

// GetLoopback retrieves the value with the specified key from
// the Loopback map field of NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac) GetLoopback(LoopbackId NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback_LoopbackId_Union) *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback {

	if t == nil {
		return nil
	}

	key := LoopbackId

	if lm, ok := t.Loopback[key]; ok {
		return lm
	}
	return nil
}

// DeleteLoopback deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac) DeleteLoopback(LoopbackId NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback_LoopbackId_Union) {
	key := LoopbackId

	delete(t.Loopback, key)
}

// AppendLoopback appends the supplied NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback struct to the
// list Loopback of NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac) AppendLoopback(v *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback) error {
	key := v.LoopbackId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Loopback == nil {
		t.Loopback = make(map[NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback_LoopbackId_Union]*NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback)
	}

	if _, ok := t.Loopback[key]; ok {
		return fmt.Errorf("duplicate key for list Loopback %v", key)
	}

	t.Loopback[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMacId retrieves the value of the leaf MacId from the NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacId is set, it can
// safely use t.GetMacId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac) GetMacId() NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_MacId_Union {
	if t == nil || t.MacId == nil {
		return nil
	}
	return t.MacId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Loopback {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"mac-id": t.MacId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac.
func (*NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback represents the /nokia-conf/configure/groups/group/card/xiom/mda/xconnect/mac/loopback YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback struct {
	Bandwidth   *uint32                                                                               `path:"bandwidth" module:"nokia-conf"`
	Description *string                                                                               `path:"description" module:"nokia-conf"`
	LoopbackId  NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback_LoopbackId_Union `path:"loopback-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback) IsYANGGoStruct() {}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback) GetBandwidth() uint32 {
	if t == nil || t.Bandwidth == nil {
		return 100
	}
	return *t.Bandwidth
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLoopbackId retrieves the value of the leaf LoopbackId from the NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopbackId is set, it can
// safely use t.GetLoopbackId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopbackId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback) GetLoopbackId() NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback_LoopbackId_Union {
	if t == nil || t.LoopbackId == nil {
		return nil
	}
	return t.LoopbackId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Bandwidth == nil {
		var v uint32 = 100
		t.Bandwidth = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"loopback-id": t.LoopbackId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback.
func (*NokiaConf_Configure_Groups_Group_Card_Xiom_Mda_Xconnect_Mac_Loopback) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade represents the /nokia-conf/configure/groups/group/card/xiom/upgrade YANG schema element.
type NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade struct {
	Path         E_NokiaTypesCard_SrosXiomLevelUpgradePath                             `path:"path" module:"nokia-conf"`
	UpgradeIndex NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade_UpgradeIndex_Union `path:"upgrade-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade) IsYANGGoStruct() {}

// GetPath retrieves the value of the leaf Path from the NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Path is set, it can
// safely use t.GetPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Path == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade) GetPath() E_NokiaTypesCard_SrosXiomLevelUpgradePath {
	if t == nil || t.Path == 0 {
		return 0
	}
	return t.Path
}

// GetUpgradeIndex retrieves the value of the leaf UpgradeIndex from the NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpgradeIndex is set, it can
// safely use t.GetUpgradeIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpgradeIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade) GetUpgradeIndex() NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade_UpgradeIndex_Union {
	if t == nil || t.UpgradeIndex == nil {
		return nil
	}
	return t.UpgradeIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"upgrade-index": t.UpgradeIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade.
func (*NokiaConf_Configure_Groups_Group_Card_Xiom_Upgrade) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Cflowd represents the /nokia-conf/configure/groups/group/cflowd YANG schema element.
type NokiaConf_Configure_Groups_Group_Cflowd struct {
	ActiveFlowTimeout         *uint32                                                                                                                          `path:"active-flow-timeout" module:"nokia-conf"`
	ActiveTimeout             *uint32                                                                                                                          `path:"active-timeout" module:"nokia-conf"`
	AdminState                E_NokiaTypesSros_AdminState                                                                                                      `path:"admin-state" module:"nokia-conf"`
	AnalyzeGrePayload         *bool                                                                                                                            `path:"analyze-gre-payload" module:"nokia-conf"`
	AnalyzeL2TpTraffic        *bool                                                                                                                            `path:"analyze-l2tp-traffic" module:"nokia-conf"`
	AnalyzeV4Overv6Traffic    *bool                                                                                                                            `path:"analyze-v4overv6-traffic" module:"nokia-conf"`
	CacheSize                 *uint32                                                                                                                          `path:"cache-size" module:"nokia-conf"`
	Collector                 map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector                     `path:"collector" module:"nokia-conf"`
	EnhancedDistribution      *bool                                                                                                                            `path:"enhanced-distribution" module:"nokia-conf"`
	ExportMode                E_NokiaConf_Configure_Groups_Group_Cflowd_ExportMode                                                                             `path:"export-mode" module:"nokia-conf"`
	InactiveFlowTimeout       *uint32                                                                                                                          `path:"inactive-flow-timeout" module:"nokia-conf"`
	InactiveTimeout           *uint32                                                                                                                          `path:"inactive-timeout" module:"nokia-conf"`
	InbandCollectorExportOnly *bool                                                                                                                            `path:"inband-collector-export-only" module:"nokia-conf"`
	Overflow                  *uint32                                                                                                                          `path:"overflow" module:"nokia-conf"`
	Rate                      *uint32                                                                                                                          `path:"rate" module:"nokia-conf"`
	SampleProfile             map[NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile_ProfileId_Union]*NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile `path:"sample-profile" module:"nokia-conf"`
	TemplateRetransmit        *uint32                                                                                                                          `path:"template-retransmit" module:"nokia-conf"`
	UseVrtrIfIndex            *bool                                                                                                                            `path:"use-vrtr-if-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Cflowd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Cflowd) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Cflowd_Collector_Key represents the key for list Collector of element /nokia-conf/configure/groups/group/cflowd.
type NokiaConf_Configure_Groups_Group_Cflowd_Collector_Key struct {
	IpAddress string                                                       `path:"ip-address"`
	Port      NokiaConf_Configure_Groups_Group_Cflowd_Collector_Port_Union `path:"port"`
}

// NewCollector creates a new entry in the Collector list of the
// NokiaConf_Configure_Groups_Group_Cflowd struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) NewCollector(IpAddress string, Port NokiaConf_Configure_Groups_Group_Cflowd_Collector_Port_Union) (*NokiaConf_Configure_Groups_Group_Cflowd_Collector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector)
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Collector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Collector", key)
	}

	t.Collector[key] = &NokiaConf_Configure_Groups_Group_Cflowd_Collector{
		IpAddress: &IpAddress,
		Port:      Port,
	}

	return t.Collector[key], nil
}

// RenameCollector renames an entry in the list Collector within
// the NokiaConf_Configure_Groups_Group_Cflowd struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) RenameCollector(oldK, newK NokiaConf_Configure_Groups_Group_Cflowd_Collector_Key) error {
	if _, ok := t.Collector[newK]; ok {
		return fmt.Errorf("key %v already exists in Collector", newK)
	}

	e, ok := t.Collector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Collector", oldK)
	}
	e.IpAddress = &newK.IpAddress
	e.Port = newK.Port

	t.Collector[newK] = e
	delete(t.Collector, oldK)
	return nil
}

// GetOrCreateCollector retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Cflowd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) GetOrCreateCollector(IpAddress string, Port NokiaConf_Configure_Groups_Group_Cflowd_Collector_Port_Union) *NokiaConf_Configure_Groups_Group_Cflowd_Collector {

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	if v, ok := t.Collector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCollector(IpAddress, Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCollector got unexpected error: %v", err))
	}
	return v
}

// GetCollector retrieves the value with the specified key from
// the Collector map field of NokiaConf_Configure_Groups_Group_Cflowd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) GetCollector(IpAddress string, Port NokiaConf_Configure_Groups_Group_Cflowd_Collector_Port_Union) *NokiaConf_Configure_Groups_Group_Cflowd_Collector {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	if lm, ok := t.Collector[key]; ok {
		return lm
	}
	return nil
}

// DeleteCollector deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Cflowd. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) DeleteCollector(IpAddress string, Port NokiaConf_Configure_Groups_Group_Cflowd_Collector_Port_Union) {
	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	delete(t.Collector, key)
}

// AppendCollector appends the supplied NokiaConf_Configure_Groups_Group_Cflowd_Collector struct to the
// list Collector of NokiaConf_Configure_Groups_Group_Cflowd. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Cflowd_Collector already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) AppendCollector(v *NokiaConf_Configure_Groups_Group_Cflowd_Collector) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key for IpAddress")
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_Key{
		IpAddress: *v.IpAddress,
		Port:      v.Port,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector)
	}

	if _, ok := t.Collector[key]; ok {
		return fmt.Errorf("duplicate key for list Collector %v", key)
	}

	t.Collector[key] = v
	return nil
}

// NewSampleProfile creates a new entry in the SampleProfile list of the
// NokiaConf_Configure_Groups_Group_Cflowd struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) NewSampleProfile(ProfileId NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile_ProfileId_Union) (*NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SampleProfile == nil {
		t.SampleProfile = make(map[NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile_ProfileId_Union]*NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile)
	}

	key := ProfileId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SampleProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SampleProfile", key)
	}

	t.SampleProfile[key] = &NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile{
		ProfileId: ProfileId,
	}

	return t.SampleProfile[key], nil
}

// RenameSampleProfile renames an entry in the list SampleProfile within
// the NokiaConf_Configure_Groups_Group_Cflowd struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) RenameSampleProfile(oldK, newK NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile_ProfileId_Union) error {
	if _, ok := t.SampleProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in SampleProfile", newK)
	}

	e, ok := t.SampleProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SampleProfile", oldK)
	}
	e.ProfileId = newK

	t.SampleProfile[newK] = e
	delete(t.SampleProfile, oldK)
	return nil
}

// GetOrCreateSampleProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Cflowd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) GetOrCreateSampleProfile(ProfileId NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile_ProfileId_Union) *NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile {

	key := ProfileId

	if v, ok := t.SampleProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSampleProfile(ProfileId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSampleProfile got unexpected error: %v", err))
	}
	return v
}

// GetSampleProfile retrieves the value with the specified key from
// the SampleProfile map field of NokiaConf_Configure_Groups_Group_Cflowd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) GetSampleProfile(ProfileId NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile_ProfileId_Union) *NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile {

	if t == nil {
		return nil
	}

	key := ProfileId

	if lm, ok := t.SampleProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteSampleProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Cflowd. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) DeleteSampleProfile(ProfileId NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile_ProfileId_Union) {
	key := ProfileId

	delete(t.SampleProfile, key)
}

// AppendSampleProfile appends the supplied NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile struct to the
// list SampleProfile of NokiaConf_Configure_Groups_Group_Cflowd. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) AppendSampleProfile(v *NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile) error {
	key := v.ProfileId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SampleProfile == nil {
		t.SampleProfile = make(map[NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile_ProfileId_Union]*NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile)
	}

	if _, ok := t.SampleProfile[key]; ok {
		return fmt.Errorf("duplicate key for list SampleProfile %v", key)
	}

	t.SampleProfile[key] = v
	return nil
}

// GetActiveFlowTimeout retrieves the value of the leaf ActiveFlowTimeout from the NokiaConf_Configure_Groups_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveFlowTimeout is set, it can
// safely use t.GetActiveFlowTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveFlowTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) GetActiveFlowTimeout() uint32 {
	if t == nil || t.ActiveFlowTimeout == nil {
		return 1800
	}
	return *t.ActiveFlowTimeout
}

// GetActiveTimeout retrieves the value of the leaf ActiveTimeout from the NokiaConf_Configure_Groups_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveTimeout is set, it can
// safely use t.GetActiveTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) GetActiveTimeout() uint32 {
	if t == nil || t.ActiveTimeout == nil {
		return 30
	}
	return *t.ActiveTimeout
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAnalyzeGrePayload retrieves the value of the leaf AnalyzeGrePayload from the NokiaConf_Configure_Groups_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AnalyzeGrePayload is set, it can
// safely use t.GetAnalyzeGrePayload() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AnalyzeGrePayload == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) GetAnalyzeGrePayload() bool {
	if t == nil || t.AnalyzeGrePayload == nil {
		return false
	}
	return *t.AnalyzeGrePayload
}

// GetAnalyzeL2TpTraffic retrieves the value of the leaf AnalyzeL2TpTraffic from the NokiaConf_Configure_Groups_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AnalyzeL2TpTraffic is set, it can
// safely use t.GetAnalyzeL2TpTraffic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AnalyzeL2TpTraffic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) GetAnalyzeL2TpTraffic() bool {
	if t == nil || t.AnalyzeL2TpTraffic == nil {
		return false
	}
	return *t.AnalyzeL2TpTraffic
}

// GetAnalyzeV4Overv6Traffic retrieves the value of the leaf AnalyzeV4Overv6Traffic from the NokiaConf_Configure_Groups_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AnalyzeV4Overv6Traffic is set, it can
// safely use t.GetAnalyzeV4Overv6Traffic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AnalyzeV4Overv6Traffic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) GetAnalyzeV4Overv6Traffic() bool {
	if t == nil || t.AnalyzeV4Overv6Traffic == nil {
		return false
	}
	return *t.AnalyzeV4Overv6Traffic
}

// GetCacheSize retrieves the value of the leaf CacheSize from the NokiaConf_Configure_Groups_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CacheSize is set, it can
// safely use t.GetCacheSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CacheSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) GetCacheSize() uint32 {
	if t == nil || t.CacheSize == nil {
		return 0
	}
	return *t.CacheSize
}

// GetEnhancedDistribution retrieves the value of the leaf EnhancedDistribution from the NokiaConf_Configure_Groups_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnhancedDistribution is set, it can
// safely use t.GetEnhancedDistribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnhancedDistribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) GetEnhancedDistribution() bool {
	if t == nil || t.EnhancedDistribution == nil {
		return false
	}
	return *t.EnhancedDistribution
}

// GetExportMode retrieves the value of the leaf ExportMode from the NokiaConf_Configure_Groups_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportMode is set, it can
// safely use t.GetExportMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) GetExportMode() E_NokiaConf_Configure_Groups_Group_Cflowd_ExportMode {
	if t == nil || t.ExportMode == 0 {
		return NokiaConf_Configure_Groups_Group_Cflowd_ExportMode_automatic
	}
	return t.ExportMode
}

// GetInactiveFlowTimeout retrieves the value of the leaf InactiveFlowTimeout from the NokiaConf_Configure_Groups_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InactiveFlowTimeout is set, it can
// safely use t.GetInactiveFlowTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InactiveFlowTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) GetInactiveFlowTimeout() uint32 {
	if t == nil || t.InactiveFlowTimeout == nil {
		return 15
	}
	return *t.InactiveFlowTimeout
}

// GetInactiveTimeout retrieves the value of the leaf InactiveTimeout from the NokiaConf_Configure_Groups_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InactiveTimeout is set, it can
// safely use t.GetInactiveTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InactiveTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) GetInactiveTimeout() uint32 {
	if t == nil || t.InactiveTimeout == nil {
		return 15
	}
	return *t.InactiveTimeout
}

// GetInbandCollectorExportOnly retrieves the value of the leaf InbandCollectorExportOnly from the NokiaConf_Configure_Groups_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InbandCollectorExportOnly is set, it can
// safely use t.GetInbandCollectorExportOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InbandCollectorExportOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) GetInbandCollectorExportOnly() bool {
	if t == nil || t.InbandCollectorExportOnly == nil {
		return false
	}
	return *t.InbandCollectorExportOnly
}

// GetOverflow retrieves the value of the leaf Overflow from the NokiaConf_Configure_Groups_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Overflow is set, it can
// safely use t.GetOverflow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Overflow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) GetOverflow() uint32 {
	if t == nil || t.Overflow == nil {
		return 1
	}
	return *t.Overflow
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) GetRate() uint32 {
	if t == nil || t.Rate == nil {
		return 1000
	}
	return *t.Rate
}

// GetTemplateRetransmit retrieves the value of the leaf TemplateRetransmit from the NokiaConf_Configure_Groups_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateRetransmit is set, it can
// safely use t.GetTemplateRetransmit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateRetransmit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) GetTemplateRetransmit() uint32 {
	if t == nil || t.TemplateRetransmit == nil {
		return 600
	}
	return *t.TemplateRetransmit
}

// GetUseVrtrIfIndex retrieves the value of the leaf UseVrtrIfIndex from the NokiaConf_Configure_Groups_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseVrtrIfIndex is set, it can
// safely use t.GetUseVrtrIfIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseVrtrIfIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) GetUseVrtrIfIndex() bool {
	if t == nil || t.UseVrtrIfIndex == nil {
		return false
	}
	return *t.UseVrtrIfIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Cflowd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ActiveFlowTimeout == nil {
		var v uint32 = 1800
		t.ActiveFlowTimeout = &v
	}
	if t.ActiveTimeout == nil {
		var v uint32 = 30
		t.ActiveTimeout = &v
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AnalyzeGrePayload == nil {
		var v bool = false
		t.AnalyzeGrePayload = &v
	}
	if t.AnalyzeL2TpTraffic == nil {
		var v bool = false
		t.AnalyzeL2TpTraffic = &v
	}
	if t.AnalyzeV4Overv6Traffic == nil {
		var v bool = false
		t.AnalyzeV4Overv6Traffic = &v
	}
	if t.EnhancedDistribution == nil {
		var v bool = false
		t.EnhancedDistribution = &v
	}
	if t.ExportMode == 0 {
		t.ExportMode = NokiaConf_Configure_Groups_Group_Cflowd_ExportMode_automatic
	}
	if t.InactiveFlowTimeout == nil {
		var v uint32 = 15
		t.InactiveFlowTimeout = &v
	}
	if t.InactiveTimeout == nil {
		var v uint32 = 15
		t.InactiveTimeout = &v
	}
	if t.InbandCollectorExportOnly == nil {
		var v bool = false
		t.InbandCollectorExportOnly = &v
	}
	if t.Overflow == nil {
		var v uint32 = 1
		t.Overflow = &v
	}
	if t.Rate == nil {
		var v uint32 = 1000
		t.Rate = &v
	}
	if t.TemplateRetransmit == nil {
		var v uint32 = 600
		t.TemplateRetransmit = &v
	}
	if t.UseVrtrIfIndex == nil {
		var v bool = false
		t.UseVrtrIfIndex = &v
	}
	for _, e := range t.Collector {
		e.PopulateDefaults()
	}
	for _, e := range t.SampleProfile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Cflowd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Cflowd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Cflowd.
func (*NokiaConf_Configure_Groups_Group_Cflowd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Cflowd_Collector represents the /nokia-conf/configure/groups/group/cflowd/collector YANG schema element.
type NokiaConf_Configure_Groups_Group_Cflowd_Collector struct {
	AdminState           E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	Aggregation          *NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation           `path:"aggregation" module:"nokia-conf"`
	AutonomousSystemType E_NokiaConf_Configure_Groups_Group_Cflowd_Collector_AutonomousSystemType `path:"autonomous-system-type" module:"nokia-conf"`
	Description          *string                                                                  `path:"description" module:"nokia-conf"`
	ExportFilter         *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter          `path:"export-filter" module:"nokia-conf"`
	IpAddress            *string                                                                  `path:"ip-address" module:"nokia-conf"`
	Port                 NokiaConf_Configure_Groups_Group_Cflowd_Collector_Port_Union             `path:"port" module:"nokia-conf"`
	RouterInstance       *string                                                                  `path:"router-instance" module:"nokia-conf"`
	TemplateSet          E_NokiaConf_Configure_Groups_Group_Cflowd_Collector_TemplateSet          `path:"template-set" module:"nokia-conf"`
	Version              *uint32                                                                  `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Cflowd_Collector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector) IsYANGGoStruct() {}

// GetOrCreateAggregation retrieves the value of the Aggregation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector) GetOrCreateAggregation() *NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation {
	if t.Aggregation != nil {
		return t.Aggregation
	}
	t.Aggregation = &NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation{}
	return t.Aggregation
}

// GetOrCreateExportFilter retrieves the value of the ExportFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector) GetOrCreateExportFilter() *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter {
	if t.ExportFilter != nil {
		return t.ExportFilter
	}
	t.ExportFilter = &NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter{}
	return t.ExportFilter
}

// GetAggregation returns the value of the Aggregation struct pointer
// from NokiaConf_Configure_Groups_Group_Cflowd_Collector. If the receiver or the field Aggregation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector) GetAggregation() *NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation {
	if t != nil && t.Aggregation != nil {
		return t.Aggregation
	}
	return nil
}

// GetExportFilter returns the value of the ExportFilter struct pointer
// from NokiaConf_Configure_Groups_Group_Cflowd_Collector. If the receiver or the field ExportFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector) GetExportFilter() *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter {
	if t != nil && t.ExportFilter != nil {
		return t.ExportFilter
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAutonomousSystemType retrieves the value of the leaf AutonomousSystemType from the NokiaConf_Configure_Groups_Group_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutonomousSystemType is set, it can
// safely use t.GetAutonomousSystemType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutonomousSystemType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector) GetAutonomousSystemType() E_NokiaConf_Configure_Groups_Group_Cflowd_Collector_AutonomousSystemType {
	if t == nil || t.AutonomousSystemType == 0 {
		return NokiaConf_Configure_Groups_Group_Cflowd_Collector_AutonomousSystemType_origin
	}
	return t.AutonomousSystemType
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector) GetPort() NokiaConf_Configure_Groups_Group_Cflowd_Collector_Port_Union {
	if t == nil || t.Port == nil {
		return nil
	}
	return t.Port
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "management"
	}
	return *t.RouterInstance
}

// GetTemplateSet retrieves the value of the leaf TemplateSet from the NokiaConf_Configure_Groups_Group_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateSet is set, it can
// safely use t.GetTemplateSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector) GetTemplateSet() E_NokiaConf_Configure_Groups_Group_Cflowd_Collector_TemplateSet {
	if t == nil || t.TemplateSet == 0 {
		return 0
	}
	return t.TemplateSet
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector) GetVersion() uint32 {
	if t == nil || t.Version == nil {
		return 0
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Cflowd_Collector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AutonomousSystemType == 0 {
		t.AutonomousSystemType = NokiaConf_Configure_Groups_Group_Cflowd_Collector_AutonomousSystemType_origin
	}
	if t.RouterInstance == nil {
		var v string = "management"
		t.RouterInstance = &v
	}
	t.Aggregation.PopulateDefaults()
	t.ExportFilter.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Cflowd_Collector struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
		"port":       t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Cflowd_Collector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Cflowd_Collector.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation represents the /nokia-conf/configure/groups/group/cflowd/collector/aggregation YANG schema element.
type NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation struct {
	AsMatrix                *bool `path:"as-matrix" module:"nokia-conf"`
	DestinationPrefix       *bool `path:"destination-prefix" module:"nokia-conf"`
	ProtocolPort            *bool `path:"protocol-port" module:"nokia-conf"`
	Raw                     *bool `path:"raw" module:"nokia-conf"`
	SourceDestinationPrefix *bool `path:"source-destination-prefix" module:"nokia-conf"`
	SourcePrefix            *bool `path:"source-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation) IsYANGGoStruct() {}

// GetAsMatrix retrieves the value of the leaf AsMatrix from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsMatrix is set, it can
// safely use t.GetAsMatrix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsMatrix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation) GetAsMatrix() bool {
	if t == nil || t.AsMatrix == nil {
		return false
	}
	return *t.AsMatrix
}

// GetDestinationPrefix retrieves the value of the leaf DestinationPrefix from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationPrefix is set, it can
// safely use t.GetDestinationPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation) GetDestinationPrefix() bool {
	if t == nil || t.DestinationPrefix == nil {
		return false
	}
	return *t.DestinationPrefix
}

// GetProtocolPort retrieves the value of the leaf ProtocolPort from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolPort is set, it can
// safely use t.GetProtocolPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation) GetProtocolPort() bool {
	if t == nil || t.ProtocolPort == nil {
		return false
	}
	return *t.ProtocolPort
}

// GetRaw retrieves the value of the leaf Raw from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Raw is set, it can
// safely use t.GetRaw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Raw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation) GetRaw() bool {
	if t == nil || t.Raw == nil {
		return false
	}
	return *t.Raw
}

// GetSourceDestinationPrefix retrieves the value of the leaf SourceDestinationPrefix from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceDestinationPrefix is set, it can
// safely use t.GetSourceDestinationPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceDestinationPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation) GetSourceDestinationPrefix() bool {
	if t == nil || t.SourceDestinationPrefix == nil {
		return false
	}
	return *t.SourceDestinationPrefix
}

// GetSourcePrefix retrieves the value of the leaf SourcePrefix from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePrefix is set, it can
// safely use t.GetSourcePrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation) GetSourcePrefix() bool {
	if t == nil || t.SourcePrefix == nil {
		return false
	}
	return *t.SourcePrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AsMatrix == nil {
		var v bool = false
		t.AsMatrix = &v
	}
	if t.DestinationPrefix == nil {
		var v bool = false
		t.DestinationPrefix = &v
	}
	if t.ProtocolPort == nil {
		var v bool = false
		t.ProtocolPort = &v
	}
	if t.Raw == nil {
		var v bool = false
		t.Raw = &v
	}
	if t.SourceDestinationPrefix == nil {
		var v bool = false
		t.SourceDestinationPrefix = &v
	}
	if t.SourcePrefix == nil {
		var v bool = false
		t.SourcePrefix = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_Aggregation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter represents the /nokia-conf/configure/groups/group/cflowd/collector/export-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter struct {
	Family        *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family            `path:"family" module:"nokia-conf"`
	InterfaceList *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList     `path:"interface-list" module:"nokia-conf"`
	Router        map[string]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router `path:"router" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter) IsYANGGoStruct() {}

// NewRouter creates a new entry in the Router list of the
// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter) NewRouter(RouterInstance string) (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Router == nil {
		t.Router = make(map[string]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router)
	}

	key := RouterInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Router[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Router", key)
	}

	t.Router[key] = &NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router{
		RouterInstance: &RouterInstance,
	}

	return t.Router[key], nil
}

// RenameRouter renames an entry in the list Router within
// the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter) RenameRouter(oldK, newK string) error {
	if _, ok := t.Router[newK]; ok {
		return fmt.Errorf("key %v already exists in Router", newK)
	}

	e, ok := t.Router[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Router", oldK)
	}
	e.RouterInstance = &newK

	t.Router[newK] = e
	delete(t.Router, oldK)
	return nil
}

// GetOrCreateRouter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter) GetOrCreateRouter(RouterInstance string) *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router {

	key := RouterInstance

	if v, ok := t.Router[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouter(RouterInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouter got unexpected error: %v", err))
	}
	return v
}

// GetRouter retrieves the value with the specified key from
// the Router map field of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter) GetRouter(RouterInstance string) *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router {

	if t == nil {
		return nil
	}

	key := RouterInstance

	if lm, ok := t.Router[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter) DeleteRouter(RouterInstance string) {
	key := RouterInstance

	delete(t.Router, key)
}

// AppendRouter appends the supplied NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router struct to the
// list Router of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter) AppendRouter(v *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router) error {
	if v.RouterInstance == nil {
		return fmt.Errorf("invalid nil key received for RouterInstance")
	}

	key := *v.RouterInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Router == nil {
		t.Router = make(map[string]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router)
	}

	if _, ok := t.Router[key]; ok {
		return fmt.Errorf("duplicate key for list Router %v", key)
	}

	t.Router[key] = v
	return nil
}

// GetOrCreateFamily retrieves the value of the Family field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter) GetOrCreateFamily() *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family {
	if t.Family != nil {
		return t.Family
	}
	t.Family = &NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family{}
	return t.Family
}

// GetOrCreateInterfaceList retrieves the value of the InterfaceList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter) GetOrCreateInterfaceList() *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList {
	if t.InterfaceList != nil {
		return t.InterfaceList
	}
	t.InterfaceList = &NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList{}
	return t.InterfaceList
}

// GetFamily returns the value of the Family struct pointer
// from NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter. If the receiver or the field Family is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter) GetFamily() *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family {
	if t != nil && t.Family != nil {
		return t.Family
	}
	return nil
}

// GetInterfaceList returns the value of the InterfaceList struct pointer
// from NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter. If the receiver or the field InterfaceList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter) GetInterfaceList() *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList {
	if t != nil && t.InterfaceList != nil {
		return t.InterfaceList
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Family.PopulateDefaults()
	t.InterfaceList.PopulateDefaults()
	for _, e := range t.Router {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family represents the /nokia-conf/configure/groups/group/cflowd/collector/export-filter/family YANG schema element.
type NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	L2Ip      *bool `path:"l2-ip" module:"nokia-conf"`
	McastIpv4 *bool `path:"mcast-ipv4" module:"nokia-conf"`
	McastIpv6 *bool `path:"mcast-ipv6" module:"nokia-conf"`
	Mpls      *bool `path:"mpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetL2Ip retrieves the value of the leaf L2Ip from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Ip is set, it can
// safely use t.GetL2Ip() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family) GetL2Ip() bool {
	if t == nil || t.L2Ip == nil {
		return false
	}
	return *t.L2Ip
}

// GetMcastIpv4 retrieves the value of the leaf McastIpv4 from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv4 is set, it can
// safely use t.GetMcastIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family) GetMcastIpv4() bool {
	if t == nil || t.McastIpv4 == nil {
		return false
	}
	return *t.McastIpv4
}

// GetMcastIpv6 retrieves the value of the leaf McastIpv6 from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv6 is set, it can
// safely use t.GetMcastIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family) GetMcastIpv6() bool {
	if t == nil || t.McastIpv6 == nil {
		return false
	}
	return *t.McastIpv6
}

// GetMpls retrieves the value of the leaf Mpls from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mpls is set, it can
// safely use t.GetMpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family) GetMpls() bool {
	if t == nil || t.Mpls == nil {
		return false
	}
	return *t.Mpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.L2Ip == nil {
		var v bool = false
		t.L2Ip = &v
	}
	if t.McastIpv4 == nil {
		var v bool = false
		t.McastIpv4 = &v
	}
	if t.McastIpv6 == nil {
		var v bool = false
		t.McastIpv6 = &v
	}
	if t.Mpls == nil {
		var v bool = false
		t.Mpls = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList represents the /nokia-conf/configure/groups/group/cflowd/collector/export-filter/interface-list YANG schema element.
type NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList struct {
	Router  map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router `path:"router" module:"nokia-conf"`
	Service *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service                                                                                            `path:"service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key represents the key for list Router of element /nokia-conf/configure/groups/group/cflowd/collector/export-filter/interface-list.
type NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key struct {
	RouterName    string `path:"router-name"`
	InterfaceName string `path:"interface-name"`
}

// NewRouter creates a new entry in the Router list of the
// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList) NewRouter(RouterName string, InterfaceName string) (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Router == nil {
		t.Router = make(map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router)
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key{
		RouterName:    RouterName,
		InterfaceName: InterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Router[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Router", key)
	}

	t.Router[key] = &NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router{
		RouterName:    &RouterName,
		InterfaceName: &InterfaceName,
	}

	return t.Router[key], nil
}

// RenameRouter renames an entry in the list Router within
// the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList) RenameRouter(oldK, newK NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key) error {
	if _, ok := t.Router[newK]; ok {
		return fmt.Errorf("key %v already exists in Router", newK)
	}

	e, ok := t.Router[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Router", oldK)
	}
	e.RouterName = &newK.RouterName
	e.InterfaceName = &newK.InterfaceName

	t.Router[newK] = e
	delete(t.Router, oldK)
	return nil
}

// GetOrCreateRouter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList) GetOrCreateRouter(RouterName string, InterfaceName string) *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router {

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key{
		RouterName:    RouterName,
		InterfaceName: InterfaceName,
	}

	if v, ok := t.Router[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouter(RouterName, InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouter got unexpected error: %v", err))
	}
	return v
}

// GetRouter retrieves the value with the specified key from
// the Router map field of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList) GetRouter(RouterName string, InterfaceName string) *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key{
		RouterName:    RouterName,
		InterfaceName: InterfaceName,
	}

	if lm, ok := t.Router[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList) DeleteRouter(RouterName string, InterfaceName string) {
	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key{
		RouterName:    RouterName,
		InterfaceName: InterfaceName,
	}

	delete(t.Router, key)
}

// AppendRouter appends the supplied NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router struct to the
// list Router of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList) AppendRouter(v *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router) error {
	if v.RouterName == nil {
		return fmt.Errorf("invalid nil key for RouterName")
	}

	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key for InterfaceName")
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key{
		RouterName:    *v.RouterName,
		InterfaceName: *v.InterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Router == nil {
		t.Router = make(map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router)
	}

	if _, ok := t.Router[key]; ok {
		return fmt.Errorf("duplicate key for list Router %v", key)
	}

	t.Router[key] = v
	return nil
}

// GetOrCreateService retrieves the value of the Service field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList) GetOrCreateService() *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service {
	if t.Service != nil {
		return t.Service
	}
	t.Service = &NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service{}
	return t.Service
}

// GetService returns the value of the Service struct pointer
// from NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList. If the receiver or the field Service is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList) GetService() *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service {
	if t != nil && t.Service != nil {
		return t.Service
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Service.PopulateDefaults()
	for _, e := range t.Router {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router represents the /nokia-conf/configure/groups/group/cflowd/collector/export-filter/interface-list/router YANG schema element.
type NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router struct {
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
	RouterName    *string `path:"router-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router) IsYANGGoStruct() {
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetRouterName retrieves the value of the leaf RouterName from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterName is set, it can
// safely use t.GetRouterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router) GetRouterName() string {
	if t == nil || t.RouterName == nil {
		return ""
	}
	return *t.RouterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	if t.RouterName == nil {
		return nil, fmt.Errorf("nil value for key RouterName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
		"router-name":    *t.RouterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Router) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service represents the /nokia-conf/configure/groups/group/cflowd/collector/export-filter/interface-list/service YANG schema element.
type NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service struct {
	IesGroupInterface    map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface       `path:"ies-group-interface" module:"nokia-conf"`
	IesInterface         map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface                 `path:"ies-interface" module:"nokia-conf"`
	VprnGroupInterface   map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface     `path:"vprn-group-interface" module:"nokia-conf"`
	VprnInterface        map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface               `path:"vprn-interface" module:"nokia-conf"`
	VprnNetworkInterface map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface `path:"vprn-network-interface" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key represents the key for list IesGroupInterface of element /nokia-conf/configure/groups/group/cflowd/collector/export-filter/interface-list/service.
type NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key struct {
	ServiceName             string `path:"service-name"`
	SubscriberInterfaceName string `path:"subscriber-interface-name"`
	GroupInterfaceName      string `path:"group-interface-name"`
}

// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key represents the key for list IesInterface of element /nokia-conf/configure/groups/group/cflowd/collector/export-filter/interface-list/service.
type NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key struct {
	ServiceName   string `path:"service-name"`
	InterfaceName string `path:"interface-name"`
}

// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key represents the key for list VprnGroupInterface of element /nokia-conf/configure/groups/group/cflowd/collector/export-filter/interface-list/service.
type NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key struct {
	ServiceName             string `path:"service-name"`
	SubscriberInterfaceName string `path:"subscriber-interface-name"`
	GroupInterfaceName      string `path:"group-interface-name"`
}

// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key represents the key for list VprnInterface of element /nokia-conf/configure/groups/group/cflowd/collector/export-filter/interface-list/service.
type NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key struct {
	ServiceName   string `path:"service-name"`
	InterfaceName string `path:"interface-name"`
}

// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key represents the key for list VprnNetworkInterface of element /nokia-conf/configure/groups/group/cflowd/collector/export-filter/interface-list/service.
type NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key struct {
	ServiceName          string `path:"service-name"`
	NetworkInterfaceName string `path:"network-interface-name"`
}

// NewIesGroupInterface creates a new entry in the IesGroupInterface list of the
// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) NewIesGroupInterface(ServiceName string, SubscriberInterfaceName string, GroupInterfaceName string) (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IesGroupInterface == nil {
		t.IesGroupInterface = make(map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface)
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key{
		ServiceName:             ServiceName,
		SubscriberInterfaceName: SubscriberInterfaceName,
		GroupInterfaceName:      GroupInterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IesGroupInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IesGroupInterface", key)
	}

	t.IesGroupInterface[key] = &NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface{
		ServiceName:             &ServiceName,
		SubscriberInterfaceName: &SubscriberInterfaceName,
		GroupInterfaceName:      &GroupInterfaceName,
	}

	return t.IesGroupInterface[key], nil
}

// RenameIesGroupInterface renames an entry in the list IesGroupInterface within
// the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) RenameIesGroupInterface(oldK, newK NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key) error {
	if _, ok := t.IesGroupInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in IesGroupInterface", newK)
	}

	e, ok := t.IesGroupInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IesGroupInterface", oldK)
	}
	e.ServiceName = &newK.ServiceName
	e.SubscriberInterfaceName = &newK.SubscriberInterfaceName
	e.GroupInterfaceName = &newK.GroupInterfaceName

	t.IesGroupInterface[newK] = e
	delete(t.IesGroupInterface, oldK)
	return nil
}

// GetOrCreateIesGroupInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) GetOrCreateIesGroupInterface(ServiceName string, SubscriberInterfaceName string, GroupInterfaceName string) *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface {

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key{
		ServiceName:             ServiceName,
		SubscriberInterfaceName: SubscriberInterfaceName,
		GroupInterfaceName:      GroupInterfaceName,
	}

	if v, ok := t.IesGroupInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIesGroupInterface(ServiceName, SubscriberInterfaceName, GroupInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIesGroupInterface got unexpected error: %v", err))
	}
	return v
}

// GetIesGroupInterface retrieves the value with the specified key from
// the IesGroupInterface map field of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) GetIesGroupInterface(ServiceName string, SubscriberInterfaceName string, GroupInterfaceName string) *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key{
		ServiceName:             ServiceName,
		SubscriberInterfaceName: SubscriberInterfaceName,
		GroupInterfaceName:      GroupInterfaceName,
	}

	if lm, ok := t.IesGroupInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteIesGroupInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) DeleteIesGroupInterface(ServiceName string, SubscriberInterfaceName string, GroupInterfaceName string) {
	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key{
		ServiceName:             ServiceName,
		SubscriberInterfaceName: SubscriberInterfaceName,
		GroupInterfaceName:      GroupInterfaceName,
	}

	delete(t.IesGroupInterface, key)
}

// AppendIesGroupInterface appends the supplied NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface struct to the
// list IesGroupInterface of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) AppendIesGroupInterface(v *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key for ServiceName")
	}

	if v.SubscriberInterfaceName == nil {
		return fmt.Errorf("invalid nil key for SubscriberInterfaceName")
	}

	if v.GroupInterfaceName == nil {
		return fmt.Errorf("invalid nil key for GroupInterfaceName")
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key{
		ServiceName:             *v.ServiceName,
		SubscriberInterfaceName: *v.SubscriberInterfaceName,
		GroupInterfaceName:      *v.GroupInterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IesGroupInterface == nil {
		t.IesGroupInterface = make(map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface)
	}

	if _, ok := t.IesGroupInterface[key]; ok {
		return fmt.Errorf("duplicate key for list IesGroupInterface %v", key)
	}

	t.IesGroupInterface[key] = v
	return nil
}

// NewIesInterface creates a new entry in the IesInterface list of the
// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) NewIesInterface(ServiceName string, InterfaceName string) (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IesInterface == nil {
		t.IesInterface = make(map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface)
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key{
		ServiceName:   ServiceName,
		InterfaceName: InterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IesInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IesInterface", key)
	}

	t.IesInterface[key] = &NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface{
		ServiceName:   &ServiceName,
		InterfaceName: &InterfaceName,
	}

	return t.IesInterface[key], nil
}

// RenameIesInterface renames an entry in the list IesInterface within
// the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) RenameIesInterface(oldK, newK NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key) error {
	if _, ok := t.IesInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in IesInterface", newK)
	}

	e, ok := t.IesInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IesInterface", oldK)
	}
	e.ServiceName = &newK.ServiceName
	e.InterfaceName = &newK.InterfaceName

	t.IesInterface[newK] = e
	delete(t.IesInterface, oldK)
	return nil
}

// GetOrCreateIesInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) GetOrCreateIesInterface(ServiceName string, InterfaceName string) *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface {

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key{
		ServiceName:   ServiceName,
		InterfaceName: InterfaceName,
	}

	if v, ok := t.IesInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIesInterface(ServiceName, InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIesInterface got unexpected error: %v", err))
	}
	return v
}

// GetIesInterface retrieves the value with the specified key from
// the IesInterface map field of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) GetIesInterface(ServiceName string, InterfaceName string) *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key{
		ServiceName:   ServiceName,
		InterfaceName: InterfaceName,
	}

	if lm, ok := t.IesInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteIesInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) DeleteIesInterface(ServiceName string, InterfaceName string) {
	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key{
		ServiceName:   ServiceName,
		InterfaceName: InterfaceName,
	}

	delete(t.IesInterface, key)
}

// AppendIesInterface appends the supplied NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface struct to the
// list IesInterface of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) AppendIesInterface(v *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key for ServiceName")
	}

	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key for InterfaceName")
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key{
		ServiceName:   *v.ServiceName,
		InterfaceName: *v.InterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IesInterface == nil {
		t.IesInterface = make(map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface)
	}

	if _, ok := t.IesInterface[key]; ok {
		return fmt.Errorf("duplicate key for list IesInterface %v", key)
	}

	t.IesInterface[key] = v
	return nil
}

// NewVprnGroupInterface creates a new entry in the VprnGroupInterface list of the
// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) NewVprnGroupInterface(ServiceName string, SubscriberInterfaceName string, GroupInterfaceName string) (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VprnGroupInterface == nil {
		t.VprnGroupInterface = make(map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface)
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key{
		ServiceName:             ServiceName,
		SubscriberInterfaceName: SubscriberInterfaceName,
		GroupInterfaceName:      GroupInterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VprnGroupInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VprnGroupInterface", key)
	}

	t.VprnGroupInterface[key] = &NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface{
		ServiceName:             &ServiceName,
		SubscriberInterfaceName: &SubscriberInterfaceName,
		GroupInterfaceName:      &GroupInterfaceName,
	}

	return t.VprnGroupInterface[key], nil
}

// RenameVprnGroupInterface renames an entry in the list VprnGroupInterface within
// the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) RenameVprnGroupInterface(oldK, newK NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key) error {
	if _, ok := t.VprnGroupInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in VprnGroupInterface", newK)
	}

	e, ok := t.VprnGroupInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VprnGroupInterface", oldK)
	}
	e.ServiceName = &newK.ServiceName
	e.SubscriberInterfaceName = &newK.SubscriberInterfaceName
	e.GroupInterfaceName = &newK.GroupInterfaceName

	t.VprnGroupInterface[newK] = e
	delete(t.VprnGroupInterface, oldK)
	return nil
}

// GetOrCreateVprnGroupInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) GetOrCreateVprnGroupInterface(ServiceName string, SubscriberInterfaceName string, GroupInterfaceName string) *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface {

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key{
		ServiceName:             ServiceName,
		SubscriberInterfaceName: SubscriberInterfaceName,
		GroupInterfaceName:      GroupInterfaceName,
	}

	if v, ok := t.VprnGroupInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVprnGroupInterface(ServiceName, SubscriberInterfaceName, GroupInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVprnGroupInterface got unexpected error: %v", err))
	}
	return v
}

// GetVprnGroupInterface retrieves the value with the specified key from
// the VprnGroupInterface map field of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) GetVprnGroupInterface(ServiceName string, SubscriberInterfaceName string, GroupInterfaceName string) *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key{
		ServiceName:             ServiceName,
		SubscriberInterfaceName: SubscriberInterfaceName,
		GroupInterfaceName:      GroupInterfaceName,
	}

	if lm, ok := t.VprnGroupInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteVprnGroupInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) DeleteVprnGroupInterface(ServiceName string, SubscriberInterfaceName string, GroupInterfaceName string) {
	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key{
		ServiceName:             ServiceName,
		SubscriberInterfaceName: SubscriberInterfaceName,
		GroupInterfaceName:      GroupInterfaceName,
	}

	delete(t.VprnGroupInterface, key)
}

// AppendVprnGroupInterface appends the supplied NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface struct to the
// list VprnGroupInterface of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) AppendVprnGroupInterface(v *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key for ServiceName")
	}

	if v.SubscriberInterfaceName == nil {
		return fmt.Errorf("invalid nil key for SubscriberInterfaceName")
	}

	if v.GroupInterfaceName == nil {
		return fmt.Errorf("invalid nil key for GroupInterfaceName")
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key{
		ServiceName:             *v.ServiceName,
		SubscriberInterfaceName: *v.SubscriberInterfaceName,
		GroupInterfaceName:      *v.GroupInterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VprnGroupInterface == nil {
		t.VprnGroupInterface = make(map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface)
	}

	if _, ok := t.VprnGroupInterface[key]; ok {
		return fmt.Errorf("duplicate key for list VprnGroupInterface %v", key)
	}

	t.VprnGroupInterface[key] = v
	return nil
}

// NewVprnInterface creates a new entry in the VprnInterface list of the
// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) NewVprnInterface(ServiceName string, InterfaceName string) (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VprnInterface == nil {
		t.VprnInterface = make(map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface)
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key{
		ServiceName:   ServiceName,
		InterfaceName: InterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VprnInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VprnInterface", key)
	}

	t.VprnInterface[key] = &NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface{
		ServiceName:   &ServiceName,
		InterfaceName: &InterfaceName,
	}

	return t.VprnInterface[key], nil
}

// RenameVprnInterface renames an entry in the list VprnInterface within
// the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) RenameVprnInterface(oldK, newK NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key) error {
	if _, ok := t.VprnInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in VprnInterface", newK)
	}

	e, ok := t.VprnInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VprnInterface", oldK)
	}
	e.ServiceName = &newK.ServiceName
	e.InterfaceName = &newK.InterfaceName

	t.VprnInterface[newK] = e
	delete(t.VprnInterface, oldK)
	return nil
}

// GetOrCreateVprnInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) GetOrCreateVprnInterface(ServiceName string, InterfaceName string) *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface {

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key{
		ServiceName:   ServiceName,
		InterfaceName: InterfaceName,
	}

	if v, ok := t.VprnInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVprnInterface(ServiceName, InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVprnInterface got unexpected error: %v", err))
	}
	return v
}

// GetVprnInterface retrieves the value with the specified key from
// the VprnInterface map field of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) GetVprnInterface(ServiceName string, InterfaceName string) *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key{
		ServiceName:   ServiceName,
		InterfaceName: InterfaceName,
	}

	if lm, ok := t.VprnInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteVprnInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) DeleteVprnInterface(ServiceName string, InterfaceName string) {
	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key{
		ServiceName:   ServiceName,
		InterfaceName: InterfaceName,
	}

	delete(t.VprnInterface, key)
}

// AppendVprnInterface appends the supplied NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface struct to the
// list VprnInterface of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) AppendVprnInterface(v *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key for ServiceName")
	}

	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key for InterfaceName")
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key{
		ServiceName:   *v.ServiceName,
		InterfaceName: *v.InterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VprnInterface == nil {
		t.VprnInterface = make(map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface)
	}

	if _, ok := t.VprnInterface[key]; ok {
		return fmt.Errorf("duplicate key for list VprnInterface %v", key)
	}

	t.VprnInterface[key] = v
	return nil
}

// NewVprnNetworkInterface creates a new entry in the VprnNetworkInterface list of the
// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) NewVprnNetworkInterface(ServiceName string, NetworkInterfaceName string) (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VprnNetworkInterface == nil {
		t.VprnNetworkInterface = make(map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface)
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key{
		ServiceName:          ServiceName,
		NetworkInterfaceName: NetworkInterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VprnNetworkInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VprnNetworkInterface", key)
	}

	t.VprnNetworkInterface[key] = &NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface{
		ServiceName:          &ServiceName,
		NetworkInterfaceName: &NetworkInterfaceName,
	}

	return t.VprnNetworkInterface[key], nil
}

// RenameVprnNetworkInterface renames an entry in the list VprnNetworkInterface within
// the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) RenameVprnNetworkInterface(oldK, newK NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key) error {
	if _, ok := t.VprnNetworkInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in VprnNetworkInterface", newK)
	}

	e, ok := t.VprnNetworkInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VprnNetworkInterface", oldK)
	}
	e.ServiceName = &newK.ServiceName
	e.NetworkInterfaceName = &newK.NetworkInterfaceName

	t.VprnNetworkInterface[newK] = e
	delete(t.VprnNetworkInterface, oldK)
	return nil
}

// GetOrCreateVprnNetworkInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) GetOrCreateVprnNetworkInterface(ServiceName string, NetworkInterfaceName string) *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface {

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key{
		ServiceName:          ServiceName,
		NetworkInterfaceName: NetworkInterfaceName,
	}

	if v, ok := t.VprnNetworkInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVprnNetworkInterface(ServiceName, NetworkInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVprnNetworkInterface got unexpected error: %v", err))
	}
	return v
}

// GetVprnNetworkInterface retrieves the value with the specified key from
// the VprnNetworkInterface map field of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) GetVprnNetworkInterface(ServiceName string, NetworkInterfaceName string) *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key{
		ServiceName:          ServiceName,
		NetworkInterfaceName: NetworkInterfaceName,
	}

	if lm, ok := t.VprnNetworkInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteVprnNetworkInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) DeleteVprnNetworkInterface(ServiceName string, NetworkInterfaceName string) {
	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key{
		ServiceName:          ServiceName,
		NetworkInterfaceName: NetworkInterfaceName,
	}

	delete(t.VprnNetworkInterface, key)
}

// AppendVprnNetworkInterface appends the supplied NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface struct to the
// list VprnNetworkInterface of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) AppendVprnNetworkInterface(v *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key for ServiceName")
	}

	if v.NetworkInterfaceName == nil {
		return fmt.Errorf("invalid nil key for NetworkInterfaceName")
	}

	key := NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key{
		ServiceName:          *v.ServiceName,
		NetworkInterfaceName: *v.NetworkInterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VprnNetworkInterface == nil {
		t.VprnNetworkInterface = make(map[NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface_Key]*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface)
	}

	if _, ok := t.VprnNetworkInterface[key]; ok {
		return fmt.Errorf("duplicate key for list VprnNetworkInterface %v", key)
	}

	t.VprnNetworkInterface[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.IesGroupInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.IesInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.VprnGroupInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.VprnInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.VprnNetworkInterface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface represents the /nokia-conf/configure/groups/group/cflowd/collector/export-filter/interface-list/service/ies-group-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface struct {
	GroupInterfaceName      *string `path:"group-interface-name" module:"nokia-conf"`
	ServiceName             *string `path:"service-name" module:"nokia-conf"`
	SubscriberInterfaceName *string `path:"subscriber-interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) IsYANGGoStruct() {
}

// GetGroupInterfaceName retrieves the value of the leaf GroupInterfaceName from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterfaceName is set, it can
// safely use t.GetGroupInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) GetGroupInterfaceName() string {
	if t == nil || t.GroupInterfaceName == nil {
		return ""
	}
	return *t.GroupInterfaceName
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetSubscriberInterfaceName retrieves the value of the leaf SubscriberInterfaceName from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberInterfaceName is set, it can
// safely use t.GetSubscriberInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) GetSubscriberInterfaceName() string {
	if t == nil || t.SubscriberInterfaceName == nil {
		return ""
	}
	return *t.SubscriberInterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key GroupInterfaceName")
	}

	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	if t.SubscriberInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key SubscriberInterfaceName")
	}

	return map[string]interface{}{
		"group-interface-name":      *t.GroupInterfaceName,
		"service-name":              *t.ServiceName,
		"subscriber-interface-name": *t.SubscriberInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesGroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface represents the /nokia-conf/configure/groups/group/cflowd/collector/export-filter/interface-list/service/ies-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface struct {
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
	ServiceName   *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface) IsYANGGoStruct() {
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
		"service-name":   *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_IesInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface represents the /nokia-conf/configure/groups/group/cflowd/collector/export-filter/interface-list/service/vprn-group-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface struct {
	GroupInterfaceName      *string `path:"group-interface-name" module:"nokia-conf"`
	ServiceName             *string `path:"service-name" module:"nokia-conf"`
	SubscriberInterfaceName *string `path:"subscriber-interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) IsYANGGoStruct() {
}

// GetGroupInterfaceName retrieves the value of the leaf GroupInterfaceName from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterfaceName is set, it can
// safely use t.GetGroupInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) GetGroupInterfaceName() string {
	if t == nil || t.GroupInterfaceName == nil {
		return ""
	}
	return *t.GroupInterfaceName
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetSubscriberInterfaceName retrieves the value of the leaf SubscriberInterfaceName from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberInterfaceName is set, it can
// safely use t.GetSubscriberInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) GetSubscriberInterfaceName() string {
	if t == nil || t.SubscriberInterfaceName == nil {
		return ""
	}
	return *t.SubscriberInterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key GroupInterfaceName")
	}

	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	if t.SubscriberInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key SubscriberInterfaceName")
	}

	return map[string]interface{}{
		"group-interface-name":      *t.GroupInterfaceName,
		"service-name":              *t.ServiceName,
		"subscriber-interface-name": *t.SubscriberInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnGroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface represents the /nokia-conf/configure/groups/group/cflowd/collector/export-filter/interface-list/service/vprn-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface struct {
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
	ServiceName   *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface) IsYANGGoStruct() {
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
		"service-name":   *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface represents the /nokia-conf/configure/groups/group/cflowd/collector/export-filter/interface-list/service/vprn-network-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface struct {
	NetworkInterfaceName *string `path:"network-interface-name" module:"nokia-conf"`
	ServiceName          *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface) IsYANGGoStruct() {
}

// GetNetworkInterfaceName retrieves the value of the leaf NetworkInterfaceName from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInterfaceName is set, it can
// safely use t.GetNetworkInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface) GetNetworkInterfaceName() string {
	if t == nil || t.NetworkInterfaceName == nil {
		return ""
	}
	return *t.NetworkInterfaceName
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NetworkInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key NetworkInterfaceName")
	}

	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"network-interface-name": *t.NetworkInterfaceName,
		"service-name":           *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_InterfaceList_Service_VprnNetworkInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router represents the /nokia-conf/configure/groups/group/cflowd/collector/export-filter/router YANG schema element.
type NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router struct {
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router) IsYANGGoStruct() {}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RouterInstance == nil {
		return nil, fmt.Errorf("nil value for key RouterInstance")
	}

	return map[string]interface{}{
		"router-instance": *t.RouterInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router.
func (*NokiaConf_Configure_Groups_Group_Cflowd_Collector_ExportFilter_Router) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile represents the /nokia-conf/configure/groups/group/cflowd/sample-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile struct {
	MeteringProcess E_NokiaTypesCflowd_MeteringProcess                                    `path:"metering-process" module:"nokia-conf"`
	ProfileId       NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile_ProfileId_Union `path:"profile-id" module:"nokia-conf"`
	SampleRate      *uint32                                                               `path:"sample-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile) IsYANGGoStruct() {}

// GetMeteringProcess retrieves the value of the leaf MeteringProcess from the NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MeteringProcess is set, it can
// safely use t.GetMeteringProcess() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MeteringProcess == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile) GetMeteringProcess() E_NokiaTypesCflowd_MeteringProcess {
	if t == nil || t.MeteringProcess == 0 {
		return NokiaTypesCflowd_MeteringProcess_standard
	}
	return t.MeteringProcess
}

// GetProfileId retrieves the value of the leaf ProfileId from the NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfileId is set, it can
// safely use t.GetProfileId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfileId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile) GetProfileId() NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile_ProfileId_Union {
	if t == nil || t.ProfileId == nil {
		return nil
	}
	return t.ProfileId
}

// GetSampleRate retrieves the value of the leaf SampleRate from the NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleRate is set, it can
// safely use t.GetSampleRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile) GetSampleRate() uint32 {
	if t == nil || t.SampleRate == nil {
		return 1000
	}
	return *t.SampleRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MeteringProcess == 0 {
		t.MeteringProcess = NokiaTypesCflowd_MeteringProcess_standard
	}
	if t.SampleRate == nil {
		var v uint32 = 1000
		t.SampleRate = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"profile-id": t.ProfileId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile.
func (*NokiaConf_Configure_Groups_Group_Cflowd_SampleProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Chassis represents the /nokia-conf/configure/groups/group/chassis YANG schema element.
type NokiaConf_Configure_Groups_Group_Chassis struct {
	ChassisClass          NokiaConf_Configure_Groups_Group_Chassis_ChassisClass_Union                                                                                      `path:"chassis-class" module:"nokia-conf"`
	ChassisNumber         NokiaConf_Configure_Groups_Group_Chassis_ChassisNumber_Union                                                                                     `path:"chassis-number" module:"nokia-conf"`
	MonitorFilterDoor     *bool                                                                                                                                            `path:"monitor-filter-door" module:"nokia-conf"`
	Peq                   map[NokiaConf_Configure_Groups_Group_Chassis_Peq_PeqSlot_Union]*NokiaConf_Configure_Groups_Group_Chassis_Peq                                     `path:"peq" module:"nokia-conf"`
	PowerConnectionModule map[NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule_PcmSlot_Union]*NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule `path:"power-connection-module" module:"nokia-conf"`
	PowerModule           map[NokiaConf_Configure_Groups_Group_Chassis_PowerModule_PowerModuleId_Union]*NokiaConf_Configure_Groups_Group_Chassis_PowerModule               `path:"power-module" module:"nokia-conf"`
	PowerShelf            map[NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerShelfId_Union]*NokiaConf_Configure_Groups_Group_Chassis_PowerShelf                  `path:"power-shelf" module:"nokia-conf"`
	PowerSupply           map[NokiaConf_Configure_Groups_Group_Chassis_PowerSupply_PowerSupplyId_Union]*NokiaConf_Configure_Groups_Group_Chassis_PowerSupply               `path:"power-supply" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Chassis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Chassis) IsYANGGoStruct() {}

// NewPeq creates a new entry in the Peq list of the
// NokiaConf_Configure_Groups_Group_Chassis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Chassis) NewPeq(PeqSlot NokiaConf_Configure_Groups_Group_Chassis_Peq_PeqSlot_Union) (*NokiaConf_Configure_Groups_Group_Chassis_Peq, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peq == nil {
		t.Peq = make(map[NokiaConf_Configure_Groups_Group_Chassis_Peq_PeqSlot_Union]*NokiaConf_Configure_Groups_Group_Chassis_Peq)
	}

	key := PeqSlot

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peq[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peq", key)
	}

	t.Peq[key] = &NokiaConf_Configure_Groups_Group_Chassis_Peq{
		PeqSlot: PeqSlot,
	}

	return t.Peq[key], nil
}

// RenamePeq renames an entry in the list Peq within
// the NokiaConf_Configure_Groups_Group_Chassis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Chassis) RenamePeq(oldK, newK NokiaConf_Configure_Groups_Group_Chassis_Peq_PeqSlot_Union) error {
	if _, ok := t.Peq[newK]; ok {
		return fmt.Errorf("key %v already exists in Peq", newK)
	}

	e, ok := t.Peq[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peq", oldK)
	}
	e.PeqSlot = newK

	t.Peq[newK] = e
	delete(t.Peq, oldK)
	return nil
}

// GetOrCreatePeq retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Chassis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Chassis) GetOrCreatePeq(PeqSlot NokiaConf_Configure_Groups_Group_Chassis_Peq_PeqSlot_Union) *NokiaConf_Configure_Groups_Group_Chassis_Peq {

	key := PeqSlot

	if v, ok := t.Peq[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeq(PeqSlot)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeq got unexpected error: %v", err))
	}
	return v
}

// GetPeq retrieves the value with the specified key from
// the Peq map field of NokiaConf_Configure_Groups_Group_Chassis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Chassis) GetPeq(PeqSlot NokiaConf_Configure_Groups_Group_Chassis_Peq_PeqSlot_Union) *NokiaConf_Configure_Groups_Group_Chassis_Peq {

	if t == nil {
		return nil
	}

	key := PeqSlot

	if lm, ok := t.Peq[key]; ok {
		return lm
	}
	return nil
}

// DeletePeq deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Chassis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Chassis) DeletePeq(PeqSlot NokiaConf_Configure_Groups_Group_Chassis_Peq_PeqSlot_Union) {
	key := PeqSlot

	delete(t.Peq, key)
}

// AppendPeq appends the supplied NokiaConf_Configure_Groups_Group_Chassis_Peq struct to the
// list Peq of NokiaConf_Configure_Groups_Group_Chassis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Chassis_Peq already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Chassis) AppendPeq(v *NokiaConf_Configure_Groups_Group_Chassis_Peq) error {
	key := v.PeqSlot

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peq == nil {
		t.Peq = make(map[NokiaConf_Configure_Groups_Group_Chassis_Peq_PeqSlot_Union]*NokiaConf_Configure_Groups_Group_Chassis_Peq)
	}

	if _, ok := t.Peq[key]; ok {
		return fmt.Errorf("duplicate key for list Peq %v", key)
	}

	t.Peq[key] = v
	return nil
}

// NewPowerConnectionModule creates a new entry in the PowerConnectionModule list of the
// NokiaConf_Configure_Groups_Group_Chassis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Chassis) NewPowerConnectionModule(PcmSlot NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule_PcmSlot_Union) (*NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerConnectionModule == nil {
		t.PowerConnectionModule = make(map[NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule_PcmSlot_Union]*NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule)
	}

	key := PcmSlot

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PowerConnectionModule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PowerConnectionModule", key)
	}

	t.PowerConnectionModule[key] = &NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule{
		PcmSlot: PcmSlot,
	}

	return t.PowerConnectionModule[key], nil
}

// RenamePowerConnectionModule renames an entry in the list PowerConnectionModule within
// the NokiaConf_Configure_Groups_Group_Chassis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Chassis) RenamePowerConnectionModule(oldK, newK NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule_PcmSlot_Union) error {
	if _, ok := t.PowerConnectionModule[newK]; ok {
		return fmt.Errorf("key %v already exists in PowerConnectionModule", newK)
	}

	e, ok := t.PowerConnectionModule[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PowerConnectionModule", oldK)
	}
	e.PcmSlot = newK

	t.PowerConnectionModule[newK] = e
	delete(t.PowerConnectionModule, oldK)
	return nil
}

// GetOrCreatePowerConnectionModule retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Chassis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Chassis) GetOrCreatePowerConnectionModule(PcmSlot NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule_PcmSlot_Union) *NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule {

	key := PcmSlot

	if v, ok := t.PowerConnectionModule[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPowerConnectionModule(PcmSlot)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePowerConnectionModule got unexpected error: %v", err))
	}
	return v
}

// GetPowerConnectionModule retrieves the value with the specified key from
// the PowerConnectionModule map field of NokiaConf_Configure_Groups_Group_Chassis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Chassis) GetPowerConnectionModule(PcmSlot NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule_PcmSlot_Union) *NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule {

	if t == nil {
		return nil
	}

	key := PcmSlot

	if lm, ok := t.PowerConnectionModule[key]; ok {
		return lm
	}
	return nil
}

// DeletePowerConnectionModule deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Chassis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Chassis) DeletePowerConnectionModule(PcmSlot NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule_PcmSlot_Union) {
	key := PcmSlot

	delete(t.PowerConnectionModule, key)
}

// AppendPowerConnectionModule appends the supplied NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule struct to the
// list PowerConnectionModule of NokiaConf_Configure_Groups_Group_Chassis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Chassis) AppendPowerConnectionModule(v *NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule) error {
	key := v.PcmSlot

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerConnectionModule == nil {
		t.PowerConnectionModule = make(map[NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule_PcmSlot_Union]*NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule)
	}

	if _, ok := t.PowerConnectionModule[key]; ok {
		return fmt.Errorf("duplicate key for list PowerConnectionModule %v", key)
	}

	t.PowerConnectionModule[key] = v
	return nil
}

// NewPowerModule creates a new entry in the PowerModule list of the
// NokiaConf_Configure_Groups_Group_Chassis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Chassis) NewPowerModule(PowerModuleId NokiaConf_Configure_Groups_Group_Chassis_PowerModule_PowerModuleId_Union) (*NokiaConf_Configure_Groups_Group_Chassis_PowerModule, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerModule == nil {
		t.PowerModule = make(map[NokiaConf_Configure_Groups_Group_Chassis_PowerModule_PowerModuleId_Union]*NokiaConf_Configure_Groups_Group_Chassis_PowerModule)
	}

	key := PowerModuleId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PowerModule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PowerModule", key)
	}

	t.PowerModule[key] = &NokiaConf_Configure_Groups_Group_Chassis_PowerModule{
		PowerModuleId: PowerModuleId,
	}

	return t.PowerModule[key], nil
}

// RenamePowerModule renames an entry in the list PowerModule within
// the NokiaConf_Configure_Groups_Group_Chassis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Chassis) RenamePowerModule(oldK, newK NokiaConf_Configure_Groups_Group_Chassis_PowerModule_PowerModuleId_Union) error {
	if _, ok := t.PowerModule[newK]; ok {
		return fmt.Errorf("key %v already exists in PowerModule", newK)
	}

	e, ok := t.PowerModule[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PowerModule", oldK)
	}
	e.PowerModuleId = newK

	t.PowerModule[newK] = e
	delete(t.PowerModule, oldK)
	return nil
}

// GetOrCreatePowerModule retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Chassis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Chassis) GetOrCreatePowerModule(PowerModuleId NokiaConf_Configure_Groups_Group_Chassis_PowerModule_PowerModuleId_Union) *NokiaConf_Configure_Groups_Group_Chassis_PowerModule {

	key := PowerModuleId

	if v, ok := t.PowerModule[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPowerModule(PowerModuleId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePowerModule got unexpected error: %v", err))
	}
	return v
}

// GetPowerModule retrieves the value with the specified key from
// the PowerModule map field of NokiaConf_Configure_Groups_Group_Chassis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Chassis) GetPowerModule(PowerModuleId NokiaConf_Configure_Groups_Group_Chassis_PowerModule_PowerModuleId_Union) *NokiaConf_Configure_Groups_Group_Chassis_PowerModule {

	if t == nil {
		return nil
	}

	key := PowerModuleId

	if lm, ok := t.PowerModule[key]; ok {
		return lm
	}
	return nil
}

// DeletePowerModule deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Chassis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Chassis) DeletePowerModule(PowerModuleId NokiaConf_Configure_Groups_Group_Chassis_PowerModule_PowerModuleId_Union) {
	key := PowerModuleId

	delete(t.PowerModule, key)
}

// AppendPowerModule appends the supplied NokiaConf_Configure_Groups_Group_Chassis_PowerModule struct to the
// list PowerModule of NokiaConf_Configure_Groups_Group_Chassis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Chassis_PowerModule already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Chassis) AppendPowerModule(v *NokiaConf_Configure_Groups_Group_Chassis_PowerModule) error {
	key := v.PowerModuleId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerModule == nil {
		t.PowerModule = make(map[NokiaConf_Configure_Groups_Group_Chassis_PowerModule_PowerModuleId_Union]*NokiaConf_Configure_Groups_Group_Chassis_PowerModule)
	}

	if _, ok := t.PowerModule[key]; ok {
		return fmt.Errorf("duplicate key for list PowerModule %v", key)
	}

	t.PowerModule[key] = v
	return nil
}

// NewPowerShelf creates a new entry in the PowerShelf list of the
// NokiaConf_Configure_Groups_Group_Chassis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Chassis) NewPowerShelf(PowerShelfId NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerShelfId_Union) (*NokiaConf_Configure_Groups_Group_Chassis_PowerShelf, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerShelf == nil {
		t.PowerShelf = make(map[NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerShelfId_Union]*NokiaConf_Configure_Groups_Group_Chassis_PowerShelf)
	}

	key := PowerShelfId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PowerShelf[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PowerShelf", key)
	}

	t.PowerShelf[key] = &NokiaConf_Configure_Groups_Group_Chassis_PowerShelf{
		PowerShelfId: PowerShelfId,
	}

	return t.PowerShelf[key], nil
}

// RenamePowerShelf renames an entry in the list PowerShelf within
// the NokiaConf_Configure_Groups_Group_Chassis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Chassis) RenamePowerShelf(oldK, newK NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerShelfId_Union) error {
	if _, ok := t.PowerShelf[newK]; ok {
		return fmt.Errorf("key %v already exists in PowerShelf", newK)
	}

	e, ok := t.PowerShelf[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PowerShelf", oldK)
	}
	e.PowerShelfId = newK

	t.PowerShelf[newK] = e
	delete(t.PowerShelf, oldK)
	return nil
}

// GetOrCreatePowerShelf retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Chassis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Chassis) GetOrCreatePowerShelf(PowerShelfId NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerShelfId_Union) *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf {

	key := PowerShelfId

	if v, ok := t.PowerShelf[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPowerShelf(PowerShelfId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePowerShelf got unexpected error: %v", err))
	}
	return v
}

// GetPowerShelf retrieves the value with the specified key from
// the PowerShelf map field of NokiaConf_Configure_Groups_Group_Chassis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Chassis) GetPowerShelf(PowerShelfId NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerShelfId_Union) *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf {

	if t == nil {
		return nil
	}

	key := PowerShelfId

	if lm, ok := t.PowerShelf[key]; ok {
		return lm
	}
	return nil
}

// DeletePowerShelf deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Chassis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Chassis) DeletePowerShelf(PowerShelfId NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerShelfId_Union) {
	key := PowerShelfId

	delete(t.PowerShelf, key)
}

// AppendPowerShelf appends the supplied NokiaConf_Configure_Groups_Group_Chassis_PowerShelf struct to the
// list PowerShelf of NokiaConf_Configure_Groups_Group_Chassis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Chassis_PowerShelf already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Chassis) AppendPowerShelf(v *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf) error {
	key := v.PowerShelfId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerShelf == nil {
		t.PowerShelf = make(map[NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerShelfId_Union]*NokiaConf_Configure_Groups_Group_Chassis_PowerShelf)
	}

	if _, ok := t.PowerShelf[key]; ok {
		return fmt.Errorf("duplicate key for list PowerShelf %v", key)
	}

	t.PowerShelf[key] = v
	return nil
}

// NewPowerSupply creates a new entry in the PowerSupply list of the
// NokiaConf_Configure_Groups_Group_Chassis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Chassis) NewPowerSupply(PowerSupplyId NokiaConf_Configure_Groups_Group_Chassis_PowerSupply_PowerSupplyId_Union) (*NokiaConf_Configure_Groups_Group_Chassis_PowerSupply, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerSupply == nil {
		t.PowerSupply = make(map[NokiaConf_Configure_Groups_Group_Chassis_PowerSupply_PowerSupplyId_Union]*NokiaConf_Configure_Groups_Group_Chassis_PowerSupply)
	}

	key := PowerSupplyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PowerSupply[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PowerSupply", key)
	}

	t.PowerSupply[key] = &NokiaConf_Configure_Groups_Group_Chassis_PowerSupply{
		PowerSupplyId: PowerSupplyId,
	}

	return t.PowerSupply[key], nil
}

// RenamePowerSupply renames an entry in the list PowerSupply within
// the NokiaConf_Configure_Groups_Group_Chassis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Chassis) RenamePowerSupply(oldK, newK NokiaConf_Configure_Groups_Group_Chassis_PowerSupply_PowerSupplyId_Union) error {
	if _, ok := t.PowerSupply[newK]; ok {
		return fmt.Errorf("key %v already exists in PowerSupply", newK)
	}

	e, ok := t.PowerSupply[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PowerSupply", oldK)
	}
	e.PowerSupplyId = newK

	t.PowerSupply[newK] = e
	delete(t.PowerSupply, oldK)
	return nil
}

// GetOrCreatePowerSupply retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Chassis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Chassis) GetOrCreatePowerSupply(PowerSupplyId NokiaConf_Configure_Groups_Group_Chassis_PowerSupply_PowerSupplyId_Union) *NokiaConf_Configure_Groups_Group_Chassis_PowerSupply {

	key := PowerSupplyId

	if v, ok := t.PowerSupply[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPowerSupply(PowerSupplyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePowerSupply got unexpected error: %v", err))
	}
	return v
}

// GetPowerSupply retrieves the value with the specified key from
// the PowerSupply map field of NokiaConf_Configure_Groups_Group_Chassis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Chassis) GetPowerSupply(PowerSupplyId NokiaConf_Configure_Groups_Group_Chassis_PowerSupply_PowerSupplyId_Union) *NokiaConf_Configure_Groups_Group_Chassis_PowerSupply {

	if t == nil {
		return nil
	}

	key := PowerSupplyId

	if lm, ok := t.PowerSupply[key]; ok {
		return lm
	}
	return nil
}

// DeletePowerSupply deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Chassis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Chassis) DeletePowerSupply(PowerSupplyId NokiaConf_Configure_Groups_Group_Chassis_PowerSupply_PowerSupplyId_Union) {
	key := PowerSupplyId

	delete(t.PowerSupply, key)
}

// AppendPowerSupply appends the supplied NokiaConf_Configure_Groups_Group_Chassis_PowerSupply struct to the
// list PowerSupply of NokiaConf_Configure_Groups_Group_Chassis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Chassis_PowerSupply already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Chassis) AppendPowerSupply(v *NokiaConf_Configure_Groups_Group_Chassis_PowerSupply) error {
	key := v.PowerSupplyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerSupply == nil {
		t.PowerSupply = make(map[NokiaConf_Configure_Groups_Group_Chassis_PowerSupply_PowerSupplyId_Union]*NokiaConf_Configure_Groups_Group_Chassis_PowerSupply)
	}

	if _, ok := t.PowerSupply[key]; ok {
		return fmt.Errorf("duplicate key for list PowerSupply %v", key)
	}

	t.PowerSupply[key] = v
	return nil
}

// GetChassisClass retrieves the value of the leaf ChassisClass from the NokiaConf_Configure_Groups_Group_Chassis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChassisClass is set, it can
// safely use t.GetChassisClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChassisClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis) GetChassisClass() NokiaConf_Configure_Groups_Group_Chassis_ChassisClass_Union {
	if t == nil || t.ChassisClass == nil {
		return nil
	}
	return t.ChassisClass
}

// GetChassisNumber retrieves the value of the leaf ChassisNumber from the NokiaConf_Configure_Groups_Group_Chassis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChassisNumber is set, it can
// safely use t.GetChassisNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChassisNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis) GetChassisNumber() NokiaConf_Configure_Groups_Group_Chassis_ChassisNumber_Union {
	if t == nil || t.ChassisNumber == nil {
		return nil
	}
	return t.ChassisNumber
}

// GetMonitorFilterDoor retrieves the value of the leaf MonitorFilterDoor from the NokiaConf_Configure_Groups_Group_Chassis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorFilterDoor is set, it can
// safely use t.GetMonitorFilterDoor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorFilterDoor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis) GetMonitorFilterDoor() bool {
	if t == nil || t.MonitorFilterDoor == nil {
		return false
	}
	return *t.MonitorFilterDoor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Chassis
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Chassis) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorFilterDoor == nil {
		var v bool = false
		t.MonitorFilterDoor = &v
	}
	for _, e := range t.Peq {
		e.PopulateDefaults()
	}
	for _, e := range t.PowerConnectionModule {
		e.PopulateDefaults()
	}
	for _, e := range t.PowerModule {
		e.PopulateDefaults()
	}
	for _, e := range t.PowerShelf {
		e.PopulateDefaults()
	}
	for _, e := range t.PowerSupply {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Chassis struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Chassis) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"chassis-class":  t.ChassisClass,
		"chassis-number": t.ChassisNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Chassis) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Chassis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Chassis) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Chassis) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Chassis.
func (*NokiaConf_Configure_Groups_Group_Chassis) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Chassis_Peq represents the /nokia-conf/configure/groups/group/chassis/peq YANG schema element.
type NokiaConf_Configure_Groups_Group_Chassis_Peq struct {
	AdminState     E_NokiaTypesSros_AdminState                                `path:"admin-state" module:"nokia-conf"`
	InputPowerMode *uint32                                                    `path:"input-power-mode" module:"nokia-conf"`
	PeqSlot        NokiaConf_Configure_Groups_Group_Chassis_Peq_PeqSlot_Union `path:"peq-slot" module:"nokia-conf"`
	PeqType        E_NokiaTypesSystem_PeqType                                 `path:"peq-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Chassis_Peq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Chassis_Peq) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Chassis_Peq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis_Peq) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetInputPowerMode retrieves the value of the leaf InputPowerMode from the NokiaConf_Configure_Groups_Group_Chassis_Peq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InputPowerMode is set, it can
// safely use t.GetInputPowerMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InputPowerMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis_Peq) GetInputPowerMode() uint32 {
	if t == nil || t.InputPowerMode == nil {
		return 0
	}
	return *t.InputPowerMode
}

// GetPeqSlot retrieves the value of the leaf PeqSlot from the NokiaConf_Configure_Groups_Group_Chassis_Peq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeqSlot is set, it can
// safely use t.GetPeqSlot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeqSlot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis_Peq) GetPeqSlot() NokiaConf_Configure_Groups_Group_Chassis_Peq_PeqSlot_Union {
	if t == nil || t.PeqSlot == nil {
		return nil
	}
	return t.PeqSlot
}

// GetPeqType retrieves the value of the leaf PeqType from the NokiaConf_Configure_Groups_Group_Chassis_Peq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeqType is set, it can
// safely use t.GetPeqType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeqType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis_Peq) GetPeqType() E_NokiaTypesSystem_PeqType {
	if t == nil || t.PeqType == 0 {
		return 0
	}
	return t.PeqType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Chassis_Peq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Chassis_Peq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Chassis_Peq struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Chassis_Peq) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"peq-slot": t.PeqSlot,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Chassis_Peq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Chassis_Peq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Chassis_Peq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Chassis_Peq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Chassis_Peq.
func (*NokiaConf_Configure_Groups_Group_Chassis_Peq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule represents the /nokia-conf/configure/groups/group/chassis/power-connection-module YANG schema element.
type NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule struct {
	PcmSlot NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule_PcmSlot_Union `path:"pcm-slot" module:"nokia-conf"`
	PcmType E_NokiaTypesChassis_PcmType                                                  `path:"pcm-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule) IsYANGGoStruct() {}

// GetPcmSlot retrieves the value of the leaf PcmSlot from the NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PcmSlot is set, it can
// safely use t.GetPcmSlot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PcmSlot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule) GetPcmSlot() NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule_PcmSlot_Union {
	if t == nil || t.PcmSlot == nil {
		return nil
	}
	return t.PcmSlot
}

// GetPcmType retrieves the value of the leaf PcmType from the NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PcmType is set, it can
// safely use t.GetPcmType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PcmType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule) GetPcmType() E_NokiaTypesChassis_PcmType {
	if t == nil || t.PcmType == 0 {
		return 0
	}
	return t.PcmType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"pcm-slot": t.PcmSlot,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule.
func (*NokiaConf_Configure_Groups_Group_Chassis_PowerConnectionModule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Chassis_PowerModule represents the /nokia-conf/configure/groups/group/chassis/power-module YANG schema element.
type NokiaConf_Configure_Groups_Group_Chassis_PowerModule struct {
	AdminState      E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	PowerModuleId   NokiaConf_Configure_Groups_Group_Chassis_PowerModule_PowerModuleId_Union `path:"power-module-id" module:"nokia-conf"`
	PowerModuleType E_NokiaTypesChassis_PowerModuleType                                      `path:"power-module-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Chassis_PowerModule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Chassis_PowerModule) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Chassis_PowerModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerModule) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetPowerModuleId retrieves the value of the leaf PowerModuleId from the NokiaConf_Configure_Groups_Group_Chassis_PowerModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerModuleId is set, it can
// safely use t.GetPowerModuleId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerModuleId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerModule) GetPowerModuleId() NokiaConf_Configure_Groups_Group_Chassis_PowerModule_PowerModuleId_Union {
	if t == nil || t.PowerModuleId == nil {
		return nil
	}
	return t.PowerModuleId
}

// GetPowerModuleType retrieves the value of the leaf PowerModuleType from the NokiaConf_Configure_Groups_Group_Chassis_PowerModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerModuleType is set, it can
// safely use t.GetPowerModuleType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerModuleType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerModule) GetPowerModuleType() E_NokiaTypesChassis_PowerModuleType {
	if t == nil || t.PowerModuleType == 0 {
		return 0
	}
	return t.PowerModuleType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Chassis_PowerModule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerModule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Chassis_PowerModule struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerModule) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"power-module-id": t.PowerModuleId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerModule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Chassis_PowerModule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerModule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerModule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Chassis_PowerModule.
func (*NokiaConf_Configure_Groups_Group_Chassis_PowerModule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Chassis_PowerShelf represents the /nokia-conf/configure/groups/group/chassis/power-shelf YANG schema element.
type NokiaConf_Configure_Groups_Group_Chassis_PowerShelf struct {
	AdminState     E_NokiaTypesSros_AdminState                                                                                                                              `path:"admin-state" module:"nokia-conf"`
	Description    *string                                                                                                                                                  `path:"description" module:"nokia-conf"`
	PowerModule    map[NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule_PowerModuleId_Union]*NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule `path:"power-module" module:"nokia-conf"`
	PowerShelfId   NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerShelfId_Union                                                                                   `path:"power-shelf-id" module:"nokia-conf"`
	PowerShelfType E_NokiaTypesChassis_PowerShelfType                                                                                                                       `path:"power-shelf-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Chassis_PowerShelf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Chassis_PowerShelf) IsYANGGoStruct() {}

// NewPowerModule creates a new entry in the PowerModule list of the
// NokiaConf_Configure_Groups_Group_Chassis_PowerShelf struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf) NewPowerModule(PowerModuleId NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule_PowerModuleId_Union) (*NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerModule == nil {
		t.PowerModule = make(map[NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule_PowerModuleId_Union]*NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule)
	}

	key := PowerModuleId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PowerModule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PowerModule", key)
	}

	t.PowerModule[key] = &NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule{
		PowerModuleId: PowerModuleId,
	}

	return t.PowerModule[key], nil
}

// RenamePowerModule renames an entry in the list PowerModule within
// the NokiaConf_Configure_Groups_Group_Chassis_PowerShelf struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf) RenamePowerModule(oldK, newK NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule_PowerModuleId_Union) error {
	if _, ok := t.PowerModule[newK]; ok {
		return fmt.Errorf("key %v already exists in PowerModule", newK)
	}

	e, ok := t.PowerModule[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PowerModule", oldK)
	}
	e.PowerModuleId = newK

	t.PowerModule[newK] = e
	delete(t.PowerModule, oldK)
	return nil
}

// GetOrCreatePowerModule retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Chassis_PowerShelf. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf) GetOrCreatePowerModule(PowerModuleId NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule_PowerModuleId_Union) *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule {

	key := PowerModuleId

	if v, ok := t.PowerModule[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPowerModule(PowerModuleId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePowerModule got unexpected error: %v", err))
	}
	return v
}

// GetPowerModule retrieves the value with the specified key from
// the PowerModule map field of NokiaConf_Configure_Groups_Group_Chassis_PowerShelf. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf) GetPowerModule(PowerModuleId NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule_PowerModuleId_Union) *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule {

	if t == nil {
		return nil
	}

	key := PowerModuleId

	if lm, ok := t.PowerModule[key]; ok {
		return lm
	}
	return nil
}

// DeletePowerModule deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Chassis_PowerShelf. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf) DeletePowerModule(PowerModuleId NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule_PowerModuleId_Union) {
	key := PowerModuleId

	delete(t.PowerModule, key)
}

// AppendPowerModule appends the supplied NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule struct to the
// list PowerModule of NokiaConf_Configure_Groups_Group_Chassis_PowerShelf. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf) AppendPowerModule(v *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule) error {
	key := v.PowerModuleId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerModule == nil {
		t.PowerModule = make(map[NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule_PowerModuleId_Union]*NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule)
	}

	if _, ok := t.PowerModule[key]; ok {
		return fmt.Errorf("duplicate key for list PowerModule %v", key)
	}

	t.PowerModule[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Chassis_PowerShelf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Chassis_PowerShelf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPowerShelfId retrieves the value of the leaf PowerShelfId from the NokiaConf_Configure_Groups_Group_Chassis_PowerShelf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerShelfId is set, it can
// safely use t.GetPowerShelfId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerShelfId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf) GetPowerShelfId() NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerShelfId_Union {
	if t == nil || t.PowerShelfId == nil {
		return nil
	}
	return t.PowerShelfId
}

// GetPowerShelfType retrieves the value of the leaf PowerShelfType from the NokiaConf_Configure_Groups_Group_Chassis_PowerShelf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerShelfType is set, it can
// safely use t.GetPowerShelfType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerShelfType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf) GetPowerShelfType() E_NokiaTypesChassis_PowerShelfType {
	if t == nil || t.PowerShelfType == 0 {
		return 0
	}
	return t.PowerShelfType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Chassis_PowerShelf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	for _, e := range t.PowerModule {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Chassis_PowerShelf struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"power-shelf-id": t.PowerShelfId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Chassis_PowerShelf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Chassis_PowerShelf.
func (*NokiaConf_Configure_Groups_Group_Chassis_PowerShelf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule represents the /nokia-conf/configure/groups/group/chassis/power-shelf/power-module YANG schema element.
type NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule struct {
	AdminState      E_NokiaTypesSros_AdminState                                                         `path:"admin-state" module:"nokia-conf"`
	PowerModuleId   NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule_PowerModuleId_Union `path:"power-module-id" module:"nokia-conf"`
	PowerModuleType E_NokiaTypesChassis_PowerModuleType                                                 `path:"power-module-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetPowerModuleId retrieves the value of the leaf PowerModuleId from the NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerModuleId is set, it can
// safely use t.GetPowerModuleId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerModuleId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule) GetPowerModuleId() NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule_PowerModuleId_Union {
	if t == nil || t.PowerModuleId == nil {
		return nil
	}
	return t.PowerModuleId
}

// GetPowerModuleType retrieves the value of the leaf PowerModuleType from the NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerModuleType is set, it can
// safely use t.GetPowerModuleType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerModuleType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule) GetPowerModuleType() E_NokiaTypesChassis_PowerModuleType {
	if t == nil || t.PowerModuleType == 0 {
		return 0
	}
	return t.PowerModuleType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"power-module-id": t.PowerModuleId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule.
func (*NokiaConf_Configure_Groups_Group_Chassis_PowerShelf_PowerModule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Chassis_PowerSupply represents the /nokia-conf/configure/groups/group/chassis/power-supply YANG schema element.
type NokiaConf_Configure_Groups_Group_Chassis_PowerSupply struct {
	PowerSupplyId   NokiaConf_Configure_Groups_Group_Chassis_PowerSupply_PowerSupplyId_Union `path:"power-supply-id" module:"nokia-conf"`
	PowerSupplyType E_NokiaConf_Configure_Groups_Group_Chassis_PowerSupply_PowerSupplyType   `path:"power-supply-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Chassis_PowerSupply implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Chassis_PowerSupply) IsYANGGoStruct() {}

// GetPowerSupplyId retrieves the value of the leaf PowerSupplyId from the NokiaConf_Configure_Groups_Group_Chassis_PowerSupply
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerSupplyId is set, it can
// safely use t.GetPowerSupplyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerSupplyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerSupply) GetPowerSupplyId() NokiaConf_Configure_Groups_Group_Chassis_PowerSupply_PowerSupplyId_Union {
	if t == nil || t.PowerSupplyId == nil {
		return nil
	}
	return t.PowerSupplyId
}

// GetPowerSupplyType retrieves the value of the leaf PowerSupplyType from the NokiaConf_Configure_Groups_Group_Chassis_PowerSupply
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerSupplyType is set, it can
// safely use t.GetPowerSupplyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerSupplyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerSupply) GetPowerSupplyType() E_NokiaConf_Configure_Groups_Group_Chassis_PowerSupply_PowerSupplyType {
	if t == nil || t.PowerSupplyType == 0 {
		return NokiaConf_Configure_Groups_Group_Chassis_PowerSupply_PowerSupplyType_auto
	}
	return t.PowerSupplyType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Chassis_PowerSupply
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerSupply) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PowerSupplyType == 0 {
		t.PowerSupplyType = NokiaConf_Configure_Groups_Group_Chassis_PowerSupply_PowerSupplyType_auto
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Chassis_PowerSupply struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerSupply) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"power-supply-id": t.PowerSupplyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerSupply) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Chassis_PowerSupply"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerSupply) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Chassis_PowerSupply) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Chassis_PowerSupply.
func (*NokiaConf_Configure_Groups_Group_Chassis_PowerSupply) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ConnectionProfile represents the /nokia-conf/configure/groups/group/connection-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_ConnectionProfile struct {
	Vlan map[NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_ConnectionProfileId_Union]*NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan `path:"vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ConnectionProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ConnectionProfile) IsYANGGoStruct() {}

// NewVlan creates a new entry in the Vlan list of the
// NokiaConf_Configure_Groups_Group_ConnectionProfile struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile) NewVlan(ConnectionProfileId NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_ConnectionProfileId_Union) (*NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vlan == nil {
		t.Vlan = make(map[NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_ConnectionProfileId_Union]*NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan)
	}

	key := ConnectionProfileId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vlan[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vlan", key)
	}

	t.Vlan[key] = &NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan{
		ConnectionProfileId: ConnectionProfileId,
	}

	return t.Vlan[key], nil
}

// RenameVlan renames an entry in the list Vlan within
// the NokiaConf_Configure_Groups_Group_ConnectionProfile struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile) RenameVlan(oldK, newK NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_ConnectionProfileId_Union) error {
	if _, ok := t.Vlan[newK]; ok {
		return fmt.Errorf("key %v already exists in Vlan", newK)
	}

	e, ok := t.Vlan[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vlan", oldK)
	}
	e.ConnectionProfileId = newK

	t.Vlan[newK] = e
	delete(t.Vlan, oldK)
	return nil
}

// GetOrCreateVlan retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ConnectionProfile. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile) GetOrCreateVlan(ConnectionProfileId NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_ConnectionProfileId_Union) *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan {

	key := ConnectionProfileId

	if v, ok := t.Vlan[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVlan(ConnectionProfileId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVlan got unexpected error: %v", err))
	}
	return v
}

// GetVlan retrieves the value with the specified key from
// the Vlan map field of NokiaConf_Configure_Groups_Group_ConnectionProfile. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile) GetVlan(ConnectionProfileId NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_ConnectionProfileId_Union) *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan {

	if t == nil {
		return nil
	}

	key := ConnectionProfileId

	if lm, ok := t.Vlan[key]; ok {
		return lm
	}
	return nil
}

// DeleteVlan deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ConnectionProfile. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile) DeleteVlan(ConnectionProfileId NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_ConnectionProfileId_Union) {
	key := ConnectionProfileId

	delete(t.Vlan, key)
}

// AppendVlan appends the supplied NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan struct to the
// list Vlan of NokiaConf_Configure_Groups_Group_ConnectionProfile. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile) AppendVlan(v *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan) error {
	key := v.ConnectionProfileId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vlan == nil {
		t.Vlan = make(map[NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_ConnectionProfileId_Union]*NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan)
	}

	if _, ok := t.Vlan[key]; ok {
		return fmt.Errorf("duplicate key for list Vlan %v", key)
	}

	t.Vlan[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ConnectionProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Vlan {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ConnectionProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ConnectionProfile.
func (*NokiaConf_Configure_Groups_Group_ConnectionProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan represents the /nokia-conf/configure/groups/group/connection-profile/vlan YANG schema element.
type NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan struct {
	ConnectionProfileId NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_ConnectionProfileId_Union                                                                    `path:"connection-profile-id" module:"nokia-conf"`
	Description         *string                                                                                                                                              `path:"description" module:"nokia-conf"`
	QtagRange           map[NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange_Start_Union]*NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange `path:"qtag-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan) IsYANGGoStruct() {}

// NewQtagRange creates a new entry in the QtagRange list of the
// NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan) NewQtagRange(Start NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange_Start_Union) (*NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QtagRange == nil {
		t.QtagRange = make(map[NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange_Start_Union]*NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QtagRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QtagRange", key)
	}

	t.QtagRange[key] = &NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange{
		Start: Start,
	}

	return t.QtagRange[key], nil
}

// RenameQtagRange renames an entry in the list QtagRange within
// the NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan) RenameQtagRange(oldK, newK NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange_Start_Union) error {
	if _, ok := t.QtagRange[newK]; ok {
		return fmt.Errorf("key %v already exists in QtagRange", newK)
	}

	e, ok := t.QtagRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QtagRange", oldK)
	}
	e.Start = newK

	t.QtagRange[newK] = e
	delete(t.QtagRange, oldK)
	return nil
}

// GetOrCreateQtagRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan) GetOrCreateQtagRange(Start NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange_Start_Union) *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange {

	key := Start

	if v, ok := t.QtagRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQtagRange(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQtagRange got unexpected error: %v", err))
	}
	return v
}

// GetQtagRange retrieves the value with the specified key from
// the QtagRange map field of NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan) GetQtagRange(Start NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange_Start_Union) *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.QtagRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteQtagRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan) DeleteQtagRange(Start NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange_Start_Union) {
	key := Start

	delete(t.QtagRange, key)
}

// AppendQtagRange appends the supplied NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange struct to the
// list QtagRange of NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan) AppendQtagRange(v *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange) error {
	key := v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QtagRange == nil {
		t.QtagRange = make(map[NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange_Start_Union]*NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange)
	}

	if _, ok := t.QtagRange[key]; ok {
		return fmt.Errorf("duplicate key for list QtagRange %v", key)
	}

	t.QtagRange[key] = v
	return nil
}

// GetConnectionProfileId retrieves the value of the leaf ConnectionProfileId from the NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionProfileId is set, it can
// safely use t.GetConnectionProfileId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionProfileId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan) GetConnectionProfileId() NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_ConnectionProfileId_Union {
	if t == nil || t.ConnectionProfileId == nil {
		return nil
	}
	return t.ConnectionProfileId
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.QtagRange {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"connection-profile-id": t.ConnectionProfileId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan.
func (*NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange represents the /nokia-conf/configure/groups/group/connection-profile/vlan/qtag-range YANG schema element.
type NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange struct {
	End   *int32                                                                        `path:"end" module:"nokia-conf"`
	Start NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange) GetStart() NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange.
func (*NokiaConf_Configure_Groups_Group_ConnectionProfile_Vlan_QtagRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Esa represents the /nokia-conf/configure/groups/group/esa YANG schema element.
type NokiaConf_Configure_Groups_Group_Esa struct {
	AdminState  E_NokiaTypesSros_AdminState                                                                     `path:"admin-state" module:"nokia-conf"`
	Description *string                                                                                         `path:"description" module:"nokia-conf"`
	EsaId       NokiaConf_Configure_Groups_Group_Esa_EsaId_Union                                                `path:"esa-id" module:"nokia-conf"`
	HostPort    map[string]*NokiaConf_Configure_Groups_Group_Esa_HostPort                                       `path:"host-port" module:"nokia-conf"`
	Vm          map[NokiaConf_Configure_Groups_Group_Esa_Vm_VmId_Union]*NokiaConf_Configure_Groups_Group_Esa_Vm `path:"vm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Esa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Esa) IsYANGGoStruct() {}

// NewHostPort creates a new entry in the HostPort list of the
// NokiaConf_Configure_Groups_Group_Esa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Esa) NewHostPort(HostPort string) (*NokiaConf_Configure_Groups_Group_Esa_HostPort, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostPort == nil {
		t.HostPort = make(map[string]*NokiaConf_Configure_Groups_Group_Esa_HostPort)
	}

	key := HostPort

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HostPort[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HostPort", key)
	}

	t.HostPort[key] = &NokiaConf_Configure_Groups_Group_Esa_HostPort{
		HostPort: &HostPort,
	}

	return t.HostPort[key], nil
}

// RenameHostPort renames an entry in the list HostPort within
// the NokiaConf_Configure_Groups_Group_Esa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Esa) RenameHostPort(oldK, newK string) error {
	if _, ok := t.HostPort[newK]; ok {
		return fmt.Errorf("key %v already exists in HostPort", newK)
	}

	e, ok := t.HostPort[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HostPort", oldK)
	}
	e.HostPort = &newK

	t.HostPort[newK] = e
	delete(t.HostPort, oldK)
	return nil
}

// GetOrCreateHostPort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Esa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Esa) GetOrCreateHostPort(HostPort string) *NokiaConf_Configure_Groups_Group_Esa_HostPort {

	key := HostPort

	if v, ok := t.HostPort[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHostPort(HostPort)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHostPort got unexpected error: %v", err))
	}
	return v
}

// GetHostPort retrieves the value with the specified key from
// the HostPort map field of NokiaConf_Configure_Groups_Group_Esa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Esa) GetHostPort(HostPort string) *NokiaConf_Configure_Groups_Group_Esa_HostPort {

	if t == nil {
		return nil
	}

	key := HostPort

	if lm, ok := t.HostPort[key]; ok {
		return lm
	}
	return nil
}

// DeleteHostPort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Esa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Esa) DeleteHostPort(HostPort string) {
	key := HostPort

	delete(t.HostPort, key)
}

// AppendHostPort appends the supplied NokiaConf_Configure_Groups_Group_Esa_HostPort struct to the
// list HostPort of NokiaConf_Configure_Groups_Group_Esa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Esa_HostPort already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Esa) AppendHostPort(v *NokiaConf_Configure_Groups_Group_Esa_HostPort) error {
	if v.HostPort == nil {
		return fmt.Errorf("invalid nil key received for HostPort")
	}

	key := *v.HostPort

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostPort == nil {
		t.HostPort = make(map[string]*NokiaConf_Configure_Groups_Group_Esa_HostPort)
	}

	if _, ok := t.HostPort[key]; ok {
		return fmt.Errorf("duplicate key for list HostPort %v", key)
	}

	t.HostPort[key] = v
	return nil
}

// NewVm creates a new entry in the Vm list of the
// NokiaConf_Configure_Groups_Group_Esa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Esa) NewVm(VmId NokiaConf_Configure_Groups_Group_Esa_Vm_VmId_Union) (*NokiaConf_Configure_Groups_Group_Esa_Vm, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vm == nil {
		t.Vm = make(map[NokiaConf_Configure_Groups_Group_Esa_Vm_VmId_Union]*NokiaConf_Configure_Groups_Group_Esa_Vm)
	}

	key := VmId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vm", key)
	}

	t.Vm[key] = &NokiaConf_Configure_Groups_Group_Esa_Vm{
		VmId: VmId,
	}

	return t.Vm[key], nil
}

// RenameVm renames an entry in the list Vm within
// the NokiaConf_Configure_Groups_Group_Esa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Esa) RenameVm(oldK, newK NokiaConf_Configure_Groups_Group_Esa_Vm_VmId_Union) error {
	if _, ok := t.Vm[newK]; ok {
		return fmt.Errorf("key %v already exists in Vm", newK)
	}

	e, ok := t.Vm[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vm", oldK)
	}
	e.VmId = newK

	t.Vm[newK] = e
	delete(t.Vm, oldK)
	return nil
}

// GetOrCreateVm retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Esa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Esa) GetOrCreateVm(VmId NokiaConf_Configure_Groups_Group_Esa_Vm_VmId_Union) *NokiaConf_Configure_Groups_Group_Esa_Vm {

	key := VmId

	if v, ok := t.Vm[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVm(VmId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVm got unexpected error: %v", err))
	}
	return v
}

// GetVm retrieves the value with the specified key from
// the Vm map field of NokiaConf_Configure_Groups_Group_Esa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Esa) GetVm(VmId NokiaConf_Configure_Groups_Group_Esa_Vm_VmId_Union) *NokiaConf_Configure_Groups_Group_Esa_Vm {

	if t == nil {
		return nil
	}

	key := VmId

	if lm, ok := t.Vm[key]; ok {
		return lm
	}
	return nil
}

// DeleteVm deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Esa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Esa) DeleteVm(VmId NokiaConf_Configure_Groups_Group_Esa_Vm_VmId_Union) {
	key := VmId

	delete(t.Vm, key)
}

// AppendVm appends the supplied NokiaConf_Configure_Groups_Group_Esa_Vm struct to the
// list Vm of NokiaConf_Configure_Groups_Group_Esa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Esa_Vm already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Esa) AppendVm(v *NokiaConf_Configure_Groups_Group_Esa_Vm) error {
	key := v.VmId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vm == nil {
		t.Vm = make(map[NokiaConf_Configure_Groups_Group_Esa_Vm_VmId_Union]*NokiaConf_Configure_Groups_Group_Esa_Vm)
	}

	if _, ok := t.Vm[key]; ok {
		return fmt.Errorf("duplicate key for list Vm %v", key)
	}

	t.Vm[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Esa) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Esa) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEsaId retrieves the value of the leaf EsaId from the NokiaConf_Configure_Groups_Group_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsaId is set, it can
// safely use t.GetEsaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Esa) GetEsaId() NokiaConf_Configure_Groups_Group_Esa_EsaId_Union {
	if t == nil || t.EsaId == nil {
		return nil
	}
	return t.EsaId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Esa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Esa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.HostPort {
		e.PopulateDefaults()
	}
	for _, e := range t.Vm {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Esa struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Esa) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"esa-id": t.EsaId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Esa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Esa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Esa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Esa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Esa.
func (*NokiaConf_Configure_Groups_Group_Esa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Esa_HostPort represents the /nokia-conf/configure/groups/group/esa/host-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Esa_HostPort struct {
	HostPort *string `path:"host-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Esa_HostPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Esa_HostPort) IsYANGGoStruct() {}

// GetHostPort retrieves the value of the leaf HostPort from the NokiaConf_Configure_Groups_Group_Esa_HostPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostPort is set, it can
// safely use t.GetHostPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Esa_HostPort) GetHostPort() string {
	if t == nil || t.HostPort == nil {
		return ""
	}
	return *t.HostPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Esa_HostPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Esa_HostPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Esa_HostPort struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Esa_HostPort) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HostPort == nil {
		return nil, fmt.Errorf("nil value for key HostPort")
	}

	return map[string]interface{}{
		"host-port": *t.HostPort,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Esa_HostPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Esa_HostPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Esa_HostPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Esa_HostPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Esa_HostPort.
func (*NokiaConf_Configure_Groups_Group_Esa_HostPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Esa_Vm represents the /nokia-conf/configure/groups/group/esa/vm YANG schema element.
type NokiaConf_Configure_Groups_Group_Esa_Vm struct {
	AdminState  E_NokiaTypesSros_AdminState                        `path:"admin-state" module:"nokia-conf"`
	Cores       *uint32                                            `path:"cores" module:"nokia-conf"`
	Description *string                                            `path:"description" module:"nokia-conf"`
	HostPort    *string                                            `path:"host-port" module:"nokia-conf"`
	Memory      *uint32                                            `path:"memory" module:"nokia-conf"`
	VmId        NokiaConf_Configure_Groups_Group_Esa_Vm_VmId_Union `path:"vm-id" module:"nokia-conf"`
	VmType      E_NokiaConf_Configure_Groups_Group_Esa_Vm_VmType   `path:"vm-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Esa_Vm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Esa_Vm) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Esa_Vm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Esa_Vm) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCores retrieves the value of the leaf Cores from the NokiaConf_Configure_Groups_Group_Esa_Vm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cores is set, it can
// safely use t.GetCores() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cores == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Esa_Vm) GetCores() uint32 {
	if t == nil || t.Cores == nil {
		return 0
	}
	return *t.Cores
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Esa_Vm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Esa_Vm) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHostPort retrieves the value of the leaf HostPort from the NokiaConf_Configure_Groups_Group_Esa_Vm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostPort is set, it can
// safely use t.GetHostPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Esa_Vm) GetHostPort() string {
	if t == nil || t.HostPort == nil {
		return ""
	}
	return *t.HostPort
}

// GetMemory retrieves the value of the leaf Memory from the NokiaConf_Configure_Groups_Group_Esa_Vm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Memory is set, it can
// safely use t.GetMemory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Memory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Esa_Vm) GetMemory() uint32 {
	if t == nil || t.Memory == nil {
		return 0
	}
	return *t.Memory
}

// GetVmId retrieves the value of the leaf VmId from the NokiaConf_Configure_Groups_Group_Esa_Vm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VmId is set, it can
// safely use t.GetVmId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VmId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Esa_Vm) GetVmId() NokiaConf_Configure_Groups_Group_Esa_Vm_VmId_Union {
	if t == nil || t.VmId == nil {
		return nil
	}
	return t.VmId
}

// GetVmType retrieves the value of the leaf VmType from the NokiaConf_Configure_Groups_Group_Esa_Vm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VmType is set, it can
// safely use t.GetVmType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VmType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Esa_Vm) GetVmType() E_NokiaConf_Configure_Groups_Group_Esa_Vm_VmType {
	if t == nil || t.VmType == 0 {
		return 0
	}
	return t.VmType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Esa_Vm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Esa_Vm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Cores == nil {
		var v uint32 = 0
		t.Cores = &v
	}
	if t.Memory == nil {
		var v uint32 = 0
		t.Memory = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Esa_Vm struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Esa_Vm) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"vm-id": t.VmId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Esa_Vm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Esa_Vm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Esa_Vm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Esa_Vm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Esa_Vm.
func (*NokiaConf_Configure_Groups_Group_Esa_Vm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthCfm represents the /nokia-conf/configure/groups/group/eth-cfm YANG schema element.
type NokiaConf_Configure_Groups_Group_EthCfm struct {
	DefaultDomain *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain     `path:"default-domain" module:"nokia-conf" yangPresence:"true"`
	Domain        map[string]*NokiaConf_Configure_Groups_Group_EthCfm_Domain `path:"domain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthCfm) IsYANGGoStruct() {}

// NewDomain creates a new entry in the Domain list of the
// NokiaConf_Configure_Groups_Group_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_EthCfm) NewDomain(MdAdminName string) (*NokiaConf_Configure_Groups_Group_EthCfm_Domain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*NokiaConf_Configure_Groups_Group_EthCfm_Domain)
	}

	key := MdAdminName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Domain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Domain", key)
	}

	t.Domain[key] = &NokiaConf_Configure_Groups_Group_EthCfm_Domain{
		MdAdminName: &MdAdminName,
	}

	return t.Domain[key], nil
}

// RenameDomain renames an entry in the list Domain within
// the NokiaConf_Configure_Groups_Group_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm) RenameDomain(oldK, newK string) error {
	if _, ok := t.Domain[newK]; ok {
		return fmt.Errorf("key %v already exists in Domain", newK)
	}

	e, ok := t.Domain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Domain", oldK)
	}
	e.MdAdminName = &newK

	t.Domain[newK] = e
	delete(t.Domain, oldK)
	return nil
}

// GetOrCreateDomain retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_EthCfm) GetOrCreateDomain(MdAdminName string) *NokiaConf_Configure_Groups_Group_EthCfm_Domain {

	key := MdAdminName

	if v, ok := t.Domain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDomain(MdAdminName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDomain got unexpected error: %v", err))
	}
	return v
}

// GetDomain retrieves the value with the specified key from
// the Domain map field of NokiaConf_Configure_Groups_Group_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_EthCfm) GetDomain(MdAdminName string) *NokiaConf_Configure_Groups_Group_EthCfm_Domain {

	if t == nil {
		return nil
	}

	key := MdAdminName

	if lm, ok := t.Domain[key]; ok {
		return lm
	}
	return nil
}

// DeleteDomain deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_EthCfm) DeleteDomain(MdAdminName string) {
	key := MdAdminName

	delete(t.Domain, key)
}

// AppendDomain appends the supplied NokiaConf_Configure_Groups_Group_EthCfm_Domain struct to the
// list Domain of NokiaConf_Configure_Groups_Group_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_EthCfm_Domain already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_EthCfm) AppendDomain(v *NokiaConf_Configure_Groups_Group_EthCfm_Domain) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key received for MdAdminName")
	}

	key := *v.MdAdminName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*NokiaConf_Configure_Groups_Group_EthCfm_Domain)
	}

	if _, ok := t.Domain[key]; ok {
		return fmt.Errorf("duplicate key for list Domain %v", key)
	}

	t.Domain[key] = v
	return nil
}

// GetOrCreateDefaultDomain retrieves the value of the DefaultDomain field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_EthCfm) GetOrCreateDefaultDomain() *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain {
	if t.DefaultDomain != nil {
		return t.DefaultDomain
	}
	t.DefaultDomain = &NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain{}
	return t.DefaultDomain
}

// GetDefaultDomain returns the value of the DefaultDomain struct pointer
// from NokiaConf_Configure_Groups_Group_EthCfm. If the receiver or the field DefaultDomain is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_EthCfm) GetDefaultDomain() *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain {
	if t != nil && t.DefaultDomain != nil {
		return t.DefaultDomain
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefaultDomain.PopulateDefaults()
	for _, e := range t.Domain {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthCfm.
func (*NokiaConf_Configure_Groups_Group_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain represents the /nokia-conf/configure/groups/group/eth-cfm/default-domain YANG schema element.
type NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain struct {
	BridgeIdentifier map[NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_Key]*NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier `path:"bridge-identifier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_Key represents the key for list BridgeIdentifier of element /nokia-conf/configure/groups/group/eth-cfm/default-domain.
type NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_Key struct {
	BridgeName string                                                                            `path:"bridge-name"`
	Vlan       NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_Vlan_Union `path:"vlan"`
}

// NewBridgeIdentifier creates a new entry in the BridgeIdentifier list of the
// NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain) NewBridgeIdentifier(BridgeName string, Vlan NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_Vlan_Union) (*NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BridgeIdentifier == nil {
		t.BridgeIdentifier = make(map[NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_Key]*NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier)
	}

	key := NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_Key{
		BridgeName: BridgeName,
		Vlan:       Vlan,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BridgeIdentifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BridgeIdentifier", key)
	}

	t.BridgeIdentifier[key] = &NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier{
		BridgeName: &BridgeName,
		Vlan:       Vlan,
	}

	return t.BridgeIdentifier[key], nil
}

// RenameBridgeIdentifier renames an entry in the list BridgeIdentifier within
// the NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain) RenameBridgeIdentifier(oldK, newK NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_Key) error {
	if _, ok := t.BridgeIdentifier[newK]; ok {
		return fmt.Errorf("key %v already exists in BridgeIdentifier", newK)
	}

	e, ok := t.BridgeIdentifier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BridgeIdentifier", oldK)
	}
	e.BridgeName = &newK.BridgeName
	e.Vlan = newK.Vlan

	t.BridgeIdentifier[newK] = e
	delete(t.BridgeIdentifier, oldK)
	return nil
}

// GetOrCreateBridgeIdentifier retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain) GetOrCreateBridgeIdentifier(BridgeName string, Vlan NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_Vlan_Union) *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier {

	key := NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_Key{
		BridgeName: BridgeName,
		Vlan:       Vlan,
	}

	if v, ok := t.BridgeIdentifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBridgeIdentifier(BridgeName, Vlan)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBridgeIdentifier got unexpected error: %v", err))
	}
	return v
}

// GetBridgeIdentifier retrieves the value with the specified key from
// the BridgeIdentifier map field of NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain) GetBridgeIdentifier(BridgeName string, Vlan NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_Vlan_Union) *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_Key{
		BridgeName: BridgeName,
		Vlan:       Vlan,
	}

	if lm, ok := t.BridgeIdentifier[key]; ok {
		return lm
	}
	return nil
}

// DeleteBridgeIdentifier deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain) DeleteBridgeIdentifier(BridgeName string, Vlan NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_Vlan_Union) {
	key := NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_Key{
		BridgeName: BridgeName,
		Vlan:       Vlan,
	}

	delete(t.BridgeIdentifier, key)
}

// AppendBridgeIdentifier appends the supplied NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier struct to the
// list BridgeIdentifier of NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain) AppendBridgeIdentifier(v *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier) error {
	if v.BridgeName == nil {
		return fmt.Errorf("invalid nil key for BridgeName")
	}

	key := NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_Key{
		BridgeName: *v.BridgeName,
		Vlan:       v.Vlan,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BridgeIdentifier == nil {
		t.BridgeIdentifier = make(map[NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_Key]*NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier)
	}

	if _, ok := t.BridgeIdentifier[key]; ok {
		return fmt.Errorf("duplicate key for list BridgeIdentifier %v", key)
	}

	t.BridgeIdentifier[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.BridgeIdentifier {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain.
func (*NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier represents the /nokia-conf/configure/groups/group/eth-cfm/default-domain/bridge-identifier YANG schema element.
type NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier struct {
	BridgeName     *string                                                                                     `path:"bridge-name" module:"nokia-conf"`
	IdPermission   E_NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_IdPermission       `path:"id-permission" module:"nokia-conf"`
	MhfCreation    *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation         `path:"mhf-creation" module:"nokia-conf"`
	MipLtrPriority NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MipLtrPriority_Union `path:"mip-ltr-priority" module:"nokia-conf"`
	Vlan           NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_Vlan_Union           `path:"vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier) IsYANGGoStruct() {}

// GetOrCreateMhfCreation retrieves the value of the MhfCreation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier) GetOrCreateMhfCreation() *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation {
	if t.MhfCreation != nil {
		return t.MhfCreation
	}
	t.MhfCreation = &NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation{}
	return t.MhfCreation
}

// GetMhfCreation returns the value of the MhfCreation struct pointer
// from NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier. If the receiver or the field MhfCreation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier) GetMhfCreation() *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation {
	if t != nil && t.MhfCreation != nil {
		return t.MhfCreation
	}
	return nil
}

// GetBridgeName retrieves the value of the leaf BridgeName from the NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BridgeName is set, it can
// safely use t.GetBridgeName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BridgeName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier) GetBridgeName() string {
	if t == nil || t.BridgeName == nil {
		return ""
	}
	return *t.BridgeName
}

// GetIdPermission retrieves the value of the leaf IdPermission from the NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdPermission is set, it can
// safely use t.GetIdPermission() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdPermission == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier) GetIdPermission() E_NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_IdPermission {
	if t == nil || t.IdPermission == 0 {
		return NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_IdPermission_defer
	}
	return t.IdPermission
}

// GetMipLtrPriority retrieves the value of the leaf MipLtrPriority from the NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MipLtrPriority is set, it can
// safely use t.GetMipLtrPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MipLtrPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier) GetMipLtrPriority() NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MipLtrPriority_Union {
	if t == nil || t.MipLtrPriority == nil {
		return NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MipLtrPriority_Enum_defer
	}
	return t.MipLtrPriority
}

// GetVlan retrieves the value of the leaf Vlan from the NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vlan is set, it can
// safely use t.GetVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier) GetVlan() NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_Vlan_Union {
	if t == nil || t.Vlan == nil {
		return nil
	}
	return t.Vlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IdPermission == 0 {
		t.IdPermission = NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_IdPermission_defer
	}
	if t.MipLtrPriority == nil {
		t.MipLtrPriority = NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MipLtrPriority_Enum_defer
	}
	t.MhfCreation.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BridgeName == nil {
		return nil, fmt.Errorf("nil value for key BridgeName")
	}

	return map[string]interface{}{
		"bridge-name": *t.BridgeName,
		"vlan":        t.Vlan,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier.
func (*NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation represents the /nokia-conf/configure/groups/group/eth-cfm/default-domain/bridge-identifier/mhf-creation YANG schema element.
type NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation struct {
	Level   NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation_Level_Union `path:"level" module:"nokia-conf"`
	MhfType E_NokiaTypesEthCfm_MhfCreationType                                                             `path:"mhf-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation) IsYANGGoStruct() {
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation) GetLevel() NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation_Level_Union {
	if t == nil || t.Level == nil {
		return NokiaTypesEthCfm_MhfCreationLevelType_Enum_defer
	}
	return t.Level
}

// GetMhfType retrieves the value of the leaf MhfType from the NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MhfType is set, it can
// safely use t.GetMhfType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MhfType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation) GetMhfType() E_NokiaTypesEthCfm_MhfCreationType {
	if t == nil || t.MhfType == 0 {
		return NokiaTypesEthCfm_MhfCreationType_defer
	}
	return t.MhfType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Level == nil {
		t.Level = NokiaTypesEthCfm_MhfCreationLevelType_Enum_defer
	}
	if t.MhfType == 0 {
		t.MhfType = NokiaTypesEthCfm_MhfCreationType_defer
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation.
func (*NokiaConf_Configure_Groups_Group_EthCfm_DefaultDomain_BridgeIdentifier_MhfCreation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthCfm_Domain represents the /nokia-conf/configure/groups/group/eth-cfm/domain YANG schema element.
type NokiaConf_Configure_Groups_Group_EthCfm_Domain struct {
	Association map[string]*NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association `path:"association" module:"nokia-conf"`
	Dns         *string                                                                `path:"dns" module:"nokia-conf"`
	Format      E_NokiaConf_Configure_Groups_Group_EthCfm_Domain_Format                `path:"format" module:"nokia-conf"`
	Level       *int32                                                                 `path:"level" module:"nokia-conf"`
	Mac         *string                                                                `path:"mac" module:"nokia-conf"`
	MdAdminName *string                                                                `path:"md-admin-name" module:"nokia-conf"`
	MdIndex     *uint32                                                                `path:"md-index" module:"nokia-conf"`
	Name        *string                                                                `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthCfm_Domain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthCfm_Domain) IsYANGGoStruct() {}

// NewAssociation creates a new entry in the Association list of the
// NokiaConf_Configure_Groups_Group_EthCfm_Domain struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain) NewAssociation(MaAdminName string) (*NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Association == nil {
		t.Association = make(map[string]*NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association)
	}

	key := MaAdminName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Association[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Association", key)
	}

	t.Association[key] = &NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association{
		MaAdminName: &MaAdminName,
	}

	return t.Association[key], nil
}

// RenameAssociation renames an entry in the list Association within
// the NokiaConf_Configure_Groups_Group_EthCfm_Domain struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain) RenameAssociation(oldK, newK string) error {
	if _, ok := t.Association[newK]; ok {
		return fmt.Errorf("key %v already exists in Association", newK)
	}

	e, ok := t.Association[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Association", oldK)
	}
	e.MaAdminName = &newK

	t.Association[newK] = e
	delete(t.Association, oldK)
	return nil
}

// GetOrCreateAssociation retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_EthCfm_Domain. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain) GetOrCreateAssociation(MaAdminName string) *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association {

	key := MaAdminName

	if v, ok := t.Association[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAssociation(MaAdminName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAssociation got unexpected error: %v", err))
	}
	return v
}

// GetAssociation retrieves the value with the specified key from
// the Association map field of NokiaConf_Configure_Groups_Group_EthCfm_Domain. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain) GetAssociation(MaAdminName string) *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association {

	if t == nil {
		return nil
	}

	key := MaAdminName

	if lm, ok := t.Association[key]; ok {
		return lm
	}
	return nil
}

// DeleteAssociation deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_EthCfm_Domain. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain) DeleteAssociation(MaAdminName string) {
	key := MaAdminName

	delete(t.Association, key)
}

// AppendAssociation appends the supplied NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association struct to the
// list Association of NokiaConf_Configure_Groups_Group_EthCfm_Domain. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain) AppendAssociation(v *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) error {
	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key received for MaAdminName")
	}

	key := *v.MaAdminName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Association == nil {
		t.Association = make(map[string]*NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association)
	}

	if _, ok := t.Association[key]; ok {
		return fmt.Errorf("duplicate key for list Association %v", key)
	}

	t.Association[key] = v
	return nil
}

// GetDns retrieves the value of the leaf Dns from the NokiaConf_Configure_Groups_Group_EthCfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dns is set, it can
// safely use t.GetDns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain) GetDns() string {
	if t == nil || t.Dns == nil {
		return ""
	}
	return *t.Dns
}

// GetFormat retrieves the value of the leaf Format from the NokiaConf_Configure_Groups_Group_EthCfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Format is set, it can
// safely use t.GetFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Format == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain) GetFormat() E_NokiaConf_Configure_Groups_Group_EthCfm_Domain_Format {
	if t == nil || t.Format == 0 {
		return 0
	}
	return t.Format
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_EthCfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_EthCfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Groups_Group_EthCfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMdIndex retrieves the value of the leaf MdIndex from the NokiaConf_Configure_Groups_Group_EthCfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdIndex is set, it can
// safely use t.GetMdIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain) GetMdIndex() uint32 {
	if t == nil || t.MdIndex == nil {
		return 0
	}
	return *t.MdIndex
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_EthCfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthCfm_Domain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Association {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_EthCfm_Domain struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	return map[string]interface{}{
		"md-admin-name": *t.MdAdminName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthCfm_Domain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthCfm_Domain.
func (*NokiaConf_Configure_Groups_Group_EthCfm_Domain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association represents the /nokia-conf/configure/groups/group/eth-cfm/domain/association YANG schema element.
type NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association struct {
	AutoMepDiscovery     *bool                                                                                                                                                      `path:"auto-mep-discovery" module:"nokia-conf"`
	BridgeIdentifier     map[string]*NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier                                                                    `path:"bridge-identifier" module:"nokia-conf"`
	CcmHoldTime          *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_CcmHoldTime                                                                                    `path:"ccm-hold-time" module:"nokia-conf"`
	CcmInterval          E_NokiaTypesEthCfm_CcmIntervalType                                                                                                                         `path:"ccm-interval" module:"nokia-conf"`
	FacilityIdPermission E_NokiaTypesEthCfm_FacilityIdPermissionType                                                                                                                `path:"facility-id-permission" module:"nokia-conf"`
	IccBased             *string                                                                                                                                                    `path:"icc-based" module:"nokia-conf"`
	Integer              *uint32                                                                                                                                                    `path:"integer" module:"nokia-conf"`
	MaAdminName          *string                                                                                                                                                    `path:"ma-admin-name" module:"nokia-conf"`
	MaIndex              *uint32                                                                                                                                                    `path:"ma-index" module:"nokia-conf"`
	RemoteMep            map[NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep_MepId_Union]*NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep `path:"remote-mep" module:"nokia-conf"`
	String               *string                                                                                                                                                    `path:"string" module:"nokia-conf"`
	Vid                  *uint32                                                                                                                                                    `path:"vid" module:"nokia-conf"`
	VpnId                *string                                                                                                                                                    `path:"vpn-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) IsYANGGoStruct() {}

// NewBridgeIdentifier creates a new entry in the BridgeIdentifier list of the
// NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) NewBridgeIdentifier(BridgeName string) (*NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BridgeIdentifier == nil {
		t.BridgeIdentifier = make(map[string]*NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier)
	}

	key := BridgeName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BridgeIdentifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BridgeIdentifier", key)
	}

	t.BridgeIdentifier[key] = &NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier{
		BridgeName: &BridgeName,
	}

	return t.BridgeIdentifier[key], nil
}

// RenameBridgeIdentifier renames an entry in the list BridgeIdentifier within
// the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) RenameBridgeIdentifier(oldK, newK string) error {
	if _, ok := t.BridgeIdentifier[newK]; ok {
		return fmt.Errorf("key %v already exists in BridgeIdentifier", newK)
	}

	e, ok := t.BridgeIdentifier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BridgeIdentifier", oldK)
	}
	e.BridgeName = &newK

	t.BridgeIdentifier[newK] = e
	delete(t.BridgeIdentifier, oldK)
	return nil
}

// GetOrCreateBridgeIdentifier retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) GetOrCreateBridgeIdentifier(BridgeName string) *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier {

	key := BridgeName

	if v, ok := t.BridgeIdentifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBridgeIdentifier(BridgeName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBridgeIdentifier got unexpected error: %v", err))
	}
	return v
}

// GetBridgeIdentifier retrieves the value with the specified key from
// the BridgeIdentifier map field of NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) GetBridgeIdentifier(BridgeName string) *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier {

	if t == nil {
		return nil
	}

	key := BridgeName

	if lm, ok := t.BridgeIdentifier[key]; ok {
		return lm
	}
	return nil
}

// DeleteBridgeIdentifier deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) DeleteBridgeIdentifier(BridgeName string) {
	key := BridgeName

	delete(t.BridgeIdentifier, key)
}

// AppendBridgeIdentifier appends the supplied NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier struct to the
// list BridgeIdentifier of NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) AppendBridgeIdentifier(v *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier) error {
	if v.BridgeName == nil {
		return fmt.Errorf("invalid nil key received for BridgeName")
	}

	key := *v.BridgeName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BridgeIdentifier == nil {
		t.BridgeIdentifier = make(map[string]*NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier)
	}

	if _, ok := t.BridgeIdentifier[key]; ok {
		return fmt.Errorf("duplicate key for list BridgeIdentifier %v", key)
	}

	t.BridgeIdentifier[key] = v
	return nil
}

// NewRemoteMep creates a new entry in the RemoteMep list of the
// NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) NewRemoteMep(MepId NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep_MepId_Union) (*NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteMep == nil {
		t.RemoteMep = make(map[NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep_MepId_Union]*NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep)
	}

	key := MepId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteMep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteMep", key)
	}

	t.RemoteMep[key] = &NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep{
		MepId: MepId,
	}

	return t.RemoteMep[key], nil
}

// RenameRemoteMep renames an entry in the list RemoteMep within
// the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) RenameRemoteMep(oldK, newK NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep_MepId_Union) error {
	if _, ok := t.RemoteMep[newK]; ok {
		return fmt.Errorf("key %v already exists in RemoteMep", newK)
	}

	e, ok := t.RemoteMep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RemoteMep", oldK)
	}
	e.MepId = newK

	t.RemoteMep[newK] = e
	delete(t.RemoteMep, oldK)
	return nil
}

// GetOrCreateRemoteMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) GetOrCreateRemoteMep(MepId NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep_MepId_Union) *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep {

	key := MepId

	if v, ok := t.RemoteMep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRemoteMep(MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRemoteMep got unexpected error: %v", err))
	}
	return v
}

// GetRemoteMep retrieves the value with the specified key from
// the RemoteMep map field of NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) GetRemoteMep(MepId NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep_MepId_Union) *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep {

	if t == nil {
		return nil
	}

	key := MepId

	if lm, ok := t.RemoteMep[key]; ok {
		return lm
	}
	return nil
}

// DeleteRemoteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) DeleteRemoteMep(MepId NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep_MepId_Union) {
	key := MepId

	delete(t.RemoteMep, key)
}

// AppendRemoteMep appends the supplied NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep struct to the
// list RemoteMep of NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) AppendRemoteMep(v *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep) error {
	key := v.MepId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteMep == nil {
		t.RemoteMep = make(map[NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep_MepId_Union]*NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep)
	}

	if _, ok := t.RemoteMep[key]; ok {
		return fmt.Errorf("duplicate key for list RemoteMep %v", key)
	}

	t.RemoteMep[key] = v
	return nil
}

// GetOrCreateCcmHoldTime retrieves the value of the CcmHoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) GetOrCreateCcmHoldTime() *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_CcmHoldTime {
	if t.CcmHoldTime != nil {
		return t.CcmHoldTime
	}
	t.CcmHoldTime = &NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_CcmHoldTime{}
	return t.CcmHoldTime
}

// GetCcmHoldTime returns the value of the CcmHoldTime struct pointer
// from NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association. If the receiver or the field CcmHoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) GetCcmHoldTime() *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_CcmHoldTime {
	if t != nil && t.CcmHoldTime != nil {
		return t.CcmHoldTime
	}
	return nil
}

// GetAutoMepDiscovery retrieves the value of the leaf AutoMepDiscovery from the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoMepDiscovery is set, it can
// safely use t.GetAutoMepDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoMepDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) GetAutoMepDiscovery() bool {
	if t == nil || t.AutoMepDiscovery == nil {
		return false
	}
	return *t.AutoMepDiscovery
}

// GetCcmInterval retrieves the value of the leaf CcmInterval from the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmInterval is set, it can
// safely use t.GetCcmInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) GetCcmInterval() E_NokiaTypesEthCfm_CcmIntervalType {
	if t == nil || t.CcmInterval == 0 {
		return NokiaTypesEthCfm_CcmIntervalType_10s
	}
	return t.CcmInterval
}

// GetFacilityIdPermission retrieves the value of the leaf FacilityIdPermission from the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FacilityIdPermission is set, it can
// safely use t.GetFacilityIdPermission() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FacilityIdPermission == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) GetFacilityIdPermission() E_NokiaTypesEthCfm_FacilityIdPermissionType {
	if t == nil || t.FacilityIdPermission == 0 {
		return NokiaTypesEthCfm_FacilityIdPermissionType_none
	}
	return t.FacilityIdPermission
}

// GetIccBased retrieves the value of the leaf IccBased from the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IccBased is set, it can
// safely use t.GetIccBased() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IccBased == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) GetIccBased() string {
	if t == nil || t.IccBased == nil {
		return ""
	}
	return *t.IccBased
}

// GetInteger retrieves the value of the leaf Integer from the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Integer is set, it can
// safely use t.GetInteger() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Integer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) GetInteger() uint32 {
	if t == nil || t.Integer == nil {
		return 0
	}
	return *t.Integer
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMaIndex retrieves the value of the leaf MaIndex from the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaIndex is set, it can
// safely use t.GetMaIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) GetMaIndex() uint32 {
	if t == nil || t.MaIndex == nil {
		return 0
	}
	return *t.MaIndex
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetVid retrieves the value of the leaf Vid from the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vid is set, it can
// safely use t.GetVid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) GetVid() uint32 {
	if t == nil || t.Vid == nil {
		return 0
	}
	return *t.Vid
}

// GetVpnId retrieves the value of the leaf VpnId from the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnId is set, it can
// safely use t.GetVpnId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) GetVpnId() string {
	if t == nil || t.VpnId == nil {
		return ""
	}
	return *t.VpnId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoMepDiscovery == nil {
		var v bool = false
		t.AutoMepDiscovery = &v
	}
	if t.CcmInterval == 0 {
		t.CcmInterval = NokiaTypesEthCfm_CcmIntervalType_10s
	}
	if t.FacilityIdPermission == 0 {
		t.FacilityIdPermission = NokiaTypesEthCfm_FacilityIdPermissionType_none
	}
	t.CcmHoldTime.PopulateDefaults()
	for _, e := range t.BridgeIdentifier {
		e.PopulateDefaults()
	}
	for _, e := range t.RemoteMep {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association.
func (*NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier represents the /nokia-conf/configure/groups/group/eth-cfm/domain/association/bridge-identifier YANG schema element.
type NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier struct {
	BridgeName     *string                                     `path:"bridge-name" module:"nokia-conf"`
	IdPermission   E_NokiaTypesEthCfm_FacilityIdPermissionType `path:"id-permission" module:"nokia-conf"`
	MhfCreation    E_NokiaTypesEthCfm_TmnxMhfCreationType      `path:"mhf-creation" module:"nokia-conf"`
	MipLtrPriority *uint8                                      `path:"mip-ltr-priority" module:"nokia-conf"`
	Vlan           *int32                                      `path:"vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier) IsYANGGoStruct() {
}

// GetBridgeName retrieves the value of the leaf BridgeName from the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BridgeName is set, it can
// safely use t.GetBridgeName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BridgeName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier) GetBridgeName() string {
	if t == nil || t.BridgeName == nil {
		return ""
	}
	return *t.BridgeName
}

// GetIdPermission retrieves the value of the leaf IdPermission from the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdPermission is set, it can
// safely use t.GetIdPermission() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdPermission == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier) GetIdPermission() E_NokiaTypesEthCfm_FacilityIdPermissionType {
	if t == nil || t.IdPermission == 0 {
		return NokiaTypesEthCfm_FacilityIdPermissionType_none
	}
	return t.IdPermission
}

// GetMhfCreation retrieves the value of the leaf MhfCreation from the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MhfCreation is set, it can
// safely use t.GetMhfCreation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MhfCreation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier) GetMhfCreation() E_NokiaTypesEthCfm_TmnxMhfCreationType {
	if t == nil || t.MhfCreation == 0 {
		return NokiaTypesEthCfm_TmnxMhfCreationType_none
	}
	return t.MhfCreation
}

// GetMipLtrPriority retrieves the value of the leaf MipLtrPriority from the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MipLtrPriority is set, it can
// safely use t.GetMipLtrPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MipLtrPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier) GetMipLtrPriority() uint8 {
	if t == nil || t.MipLtrPriority == nil {
		return 7
	}
	return *t.MipLtrPriority
}

// GetVlan retrieves the value of the leaf Vlan from the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vlan is set, it can
// safely use t.GetVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier) GetVlan() int32 {
	if t == nil || t.Vlan == nil {
		return 0
	}
	return *t.Vlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IdPermission == 0 {
		t.IdPermission = NokiaTypesEthCfm_FacilityIdPermissionType_none
	}
	if t.MhfCreation == 0 {
		t.MhfCreation = NokiaTypesEthCfm_TmnxMhfCreationType_none
	}
	if t.MipLtrPriority == nil {
		var v uint8 = 7
		t.MipLtrPriority = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BridgeName == nil {
		return nil, fmt.Errorf("nil value for key BridgeName")
	}

	return map[string]interface{}{
		"bridge-name": *t.BridgeName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier.
func (*NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_BridgeIdentifier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_CcmHoldTime represents the /nokia-conf/configure/groups/group/eth-cfm/domain/association/ccm-hold-time YANG schema element.
type NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_CcmHoldTime struct {
	Down *uint32 `path:"down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_CcmHoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_CcmHoldTime) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_CcmHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Down is set, it can
// safely use t.GetDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Down == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_CcmHoldTime) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 0
	}
	return *t.Down
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_CcmHoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_CcmHoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_CcmHoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_CcmHoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_CcmHoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_CcmHoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_CcmHoldTime.
func (*NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_CcmHoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep represents the /nokia-conf/configure/groups/group/eth-cfm/domain/association/remote-mep YANG schema element.
type NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep struct {
	MepId     NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep_MepId_Union `path:"mep-id" module:"nokia-conf"`
	RemoteMac *string                                                                          `path:"remote-mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep) IsYANGGoStruct() {}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep) GetMepId() NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep_MepId_Union {
	if t == nil || t.MepId == nil {
		return nil
	}
	return t.MepId
}

// GetRemoteMac retrieves the value of the leaf RemoteMac from the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteMac is set, it can
// safely use t.GetRemoteMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep) GetRemoteMac() string {
	if t == nil || t.RemoteMac == nil {
		return ""
	}
	return *t.RemoteMac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"mep-id": t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep.
func (*NokiaConf_Configure_Groups_Group_EthCfm_Domain_Association_RemoteMep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthRing represents the /nokia-conf/configure/groups/group/eth-ring YANG schema element.
type NokiaConf_Configure_Groups_Group_EthRing struct {
	AdminState        E_NokiaTypesSros_AdminState                               `path:"admin-state" module:"nokia-conf"`
	CcmHoldTime       *NokiaConf_Configure_Groups_Group_EthRing_CcmHoldTime     `path:"ccm-hold-time" module:"nokia-conf"`
	CompatibleVersion *uint32                                                   `path:"compatible-version" module:"nokia-conf"`
	Description       *string                                                   `path:"description" module:"nokia-conf"`
	GuardTime         *uint32                                                   `path:"guard-time" module:"nokia-conf"`
	NodeId            *string                                                   `path:"node-id" module:"nokia-conf"`
	Path              map[string]*NokiaConf_Configure_Groups_Group_EthRing_Path `path:"path" module:"nokia-conf"`
	RevertTime        *uint32                                                   `path:"revert-time" module:"nokia-conf"`
	RingIndex         NokiaConf_Configure_Groups_Group_EthRing_RingIndex_Union  `path:"ring-index" module:"nokia-conf"`
	RplNode           E_NokiaConf_Configure_Groups_Group_EthRing_RplNode        `path:"rpl-node" module:"nokia-conf"`
	SubRing           *NokiaConf_Configure_Groups_Group_EthRing_SubRing         `path:"sub-ring" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthRing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthRing) IsYANGGoStruct() {}

// NewPath creates a new entry in the Path list of the
// NokiaConf_Configure_Groups_Group_EthRing struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_EthRing) NewPath(PathIndex string) (*NokiaConf_Configure_Groups_Group_EthRing_Path, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[string]*NokiaConf_Configure_Groups_Group_EthRing_Path)
	}

	key := PathIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Path[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Path", key)
	}

	t.Path[key] = &NokiaConf_Configure_Groups_Group_EthRing_Path{
		PathIndex: &PathIndex,
	}

	return t.Path[key], nil
}

// RenamePath renames an entry in the list Path within
// the NokiaConf_Configure_Groups_Group_EthRing struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_EthRing) RenamePath(oldK, newK string) error {
	if _, ok := t.Path[newK]; ok {
		return fmt.Errorf("key %v already exists in Path", newK)
	}

	e, ok := t.Path[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Path", oldK)
	}
	e.PathIndex = &newK

	t.Path[newK] = e
	delete(t.Path, oldK)
	return nil
}

// GetOrCreatePath retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_EthRing. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_EthRing) GetOrCreatePath(PathIndex string) *NokiaConf_Configure_Groups_Group_EthRing_Path {

	key := PathIndex

	if v, ok := t.Path[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPath(PathIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePath got unexpected error: %v", err))
	}
	return v
}

// GetPath retrieves the value with the specified key from
// the Path map field of NokiaConf_Configure_Groups_Group_EthRing. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_EthRing) GetPath(PathIndex string) *NokiaConf_Configure_Groups_Group_EthRing_Path {

	if t == nil {
		return nil
	}

	key := PathIndex

	if lm, ok := t.Path[key]; ok {
		return lm
	}
	return nil
}

// DeletePath deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_EthRing. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_EthRing) DeletePath(PathIndex string) {
	key := PathIndex

	delete(t.Path, key)
}

// AppendPath appends the supplied NokiaConf_Configure_Groups_Group_EthRing_Path struct to the
// list Path of NokiaConf_Configure_Groups_Group_EthRing. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_EthRing_Path already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_EthRing) AppendPath(v *NokiaConf_Configure_Groups_Group_EthRing_Path) error {
	if v.PathIndex == nil {
		return fmt.Errorf("invalid nil key received for PathIndex")
	}

	key := *v.PathIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[string]*NokiaConf_Configure_Groups_Group_EthRing_Path)
	}

	if _, ok := t.Path[key]; ok {
		return fmt.Errorf("duplicate key for list Path %v", key)
	}

	t.Path[key] = v
	return nil
}

// GetOrCreateCcmHoldTime retrieves the value of the CcmHoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_EthRing) GetOrCreateCcmHoldTime() *NokiaConf_Configure_Groups_Group_EthRing_CcmHoldTime {
	if t.CcmHoldTime != nil {
		return t.CcmHoldTime
	}
	t.CcmHoldTime = &NokiaConf_Configure_Groups_Group_EthRing_CcmHoldTime{}
	return t.CcmHoldTime
}

// GetOrCreateSubRing retrieves the value of the SubRing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_EthRing) GetOrCreateSubRing() *NokiaConf_Configure_Groups_Group_EthRing_SubRing {
	if t.SubRing != nil {
		return t.SubRing
	}
	t.SubRing = &NokiaConf_Configure_Groups_Group_EthRing_SubRing{}
	return t.SubRing
}

// GetCcmHoldTime returns the value of the CcmHoldTime struct pointer
// from NokiaConf_Configure_Groups_Group_EthRing. If the receiver or the field CcmHoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_EthRing) GetCcmHoldTime() *NokiaConf_Configure_Groups_Group_EthRing_CcmHoldTime {
	if t != nil && t.CcmHoldTime != nil {
		return t.CcmHoldTime
	}
	return nil
}

// GetSubRing returns the value of the SubRing struct pointer
// from NokiaConf_Configure_Groups_Group_EthRing. If the receiver or the field SubRing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_EthRing) GetSubRing() *NokiaConf_Configure_Groups_Group_EthRing_SubRing {
	if t != nil && t.SubRing != nil {
		return t.SubRing
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_EthRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCompatibleVersion retrieves the value of the leaf CompatibleVersion from the NokiaConf_Configure_Groups_Group_EthRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CompatibleVersion is set, it can
// safely use t.GetCompatibleVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CompatibleVersion == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing) GetCompatibleVersion() uint32 {
	if t == nil || t.CompatibleVersion == nil {
		return 2
	}
	return *t.CompatibleVersion
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_EthRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGuardTime retrieves the value of the leaf GuardTime from the NokiaConf_Configure_Groups_Group_EthRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GuardTime is set, it can
// safely use t.GetGuardTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GuardTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing) GetGuardTime() uint32 {
	if t == nil || t.GuardTime == nil {
		return 5
	}
	return *t.GuardTime
}

// GetNodeId retrieves the value of the leaf NodeId from the NokiaConf_Configure_Groups_Group_EthRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NodeId is set, it can
// safely use t.GetNodeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NodeId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing) GetNodeId() string {
	if t == nil || t.NodeId == nil {
		return ""
	}
	return *t.NodeId
}

// GetRevertTime retrieves the value of the leaf RevertTime from the NokiaConf_Configure_Groups_Group_EthRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertTime is set, it can
// safely use t.GetRevertTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing) GetRevertTime() uint32 {
	if t == nil || t.RevertTime == nil {
		return 300
	}
	return *t.RevertTime
}

// GetRingIndex retrieves the value of the leaf RingIndex from the NokiaConf_Configure_Groups_Group_EthRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RingIndex is set, it can
// safely use t.GetRingIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RingIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing) GetRingIndex() NokiaConf_Configure_Groups_Group_EthRing_RingIndex_Union {
	if t == nil || t.RingIndex == nil {
		return nil
	}
	return t.RingIndex
}

// GetRplNode retrieves the value of the leaf RplNode from the NokiaConf_Configure_Groups_Group_EthRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RplNode is set, it can
// safely use t.GetRplNode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RplNode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing) GetRplNode() E_NokiaConf_Configure_Groups_Group_EthRing_RplNode {
	if t == nil || t.RplNode == 0 {
		return 0
	}
	return t.RplNode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthRing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthRing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.CompatibleVersion == nil {
		var v uint32 = 2
		t.CompatibleVersion = &v
	}
	if t.GuardTime == nil {
		var v uint32 = 5
		t.GuardTime = &v
	}
	if t.RevertTime == nil {
		var v uint32 = 300
		t.RevertTime = &v
	}
	t.CcmHoldTime.PopulateDefaults()
	t.SubRing.PopulateDefaults()
	for _, e := range t.Path {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_EthRing struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_EthRing) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"ring-index": t.RingIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthRing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthRing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthRing.
func (*NokiaConf_Configure_Groups_Group_EthRing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthRing_CcmHoldTime represents the /nokia-conf/configure/groups/group/eth-ring/ccm-hold-time YANG schema element.
type NokiaConf_Configure_Groups_Group_EthRing_CcmHoldTime struct {
	Down *uint32 `path:"down" module:"nokia-conf"`
	Up   *uint32 `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthRing_CcmHoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthRing_CcmHoldTime) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the NokiaConf_Configure_Groups_Group_EthRing_CcmHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Down is set, it can
// safely use t.GetDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Down == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_CcmHoldTime) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 0
	}
	return *t.Down
}

// GetUp retrieves the value of the leaf Up from the NokiaConf_Configure_Groups_Group_EthRing_CcmHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Up is set, it can
// safely use t.GetUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Up == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_CcmHoldTime) GetUp() uint32 {
	if t == nil || t.Up == nil {
		return 20
	}
	return *t.Up
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthRing_CcmHoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthRing_CcmHoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Up == nil {
		var v uint32 = 20
		t.Up = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_CcmHoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthRing_CcmHoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_CcmHoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthRing_CcmHoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthRing_CcmHoldTime.
func (*NokiaConf_Configure_Groups_Group_EthRing_CcmHoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthRing_Path represents the /nokia-conf/configure/groups/group/eth-ring/path YANG schema element.
type NokiaConf_Configure_Groups_Group_EthRing_Path struct {
	AdminState     E_NokiaTypesSros_AdminState                           `path:"admin-state" module:"nokia-conf"`
	Description    *string                                               `path:"description" module:"nokia-conf"`
	EthCfm         *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm `path:"eth-cfm" module:"nokia-conf"`
	PathIndex      *string                                               `path:"path-index" module:"nokia-conf"`
	PortAndRapsTag *string                                               `path:"port-and-raps-tag" module:"nokia-conf"`
	RplEnd         *bool                                                 `path:"rpl-end" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthRing_Path implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthRing_Path) IsYANGGoStruct() {}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path) GetOrCreateEthCfm() *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm{}
	return t.EthCfm
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Groups_Group_EthRing_Path. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path) GetEthCfm() *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_EthRing_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_EthRing_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPathIndex retrieves the value of the leaf PathIndex from the NokiaConf_Configure_Groups_Group_EthRing_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathIndex is set, it can
// safely use t.GetPathIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path) GetPathIndex() string {
	if t == nil || t.PathIndex == nil {
		return ""
	}
	return *t.PathIndex
}

// GetPortAndRapsTag retrieves the value of the leaf PortAndRapsTag from the NokiaConf_Configure_Groups_Group_EthRing_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortAndRapsTag is set, it can
// safely use t.GetPortAndRapsTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortAndRapsTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path) GetPortAndRapsTag() string {
	if t == nil || t.PortAndRapsTag == nil {
		return ""
	}
	return *t.PortAndRapsTag
}

// GetRplEnd retrieves the value of the leaf RplEnd from the NokiaConf_Configure_Groups_Group_EthRing_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RplEnd is set, it can
// safely use t.GetRplEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RplEnd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path) GetRplEnd() bool {
	if t == nil || t.RplEnd == nil {
		return false
	}
	return *t.RplEnd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthRing_Path
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.RplEnd == nil {
		var v bool = false
		t.RplEnd = &v
	}
	t.EthCfm.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_EthRing_Path struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathIndex == nil {
		return nil, fmt.Errorf("nil value for key PathIndex")
	}

	return map[string]interface{}{
		"path-index": *t.PathIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthRing_Path"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthRing_Path.
func (*NokiaConf_Configure_Groups_Group_EthRing_Path) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm represents the /nokia-conf/configure/groups/group/eth-ring/path/eth-cfm YANG schema element.
type NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm struct {
	Mep map[NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep `path:"mep" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/groups/group/eth-ring/path/eth-cfm.
type NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Key struct {
	MdAdminName string                                                               `path:"md-admin-name"`
	MaAdminName string                                                               `path:"ma-admin-name"`
	MepId       NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_MepId_Union `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_MepId_Union) (*NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_MepId_Union) *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep {

	key := NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_MepId_Union) *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_MepId_Union) {
	key := NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm) AppendMep(v *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	key := NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm.
func (*NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep represents the /nokia-conf/configure/groups/group/eth-ring/path/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                                 `path:"admin-state" module:"nokia-conf"`
	AlarmNotification    *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	Ccm                  *bool                                                                       `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                                      `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                                     `path:"ccm-padding-size" module:"nokia-conf"`
	ControlMep           *bool                                                                       `path:"control-mep" module:"nokia-conf"`
	Description          *string                                                                     `path:"description" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	Grace                *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	InstallMep           *bool                                                                       `path:"install-mep" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                                      `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                                     `path:"ma-admin-name" module:"nokia-conf"`
	MacAddress           *string                                                                     `path:"mac-address" module:"nokia-conf"`
	MdAdminName          *string                                                                     `path:"md-admin-name" module:"nokia-conf"`
	MepId                NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_MepId_Union        `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                                     `path:"one-way-delay-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetControlMep retrieves the value of the leaf ControlMep from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlMep is set, it can
// safely use t.GetControlMep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlMep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) GetControlMep() bool {
	if t == nil || t.ControlMep == nil {
		return false
	}
	return *t.ControlMep
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInstallMep retrieves the value of the leaf InstallMep from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallMep is set, it can
// safely use t.GetInstallMep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallMep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) GetInstallMep() bool {
	if t == nil || t.InstallMep == nil {
		return false
	}
	return *t.InstallMep
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_all_def
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) GetMepId() NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_MepId_Union {
	if t == nil || t.MepId == nil {
		return nil
	}
	return t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.ControlMep == nil {
		var v bool = false
		t.ControlMep = &v
	}
	if t.InstallMep == nil {
		var v bool = false
		t.InstallMep = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_all_def
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	t.AlarmNotification.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep.
func (*NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/groups/group/eth-ring/path/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest represents the /nokia-conf/configure/groups/group/eth-ring/path/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                                       `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/groups/group/eth-ring/path/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                                  `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {
}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace represents the /nokia-conf/configure/groups/group/eth-ring/path/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/groups/group/eth-ring/path/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/groups/group/eth-ring/path/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Groups_Group_EthRing_Path_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthRing_SubRing represents the /nokia-conf/configure/groups/group/eth-ring/sub-ring YANG schema element.
type NokiaConf_Configure_Groups_Group_EthRing_SubRing struct {
	Interconnect *NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect `path:"interconnect" module:"nokia-conf"`
	Type         E_NokiaConf_Configure_Groups_Group_EthRing_SubRing_Type        `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthRing_SubRing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthRing_SubRing) IsYANGGoStruct() {}

// GetOrCreateInterconnect retrieves the value of the Interconnect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_EthRing_SubRing) GetOrCreateInterconnect() *NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect {
	if t.Interconnect != nil {
		return t.Interconnect
	}
	t.Interconnect = &NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect{}
	return t.Interconnect
}

// GetInterconnect returns the value of the Interconnect struct pointer
// from NokiaConf_Configure_Groups_Group_EthRing_SubRing. If the receiver or the field Interconnect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_EthRing_SubRing) GetInterconnect() *NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect {
	if t != nil && t.Interconnect != nil {
		return t.Interconnect
	}
	return nil
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_EthRing_SubRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_SubRing) GetType() E_NokiaConf_Configure_Groups_Group_EthRing_SubRing_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthRing_SubRing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthRing_SubRing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Interconnect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_SubRing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthRing_SubRing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_SubRing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthRing_SubRing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthRing_SubRing.
func (*NokiaConf_Configure_Groups_Group_EthRing_SubRing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect represents the /nokia-conf/configure/groups/group/eth-ring/sub-ring/interconnect YANG schema element.
type NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect struct {
	PropagateTopologyChange *bool     `path:"propagate-topology-change" module:"nokia-conf"`
	RingId                  *uint32   `path:"ring-id" module:"nokia-conf"`
	Vpls                    YANGEmpty `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect) IsYANGGoStruct() {}

// GetPropagateTopologyChange retrieves the value of the leaf PropagateTopologyChange from the NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagateTopologyChange is set, it can
// safely use t.GetPropagateTopologyChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagateTopologyChange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect) GetPropagateTopologyChange() bool {
	if t == nil || t.PropagateTopologyChange == nil {
		return false
	}
	return *t.PropagateTopologyChange
}

// GetRingId retrieves the value of the leaf RingId from the NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RingId is set, it can
// safely use t.GetRingId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RingId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect) GetRingId() uint32 {
	if t == nil || t.RingId == nil {
		return 0
	}
	return *t.RingId
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect) GetVpls() YANGEmpty {
	if t == nil || t.Vpls == false {
		return false
	}
	return t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PropagateTopologyChange == nil {
		var v bool = false
		t.PropagateTopologyChange = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect.
func (*NokiaConf_Configure_Groups_Group_EthRing_SubRing_Interconnect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter represents the /nokia-conf/configure/groups/group/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter struct {
	DhcpFilter            map[NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_FilterId_Union]*NokiaConf_Configure_Groups_Group_Filter_DhcpFilter   `path:"dhcp-filter" module:"nokia-conf"`
	Dhcp6Filter           map[NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_FilterId_Union]*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter `path:"dhcp6-filter" module:"nokia-conf"`
	GreTunnelTemplate     map[string]*NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate                                                       `path:"gre-tunnel-template" module:"nokia-conf"`
	IpException           map[string]*NokiaConf_Configure_Groups_Group_Filter_IpException                                                             `path:"ip-exception" module:"nokia-conf"`
	IpFilter              map[string]*NokiaConf_Configure_Groups_Group_Filter_IpFilter                                                                `path:"ip-filter" module:"nokia-conf"`
	Ipv6Exception         map[string]*NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception                                                           `path:"ipv6-exception" module:"nokia-conf"`
	Ipv6Filter            map[string]*NokiaConf_Configure_Groups_Group_Filter_Ipv6Filter                                                              `path:"ipv6-filter" module:"nokia-conf"`
	Log                   map[NokiaConf_Configure_Groups_Group_Filter_Log_LogId_Union]*NokiaConf_Configure_Groups_Group_Filter_Log                    `path:"log" module:"nokia-conf"`
	MacFilter             map[string]*NokiaConf_Configure_Groups_Group_Filter_MacFilter                                                               `path:"mac-filter" module:"nokia-conf"`
	MatchList             *NokiaConf_Configure_Groups_Group_Filter_MatchList                                                                          `path:"match-list" module:"nokia-conf" yangPresence:"true"`
	MdAutoId              *NokiaConf_Configure_Groups_Group_Filter_MdAutoId                                                                           `path:"md-auto-id" module:"nokia-conf"`
	RedirectPolicy        map[string]*NokiaConf_Configure_Groups_Group_Filter_RedirectPolicy                                                          `path:"redirect-policy" module:"nokia-conf"`
	RedirectPolicyBinding map[string]*NokiaConf_Configure_Groups_Group_Filter_RedirectPolicyBinding                                                   `path:"redirect-policy-binding" module:"nokia-conf"`
	SystemFilter          *NokiaConf_Configure_Groups_Group_Filter_SystemFilter                                                                       `path:"system-filter" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter) IsYANGGoStruct() {}

// NewDhcpFilter creates a new entry in the DhcpFilter list of the
// NokiaConf_Configure_Groups_Group_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Filter) NewDhcpFilter(FilterId NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_FilterId_Union) (*NokiaConf_Configure_Groups_Group_Filter_DhcpFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DhcpFilter == nil {
		t.DhcpFilter = make(map[NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_FilterId_Union]*NokiaConf_Configure_Groups_Group_Filter_DhcpFilter)
	}

	key := FilterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DhcpFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DhcpFilter", key)
	}

	t.DhcpFilter[key] = &NokiaConf_Configure_Groups_Group_Filter_DhcpFilter{
		FilterId: FilterId,
	}

	return t.DhcpFilter[key], nil
}

// RenameDhcpFilter renames an entry in the list DhcpFilter within
// the NokiaConf_Configure_Groups_Group_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Filter) RenameDhcpFilter(oldK, newK NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_FilterId_Union) error {
	if _, ok := t.DhcpFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in DhcpFilter", newK)
	}

	e, ok := t.DhcpFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DhcpFilter", oldK)
	}
	e.FilterId = newK

	t.DhcpFilter[newK] = e
	delete(t.DhcpFilter, oldK)
	return nil
}

// GetOrCreateDhcpFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetOrCreateDhcpFilter(FilterId NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_FilterId_Union) *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter {

	key := FilterId

	if v, ok := t.DhcpFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDhcpFilter(FilterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDhcpFilter got unexpected error: %v", err))
	}
	return v
}

// GetDhcpFilter retrieves the value with the specified key from
// the DhcpFilter map field of NokiaConf_Configure_Groups_Group_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetDhcpFilter(FilterId NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_FilterId_Union) *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter {

	if t == nil {
		return nil
	}

	key := FilterId

	if lm, ok := t.DhcpFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteDhcpFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Filter) DeleteDhcpFilter(FilterId NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_FilterId_Union) {
	key := FilterId

	delete(t.DhcpFilter, key)
}

// AppendDhcpFilter appends the supplied NokiaConf_Configure_Groups_Group_Filter_DhcpFilter struct to the
// list DhcpFilter of NokiaConf_Configure_Groups_Group_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Filter_DhcpFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Filter) AppendDhcpFilter(v *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter) error {
	key := v.FilterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DhcpFilter == nil {
		t.DhcpFilter = make(map[NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_FilterId_Union]*NokiaConf_Configure_Groups_Group_Filter_DhcpFilter)
	}

	if _, ok := t.DhcpFilter[key]; ok {
		return fmt.Errorf("duplicate key for list DhcpFilter %v", key)
	}

	t.DhcpFilter[key] = v
	return nil
}

// NewDhcp6Filter creates a new entry in the Dhcp6Filter list of the
// NokiaConf_Configure_Groups_Group_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Filter) NewDhcp6Filter(FilterId NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_FilterId_Union) (*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcp6Filter == nil {
		t.Dhcp6Filter = make(map[NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_FilterId_Union]*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter)
	}

	key := FilterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dhcp6Filter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dhcp6Filter", key)
	}

	t.Dhcp6Filter[key] = &NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter{
		FilterId: FilterId,
	}

	return t.Dhcp6Filter[key], nil
}

// RenameDhcp6Filter renames an entry in the list Dhcp6Filter within
// the NokiaConf_Configure_Groups_Group_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Filter) RenameDhcp6Filter(oldK, newK NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_FilterId_Union) error {
	if _, ok := t.Dhcp6Filter[newK]; ok {
		return fmt.Errorf("key %v already exists in Dhcp6Filter", newK)
	}

	e, ok := t.Dhcp6Filter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dhcp6Filter", oldK)
	}
	e.FilterId = newK

	t.Dhcp6Filter[newK] = e
	delete(t.Dhcp6Filter, oldK)
	return nil
}

// GetOrCreateDhcp6Filter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetOrCreateDhcp6Filter(FilterId NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_FilterId_Union) *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter {

	key := FilterId

	if v, ok := t.Dhcp6Filter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDhcp6Filter(FilterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDhcp6Filter got unexpected error: %v", err))
	}
	return v
}

// GetDhcp6Filter retrieves the value with the specified key from
// the Dhcp6Filter map field of NokiaConf_Configure_Groups_Group_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetDhcp6Filter(FilterId NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_FilterId_Union) *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter {

	if t == nil {
		return nil
	}

	key := FilterId

	if lm, ok := t.Dhcp6Filter[key]; ok {
		return lm
	}
	return nil
}

// DeleteDhcp6Filter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Filter) DeleteDhcp6Filter(FilterId NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_FilterId_Union) {
	key := FilterId

	delete(t.Dhcp6Filter, key)
}

// AppendDhcp6Filter appends the supplied NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter struct to the
// list Dhcp6Filter of NokiaConf_Configure_Groups_Group_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Filter) AppendDhcp6Filter(v *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter) error {
	key := v.FilterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcp6Filter == nil {
		t.Dhcp6Filter = make(map[NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_FilterId_Union]*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter)
	}

	if _, ok := t.Dhcp6Filter[key]; ok {
		return fmt.Errorf("duplicate key for list Dhcp6Filter %v", key)
	}

	t.Dhcp6Filter[key] = v
	return nil
}

// NewGreTunnelTemplate creates a new entry in the GreTunnelTemplate list of the
// NokiaConf_Configure_Groups_Group_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Filter) NewGreTunnelTemplate(GreTunnelTemplateName string) (*NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GreTunnelTemplate == nil {
		t.GreTunnelTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate)
	}

	key := GreTunnelTemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GreTunnelTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GreTunnelTemplate", key)
	}

	t.GreTunnelTemplate[key] = &NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate{
		GreTunnelTemplateName: &GreTunnelTemplateName,
	}

	return t.GreTunnelTemplate[key], nil
}

// RenameGreTunnelTemplate renames an entry in the list GreTunnelTemplate within
// the NokiaConf_Configure_Groups_Group_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Filter) RenameGreTunnelTemplate(oldK, newK string) error {
	if _, ok := t.GreTunnelTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in GreTunnelTemplate", newK)
	}

	e, ok := t.GreTunnelTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GreTunnelTemplate", oldK)
	}
	e.GreTunnelTemplateName = &newK

	t.GreTunnelTemplate[newK] = e
	delete(t.GreTunnelTemplate, oldK)
	return nil
}

// GetOrCreateGreTunnelTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetOrCreateGreTunnelTemplate(GreTunnelTemplateName string) *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate {

	key := GreTunnelTemplateName

	if v, ok := t.GreTunnelTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGreTunnelTemplate(GreTunnelTemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGreTunnelTemplate got unexpected error: %v", err))
	}
	return v
}

// GetGreTunnelTemplate retrieves the value with the specified key from
// the GreTunnelTemplate map field of NokiaConf_Configure_Groups_Group_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetGreTunnelTemplate(GreTunnelTemplateName string) *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate {

	if t == nil {
		return nil
	}

	key := GreTunnelTemplateName

	if lm, ok := t.GreTunnelTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteGreTunnelTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Filter) DeleteGreTunnelTemplate(GreTunnelTemplateName string) {
	key := GreTunnelTemplateName

	delete(t.GreTunnelTemplate, key)
}

// AppendGreTunnelTemplate appends the supplied NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate struct to the
// list GreTunnelTemplate of NokiaConf_Configure_Groups_Group_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Filter) AppendGreTunnelTemplate(v *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate) error {
	if v.GreTunnelTemplateName == nil {
		return fmt.Errorf("invalid nil key received for GreTunnelTemplateName")
	}

	key := *v.GreTunnelTemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GreTunnelTemplate == nil {
		t.GreTunnelTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate)
	}

	if _, ok := t.GreTunnelTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list GreTunnelTemplate %v", key)
	}

	t.GreTunnelTemplate[key] = v
	return nil
}

// NewIpException creates a new entry in the IpException list of the
// NokiaConf_Configure_Groups_Group_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Filter) NewIpException(FilterName string) (*NokiaConf_Configure_Groups_Group_Filter_IpException, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpException == nil {
		t.IpException = make(map[string]*NokiaConf_Configure_Groups_Group_Filter_IpException)
	}

	key := FilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpException[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpException", key)
	}

	t.IpException[key] = &NokiaConf_Configure_Groups_Group_Filter_IpException{
		FilterName: &FilterName,
	}

	return t.IpException[key], nil
}

// RenameIpException renames an entry in the list IpException within
// the NokiaConf_Configure_Groups_Group_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Filter) RenameIpException(oldK, newK string) error {
	if _, ok := t.IpException[newK]; ok {
		return fmt.Errorf("key %v already exists in IpException", newK)
	}

	e, ok := t.IpException[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpException", oldK)
	}
	e.FilterName = &newK

	t.IpException[newK] = e
	delete(t.IpException, oldK)
	return nil
}

// GetOrCreateIpException retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetOrCreateIpException(FilterName string) *NokiaConf_Configure_Groups_Group_Filter_IpException {

	key := FilterName

	if v, ok := t.IpException[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpException(FilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpException got unexpected error: %v", err))
	}
	return v
}

// GetIpException retrieves the value with the specified key from
// the IpException map field of NokiaConf_Configure_Groups_Group_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetIpException(FilterName string) *NokiaConf_Configure_Groups_Group_Filter_IpException {

	if t == nil {
		return nil
	}

	key := FilterName

	if lm, ok := t.IpException[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpException deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Filter) DeleteIpException(FilterName string) {
	key := FilterName

	delete(t.IpException, key)
}

// AppendIpException appends the supplied NokiaConf_Configure_Groups_Group_Filter_IpException struct to the
// list IpException of NokiaConf_Configure_Groups_Group_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Filter_IpException already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Filter) AppendIpException(v *NokiaConf_Configure_Groups_Group_Filter_IpException) error {
	if v.FilterName == nil {
		return fmt.Errorf("invalid nil key received for FilterName")
	}

	key := *v.FilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpException == nil {
		t.IpException = make(map[string]*NokiaConf_Configure_Groups_Group_Filter_IpException)
	}

	if _, ok := t.IpException[key]; ok {
		return fmt.Errorf("duplicate key for list IpException %v", key)
	}

	t.IpException[key] = v
	return nil
}

// NewIpFilter creates a new entry in the IpFilter list of the
// NokiaConf_Configure_Groups_Group_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Filter) NewIpFilter(FilterName string) (*NokiaConf_Configure_Groups_Group_Filter_IpFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpFilter == nil {
		t.IpFilter = make(map[string]*NokiaConf_Configure_Groups_Group_Filter_IpFilter)
	}

	key := FilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpFilter", key)
	}

	t.IpFilter[key] = &NokiaConf_Configure_Groups_Group_Filter_IpFilter{
		FilterName: &FilterName,
	}

	return t.IpFilter[key], nil
}

// RenameIpFilter renames an entry in the list IpFilter within
// the NokiaConf_Configure_Groups_Group_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Filter) RenameIpFilter(oldK, newK string) error {
	if _, ok := t.IpFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in IpFilter", newK)
	}

	e, ok := t.IpFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpFilter", oldK)
	}
	e.FilterName = &newK

	t.IpFilter[newK] = e
	delete(t.IpFilter, oldK)
	return nil
}

// GetOrCreateIpFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetOrCreateIpFilter(FilterName string) *NokiaConf_Configure_Groups_Group_Filter_IpFilter {

	key := FilterName

	if v, ok := t.IpFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpFilter(FilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpFilter got unexpected error: %v", err))
	}
	return v
}

// GetIpFilter retrieves the value with the specified key from
// the IpFilter map field of NokiaConf_Configure_Groups_Group_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetIpFilter(FilterName string) *NokiaConf_Configure_Groups_Group_Filter_IpFilter {

	if t == nil {
		return nil
	}

	key := FilterName

	if lm, ok := t.IpFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Filter) DeleteIpFilter(FilterName string) {
	key := FilterName

	delete(t.IpFilter, key)
}

// AppendIpFilter appends the supplied NokiaConf_Configure_Groups_Group_Filter_IpFilter struct to the
// list IpFilter of NokiaConf_Configure_Groups_Group_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Filter_IpFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Filter) AppendIpFilter(v *NokiaConf_Configure_Groups_Group_Filter_IpFilter) error {
	if v.FilterName == nil {
		return fmt.Errorf("invalid nil key received for FilterName")
	}

	key := *v.FilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpFilter == nil {
		t.IpFilter = make(map[string]*NokiaConf_Configure_Groups_Group_Filter_IpFilter)
	}

	if _, ok := t.IpFilter[key]; ok {
		return fmt.Errorf("duplicate key for list IpFilter %v", key)
	}

	t.IpFilter[key] = v
	return nil
}

// NewIpv6Exception creates a new entry in the Ipv6Exception list of the
// NokiaConf_Configure_Groups_Group_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Filter) NewIpv6Exception(FilterName string) (*NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Exception == nil {
		t.Ipv6Exception = make(map[string]*NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception)
	}

	key := FilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6Exception[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6Exception", key)
	}

	t.Ipv6Exception[key] = &NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception{
		FilterName: &FilterName,
	}

	return t.Ipv6Exception[key], nil
}

// RenameIpv6Exception renames an entry in the list Ipv6Exception within
// the NokiaConf_Configure_Groups_Group_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Filter) RenameIpv6Exception(oldK, newK string) error {
	if _, ok := t.Ipv6Exception[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6Exception", newK)
	}

	e, ok := t.Ipv6Exception[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6Exception", oldK)
	}
	e.FilterName = &newK

	t.Ipv6Exception[newK] = e
	delete(t.Ipv6Exception, oldK)
	return nil
}

// GetOrCreateIpv6Exception retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetOrCreateIpv6Exception(FilterName string) *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception {

	key := FilterName

	if v, ok := t.Ipv6Exception[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6Exception(FilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6Exception got unexpected error: %v", err))
	}
	return v
}

// GetIpv6Exception retrieves the value with the specified key from
// the Ipv6Exception map field of NokiaConf_Configure_Groups_Group_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetIpv6Exception(FilterName string) *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception {

	if t == nil {
		return nil
	}

	key := FilterName

	if lm, ok := t.Ipv6Exception[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6Exception deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Filter) DeleteIpv6Exception(FilterName string) {
	key := FilterName

	delete(t.Ipv6Exception, key)
}

// AppendIpv6Exception appends the supplied NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception struct to the
// list Ipv6Exception of NokiaConf_Configure_Groups_Group_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Filter) AppendIpv6Exception(v *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception) error {
	if v.FilterName == nil {
		return fmt.Errorf("invalid nil key received for FilterName")
	}

	key := *v.FilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Exception == nil {
		t.Ipv6Exception = make(map[string]*NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception)
	}

	if _, ok := t.Ipv6Exception[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6Exception %v", key)
	}

	t.Ipv6Exception[key] = v
	return nil
}

// NewIpv6Filter creates a new entry in the Ipv6Filter list of the
// NokiaConf_Configure_Groups_Group_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Filter) NewIpv6Filter(FilterName string) (*NokiaConf_Configure_Groups_Group_Filter_Ipv6Filter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Filter == nil {
		t.Ipv6Filter = make(map[string]*NokiaConf_Configure_Groups_Group_Filter_Ipv6Filter)
	}

	key := FilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6Filter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6Filter", key)
	}

	t.Ipv6Filter[key] = &NokiaConf_Configure_Groups_Group_Filter_Ipv6Filter{
		FilterName: &FilterName,
	}

	return t.Ipv6Filter[key], nil
}

// RenameIpv6Filter renames an entry in the list Ipv6Filter within
// the NokiaConf_Configure_Groups_Group_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Filter) RenameIpv6Filter(oldK, newK string) error {
	if _, ok := t.Ipv6Filter[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6Filter", newK)
	}

	e, ok := t.Ipv6Filter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6Filter", oldK)
	}
	e.FilterName = &newK

	t.Ipv6Filter[newK] = e
	delete(t.Ipv6Filter, oldK)
	return nil
}

// GetOrCreateIpv6Filter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetOrCreateIpv6Filter(FilterName string) *NokiaConf_Configure_Groups_Group_Filter_Ipv6Filter {

	key := FilterName

	if v, ok := t.Ipv6Filter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6Filter(FilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6Filter got unexpected error: %v", err))
	}
	return v
}

// GetIpv6Filter retrieves the value with the specified key from
// the Ipv6Filter map field of NokiaConf_Configure_Groups_Group_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetIpv6Filter(FilterName string) *NokiaConf_Configure_Groups_Group_Filter_Ipv6Filter {

	if t == nil {
		return nil
	}

	key := FilterName

	if lm, ok := t.Ipv6Filter[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6Filter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Filter) DeleteIpv6Filter(FilterName string) {
	key := FilterName

	delete(t.Ipv6Filter, key)
}

// AppendIpv6Filter appends the supplied NokiaConf_Configure_Groups_Group_Filter_Ipv6Filter struct to the
// list Ipv6Filter of NokiaConf_Configure_Groups_Group_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Filter_Ipv6Filter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Filter) AppendIpv6Filter(v *NokiaConf_Configure_Groups_Group_Filter_Ipv6Filter) error {
	if v.FilterName == nil {
		return fmt.Errorf("invalid nil key received for FilterName")
	}

	key := *v.FilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Filter == nil {
		t.Ipv6Filter = make(map[string]*NokiaConf_Configure_Groups_Group_Filter_Ipv6Filter)
	}

	if _, ok := t.Ipv6Filter[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6Filter %v", key)
	}

	t.Ipv6Filter[key] = v
	return nil
}

// NewLog creates a new entry in the Log list of the
// NokiaConf_Configure_Groups_Group_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Filter) NewLog(LogId NokiaConf_Configure_Groups_Group_Filter_Log_LogId_Union) (*NokiaConf_Configure_Groups_Group_Filter_Log, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Log == nil {
		t.Log = make(map[NokiaConf_Configure_Groups_Group_Filter_Log_LogId_Union]*NokiaConf_Configure_Groups_Group_Filter_Log)
	}

	key := LogId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Log[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Log", key)
	}

	t.Log[key] = &NokiaConf_Configure_Groups_Group_Filter_Log{
		LogId: LogId,
	}

	return t.Log[key], nil
}

// RenameLog renames an entry in the list Log within
// the NokiaConf_Configure_Groups_Group_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Filter) RenameLog(oldK, newK NokiaConf_Configure_Groups_Group_Filter_Log_LogId_Union) error {
	if _, ok := t.Log[newK]; ok {
		return fmt.Errorf("key %v already exists in Log", newK)
	}

	e, ok := t.Log[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Log", oldK)
	}
	e.LogId = newK

	t.Log[newK] = e
	delete(t.Log, oldK)
	return nil
}

// GetOrCreateLog retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetOrCreateLog(LogId NokiaConf_Configure_Groups_Group_Filter_Log_LogId_Union) *NokiaConf_Configure_Groups_Group_Filter_Log {

	key := LogId

	if v, ok := t.Log[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLog(LogId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLog got unexpected error: %v", err))
	}
	return v
}

// GetLog retrieves the value with the specified key from
// the Log map field of NokiaConf_Configure_Groups_Group_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetLog(LogId NokiaConf_Configure_Groups_Group_Filter_Log_LogId_Union) *NokiaConf_Configure_Groups_Group_Filter_Log {

	if t == nil {
		return nil
	}

	key := LogId

	if lm, ok := t.Log[key]; ok {
		return lm
	}
	return nil
}

// DeleteLog deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Filter) DeleteLog(LogId NokiaConf_Configure_Groups_Group_Filter_Log_LogId_Union) {
	key := LogId

	delete(t.Log, key)
}

// AppendLog appends the supplied NokiaConf_Configure_Groups_Group_Filter_Log struct to the
// list Log of NokiaConf_Configure_Groups_Group_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Filter_Log already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Filter) AppendLog(v *NokiaConf_Configure_Groups_Group_Filter_Log) error {
	key := v.LogId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Log == nil {
		t.Log = make(map[NokiaConf_Configure_Groups_Group_Filter_Log_LogId_Union]*NokiaConf_Configure_Groups_Group_Filter_Log)
	}

	if _, ok := t.Log[key]; ok {
		return fmt.Errorf("duplicate key for list Log %v", key)
	}

	t.Log[key] = v
	return nil
}

// NewMacFilter creates a new entry in the MacFilter list of the
// NokiaConf_Configure_Groups_Group_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Filter) NewMacFilter(FilterName string) (*NokiaConf_Configure_Groups_Group_Filter_MacFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacFilter == nil {
		t.MacFilter = make(map[string]*NokiaConf_Configure_Groups_Group_Filter_MacFilter)
	}

	key := FilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MacFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MacFilter", key)
	}

	t.MacFilter[key] = &NokiaConf_Configure_Groups_Group_Filter_MacFilter{
		FilterName: &FilterName,
	}

	return t.MacFilter[key], nil
}

// RenameMacFilter renames an entry in the list MacFilter within
// the NokiaConf_Configure_Groups_Group_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Filter) RenameMacFilter(oldK, newK string) error {
	if _, ok := t.MacFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in MacFilter", newK)
	}

	e, ok := t.MacFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MacFilter", oldK)
	}
	e.FilterName = &newK

	t.MacFilter[newK] = e
	delete(t.MacFilter, oldK)
	return nil
}

// GetOrCreateMacFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetOrCreateMacFilter(FilterName string) *NokiaConf_Configure_Groups_Group_Filter_MacFilter {

	key := FilterName

	if v, ok := t.MacFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMacFilter(FilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMacFilter got unexpected error: %v", err))
	}
	return v
}

// GetMacFilter retrieves the value with the specified key from
// the MacFilter map field of NokiaConf_Configure_Groups_Group_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetMacFilter(FilterName string) *NokiaConf_Configure_Groups_Group_Filter_MacFilter {

	if t == nil {
		return nil
	}

	key := FilterName

	if lm, ok := t.MacFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteMacFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Filter) DeleteMacFilter(FilterName string) {
	key := FilterName

	delete(t.MacFilter, key)
}

// AppendMacFilter appends the supplied NokiaConf_Configure_Groups_Group_Filter_MacFilter struct to the
// list MacFilter of NokiaConf_Configure_Groups_Group_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Filter_MacFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Filter) AppendMacFilter(v *NokiaConf_Configure_Groups_Group_Filter_MacFilter) error {
	if v.FilterName == nil {
		return fmt.Errorf("invalid nil key received for FilterName")
	}

	key := *v.FilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacFilter == nil {
		t.MacFilter = make(map[string]*NokiaConf_Configure_Groups_Group_Filter_MacFilter)
	}

	if _, ok := t.MacFilter[key]; ok {
		return fmt.Errorf("duplicate key for list MacFilter %v", key)
	}

	t.MacFilter[key] = v
	return nil
}

// NewRedirectPolicy creates a new entry in the RedirectPolicy list of the
// NokiaConf_Configure_Groups_Group_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Filter) NewRedirectPolicy(RedirectPolicyName string) (*NokiaConf_Configure_Groups_Group_Filter_RedirectPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RedirectPolicy == nil {
		t.RedirectPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Filter_RedirectPolicy)
	}

	key := RedirectPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RedirectPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RedirectPolicy", key)
	}

	t.RedirectPolicy[key] = &NokiaConf_Configure_Groups_Group_Filter_RedirectPolicy{
		RedirectPolicyName: &RedirectPolicyName,
	}

	return t.RedirectPolicy[key], nil
}

// RenameRedirectPolicy renames an entry in the list RedirectPolicy within
// the NokiaConf_Configure_Groups_Group_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Filter) RenameRedirectPolicy(oldK, newK string) error {
	if _, ok := t.RedirectPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in RedirectPolicy", newK)
	}

	e, ok := t.RedirectPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RedirectPolicy", oldK)
	}
	e.RedirectPolicyName = &newK

	t.RedirectPolicy[newK] = e
	delete(t.RedirectPolicy, oldK)
	return nil
}

// GetOrCreateRedirectPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetOrCreateRedirectPolicy(RedirectPolicyName string) *NokiaConf_Configure_Groups_Group_Filter_RedirectPolicy {

	key := RedirectPolicyName

	if v, ok := t.RedirectPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRedirectPolicy(RedirectPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRedirectPolicy got unexpected error: %v", err))
	}
	return v
}

// GetRedirectPolicy retrieves the value with the specified key from
// the RedirectPolicy map field of NokiaConf_Configure_Groups_Group_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetRedirectPolicy(RedirectPolicyName string) *NokiaConf_Configure_Groups_Group_Filter_RedirectPolicy {

	if t == nil {
		return nil
	}

	key := RedirectPolicyName

	if lm, ok := t.RedirectPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteRedirectPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Filter) DeleteRedirectPolicy(RedirectPolicyName string) {
	key := RedirectPolicyName

	delete(t.RedirectPolicy, key)
}

// AppendRedirectPolicy appends the supplied NokiaConf_Configure_Groups_Group_Filter_RedirectPolicy struct to the
// list RedirectPolicy of NokiaConf_Configure_Groups_Group_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Filter_RedirectPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Filter) AppendRedirectPolicy(v *NokiaConf_Configure_Groups_Group_Filter_RedirectPolicy) error {
	if v.RedirectPolicyName == nil {
		return fmt.Errorf("invalid nil key received for RedirectPolicyName")
	}

	key := *v.RedirectPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RedirectPolicy == nil {
		t.RedirectPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Filter_RedirectPolicy)
	}

	if _, ok := t.RedirectPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list RedirectPolicy %v", key)
	}

	t.RedirectPolicy[key] = v
	return nil
}

// NewRedirectPolicyBinding creates a new entry in the RedirectPolicyBinding list of the
// NokiaConf_Configure_Groups_Group_Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Filter) NewRedirectPolicyBinding(BindingName string) (*NokiaConf_Configure_Groups_Group_Filter_RedirectPolicyBinding, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RedirectPolicyBinding == nil {
		t.RedirectPolicyBinding = make(map[string]*NokiaConf_Configure_Groups_Group_Filter_RedirectPolicyBinding)
	}

	key := BindingName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RedirectPolicyBinding[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RedirectPolicyBinding", key)
	}

	t.RedirectPolicyBinding[key] = &NokiaConf_Configure_Groups_Group_Filter_RedirectPolicyBinding{
		BindingName: &BindingName,
	}

	return t.RedirectPolicyBinding[key], nil
}

// RenameRedirectPolicyBinding renames an entry in the list RedirectPolicyBinding within
// the NokiaConf_Configure_Groups_Group_Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Filter) RenameRedirectPolicyBinding(oldK, newK string) error {
	if _, ok := t.RedirectPolicyBinding[newK]; ok {
		return fmt.Errorf("key %v already exists in RedirectPolicyBinding", newK)
	}

	e, ok := t.RedirectPolicyBinding[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RedirectPolicyBinding", oldK)
	}
	e.BindingName = &newK

	t.RedirectPolicyBinding[newK] = e
	delete(t.RedirectPolicyBinding, oldK)
	return nil
}

// GetOrCreateRedirectPolicyBinding retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetOrCreateRedirectPolicyBinding(BindingName string) *NokiaConf_Configure_Groups_Group_Filter_RedirectPolicyBinding {

	key := BindingName

	if v, ok := t.RedirectPolicyBinding[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRedirectPolicyBinding(BindingName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRedirectPolicyBinding got unexpected error: %v", err))
	}
	return v
}

// GetRedirectPolicyBinding retrieves the value with the specified key from
// the RedirectPolicyBinding map field of NokiaConf_Configure_Groups_Group_Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetRedirectPolicyBinding(BindingName string) *NokiaConf_Configure_Groups_Group_Filter_RedirectPolicyBinding {

	if t == nil {
		return nil
	}

	key := BindingName

	if lm, ok := t.RedirectPolicyBinding[key]; ok {
		return lm
	}
	return nil
}

// DeleteRedirectPolicyBinding deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Filter) DeleteRedirectPolicyBinding(BindingName string) {
	key := BindingName

	delete(t.RedirectPolicyBinding, key)
}

// AppendRedirectPolicyBinding appends the supplied NokiaConf_Configure_Groups_Group_Filter_RedirectPolicyBinding struct to the
// list RedirectPolicyBinding of NokiaConf_Configure_Groups_Group_Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Filter_RedirectPolicyBinding already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Filter) AppendRedirectPolicyBinding(v *NokiaConf_Configure_Groups_Group_Filter_RedirectPolicyBinding) error {
	if v.BindingName == nil {
		return fmt.Errorf("invalid nil key received for BindingName")
	}

	key := *v.BindingName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RedirectPolicyBinding == nil {
		t.RedirectPolicyBinding = make(map[string]*NokiaConf_Configure_Groups_Group_Filter_RedirectPolicyBinding)
	}

	if _, ok := t.RedirectPolicyBinding[key]; ok {
		return fmt.Errorf("duplicate key for list RedirectPolicyBinding %v", key)
	}

	t.RedirectPolicyBinding[key] = v
	return nil
}

// GetOrCreateMatchList retrieves the value of the MatchList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetOrCreateMatchList() *NokiaConf_Configure_Groups_Group_Filter_MatchList {
	if t.MatchList != nil {
		return t.MatchList
	}
	t.MatchList = &NokiaConf_Configure_Groups_Group_Filter_MatchList{}
	return t.MatchList
}

// GetOrCreateMdAutoId retrieves the value of the MdAutoId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetOrCreateMdAutoId() *NokiaConf_Configure_Groups_Group_Filter_MdAutoId {
	if t.MdAutoId != nil {
		return t.MdAutoId
	}
	t.MdAutoId = &NokiaConf_Configure_Groups_Group_Filter_MdAutoId{}
	return t.MdAutoId
}

// GetOrCreateSystemFilter retrieves the value of the SystemFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetOrCreateSystemFilter() *NokiaConf_Configure_Groups_Group_Filter_SystemFilter {
	if t.SystemFilter != nil {
		return t.SystemFilter
	}
	t.SystemFilter = &NokiaConf_Configure_Groups_Group_Filter_SystemFilter{}
	return t.SystemFilter
}

// GetMatchList returns the value of the MatchList struct pointer
// from NokiaConf_Configure_Groups_Group_Filter. If the receiver or the field MatchList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetMatchList() *NokiaConf_Configure_Groups_Group_Filter_MatchList {
	if t != nil && t.MatchList != nil {
		return t.MatchList
	}
	return nil
}

// GetMdAutoId returns the value of the MdAutoId struct pointer
// from NokiaConf_Configure_Groups_Group_Filter. If the receiver or the field MdAutoId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetMdAutoId() *NokiaConf_Configure_Groups_Group_Filter_MdAutoId {
	if t != nil && t.MdAutoId != nil {
		return t.MdAutoId
	}
	return nil
}

// GetSystemFilter returns the value of the SystemFilter struct pointer
// from NokiaConf_Configure_Groups_Group_Filter. If the receiver or the field SystemFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter) GetSystemFilter() *NokiaConf_Configure_Groups_Group_Filter_SystemFilter {
	if t != nil && t.SystemFilter != nil {
		return t.SystemFilter
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MatchList.PopulateDefaults()
	t.MdAutoId.PopulateDefaults()
	t.SystemFilter.PopulateDefaults()
	for _, e := range t.DhcpFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.Dhcp6Filter {
		e.PopulateDefaults()
	}
	for _, e := range t.GreTunnelTemplate {
		e.PopulateDefaults()
	}
	for _, e := range t.IpException {
		e.PopulateDefaults()
	}
	for _, e := range t.IpFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6Exception {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6Filter {
		e.PopulateDefaults()
	}
	for _, e := range t.Log {
		e.PopulateDefaults()
	}
	for _, e := range t.MacFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.RedirectPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.RedirectPolicyBinding {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter.
func (*NokiaConf_Configure_Groups_Group_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter represents the /nokia-conf/configure/groups/group/filter/dhcp6-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter struct {
	DefaultAction *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction                                                                     `path:"default-action" module:"nokia-conf" yangPresence:"true"`
	Description   *string                                                                                                                                `path:"description" module:"nokia-conf"`
	Entry         map[NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry `path:"entry" module:"nokia-conf"`
	FilterId      NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_FilterId_Union                                                                     `path:"filter-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter) NewEntry(EntryId NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter) GetEntry(EntryId NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter) AppendEntry(v *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter) GetOrCreateDefaultAction() *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction{}
	return t.DefaultAction
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter) GetDefaultAction() *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFilterId retrieves the value of the leaf FilterId from the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterId is set, it can
// safely use t.GetFilterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter) GetFilterId() NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_FilterId_Union {
	if t == nil || t.FilterId == nil {
		return nil
	}
	return t.FilterId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefaultAction.PopulateDefaults()
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"filter-id": t.FilterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter.
func (*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction represents the /nokia-conf/configure/groups/group/filter/dhcp6-filter/default-action YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction struct {
	BypassHostCreation *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation `path:"bypass-host-creation" module:"nokia-conf" yangPresence:"true"`
	Drop               YANGEmpty                                                                             `path:"drop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction) IsYANGGoStruct() {}

// GetOrCreateBypassHostCreation retrieves the value of the BypassHostCreation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction) GetOrCreateBypassHostCreation() *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation {
	if t.BypassHostCreation != nil {
		return t.BypassHostCreation
	}
	t.BypassHostCreation = &NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation{}
	return t.BypassHostCreation
}

// GetBypassHostCreation returns the value of the BypassHostCreation struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction. If the receiver or the field BypassHostCreation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction) GetBypassHostCreation() *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation {
	if t != nil && t.BypassHostCreation != nil {
		return t.BypassHostCreation
	}
	return nil
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BypassHostCreation.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction.
func (*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation represents the /nokia-conf/configure/groups/group/filter/dhcp6-filter/default-action/bypass-host-creation YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation struct {
	Na *bool `path:"na" module:"nokia-conf"`
	Pd *bool `path:"pd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation) IsYANGGoStruct() {
}

// GetNa retrieves the value of the leaf Na from the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Na is set, it can
// safely use t.GetNa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Na == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation) GetNa() bool {
	if t == nil || t.Na == nil {
		return true
	}
	return *t.Na
}

// GetPd retrieves the value of the leaf Pd from the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pd is set, it can
// safely use t.GetPd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation) GetPd() bool {
	if t == nil || t.Pd == nil {
		return true
	}
	return *t.Pd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Na == nil {
		var v bool = true
		t.Na = &v
	}
	if t.Pd == nil {
		var v bool = true
		t.Pd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation.
func (*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_DefaultAction_BypassHostCreation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry represents the /nokia-conf/configure/groups/group/filter/dhcp6-filter/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry struct {
	Action  *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action       `path:"action" module:"nokia-conf" yangPresence:"true"`
	EntryId NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Option  *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option       `path:"option" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action{}
	return t.Action
}

// GetOrCreateOption retrieves the value of the Option field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry) GetOrCreateOption() *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option {
	if t.Option != nil {
		return t.Option
	}
	t.Option = &NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option{}
	return t.Option
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry) GetAction() *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetOption returns the value of the Option struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry. If the receiver or the field Option is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry) GetOption() *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option {
	if t != nil && t.Option != nil {
		return t.Option
	}
	return nil
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Option.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry.
func (*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action represents the /nokia-conf/configure/groups/group/filter/dhcp6-filter/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action struct {
	BypassHostCreation *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation `path:"bypass-host-creation" module:"nokia-conf" yangPresence:"true"`
	Drop               YANGEmpty                                                                            `path:"drop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action) IsYANGGoStruct() {}

// GetOrCreateBypassHostCreation retrieves the value of the BypassHostCreation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action) GetOrCreateBypassHostCreation() *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation {
	if t.BypassHostCreation != nil {
		return t.BypassHostCreation
	}
	t.BypassHostCreation = &NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation{}
	return t.BypassHostCreation
}

// GetBypassHostCreation returns the value of the BypassHostCreation struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action. If the receiver or the field BypassHostCreation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action) GetBypassHostCreation() *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation {
	if t != nil && t.BypassHostCreation != nil {
		return t.BypassHostCreation
	}
	return nil
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BypassHostCreation.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation represents the /nokia-conf/configure/groups/group/filter/dhcp6-filter/entry/action/bypass-host-creation YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation struct {
	Na *bool `path:"na" module:"nokia-conf"`
	Pd *bool `path:"pd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation) IsYANGGoStruct() {
}

// GetNa retrieves the value of the leaf Na from the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Na is set, it can
// safely use t.GetNa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Na == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation) GetNa() bool {
	if t == nil || t.Na == nil {
		return true
	}
	return *t.Na
}

// GetPd retrieves the value of the leaf Pd from the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pd is set, it can
// safely use t.GetPd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation) GetPd() bool {
	if t == nil || t.Pd == nil {
		return true
	}
	return *t.Pd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Na == nil {
		var v bool = true
		t.Na = &v
	}
	if t.Pd == nil {
		var v bool = true
		t.Pd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation.
func (*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Action_BypassHostCreation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option represents the /nokia-conf/configure/groups/group/filter/dhcp6-filter/entry/option YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option struct {
	Absent  YANGEmpty                                                               `path:"absent" module:"nokia-conf"`
	Match   *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match `path:"match" module:"nokia-conf" yangPresence:"true"`
	Number  *int32                                                                  `path:"number" module:"nokia-conf"`
	Present YANGEmpty                                                               `path:"present" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option) IsYANGGoStruct() {}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option) GetMatch() *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAbsent retrieves the value of the leaf Absent from the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absent is set, it can
// safely use t.GetAbsent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option) GetAbsent() YANGEmpty {
	if t == nil || t.Absent == false {
		return false
	}
	return t.Absent
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option) GetNumber() int32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// GetPresent retrieves the value of the leaf Present from the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Present is set, it can
// safely use t.GetPresent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Present == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option) GetPresent() YANGEmpty {
	if t == nil || t.Present == false {
		return false
	}
	return t.Present
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Match.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option.
func (*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match represents the /nokia-conf/configure/groups/group/filter/dhcp6-filter/entry/option/match YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match struct {
	Exact  *bool   `path:"exact" module:"nokia-conf"`
	Hex    *string `path:"hex" module:"nokia-conf"`
	Invert *bool   `path:"invert" module:"nokia-conf"`
	String *string `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match) IsYANGGoStruct() {}

// GetExact retrieves the value of the leaf Exact from the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exact is set, it can
// safely use t.GetExact() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exact == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match) GetExact() bool {
	if t == nil || t.Exact == nil {
		return false
	}
	return *t.Exact
}

// GetHex retrieves the value of the leaf Hex from the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hex is set, it can
// safely use t.GetHex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match) GetHex() string {
	if t == nil || t.Hex == nil {
		return ""
	}
	return *t.Hex
}

// GetInvert retrieves the value of the leaf Invert from the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Invert is set, it can
// safely use t.GetInvert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Invert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match) GetInvert() bool {
	if t == nil || t.Invert == nil {
		return false
	}
	return *t.Invert
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Exact == nil {
		var v bool = false
		t.Exact = &v
	}
	if t.Invert == nil {
		var v bool = false
		t.Invert = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match.
func (*NokiaConf_Configure_Groups_Group_Filter_Dhcp6Filter_Entry_Option_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_DhcpFilter represents the /nokia-conf/configure/groups/group/filter/dhcp-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_DhcpFilter struct {
	DefaultAction *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_DefaultAction                                                                    `path:"default-action" module:"nokia-conf" yangPresence:"true"`
	Description   *string                                                                                                                              `path:"description" module:"nokia-conf"`
	Entry         map[NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry `path:"entry" module:"nokia-conf"`
	FilterId      NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_FilterId_Union                                                                    `path:"filter-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_DhcpFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_DhcpFilter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_Filter_DhcpFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter) NewEntry(EntryId NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter_DhcpFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_Filter_DhcpFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter) GetEntry(EntryId NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter_DhcpFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_Filter_DhcpFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter) AppendEntry(v *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter) GetOrCreateDefaultAction() *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_DefaultAction{}
	return t.DefaultAction
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_DhcpFilter. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter) GetDefaultAction() *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFilterId retrieves the value of the leaf FilterId from the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterId is set, it can
// safely use t.GetFilterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter) GetFilterId() NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_FilterId_Union {
	if t == nil || t.FilterId == nil {
		return nil
	}
	return t.FilterId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefaultAction.PopulateDefaults()
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"filter-id": t.FilterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_DhcpFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_DhcpFilter.
func (*NokiaConf_Configure_Groups_Group_Filter_DhcpFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_DefaultAction represents the /nokia-conf/configure/groups/group/filter/dhcp-filter/default-action YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_DefaultAction struct {
	BypassHostCreation YANGEmpty `path:"bypass-host-creation" module:"nokia-conf"`
	Drop               YANGEmpty `path:"drop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_DefaultAction) IsYANGGoStruct() {}

// GetBypassHostCreation retrieves the value of the leaf BypassHostCreation from the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BypassHostCreation is set, it can
// safely use t.GetBypassHostCreation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BypassHostCreation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_DefaultAction) GetBypassHostCreation() YANGEmpty {
	if t == nil || t.BypassHostCreation == false {
		return false
	}
	return t.BypassHostCreation
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_DefaultAction) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_DefaultAction.
func (*NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry represents the /nokia-conf/configure/groups/group/filter/dhcp-filter/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry struct {
	Action  *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Action       `path:"action" module:"nokia-conf" yangPresence:"true"`
	EntryId NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Option  *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option       `path:"option" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Action{}
	return t.Action
}

// GetOrCreateOption retrieves the value of the Option field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry) GetOrCreateOption() *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option {
	if t.Option != nil {
		return t.Option
	}
	t.Option = &NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option{}
	return t.Option
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry) GetAction() *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetOption returns the value of the Option struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry. If the receiver or the field Option is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry) GetOption() *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option {
	if t != nil && t.Option != nil {
		return t.Option
	}
	return nil
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Option.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry.
func (*NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Action represents the /nokia-conf/configure/groups/group/filter/dhcp-filter/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Action struct {
	BypassHostCreation YANGEmpty `path:"bypass-host-creation" module:"nokia-conf"`
	Drop               YANGEmpty `path:"drop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Action) IsYANGGoStruct() {}

// GetBypassHostCreation retrieves the value of the leaf BypassHostCreation from the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BypassHostCreation is set, it can
// safely use t.GetBypassHostCreation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BypassHostCreation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Action) GetBypassHostCreation() YANGEmpty {
	if t == nil || t.BypassHostCreation == false {
		return false
	}
	return t.BypassHostCreation
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Action) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option represents the /nokia-conf/configure/groups/group/filter/dhcp-filter/entry/option YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option struct {
	Absent  YANGEmpty                                                              `path:"absent" module:"nokia-conf"`
	Match   *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match `path:"match" module:"nokia-conf" yangPresence:"true"`
	Number  *int32                                                                 `path:"number" module:"nokia-conf"`
	Present YANGEmpty                                                              `path:"present" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option) IsYANGGoStruct() {}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option) GetMatch() *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAbsent retrieves the value of the leaf Absent from the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absent is set, it can
// safely use t.GetAbsent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option) GetAbsent() YANGEmpty {
	if t == nil || t.Absent == false {
		return false
	}
	return t.Absent
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option) GetNumber() int32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// GetPresent retrieves the value of the leaf Present from the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Present is set, it can
// safely use t.GetPresent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Present == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option) GetPresent() YANGEmpty {
	if t == nil || t.Present == false {
		return false
	}
	return t.Present
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Match.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option.
func (*NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match represents the /nokia-conf/configure/groups/group/filter/dhcp-filter/entry/option/match YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match struct {
	Exact  *bool   `path:"exact" module:"nokia-conf"`
	Hex    *string `path:"hex" module:"nokia-conf"`
	Invert *bool   `path:"invert" module:"nokia-conf"`
	String *string `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match) IsYANGGoStruct() {}

// GetExact retrieves the value of the leaf Exact from the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exact is set, it can
// safely use t.GetExact() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exact == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match) GetExact() bool {
	if t == nil || t.Exact == nil {
		return false
	}
	return *t.Exact
}

// GetHex retrieves the value of the leaf Hex from the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hex is set, it can
// safely use t.GetHex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match) GetHex() string {
	if t == nil || t.Hex == nil {
		return ""
	}
	return *t.Hex
}

// GetInvert retrieves the value of the leaf Invert from the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Invert is set, it can
// safely use t.GetInvert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Invert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match) GetInvert() bool {
	if t == nil || t.Invert == nil {
		return false
	}
	return *t.Invert
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Exact == nil {
		var v bool = false
		t.Exact = &v
	}
	if t.Invert == nil {
		var v bool = false
		t.Invert = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match.
func (*NokiaConf_Configure_Groups_Group_Filter_DhcpFilter_Entry_Option_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate represents the /nokia-conf/configure/groups/group/filter/gre-tunnel-template YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate struct {
	Description           *string                                                         `path:"description" module:"nokia-conf"`
	GreTunnelTemplateName *string                                                         `path:"gre-tunnel-template-name" module:"nokia-conf"`
	Ipv4                  *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4 `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4{}
	return t.Ipv4
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate) GetIpv4() *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGreTunnelTemplateName retrieves the value of the leaf GreTunnelTemplateName from the NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GreTunnelTemplateName is set, it can
// safely use t.GetGreTunnelTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GreTunnelTemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate) GetGreTunnelTemplateName() string {
	if t == nil || t.GreTunnelTemplateName == nil {
		return ""
	}
	return *t.GreTunnelTemplateName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GreTunnelTemplateName == nil {
		return nil, fmt.Errorf("nil value for key GreTunnelTemplateName")
	}

	return map[string]interface{}{
		"gre-tunnel-template-name": *t.GreTunnelTemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate.
func (*NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4 represents the /nokia-conf/configure/groups/group/filter/gre-tunnel-template/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4 struct {
	DestinationAddress map[string]*NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress `path:"destination-address" module:"nokia-conf"`
	GreKey             NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_GreKey_Union                   `path:"gre-key" module:"nokia-conf"`
	SkipTtlDecrement   *bool                                                                                         `path:"skip-ttl-decrement" module:"nokia-conf"`
	SourceAddress      *string                                                                                       `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4) IsYANGGoStruct() {}

// NewDestinationAddress creates a new entry in the DestinationAddress list of the
// NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4) NewDestinationAddress(Address string) (*NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationAddress == nil {
		t.DestinationAddress = make(map[string]*NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestinationAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestinationAddress", key)
	}

	t.DestinationAddress[key] = &NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress{
		Address: &Address,
	}

	return t.DestinationAddress[key], nil
}

// RenameDestinationAddress renames an entry in the list DestinationAddress within
// the NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4) RenameDestinationAddress(oldK, newK string) error {
	if _, ok := t.DestinationAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in DestinationAddress", newK)
	}

	e, ok := t.DestinationAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DestinationAddress", oldK)
	}
	e.Address = &newK

	t.DestinationAddress[newK] = e
	delete(t.DestinationAddress, oldK)
	return nil
}

// GetOrCreateDestinationAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4) GetOrCreateDestinationAddress(Address string) *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress {

	key := Address

	if v, ok := t.DestinationAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestinationAddress(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestinationAddress got unexpected error: %v", err))
	}
	return v
}

// GetDestinationAddress retrieves the value with the specified key from
// the DestinationAddress map field of NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4) GetDestinationAddress(Address string) *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.DestinationAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestinationAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4) DeleteDestinationAddress(Address string) {
	key := Address

	delete(t.DestinationAddress, key)
}

// AppendDestinationAddress appends the supplied NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress struct to the
// list DestinationAddress of NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4) AppendDestinationAddress(v *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationAddress == nil {
		t.DestinationAddress = make(map[string]*NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress)
	}

	if _, ok := t.DestinationAddress[key]; ok {
		return fmt.Errorf("duplicate key for list DestinationAddress %v", key)
	}

	t.DestinationAddress[key] = v
	return nil
}

// GetGreKey retrieves the value of the leaf GreKey from the NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GreKey is set, it can
// safely use t.GetGreKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GreKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4) GetGreKey() NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_GreKey_Union {
	if t == nil || t.GreKey == nil {
		return nil
	}
	return t.GreKey
}

// GetSkipTtlDecrement retrieves the value of the leaf SkipTtlDecrement from the NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SkipTtlDecrement is set, it can
// safely use t.GetSkipTtlDecrement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SkipTtlDecrement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4) GetSkipTtlDecrement() bool {
	if t == nil || t.SkipTtlDecrement == nil {
		return false
	}
	return *t.SkipTtlDecrement
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SkipTtlDecrement == nil {
		var v bool = false
		t.SkipTtlDecrement = &v
	}
	for _, e := range t.DestinationAddress {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress represents the /nokia-conf/configure/groups/group/filter/gre-tunnel-template/ipv4/destination-address YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress.
func (*NokiaConf_Configure_Groups_Group_Filter_GreTunnelTemplate_Ipv4_DestinationAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpException represents the /nokia-conf/configure/groups/group/filter/ip-exception YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpException struct {
	Description *string                                                                                                                                `path:"description" module:"nokia-conf"`
	Entry       map[NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry `path:"entry" module:"nokia-conf"`
	FilterId    *uint32                                                                                                                                `path:"filter-id" module:"nokia-conf"`
	FilterName  *string                                                                                                                                `path:"filter-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpException implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpException) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_Filter_IpException struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException) NewEntry(EntryId NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_Filter_IpException_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_Filter_IpException struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter_IpException. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_Filter_IpException. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException) GetEntry(EntryId NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter_IpException. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_Filter_IpException_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_Filter_IpException. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Filter_IpException_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException) AppendEntry(v *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Filter_IpException
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFilterId retrieves the value of the leaf FilterId from the NokiaConf_Configure_Groups_Group_Filter_IpException
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterId is set, it can
// safely use t.GetFilterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException) GetFilterId() uint32 {
	if t == nil || t.FilterId == nil {
		return 0
	}
	return *t.FilterId
}

// GetFilterName retrieves the value of the leaf FilterName from the NokiaConf_Configure_Groups_Group_Filter_IpException
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterName is set, it can
// safely use t.GetFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException) GetFilterName() string {
	if t == nil || t.FilterName == nil {
		return ""
	}
	return *t.FilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpException
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Filter_IpException struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FilterName == nil {
		return nil, fmt.Errorf("nil value for key FilterName")
	}

	return map[string]interface{}{
		"filter-name": *t.FilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpException"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpException.
func (*NokiaConf_Configure_Groups_Group_Filter_IpException) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpException_Entry represents the /nokia-conf/configure/groups/group/filter/ip-exception/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpException_Entry struct {
	Description *string                                                                 `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match        `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpException_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry) IsYANGGoStruct() {}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpException_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpException_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpException_Entry.
func (*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match represents the /nokia-conf/configure/groups/group/filter/ip-exception/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match struct {
	DstIp    *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstIp         `path:"dst-ip" module:"nokia-conf"`
	DstPort  *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort       `path:"dst-port" module:"nokia-conf"`
	Icmp     *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Icmp          `path:"icmp" module:"nokia-conf"`
	Protocol NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Protocol_Union `path:"protocol" module:"nokia-conf"`
	SrcIp    *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcIp         `path:"src-ip" module:"nokia-conf"`
	SrcPort  *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort       `path:"src-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match) GetOrCreateIcmp() *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Icmp{}
	return t.Icmp
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match) GetDstIp() *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match) GetIcmp() *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match) GetSrcIp() *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match) GetProtocol() NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstIp represents the /nokia-conf/configure/groups/group/filter/ip-exception/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstIp struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstIp.
func (*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/filter/ip-exception/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort struct {
	Eq    *uint16                                                                        `path:"eq" module:"nokia-conf"`
	Gt    *uint16                                                                        `path:"gt" module:"nokia-conf"`
	Lt    *uint16                                                                        `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort_Range represents the /nokia-conf/configure/groups/group/filter/ip-exception/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Icmp represents the /nokia-conf/configure/groups/group/filter/ip-exception/entry/match/icmp YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Icmp struct {
	Code *int32 `path:"code" module:"nokia-conf"`
	Type *int32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Icmp) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Icmp) GetCode() int32 {
	if t == nil || t.Code == nil {
		return 0
	}
	return *t.Code
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Icmp) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Icmp.
func (*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcIp represents the /nokia-conf/configure/groups/group/filter/ip-exception/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcIp struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort represents the /nokia-conf/configure/groups/group/filter/ip-exception/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort struct {
	Eq    *uint16                                                                        `path:"eq" module:"nokia-conf"`
	Gt    *uint16                                                                        `path:"gt" module:"nokia-conf"`
	Lt    *uint16                                                                        `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/groups/group/filter/ip-exception/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Groups_Group_Filter_IpException_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter represents the /nokia-conf/configure/groups/group/filter/ip-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter struct {
	ChainToSystemFilter *bool                                                                                                                            `path:"chain-to-system-filter" module:"nokia-conf"`
	DefaultAction       E_NokiaTypesFilter_FilterDefaultAction                                                                                           `path:"default-action" module:"nokia-conf"`
	Description         *string                                                                                                                          `path:"description" module:"nokia-conf"`
	Embed               *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed                                                                          `path:"embed" module:"nokia-conf"`
	Entry               map[NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry `path:"entry" module:"nokia-conf"`
	FilterId            *uint32                                                                                                                          `path:"filter-id" module:"nokia-conf"`
	FilterName          *string                                                                                                                          `path:"filter-name" module:"nokia-conf"`
	Scope               E_NokiaTypesFilter_FilterScope                                                                                                   `path:"scope" module:"nokia-conf"`
	SubscriberMgmt      *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt                                                                 `path:"subscriber-mgmt" module:"nokia-conf"`
	Type                E_NokiaConf_Configure_Groups_Group_Filter_IpFilter_Type                                                                          `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_Filter_IpFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) NewEntry(EntryId NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_Filter_IpFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter_IpFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_Filter_IpFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) GetEntry(EntryId NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter_IpFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_Filter_IpFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) AppendEntry(v *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetOrCreateEmbed retrieves the value of the Embed field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) GetOrCreateEmbed() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed {
	if t.Embed != nil {
		return t.Embed
	}
	t.Embed = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed{}
	return t.Embed
}

// GetOrCreateSubscriberMgmt retrieves the value of the SubscriberMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) GetOrCreateSubscriberMgmt() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt {
	if t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	t.SubscriberMgmt = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt{}
	return t.SubscriberMgmt
}

// GetEmbed returns the value of the Embed struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter. If the receiver or the field Embed is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) GetEmbed() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed {
	if t != nil && t.Embed != nil {
		return t.Embed
	}
	return nil
}

// GetSubscriberMgmt returns the value of the SubscriberMgmt struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter. If the receiver or the field SubscriberMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) GetSubscriberMgmt() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt {
	if t != nil && t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	return nil
}

// GetChainToSystemFilter retrieves the value of the leaf ChainToSystemFilter from the NokiaConf_Configure_Groups_Group_Filter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChainToSystemFilter is set, it can
// safely use t.GetChainToSystemFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChainToSystemFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) GetChainToSystemFilter() bool {
	if t == nil || t.ChainToSystemFilter == nil {
		return false
	}
	return *t.ChainToSystemFilter
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_Groups_Group_Filter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) GetDefaultAction() E_NokiaTypesFilter_FilterDefaultAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesFilter_FilterDefaultAction_drop
	}
	return t.DefaultAction
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Filter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFilterId retrieves the value of the leaf FilterId from the NokiaConf_Configure_Groups_Group_Filter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterId is set, it can
// safely use t.GetFilterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) GetFilterId() uint32 {
	if t == nil || t.FilterId == nil {
		return 0
	}
	return *t.FilterId
}

// GetFilterName retrieves the value of the leaf FilterName from the NokiaConf_Configure_Groups_Group_Filter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterName is set, it can
// safely use t.GetFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) GetFilterName() string {
	if t == nil || t.FilterName == nil {
		return ""
	}
	return *t.FilterName
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Groups_Group_Filter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) GetScope() E_NokiaTypesFilter_FilterScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesFilter_FilterScope_template
	}
	return t.Scope
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Filter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) GetType() E_NokiaConf_Configure_Groups_Group_Filter_IpFilter_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_Filter_IpFilter_Type_normal
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ChainToSystemFilter == nil {
		var v bool = false
		t.ChainToSystemFilter = &v
	}
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesFilter_FilterDefaultAction_drop
	}
	if t.Scope == 0 {
		t.Scope = NokiaTypesFilter_FilterScope_template
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_Filter_IpFilter_Type_normal
	}
	t.Embed.PopulateDefaults()
	t.SubscriberMgmt.PopulateDefaults()
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Filter_IpFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FilterName == nil {
		return nil, fmt.Errorf("nil value for key FilterName")
	}

	return map[string]interface{}{
		"filter-name": *t.FilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed represents the /nokia-conf/configure/groups/group/filter/ip-filter/embed YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed struct {
	Filter   map[NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter_Key]*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter              `path:"filter" module:"nokia-conf"`
	Flowspec map[NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec_Offset_Union]*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec `path:"flowspec" module:"nokia-conf"`
	Openflow map[NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow_Key]*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow          `path:"openflow" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter_Key represents the key for list Filter of element /nokia-conf/configure/groups/group/filter/ip-filter/embed.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter_Key struct {
	Name   string                                                                     `path:"name"`
	Offset NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter_Offset_Union `path:"offset"`
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow_Key represents the key for list Openflow of element /nokia-conf/configure/groups/group/filter/ip-filter/embed.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow_Key struct {
	OfSwitch string                                                                       `path:"of-switch"`
	Offset   NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow_Offset_Union `path:"offset"`
}

// NewFilter creates a new entry in the Filter list of the
// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) NewFilter(Name string, Offset NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter_Offset_Union) (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Filter == nil {
		t.Filter = make(map[NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter_Key]*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter)
	}

	key := NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter_Key{
		Name:   Name,
		Offset: Offset,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Filter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Filter", key)
	}

	t.Filter[key] = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter{
		Name:   &Name,
		Offset: Offset,
	}

	return t.Filter[key], nil
}

// RenameFilter renames an entry in the list Filter within
// the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) RenameFilter(oldK, newK NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter_Key) error {
	if _, ok := t.Filter[newK]; ok {
		return fmt.Errorf("key %v already exists in Filter", newK)
	}

	e, ok := t.Filter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Filter", oldK)
	}
	e.Name = &newK.Name
	e.Offset = newK.Offset

	t.Filter[newK] = e
	delete(t.Filter, oldK)
	return nil
}

// GetOrCreateFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) GetOrCreateFilter(Name string, Offset NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter_Offset_Union) *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter {

	key := NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter_Key{
		Name:   Name,
		Offset: Offset,
	}

	if v, ok := t.Filter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFilter(Name, Offset)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFilter got unexpected error: %v", err))
	}
	return v
}

// GetFilter retrieves the value with the specified key from
// the Filter map field of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) GetFilter(Name string, Offset NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter_Offset_Union) *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter_Key{
		Name:   Name,
		Offset: Offset,
	}

	if lm, ok := t.Filter[key]; ok {
		return lm
	}
	return nil
}

// DeleteFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) DeleteFilter(Name string, Offset NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter_Offset_Union) {
	key := NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter_Key{
		Name:   Name,
		Offset: Offset,
	}

	delete(t.Filter, key)
}

// AppendFilter appends the supplied NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter struct to the
// list Filter of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) AppendFilter(v *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key for Name")
	}

	key := NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter_Key{
		Name:   *v.Name,
		Offset: v.Offset,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Filter == nil {
		t.Filter = make(map[NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter_Key]*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter)
	}

	if _, ok := t.Filter[key]; ok {
		return fmt.Errorf("duplicate key for list Filter %v", key)
	}

	t.Filter[key] = v
	return nil
}

// NewFlowspec creates a new entry in the Flowspec list of the
// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) NewFlowspec(Offset NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec_Offset_Union) (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flowspec == nil {
		t.Flowspec = make(map[NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec_Offset_Union]*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec)
	}

	key := Offset

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Flowspec[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Flowspec", key)
	}

	t.Flowspec[key] = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec{
		Offset: Offset,
	}

	return t.Flowspec[key], nil
}

// RenameFlowspec renames an entry in the list Flowspec within
// the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) RenameFlowspec(oldK, newK NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec_Offset_Union) error {
	if _, ok := t.Flowspec[newK]; ok {
		return fmt.Errorf("key %v already exists in Flowspec", newK)
	}

	e, ok := t.Flowspec[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Flowspec", oldK)
	}
	e.Offset = newK

	t.Flowspec[newK] = e
	delete(t.Flowspec, oldK)
	return nil
}

// GetOrCreateFlowspec retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) GetOrCreateFlowspec(Offset NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec_Offset_Union) *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec {

	key := Offset

	if v, ok := t.Flowspec[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlowspec(Offset)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlowspec got unexpected error: %v", err))
	}
	return v
}

// GetFlowspec retrieves the value with the specified key from
// the Flowspec map field of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) GetFlowspec(Offset NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec_Offset_Union) *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec {

	if t == nil {
		return nil
	}

	key := Offset

	if lm, ok := t.Flowspec[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlowspec deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) DeleteFlowspec(Offset NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec_Offset_Union) {
	key := Offset

	delete(t.Flowspec, key)
}

// AppendFlowspec appends the supplied NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec struct to the
// list Flowspec of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) AppendFlowspec(v *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec) error {
	key := v.Offset

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flowspec == nil {
		t.Flowspec = make(map[NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec_Offset_Union]*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec)
	}

	if _, ok := t.Flowspec[key]; ok {
		return fmt.Errorf("duplicate key for list Flowspec %v", key)
	}

	t.Flowspec[key] = v
	return nil
}

// NewOpenflow creates a new entry in the Openflow list of the
// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) NewOpenflow(OfSwitch string, Offset NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow_Offset_Union) (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Openflow == nil {
		t.Openflow = make(map[NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow_Key]*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow)
	}

	key := NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow_Key{
		OfSwitch: OfSwitch,
		Offset:   Offset,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Openflow[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Openflow", key)
	}

	t.Openflow[key] = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow{
		OfSwitch: &OfSwitch,
		Offset:   Offset,
	}

	return t.Openflow[key], nil
}

// RenameOpenflow renames an entry in the list Openflow within
// the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) RenameOpenflow(oldK, newK NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow_Key) error {
	if _, ok := t.Openflow[newK]; ok {
		return fmt.Errorf("key %v already exists in Openflow", newK)
	}

	e, ok := t.Openflow[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Openflow", oldK)
	}
	e.OfSwitch = &newK.OfSwitch
	e.Offset = newK.Offset

	t.Openflow[newK] = e
	delete(t.Openflow, oldK)
	return nil
}

// GetOrCreateOpenflow retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) GetOrCreateOpenflow(OfSwitch string, Offset NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow_Offset_Union) *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow {

	key := NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow_Key{
		OfSwitch: OfSwitch,
		Offset:   Offset,
	}

	if v, ok := t.Openflow[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOpenflow(OfSwitch, Offset)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOpenflow got unexpected error: %v", err))
	}
	return v
}

// GetOpenflow retrieves the value with the specified key from
// the Openflow map field of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) GetOpenflow(OfSwitch string, Offset NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow_Offset_Union) *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow_Key{
		OfSwitch: OfSwitch,
		Offset:   Offset,
	}

	if lm, ok := t.Openflow[key]; ok {
		return lm
	}
	return nil
}

// DeleteOpenflow deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) DeleteOpenflow(OfSwitch string, Offset NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow_Offset_Union) {
	key := NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow_Key{
		OfSwitch: OfSwitch,
		Offset:   Offset,
	}

	delete(t.Openflow, key)
}

// AppendOpenflow appends the supplied NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow struct to the
// list Openflow of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) AppendOpenflow(v *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow) error {
	if v.OfSwitch == nil {
		return fmt.Errorf("invalid nil key for OfSwitch")
	}

	key := NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow_Key{
		OfSwitch: *v.OfSwitch,
		Offset:   v.Offset,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Openflow == nil {
		t.Openflow = make(map[NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow_Key]*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow)
	}

	if _, ok := t.Openflow[key]; ok {
		return fmt.Errorf("duplicate key for list Openflow %v", key)
	}

	t.Openflow[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Filter {
		e.PopulateDefaults()
	}
	for _, e := range t.Flowspec {
		e.PopulateDefaults()
	}
	for _, e := range t.Openflow {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter represents the /nokia-conf/configure/groups/group/filter/ip-filter/embed/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter struct {
	AdminState E_NokiaTypesSros_AdminState                                                `path:"admin-state" module:"nokia-conf"`
	Name       *string                                                                    `path:"name" module:"nokia-conf"`
	Offset     NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter_Offset_Union `path:"offset" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOffset retrieves the value of the leaf Offset from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Offset is set, it can
// safely use t.GetOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Offset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter) GetOffset() NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter_Offset_Union {
	if t == nil || t.Offset == nil {
		return nil
	}
	return t.Offset
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name":   *t.Name,
		"offset": t.Offset,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec represents the /nokia-conf/configure/groups/group/filter/ip-filter/embed/flowspec YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec struct {
	AdminState     E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	Group          *uint32                                                                      `path:"group" module:"nokia-conf"`
	Offset         NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec_Offset_Union `path:"offset" module:"nokia-conf"`
	RouterInstance *string                                                                      `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec) GetGroup() uint32 {
	if t == nil || t.Group == nil {
		return 0
	}
	return *t.Group
}

// GetOffset retrieves the value of the leaf Offset from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Offset is set, it can
// safely use t.GetOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Offset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec) GetOffset() NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec_Offset_Union {
	if t == nil || t.Offset == nil {
		return nil
	}
	return t.Offset
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"offset": t.Offset,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Flowspec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow represents the /nokia-conf/configure/groups/group/filter/ip-filter/embed/openflow YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow struct {
	AdminState E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	Grt        YANGEmpty                                                                    `path:"grt" module:"nokia-conf"`
	OfSwitch   *string                                                                      `path:"of-switch" module:"nokia-conf"`
	Offset     NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow_Offset_Union `path:"offset" module:"nokia-conf"`
	Sap        *string                                                                      `path:"sap" module:"nokia-conf"`
	System     YANGEmpty                                                                    `path:"system" module:"nokia-conf"`
	Vpls       *string                                                                      `path:"vpls" module:"nokia-conf"`
	Vprn       *string                                                                      `path:"vprn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetGrt retrieves the value of the leaf Grt from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Grt is set, it can
// safely use t.GetGrt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Grt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow) GetGrt() YANGEmpty {
	if t == nil || t.Grt == false {
		return false
	}
	return t.Grt
}

// GetOfSwitch retrieves the value of the leaf OfSwitch from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OfSwitch is set, it can
// safely use t.GetOfSwitch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OfSwitch == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow) GetOfSwitch() string {
	if t == nil || t.OfSwitch == nil {
		return ""
	}
	return *t.OfSwitch
}

// GetOffset retrieves the value of the leaf Offset from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Offset is set, it can
// safely use t.GetOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Offset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow) GetOffset() NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow_Offset_Union {
	if t == nil || t.Offset == nil {
		return nil
	}
	return t.Offset
}

// GetSap retrieves the value of the leaf Sap from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sap is set, it can
// safely use t.GetSap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow) GetSap() string {
	if t == nil || t.Sap == nil {
		return ""
	}
	return *t.Sap
}

// GetSystem retrieves the value of the leaf System from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if System is set, it can
// safely use t.GetSystem() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.System == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow) GetSystem() YANGEmpty {
	if t == nil || t.System == false {
		return false
	}
	return t.System
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// GetVprn retrieves the value of the leaf Vprn from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vprn is set, it can
// safely use t.GetVprn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vprn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow) GetVprn() string {
	if t == nil || t.Vprn == nil {
		return ""
	}
	return *t.Vprn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow) ΛListKeyMap() (map[string]interface{}, error) {
	if t.OfSwitch == nil {
		return nil, fmt.Errorf("nil value for key OfSwitch")
	}

	return map[string]interface{}{
		"of-switch": *t.OfSwitch,
		"offset":    t.Offset,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Embed_Openflow) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry struct {
	Action                *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action          `path:"action" module:"nokia-conf" yangPresence:"true"`
	CollectStats          *bool                                                                   `path:"collect-stats" module:"nokia-conf"`
	Description           *string                                                                 `path:"description" module:"nokia-conf"`
	EgressPbr             E_NokiaTypesFilter_FilterEgressPbr                                      `path:"egress-pbr" module:"nokia-conf"`
	EntryId               NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_EntryId_Union    `path:"entry-id" module:"nokia-conf"`
	FilterSample          *bool                                                                   `path:"filter-sample" module:"nokia-conf"`
	InterfaceSample       *bool                                                                   `path:"interface-sample" module:"nokia-conf"`
	Log                   *uint32                                                                 `path:"log" module:"nokia-conf"`
	Match                 *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match           `path:"match" module:"nokia-conf"`
	PbrDownActionOverride E_NokiaTypesFilter_FilterPbrDownActionOvr                               `path:"pbr-down-action-override" module:"nokia-conf"`
	SampleProfile         *uint32                                                                 `path:"sample-profile" module:"nokia-conf"`
	StickyDest            NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_StickyDest_Union `path:"sticky-dest" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) GetAction() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEgressPbr retrieves the value of the leaf EgressPbr from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressPbr is set, it can
// safely use t.GetEgressPbr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressPbr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) GetEgressPbr() E_NokiaTypesFilter_FilterEgressPbr {
	if t == nil || t.EgressPbr == 0 {
		return 0
	}
	return t.EgressPbr
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetFilterSample retrieves the value of the leaf FilterSample from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterSample is set, it can
// safely use t.GetFilterSample() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterSample == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) GetFilterSample() bool {
	if t == nil || t.FilterSample == nil {
		return false
	}
	return *t.FilterSample
}

// GetInterfaceSample retrieves the value of the leaf InterfaceSample from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceSample is set, it can
// safely use t.GetInterfaceSample() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceSample == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) GetInterfaceSample() bool {
	if t == nil || t.InterfaceSample == nil {
		return true
	}
	return *t.InterfaceSample
}

// GetLog retrieves the value of the leaf Log from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) GetLog() uint32 {
	if t == nil || t.Log == nil {
		return 0
	}
	return *t.Log
}

// GetPbrDownActionOverride retrieves the value of the leaf PbrDownActionOverride from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PbrDownActionOverride is set, it can
// safely use t.GetPbrDownActionOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PbrDownActionOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) GetPbrDownActionOverride() E_NokiaTypesFilter_FilterPbrDownActionOvr {
	if t == nil || t.PbrDownActionOverride == 0 {
		return 0
	}
	return t.PbrDownActionOverride
}

// GetSampleProfile retrieves the value of the leaf SampleProfile from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleProfile is set, it can
// safely use t.GetSampleProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) GetSampleProfile() uint32 {
	if t == nil || t.SampleProfile == nil {
		return 0
	}
	return *t.SampleProfile
}

// GetStickyDest retrieves the value of the leaf StickyDest from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StickyDest is set, it can
// safely use t.GetStickyDest() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StickyDest == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) GetStickyDest() NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_StickyDest_Union {
	if t == nil || t.StickyDest == nil {
		return nil
	}
	return t.StickyDest
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.FilterSample == nil {
		var v bool = false
		t.FilterSample = &v
	}
	if t.InterfaceSample == nil {
		var v bool = true
		t.InterfaceSample = &v
	}
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action struct {
	Accept           YANGEmpty                                                                   `path:"accept" module:"nokia-conf"`
	AcceptWhen       *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen   `path:"accept-when" module:"nokia-conf" yangPresence:"true"`
	Drop             YANGEmpty                                                                   `path:"drop" module:"nokia-conf"`
	DropWhen         *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen     `path:"drop-when" module:"nokia-conf" yangPresence:"true"`
	Fc               E_NokiaTypesSros_FcName                                                     `path:"fc" module:"nokia-conf"`
	Forward          *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward      `path:"forward" module:"nokia-conf"`
	GtpLocalBreakout YANGEmpty                                                                   `path:"gtp-local-breakout" module:"nokia-conf"`
	HttpRedirect     *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect `path:"http-redirect" module:"nokia-conf" yangPresence:"true"`
	IgnoreMatch      YANGEmpty                                                                   `path:"ignore-match" module:"nokia-conf"`
	L2AwareNatBypass *bool                                                                       `path:"l2-aware-nat-bypass" module:"nokia-conf"`
	Nat              *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Nat          `path:"nat" module:"nokia-conf" yangPresence:"true"`
	RateLimit        *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit    `path:"rate-limit" module:"nokia-conf" yangPresence:"true"`
	Reassemble       YANGEmpty                                                                   `path:"reassemble" module:"nokia-conf"`
	Remark           *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Remark       `path:"remark" module:"nokia-conf" yangPresence:"true"`
	Secondary        *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary    `path:"secondary" module:"nokia-conf" yangPresence:"true"`
	TcpMssAdjust     YANGEmpty                                                                   `path:"tcp-mss-adjust" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) IsYANGGoStruct() {}

// GetOrCreateAcceptWhen retrieves the value of the AcceptWhen field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetOrCreateAcceptWhen() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen {
	if t.AcceptWhen != nil {
		return t.AcceptWhen
	}
	t.AcceptWhen = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen{}
	return t.AcceptWhen
}

// GetOrCreateDropWhen retrieves the value of the DropWhen field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetOrCreateDropWhen() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen {
	if t.DropWhen != nil {
		return t.DropWhen
	}
	t.DropWhen = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen{}
	return t.DropWhen
}

// GetOrCreateForward retrieves the value of the Forward field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetOrCreateForward() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward {
	if t.Forward != nil {
		return t.Forward
	}
	t.Forward = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward{}
	return t.Forward
}

// GetOrCreateHttpRedirect retrieves the value of the HttpRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetOrCreateHttpRedirect() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect {
	if t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	t.HttpRedirect = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect{}
	return t.HttpRedirect
}

// GetOrCreateNat retrieves the value of the Nat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetOrCreateNat() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Nat {
	if t.Nat != nil {
		return t.Nat
	}
	t.Nat = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Nat{}
	return t.Nat
}

// GetOrCreateRateLimit retrieves the value of the RateLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetOrCreateRateLimit() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit {
	if t.RateLimit != nil {
		return t.RateLimit
	}
	t.RateLimit = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit{}
	return t.RateLimit
}

// GetOrCreateRemark retrieves the value of the Remark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetOrCreateRemark() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Remark {
	if t.Remark != nil {
		return t.Remark
	}
	t.Remark = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Remark{}
	return t.Remark
}

// GetOrCreateSecondary retrieves the value of the Secondary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetOrCreateSecondary() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary {
	if t.Secondary != nil {
		return t.Secondary
	}
	t.Secondary = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary{}
	return t.Secondary
}

// GetAcceptWhen returns the value of the AcceptWhen struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action. If the receiver or the field AcceptWhen is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetAcceptWhen() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen {
	if t != nil && t.AcceptWhen != nil {
		return t.AcceptWhen
	}
	return nil
}

// GetDropWhen returns the value of the DropWhen struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action. If the receiver or the field DropWhen is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetDropWhen() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen {
	if t != nil && t.DropWhen != nil {
		return t.DropWhen
	}
	return nil
}

// GetForward returns the value of the Forward struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action. If the receiver or the field Forward is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetForward() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward {
	if t != nil && t.Forward != nil {
		return t.Forward
	}
	return nil
}

// GetHttpRedirect returns the value of the HttpRedirect struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action. If the receiver or the field HttpRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetHttpRedirect() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect {
	if t != nil && t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	return nil
}

// GetNat returns the value of the Nat struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action. If the receiver or the field Nat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetNat() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Nat {
	if t != nil && t.Nat != nil {
		return t.Nat
	}
	return nil
}

// GetRateLimit returns the value of the RateLimit struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action. If the receiver or the field RateLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetRateLimit() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit {
	if t != nil && t.RateLimit != nil {
		return t.RateLimit
	}
	return nil
}

// GetRemark returns the value of the Remark struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action. If the receiver or the field Remark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetRemark() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Remark {
	if t != nil && t.Remark != nil {
		return t.Remark
	}
	return nil
}

// GetSecondary returns the value of the Secondary struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action. If the receiver or the field Secondary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetSecondary() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary {
	if t != nil && t.Secondary != nil {
		return t.Secondary
	}
	return nil
}

// GetAccept retrieves the value of the leaf Accept from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Accept is set, it can
// safely use t.GetAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Accept == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetAccept() YANGEmpty {
	if t == nil || t.Accept == false {
		return false
	}
	return t.Accept
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetGtpLocalBreakout retrieves the value of the leaf GtpLocalBreakout from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GtpLocalBreakout is set, it can
// safely use t.GetGtpLocalBreakout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GtpLocalBreakout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetGtpLocalBreakout() YANGEmpty {
	if t == nil || t.GtpLocalBreakout == false {
		return false
	}
	return t.GtpLocalBreakout
}

// GetIgnoreMatch retrieves the value of the leaf IgnoreMatch from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreMatch is set, it can
// safely use t.GetIgnoreMatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreMatch == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetIgnoreMatch() YANGEmpty {
	if t == nil || t.IgnoreMatch == false {
		return false
	}
	return t.IgnoreMatch
}

// GetL2AwareNatBypass retrieves the value of the leaf L2AwareNatBypass from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2AwareNatBypass is set, it can
// safely use t.GetL2AwareNatBypass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2AwareNatBypass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetL2AwareNatBypass() bool {
	if t == nil || t.L2AwareNatBypass == nil {
		return false
	}
	return *t.L2AwareNatBypass
}

// GetReassemble retrieves the value of the leaf Reassemble from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reassemble is set, it can
// safely use t.GetReassemble() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reassemble == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetReassemble() YANGEmpty {
	if t == nil || t.Reassemble == false {
		return false
	}
	return t.Reassemble
}

// GetTcpMssAdjust retrieves the value of the leaf TcpMssAdjust from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMssAdjust is set, it can
// safely use t.GetTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) GetTcpMssAdjust() YANGEmpty {
	if t == nil || t.TcpMssAdjust == false {
		return false
	}
	return t.TcpMssAdjust
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.L2AwareNatBypass == nil {
		var v bool = false
		t.L2AwareNatBypass = &v
	}
	t.AcceptWhen.PopulateDefaults()
	t.DropWhen.PopulateDefaults()
	t.Forward.PopulateDefaults()
	t.HttpRedirect.PopulateDefaults()
	t.Nat.PopulateDefaults()
	t.RateLimit.PopulateDefaults()
	t.Remark.PopulateDefaults()
	t.Secondary.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/accept-when YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen struct {
	Pattern *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern `path:"pattern" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen) IsYANGGoStruct() {}

// GetOrCreatePattern retrieves the value of the Pattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen) GetOrCreatePattern() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern {
	if t.Pattern != nil {
		return t.Pattern
	}
	t.Pattern = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern{}
	return t.Pattern
}

// GetPattern returns the value of the Pattern struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen. If the receiver or the field Pattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen) GetPattern() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern {
	if t != nil && t.Pattern != nil {
		return t.Pattern
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Pattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/accept-when/pattern YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern struct {
	Expression  *string                                                                                       `path:"expression" module:"nokia-conf"`
	Mask        *string                                                                                       `path:"mask" module:"nokia-conf"`
	OffsetType  E_NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern_OffsetType `path:"offset-type" module:"nokia-conf"`
	OffsetValue *int32                                                                                        `path:"offset-value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern) IsYANGGoStruct() {
}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetOffsetType retrieves the value of the leaf OffsetType from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OffsetType is set, it can
// safely use t.GetOffsetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OffsetType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern) GetOffsetType() E_NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern_OffsetType {
	if t == nil || t.OffsetType == 0 {
		return 0
	}
	return t.OffsetType
}

// GetOffsetValue retrieves the value of the leaf OffsetValue from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OffsetValue is set, it can
// safely use t.GetOffsetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OffsetValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern) GetOffsetValue() int32 {
	if t == nil || t.OffsetValue == nil {
		return 0
	}
	return *t.OffsetValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_AcceptWhen_Pattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/drop-when YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen struct {
	ExtractedTraffic YANGEmpty                                                                            `path:"extracted-traffic" module:"nokia-conf"`
	PacketLength     *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength `path:"packet-length" module:"nokia-conf" yangPresence:"true"`
	Pattern          *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern      `path:"pattern" module:"nokia-conf" yangPresence:"true"`
	Ttl              *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl          `path:"ttl" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen) IsYANGGoStruct() {}

// GetOrCreatePacketLength retrieves the value of the PacketLength field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen) GetOrCreatePacketLength() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength {
	if t.PacketLength != nil {
		return t.PacketLength
	}
	t.PacketLength = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength{}
	return t.PacketLength
}

// GetOrCreatePattern retrieves the value of the Pattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen) GetOrCreatePattern() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern {
	if t.Pattern != nil {
		return t.Pattern
	}
	t.Pattern = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern{}
	return t.Pattern
}

// GetOrCreateTtl retrieves the value of the Ttl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen) GetOrCreateTtl() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl {
	if t.Ttl != nil {
		return t.Ttl
	}
	t.Ttl = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl{}
	return t.Ttl
}

// GetPacketLength returns the value of the PacketLength struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen. If the receiver or the field PacketLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen) GetPacketLength() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength {
	if t != nil && t.PacketLength != nil {
		return t.PacketLength
	}
	return nil
}

// GetPattern returns the value of the Pattern struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen. If the receiver or the field Pattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen) GetPattern() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern {
	if t != nil && t.Pattern != nil {
		return t.Pattern
	}
	return nil
}

// GetTtl returns the value of the Ttl struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen. If the receiver or the field Ttl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen) GetTtl() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl {
	if t != nil && t.Ttl != nil {
		return t.Ttl
	}
	return nil
}

// GetExtractedTraffic retrieves the value of the leaf ExtractedTraffic from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtractedTraffic is set, it can
// safely use t.GetExtractedTraffic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtractedTraffic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen) GetExtractedTraffic() YANGEmpty {
	if t == nil || t.ExtractedTraffic == false {
		return false
	}
	return t.ExtractedTraffic
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PacketLength.PopulateDefaults()
	t.Pattern.PopulateDefaults()
	t.Ttl.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/drop-when/packet-length YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength struct {
	Eq    *int32                                                                                     `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                                     `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                                     `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) GetRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/drop-when/packet-length/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_PacketLength_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/drop-when/pattern YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern struct {
	Expression  *string                                                                                     `path:"expression" module:"nokia-conf"`
	Mask        *string                                                                                     `path:"mask" module:"nokia-conf"`
	OffsetType  E_NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern_OffsetType `path:"offset-type" module:"nokia-conf"`
	OffsetValue *int32                                                                                      `path:"offset-value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern) IsYANGGoStruct() {
}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetOffsetType retrieves the value of the leaf OffsetType from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OffsetType is set, it can
// safely use t.GetOffsetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OffsetType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern) GetOffsetType() E_NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern_OffsetType {
	if t == nil || t.OffsetType == 0 {
		return 0
	}
	return t.OffsetType
}

// GetOffsetValue retrieves the value of the leaf OffsetValue from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OffsetValue is set, it can
// safely use t.GetOffsetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OffsetValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern) GetOffsetValue() int32 {
	if t == nil || t.OffsetValue == nil {
		return 0
	}
	return *t.OffsetValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Pattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/drop-when/ttl YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl struct {
	Eq    *int32                                                                            `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                            `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                            `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl) GetRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/drop-when/ttl/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_DropWhen_Ttl_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/forward YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward struct {
	BondingConnection *uint32                                                                           `path:"bonding-connection" module:"nokia-conf"`
	EsiL2             *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL2      `path:"esi-l2" module:"nokia-conf" yangPresence:"true"`
	EsiL3             *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3      `path:"esi-l3" module:"nokia-conf" yangPresence:"true"`
	GreTunnel         *string                                                                           `path:"gre-tunnel" module:"nokia-conf"`
	Lsp               *string                                                                           `path:"lsp" module:"nokia-conf"`
	MplsPolicy        *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_MplsPolicy `path:"mpls-policy" module:"nokia-conf" yangPresence:"true"`
	NextHop           *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop    `path:"next-hop" module:"nokia-conf" yangPresence:"true"`
	RedirectPolicy    *string                                                                           `path:"redirect-policy" module:"nokia-conf"`
	RouterInstance    *string                                                                           `path:"router-instance" module:"nokia-conf"`
	Sap               *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sap        `path:"sap" module:"nokia-conf" yangPresence:"true"`
	Sdp               *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sdp        `path:"sdp" module:"nokia-conf" yangPresence:"true"`
	SrtePolicy        *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_SrtePolicy `path:"srte-policy" module:"nokia-conf" yangPresence:"true"`
	VprnTarget        *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget `path:"vprn-target" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) IsYANGGoStruct() {}

// GetOrCreateEsiL2 retrieves the value of the EsiL2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetOrCreateEsiL2() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL2 {
	if t.EsiL2 != nil {
		return t.EsiL2
	}
	t.EsiL2 = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL2{}
	return t.EsiL2
}

// GetOrCreateEsiL3 retrieves the value of the EsiL3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetOrCreateEsiL3() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3 {
	if t.EsiL3 != nil {
		return t.EsiL3
	}
	t.EsiL3 = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3{}
	return t.EsiL3
}

// GetOrCreateMplsPolicy retrieves the value of the MplsPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetOrCreateMplsPolicy() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_MplsPolicy {
	if t.MplsPolicy != nil {
		return t.MplsPolicy
	}
	t.MplsPolicy = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_MplsPolicy{}
	return t.MplsPolicy
}

// GetOrCreateNextHop retrieves the value of the NextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetOrCreateNextHop() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop {
	if t.NextHop != nil {
		return t.NextHop
	}
	t.NextHop = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop{}
	return t.NextHop
}

// GetOrCreateSap retrieves the value of the Sap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetOrCreateSap() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sap {
	if t.Sap != nil {
		return t.Sap
	}
	t.Sap = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sap{}
	return t.Sap
}

// GetOrCreateSdp retrieves the value of the Sdp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetOrCreateSdp() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sdp {
	if t.Sdp != nil {
		return t.Sdp
	}
	t.Sdp = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sdp{}
	return t.Sdp
}

// GetOrCreateSrtePolicy retrieves the value of the SrtePolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetOrCreateSrtePolicy() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_SrtePolicy {
	if t.SrtePolicy != nil {
		return t.SrtePolicy
	}
	t.SrtePolicy = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_SrtePolicy{}
	return t.SrtePolicy
}

// GetOrCreateVprnTarget retrieves the value of the VprnTarget field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetOrCreateVprnTarget() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget {
	if t.VprnTarget != nil {
		return t.VprnTarget
	}
	t.VprnTarget = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget{}
	return t.VprnTarget
}

// GetEsiL2 returns the value of the EsiL2 struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward. If the receiver or the field EsiL2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetEsiL2() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL2 {
	if t != nil && t.EsiL2 != nil {
		return t.EsiL2
	}
	return nil
}

// GetEsiL3 returns the value of the EsiL3 struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward. If the receiver or the field EsiL3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetEsiL3() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3 {
	if t != nil && t.EsiL3 != nil {
		return t.EsiL3
	}
	return nil
}

// GetMplsPolicy returns the value of the MplsPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward. If the receiver or the field MplsPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetMplsPolicy() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_MplsPolicy {
	if t != nil && t.MplsPolicy != nil {
		return t.MplsPolicy
	}
	return nil
}

// GetNextHop returns the value of the NextHop struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward. If the receiver or the field NextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetNextHop() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop {
	if t != nil && t.NextHop != nil {
		return t.NextHop
	}
	return nil
}

// GetSap returns the value of the Sap struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward. If the receiver or the field Sap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetSap() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sap {
	if t != nil && t.Sap != nil {
		return t.Sap
	}
	return nil
}

// GetSdp returns the value of the Sdp struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward. If the receiver or the field Sdp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetSdp() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sdp {
	if t != nil && t.Sdp != nil {
		return t.Sdp
	}
	return nil
}

// GetSrtePolicy returns the value of the SrtePolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward. If the receiver or the field SrtePolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetSrtePolicy() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_SrtePolicy {
	if t != nil && t.SrtePolicy != nil {
		return t.SrtePolicy
	}
	return nil
}

// GetVprnTarget returns the value of the VprnTarget struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward. If the receiver or the field VprnTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetVprnTarget() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget {
	if t != nil && t.VprnTarget != nil {
		return t.VprnTarget
	}
	return nil
}

// GetBondingConnection retrieves the value of the leaf BondingConnection from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BondingConnection is set, it can
// safely use t.GetBondingConnection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BondingConnection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetBondingConnection() uint32 {
	if t == nil || t.BondingConnection == nil {
		return 0
	}
	return *t.BondingConnection
}

// GetGreTunnel retrieves the value of the leaf GreTunnel from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GreTunnel is set, it can
// safely use t.GetGreTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GreTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetGreTunnel() string {
	if t == nil || t.GreTunnel == nil {
		return ""
	}
	return *t.GreTunnel
}

// GetLsp retrieves the value of the leaf Lsp from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lsp is set, it can
// safely use t.GetLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetLsp() string {
	if t == nil || t.Lsp == nil {
		return ""
	}
	return *t.Lsp
}

// GetRedirectPolicy retrieves the value of the leaf RedirectPolicy from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedirectPolicy is set, it can
// safely use t.GetRedirectPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedirectPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetRedirectPolicy() string {
	if t == nil || t.RedirectPolicy == nil {
		return ""
	}
	return *t.RedirectPolicy
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EsiL2.PopulateDefaults()
	t.EsiL3.PopulateDefaults()
	t.MplsPolicy.PopulateDefaults()
	t.NextHop.PopulateDefaults()
	t.Sap.PopulateDefaults()
	t.Sdp.PopulateDefaults()
	t.SrtePolicy.PopulateDefaults()
	t.VprnTarget.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL2 represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/forward/esi-l2 YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL2 struct {
	EsiValue *string `path:"esi-value" module:"nokia-conf"`
	Vpls     *string `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL2) IsYANGGoStruct() {
}

// GetEsiValue retrieves the value of the leaf EsiValue from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsiValue is set, it can
// safely use t.GetEsiValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsiValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL2) GetEsiValue() string {
	if t == nil || t.EsiValue == nil {
		return ""
	}
	return *t.EsiValue
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL2) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL2.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3 represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/forward/esi-l3 YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3 struct {
	EsiValue     *string `path:"esi-value" module:"nokia-conf"`
	SfIp         *string `path:"sf-ip" module:"nokia-conf"`
	VasInterface *string `path:"vas-interface" module:"nokia-conf"`
	Vprn         *string `path:"vprn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3) IsYANGGoStruct() {
}

// GetEsiValue retrieves the value of the leaf EsiValue from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsiValue is set, it can
// safely use t.GetEsiValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsiValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3) GetEsiValue() string {
	if t == nil || t.EsiValue == nil {
		return ""
	}
	return *t.EsiValue
}

// GetSfIp retrieves the value of the leaf SfIp from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfIp is set, it can
// safely use t.GetSfIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3) GetSfIp() string {
	if t == nil || t.SfIp == nil {
		return ""
	}
	return *t.SfIp
}

// GetVasInterface retrieves the value of the leaf VasInterface from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VasInterface is set, it can
// safely use t.GetVasInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VasInterface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3) GetVasInterface() string {
	if t == nil || t.VasInterface == nil {
		return ""
	}
	return *t.VasInterface
}

// GetVprn retrieves the value of the leaf Vprn from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vprn is set, it can
// safely use t.GetVprn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vprn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3) GetVprn() string {
	if t == nil || t.Vprn == nil {
		return ""
	}
	return *t.Vprn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_EsiL3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_MplsPolicy represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/forward/mpls-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_MplsPolicy struct {
	Endpoint *string `path:"endpoint" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_MplsPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_MplsPolicy) IsYANGGoStruct() {
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_MplsPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_MplsPolicy) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_MplsPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_MplsPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_MplsPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_MplsPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_MplsPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_MplsPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_MplsPolicy.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_MplsPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/forward/next-hop YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop struct {
	InterfaceName *string                                                                                `path:"interface-name" module:"nokia-conf"`
	NhIp          *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp    `path:"nh-ip" module:"nokia-conf" yangPresence:"true"`
	NhIpVrf       *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf `path:"nh-ip-vrf" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop) IsYANGGoStruct() {
}

// GetOrCreateNhIp retrieves the value of the NhIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop) GetOrCreateNhIp() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp {
	if t.NhIp != nil {
		return t.NhIp
	}
	t.NhIp = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp{}
	return t.NhIp
}

// GetOrCreateNhIpVrf retrieves the value of the NhIpVrf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop) GetOrCreateNhIpVrf() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf {
	if t.NhIpVrf != nil {
		return t.NhIpVrf
	}
	t.NhIpVrf = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf{}
	return t.NhIpVrf
}

// GetNhIp returns the value of the NhIp struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop. If the receiver or the field NhIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop) GetNhIp() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp {
	if t != nil && t.NhIp != nil {
		return t.NhIp
	}
	return nil
}

// GetNhIpVrf returns the value of the NhIpVrf struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop. If the receiver or the field NhIpVrf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop) GetNhIpVrf() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf {
	if t != nil && t.NhIpVrf != nil {
		return t.NhIpVrf
	}
	return nil
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NhIp.PopulateDefaults()
	t.NhIpVrf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/forward/next-hop/nh-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp struct {
	Address  *string `path:"address" module:"nokia-conf"`
	Indirect *bool   `path:"indirect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIndirect retrieves the value of the leaf Indirect from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Indirect is set, it can
// safely use t.GetIndirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Indirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp) GetIndirect() bool {
	if t == nil || t.Indirect == nil {
		return false
	}
	return *t.Indirect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Indirect == nil {
		var v bool = false
		t.Indirect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/forward/next-hop/nh-ip-vrf YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Indirect       *bool   `path:"indirect" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIndirect retrieves the value of the leaf Indirect from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Indirect is set, it can
// safely use t.GetIndirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Indirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf) GetIndirect() bool {
	if t == nil || t.Indirect == nil {
		return false
	}
	return *t.Indirect
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Indirect == nil {
		var v bool = false
		t.Indirect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_NextHop_NhIpVrf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sap represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/forward/sap YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sap struct {
	SapId *string `path:"sap-id" module:"nokia-conf"`
	Vpls  *string `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sap) IsYANGGoStruct() {}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sap) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sap.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sdp represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/forward/sdp YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sdp struct {
	SdpBindId *string `path:"sdp-bind-id" module:"nokia-conf"`
	Vpls      *string `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sdp) IsYANGGoStruct() {}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sdp) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sdp.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_Sdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_SrtePolicy represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/forward/srte-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_SrtePolicy struct {
	Color    *int64  `path:"color" module:"nokia-conf"`
	Endpoint *string `path:"endpoint" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_SrtePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_SrtePolicy) IsYANGGoStruct() {
}

// GetColor retrieves the value of the leaf Color from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_SrtePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_SrtePolicy) GetColor() int64 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_SrtePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_SrtePolicy) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_SrtePolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_SrtePolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_SrtePolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_SrtePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_SrtePolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_SrtePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_SrtePolicy.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_SrtePolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/forward/vprn-target YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget struct {
	AdvPrefix *string `path:"adv-prefix" module:"nokia-conf"`
	BgpNh     *string `path:"bgp-nh" module:"nokia-conf"`
	Lsp       *string `path:"lsp" module:"nokia-conf"`
	Vprn      *string `path:"vprn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget) IsYANGGoStruct() {
}

// GetAdvPrefix retrieves the value of the leaf AdvPrefix from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvPrefix is set, it can
// safely use t.GetAdvPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget) GetAdvPrefix() string {
	if t == nil || t.AdvPrefix == nil {
		return ""
	}
	return *t.AdvPrefix
}

// GetBgpNh retrieves the value of the leaf BgpNh from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpNh is set, it can
// safely use t.GetBgpNh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpNh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget) GetBgpNh() string {
	if t == nil || t.BgpNh == nil {
		return ""
	}
	return *t.BgpNh
}

// GetLsp retrieves the value of the leaf Lsp from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lsp is set, it can
// safely use t.GetLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget) GetLsp() string {
	if t == nil || t.Lsp == nil {
		return ""
	}
	return *t.Lsp
}

// GetVprn retrieves the value of the leaf Vprn from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vprn is set, it can
// safely use t.GetVprn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vprn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget) GetVprn() string {
	if t == nil || t.Vprn == nil {
		return ""
	}
	return *t.Vprn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Forward_VprnTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/http-redirect YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect struct {
	AllowOverride *bool                                                                                `path:"allow-override" module:"nokia-conf"`
	Url           NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect_Url_Union `path:"url" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect) IsYANGGoStruct() {}

// GetAllowOverride retrieves the value of the leaf AllowOverride from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowOverride is set, it can
// safely use t.GetAllowOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect) GetAllowOverride() bool {
	if t == nil || t.AllowOverride == nil {
		return false
	}
	return *t.AllowOverride
}

// GetUrl retrieves the value of the leaf Url from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Url is set, it can
// safely use t.GetUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Url == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect) GetUrl() NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect_Url_Union {
	if t == nil || t.Url == nil {
		return nil
	}
	return t.Url
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowOverride == nil {
		var v bool = false
		t.AllowOverride = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_HttpRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Nat represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/nat YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Nat struct {
	NatPolicy *string `path:"nat-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Nat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Nat) IsYANGGoStruct() {}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Nat) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Nat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Nat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Nat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Nat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Nat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Nat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Nat.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Nat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/rate-limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit struct {
	ExtractedTraffic YANGEmpty                                                                             `path:"extracted-traffic" module:"nokia-conf"`
	PacketLength     *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength `path:"packet-length" module:"nokia-conf" yangPresence:"true"`
	Pattern          *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern      `path:"pattern" module:"nokia-conf" yangPresence:"true"`
	Pir              NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pir_Union     `path:"pir" module:"nokia-conf"`
	Ttl              *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl          `path:"ttl" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit) IsYANGGoStruct() {}

// GetOrCreatePacketLength retrieves the value of the PacketLength field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit) GetOrCreatePacketLength() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength {
	if t.PacketLength != nil {
		return t.PacketLength
	}
	t.PacketLength = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength{}
	return t.PacketLength
}

// GetOrCreatePattern retrieves the value of the Pattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit) GetOrCreatePattern() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern {
	if t.Pattern != nil {
		return t.Pattern
	}
	t.Pattern = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern{}
	return t.Pattern
}

// GetOrCreateTtl retrieves the value of the Ttl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit) GetOrCreateTtl() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl {
	if t.Ttl != nil {
		return t.Ttl
	}
	t.Ttl = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl{}
	return t.Ttl
}

// GetPacketLength returns the value of the PacketLength struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit. If the receiver or the field PacketLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit) GetPacketLength() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength {
	if t != nil && t.PacketLength != nil {
		return t.PacketLength
	}
	return nil
}

// GetPattern returns the value of the Pattern struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit. If the receiver or the field Pattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit) GetPattern() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern {
	if t != nil && t.Pattern != nil {
		return t.Pattern
	}
	return nil
}

// GetTtl returns the value of the Ttl struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit. If the receiver or the field Ttl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit) GetTtl() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl {
	if t != nil && t.Ttl != nil {
		return t.Ttl
	}
	return nil
}

// GetExtractedTraffic retrieves the value of the leaf ExtractedTraffic from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtractedTraffic is set, it can
// safely use t.GetExtractedTraffic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtractedTraffic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit) GetExtractedTraffic() YANGEmpty {
	if t == nil || t.ExtractedTraffic == false {
		return false
	}
	return t.ExtractedTraffic
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit) GetPir() NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PacketLength.PopulateDefaults()
	t.Pattern.PopulateDefaults()
	t.Ttl.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/rate-limit/packet-length YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength struct {
	Eq    *int32                                                                                      `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                                      `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                                      `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) GetRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/rate-limit/packet-length/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_PacketLength_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/rate-limit/pattern YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern struct {
	Expression  *string                                                                                      `path:"expression" module:"nokia-conf"`
	Mask        *string                                                                                      `path:"mask" module:"nokia-conf"`
	OffsetType  E_NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern_OffsetType `path:"offset-type" module:"nokia-conf"`
	OffsetValue *int32                                                                                       `path:"offset-value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern) IsYANGGoStruct() {
}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetOffsetType retrieves the value of the leaf OffsetType from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OffsetType is set, it can
// safely use t.GetOffsetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OffsetType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern) GetOffsetType() E_NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern_OffsetType {
	if t == nil || t.OffsetType == 0 {
		return 0
	}
	return t.OffsetType
}

// GetOffsetValue retrieves the value of the leaf OffsetValue from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OffsetValue is set, it can
// safely use t.GetOffsetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OffsetValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern) GetOffsetValue() int32 {
	if t == nil || t.OffsetValue == nil {
		return 0
	}
	return *t.OffsetValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Pattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/rate-limit/ttl YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl struct {
	Eq    *int32                                                                             `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                             `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                             `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl) GetRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/rate-limit/ttl/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_RateLimit_Ttl_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Remark represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/remark YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Remark struct {
	Dscp E_NokiaTypesQos_DscpName `path:"dscp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Remark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Remark) IsYANGGoStruct() {}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Remark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Remark) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Remark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Remark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Remark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Remark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Remark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Remark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Remark.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Remark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/secondary YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary struct {
	Forward *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward `path:"forward" module:"nokia-conf"`
	Remark  *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Remark  `path:"remark" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary) IsYANGGoStruct() {}

// GetOrCreateForward retrieves the value of the Forward field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary) GetOrCreateForward() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward {
	if t.Forward != nil {
		return t.Forward
	}
	t.Forward = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward{}
	return t.Forward
}

// GetOrCreateRemark retrieves the value of the Remark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary) GetOrCreateRemark() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Remark {
	if t.Remark != nil {
		return t.Remark
	}
	t.Remark = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Remark{}
	return t.Remark
}

// GetForward returns the value of the Forward struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary. If the receiver or the field Forward is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary) GetForward() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward {
	if t != nil && t.Forward != nil {
		return t.Forward
	}
	return nil
}

// GetRemark returns the value of the Remark struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary. If the receiver or the field Remark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary) GetRemark() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Remark {
	if t != nil && t.Remark != nil {
		return t.Remark
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Forward.PopulateDefaults()
	t.Remark.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/secondary/forward YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward struct {
	NextHop    *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop    `path:"next-hop" module:"nokia-conf" yangPresence:"true"`
	Sap        *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap        `path:"sap" module:"nokia-conf" yangPresence:"true"`
	Sdp        *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp        `path:"sdp" module:"nokia-conf" yangPresence:"true"`
	VprnTarget *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget `path:"vprn-target" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward) IsYANGGoStruct() {
}

// GetOrCreateNextHop retrieves the value of the NextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward) GetOrCreateNextHop() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop {
	if t.NextHop != nil {
		return t.NextHop
	}
	t.NextHop = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop{}
	return t.NextHop
}

// GetOrCreateSap retrieves the value of the Sap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward) GetOrCreateSap() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap {
	if t.Sap != nil {
		return t.Sap
	}
	t.Sap = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap{}
	return t.Sap
}

// GetOrCreateSdp retrieves the value of the Sdp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward) GetOrCreateSdp() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp {
	if t.Sdp != nil {
		return t.Sdp
	}
	t.Sdp = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp{}
	return t.Sdp
}

// GetOrCreateVprnTarget retrieves the value of the VprnTarget field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward) GetOrCreateVprnTarget() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget {
	if t.VprnTarget != nil {
		return t.VprnTarget
	}
	t.VprnTarget = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget{}
	return t.VprnTarget
}

// GetNextHop returns the value of the NextHop struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward. If the receiver or the field NextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward) GetNextHop() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop {
	if t != nil && t.NextHop != nil {
		return t.NextHop
	}
	return nil
}

// GetSap returns the value of the Sap struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward. If the receiver or the field Sap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward) GetSap() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap {
	if t != nil && t.Sap != nil {
		return t.Sap
	}
	return nil
}

// GetSdp returns the value of the Sdp struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward. If the receiver or the field Sdp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward) GetSdp() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp {
	if t != nil && t.Sdp != nil {
		return t.Sdp
	}
	return nil
}

// GetVprnTarget returns the value of the VprnTarget struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward. If the receiver or the field VprnTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward) GetVprnTarget() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget {
	if t != nil && t.VprnTarget != nil {
		return t.VprnTarget
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NextHop.PopulateDefaults()
	t.Sap.PopulateDefaults()
	t.Sdp.PopulateDefaults()
	t.VprnTarget.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/secondary/forward/next-hop YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop struct {
	NhIpVrf *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf `path:"nh-ip-vrf" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop) IsYANGGoStruct() {
}

// GetOrCreateNhIpVrf retrieves the value of the NhIpVrf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop) GetOrCreateNhIpVrf() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf {
	if t.NhIpVrf != nil {
		return t.NhIpVrf
	}
	t.NhIpVrf = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf{}
	return t.NhIpVrf
}

// GetNhIpVrf returns the value of the NhIpVrf struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop. If the receiver or the field NhIpVrf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop) GetNhIpVrf() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf {
	if t != nil && t.NhIpVrf != nil {
		return t.NhIpVrf
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NhIpVrf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/secondary/forward/next-hop/nh-ip-vrf YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Indirect       *bool   `path:"indirect" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIndirect retrieves the value of the leaf Indirect from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Indirect is set, it can
// safely use t.GetIndirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Indirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) GetIndirect() bool {
	if t == nil || t.Indirect == nil {
		return false
	}
	return *t.Indirect
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Indirect == nil {
		var v bool = false
		t.Indirect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_NextHop_NhIpVrf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/secondary/forward/sap YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap struct {
	SapId *string `path:"sap-id" module:"nokia-conf"`
	Vpls  *string `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap) IsYANGGoStruct() {
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/secondary/forward/sdp YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp struct {
	SdpBindId *string `path:"sdp-bind-id" module:"nokia-conf"`
	Vpls      *string `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp) IsYANGGoStruct() {
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// GetVpls retrieves the value of the leaf Vpls from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vpls is set, it can
// safely use t.GetVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp) GetVpls() string {
	if t == nil || t.Vpls == nil {
		return ""
	}
	return *t.Vpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_Sdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/secondary/forward/vprn-target YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget struct {
	AdvPrefix *string `path:"adv-prefix" module:"nokia-conf"`
	BgpNh     *string `path:"bgp-nh" module:"nokia-conf"`
	Lsp       *string `path:"lsp" module:"nokia-conf"`
	Vprn      *string `path:"vprn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget) IsYANGGoStruct() {
}

// GetAdvPrefix retrieves the value of the leaf AdvPrefix from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvPrefix is set, it can
// safely use t.GetAdvPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget) GetAdvPrefix() string {
	if t == nil || t.AdvPrefix == nil {
		return ""
	}
	return *t.AdvPrefix
}

// GetBgpNh retrieves the value of the leaf BgpNh from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpNh is set, it can
// safely use t.GetBgpNh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpNh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget) GetBgpNh() string {
	if t == nil || t.BgpNh == nil {
		return ""
	}
	return *t.BgpNh
}

// GetLsp retrieves the value of the leaf Lsp from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lsp is set, it can
// safely use t.GetLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget) GetLsp() string {
	if t == nil || t.Lsp == nil {
		return ""
	}
	return *t.Lsp
}

// GetVprn retrieves the value of the leaf Vprn from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vprn is set, it can
// safely use t.GetVprn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vprn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget) GetVprn() string {
	if t == nil || t.Vprn == nil {
		return ""
	}
	return *t.Vprn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Forward_VprnTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Remark represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/action/secondary/remark YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Remark struct {
	Dscp E_NokiaTypesQos_DscpName `path:"dscp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Remark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Remark) IsYANGGoStruct() {
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Remark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Remark) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Remark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Remark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Remark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Remark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Remark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Remark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Remark.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Action_Secondary_Remark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match struct {
	DestinationClass *uint32                                                                     `path:"destination-class" module:"nokia-conf"`
	Dscp             E_NokiaTypesQos_DscpName                                                    `path:"dscp" module:"nokia-conf"`
	DstIp            *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp         `path:"dst-ip" module:"nokia-conf"`
	DstPort          *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort       `path:"dst-port" module:"nokia-conf"`
	Fragment         E_NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Fragment     `path:"fragment" module:"nokia-conf"`
	Icmp             *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Icmp          `path:"icmp" module:"nokia-conf"`
	Ip               *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip            `path:"ip" module:"nokia-conf"`
	IpOption         *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_IpOption      `path:"ip-option" module:"nokia-conf" yangPresence:"true"`
	MultipleOption   *bool                                                                       `path:"multiple-option" module:"nokia-conf"`
	OptionPresent    *bool                                                                       `path:"option-present" module:"nokia-conf"`
	PacketLength     *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength  `path:"packet-length" module:"nokia-conf" yangPresence:"true"`
	Port             *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port          `path:"port" module:"nokia-conf"`
	Protocol         NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Protocol_Union `path:"protocol" module:"nokia-conf"`
	ProtocolList     *string                                                                     `path:"protocol-list" module:"nokia-conf"`
	SrcIp            *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp         `path:"src-ip" module:"nokia-conf"`
	SrcMac           *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcMac        `path:"src-mac" module:"nokia-conf" yangPresence:"true"`
	SrcPort          *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort       `path:"src-port" module:"nokia-conf"`
	SrcRouteOption   *bool                                                                       `path:"src-route-option" module:"nokia-conf"`
	TcpFlags         *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags      `path:"tcp-flags" module:"nokia-conf"`
	Ttl              *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl           `path:"ttl" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetOrCreateIcmp() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Icmp{}
	return t.Icmp
}

// GetOrCreateIp retrieves the value of the Ip field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetOrCreateIp() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip {
	if t.Ip != nil {
		return t.Ip
	}
	t.Ip = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip{}
	return t.Ip
}

// GetOrCreateIpOption retrieves the value of the IpOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetOrCreateIpOption() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_IpOption {
	if t.IpOption != nil {
		return t.IpOption
	}
	t.IpOption = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_IpOption{}
	return t.IpOption
}

// GetOrCreatePacketLength retrieves the value of the PacketLength field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetOrCreatePacketLength() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength {
	if t.PacketLength != nil {
		return t.PacketLength
	}
	t.PacketLength = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength{}
	return t.PacketLength
}

// GetOrCreatePort retrieves the value of the Port field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetOrCreatePort() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port {
	if t.Port != nil {
		return t.Port
	}
	t.Port = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port{}
	return t.Port
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcMac retrieves the value of the SrcMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetOrCreateSrcMac() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcMac {
	if t.SrcMac != nil {
		return t.SrcMac
	}
	t.SrcMac = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcMac{}
	return t.SrcMac
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetOrCreateTcpFlags retrieves the value of the TcpFlags field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetOrCreateTcpFlags() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags {
	if t.TcpFlags != nil {
		return t.TcpFlags
	}
	t.TcpFlags = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags{}
	return t.TcpFlags
}

// GetOrCreateTtl retrieves the value of the Ttl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetOrCreateTtl() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl {
	if t.Ttl != nil {
		return t.Ttl
	}
	t.Ttl = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl{}
	return t.Ttl
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetDstIp() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetIcmp() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetIp returns the value of the Ip struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match. If the receiver or the field Ip is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetIp() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip {
	if t != nil && t.Ip != nil {
		return t.Ip
	}
	return nil
}

// GetIpOption returns the value of the IpOption struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match. If the receiver or the field IpOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetIpOption() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_IpOption {
	if t != nil && t.IpOption != nil {
		return t.IpOption
	}
	return nil
}

// GetPacketLength returns the value of the PacketLength struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match. If the receiver or the field PacketLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetPacketLength() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength {
	if t != nil && t.PacketLength != nil {
		return t.PacketLength
	}
	return nil
}

// GetPort returns the value of the Port struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match. If the receiver or the field Port is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetPort() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port {
	if t != nil && t.Port != nil {
		return t.Port
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetSrcIp() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcMac returns the value of the SrcMac struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match. If the receiver or the field SrcMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetSrcMac() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcMac {
	if t != nil && t.SrcMac != nil {
		return t.SrcMac
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetTcpFlags returns the value of the TcpFlags struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match. If the receiver or the field TcpFlags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetTcpFlags() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags {
	if t != nil && t.TcpFlags != nil {
		return t.TcpFlags
	}
	return nil
}

// GetTtl returns the value of the Ttl struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match. If the receiver or the field Ttl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetTtl() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl {
	if t != nil && t.Ttl != nil {
		return t.Ttl
	}
	return nil
}

// GetDestinationClass retrieves the value of the leaf DestinationClass from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationClass is set, it can
// safely use t.GetDestinationClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetDestinationClass() uint32 {
	if t == nil || t.DestinationClass == nil {
		return 0
	}
	return *t.DestinationClass
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetFragment() E_NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetMultipleOption retrieves the value of the leaf MultipleOption from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultipleOption is set, it can
// safely use t.GetMultipleOption() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultipleOption == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetMultipleOption() bool {
	if t == nil || t.MultipleOption == nil {
		return false
	}
	return *t.MultipleOption
}

// GetOptionPresent retrieves the value of the leaf OptionPresent from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OptionPresent is set, it can
// safely use t.GetOptionPresent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OptionPresent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetOptionPresent() bool {
	if t == nil || t.OptionPresent == nil {
		return false
	}
	return *t.OptionPresent
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetProtocol() NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetProtocolList retrieves the value of the leaf ProtocolList from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolList is set, it can
// safely use t.GetProtocolList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetProtocolList() string {
	if t == nil || t.ProtocolList == nil {
		return ""
	}
	return *t.ProtocolList
}

// GetSrcRouteOption retrieves the value of the leaf SrcRouteOption from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcRouteOption is set, it can
// safely use t.GetSrcRouteOption() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcRouteOption == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) GetSrcRouteOption() bool {
	if t == nil || t.SrcRouteOption == nil {
		return false
	}
	return *t.SrcRouteOption
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.Ip.PopulateDefaults()
	t.IpOption.PopulateDefaults()
	t.PacketLength.PopulateDefaults()
	t.Port.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcMac.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
	t.TcpFlags.PopulateDefaults()
	t.Ttl.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort struct {
	Eq       *uint16                                                                     `path:"eq" module:"nokia-conf"`
	Gt       *uint16                                                                     `path:"gt" module:"nokia-conf"`
	Lt       *uint16                                                                     `path:"lt" module:"nokia-conf"`
	PortList *string                                                                     `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort_Range represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Icmp represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/match/icmp YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Icmp struct {
	Code *int32 `path:"code" module:"nokia-conf"`
	Type *int32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Icmp) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Icmp) GetCode() int32 {
	if t == nil || t.Code == nil {
		return 0
	}
	return *t.Code
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Icmp) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Icmp.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/match/ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_IpOption represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/match/ip-option YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_IpOption struct {
	Mask *int32 `path:"mask" module:"nokia-conf"`
	Type *int32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_IpOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_IpOption) IsYANGGoStruct() {}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_IpOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_IpOption) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 255
	}
	return *t.Mask
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_IpOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_IpOption) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_IpOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_IpOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 255
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_IpOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_IpOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_IpOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_IpOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_IpOption.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_IpOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/match/packet-length YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength struct {
	Eq    *int32                                                                           `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                           `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                           `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength) GetRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength_Range represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/match/packet-length/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength_Range.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_PacketLength_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/match/port YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port struct {
	Eq       *uint16                                                                  `path:"eq" module:"nokia-conf"`
	Gt       *uint16                                                                  `path:"gt" module:"nokia-conf"`
	Lt       *uint16                                                                  `path:"lt" module:"nokia-conf"`
	PortList *string                                                                  `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port) GetRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port_Range represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/match/port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port_Range.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Port_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcMac represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/match/src-mac YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcMac struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcMac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcMac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcMac) GetMask() string {
	if t == nil || t.Mask == nil {
		return "ff:ff:ff:ff:ff:ff"
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v string = "ff:ff:ff:ff:ff:ff"
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcMac.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort struct {
	Eq       *uint16                                                                     `path:"eq" module:"nokia-conf"`
	Gt       *uint16                                                                     `path:"gt" module:"nokia-conf"`
	Lt       *uint16                                                                     `path:"lt" module:"nokia-conf"`
	PortList *string                                                                     `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/match/tcp-flags YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags struct {
	Ack *bool `path:"ack" module:"nokia-conf"`
	Cwr *bool `path:"cwr" module:"nokia-conf"`
	Ece *bool `path:"ece" module:"nokia-conf"`
	Fin *bool `path:"fin" module:"nokia-conf"`
	Ns  *bool `path:"ns" module:"nokia-conf"`
	Psh *bool `path:"psh" module:"nokia-conf"`
	Rst *bool `path:"rst" module:"nokia-conf"`
	Syn *bool `path:"syn" module:"nokia-conf"`
	Urg *bool `path:"urg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags) IsYANGGoStruct() {}

// GetAck retrieves the value of the leaf Ack from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ack is set, it can
// safely use t.GetAck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ack == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags) GetAck() bool {
	if t == nil || t.Ack == nil {
		return false
	}
	return *t.Ack
}

// GetCwr retrieves the value of the leaf Cwr from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cwr is set, it can
// safely use t.GetCwr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cwr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags) GetCwr() bool {
	if t == nil || t.Cwr == nil {
		return false
	}
	return *t.Cwr
}

// GetEce retrieves the value of the leaf Ece from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ece is set, it can
// safely use t.GetEce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ece == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags) GetEce() bool {
	if t == nil || t.Ece == nil {
		return false
	}
	return *t.Ece
}

// GetFin retrieves the value of the leaf Fin from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fin is set, it can
// safely use t.GetFin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags) GetFin() bool {
	if t == nil || t.Fin == nil {
		return false
	}
	return *t.Fin
}

// GetNs retrieves the value of the leaf Ns from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ns is set, it can
// safely use t.GetNs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags) GetNs() bool {
	if t == nil || t.Ns == nil {
		return false
	}
	return *t.Ns
}

// GetPsh retrieves the value of the leaf Psh from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Psh is set, it can
// safely use t.GetPsh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Psh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags) GetPsh() bool {
	if t == nil || t.Psh == nil {
		return false
	}
	return *t.Psh
}

// GetRst retrieves the value of the leaf Rst from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rst is set, it can
// safely use t.GetRst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags) GetRst() bool {
	if t == nil || t.Rst == nil {
		return false
	}
	return *t.Rst
}

// GetSyn retrieves the value of the leaf Syn from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syn is set, it can
// safely use t.GetSyn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags) GetSyn() bool {
	if t == nil || t.Syn == nil {
		return false
	}
	return *t.Syn
}

// GetUrg retrieves the value of the leaf Urg from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Urg is set, it can
// safely use t.GetUrg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Urg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags) GetUrg() bool {
	if t == nil || t.Urg == nil {
		return false
	}
	return *t.Urg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_TcpFlags) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/match/ttl YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl struct {
	Eq    *int32                                                                  `path:"eq" module:"nokia-conf"`
	Gt    *int32                                                                  `path:"gt" module:"nokia-conf"`
	Lt    *int32                                                                  `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl) GetRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl_Range represents the /nokia-conf/configure/groups/group/filter/ip-filter/entry/match/ttl/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl_Range.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_Entry_Match_Ttl_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt represents the /nokia-conf/configure/groups/group/filter/ip-filter/subscriber-mgmt YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt struct {
	HostSpecificEntry *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry `path:"host-specific-entry" module:"nokia-conf"`
	SharedEntry       *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry       `path:"shared-entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt) IsYANGGoStruct() {}

// GetOrCreateHostSpecificEntry retrieves the value of the HostSpecificEntry field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt) GetOrCreateHostSpecificEntry() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry {
	if t.HostSpecificEntry != nil {
		return t.HostSpecificEntry
	}
	t.HostSpecificEntry = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry{}
	return t.HostSpecificEntry
}

// GetOrCreateSharedEntry retrieves the value of the SharedEntry field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt) GetOrCreateSharedEntry() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry {
	if t.SharedEntry != nil {
		return t.SharedEntry
	}
	t.SharedEntry = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry{}
	return t.SharedEntry
}

// GetHostSpecificEntry returns the value of the HostSpecificEntry struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt. If the receiver or the field HostSpecificEntry is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt) GetHostSpecificEntry() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry {
	if t != nil && t.HostSpecificEntry != nil {
		return t.HostSpecificEntry
	}
	return nil
}

// GetSharedEntry returns the value of the SharedEntry struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt. If the receiver or the field SharedEntry is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt) GetSharedEntry() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry {
	if t != nil && t.SharedEntry != nil {
		return t.SharedEntry
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HostSpecificEntry.PopulateDefaults()
	t.SharedEntry.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry represents the /nokia-conf/configure/groups/group/filter/ip-filter/subscriber-mgmt/host-specific-entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry struct {
	CreditControl *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl `path:"credit-control" module:"nokia-conf"`
	FilterRule    *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule    `path:"filter-rule" module:"nokia-conf"`
	Watermark     *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark     `path:"watermark" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) IsYANGGoStruct() {
}

// GetOrCreateCreditControl retrieves the value of the CreditControl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) GetOrCreateCreditControl() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl {
	if t.CreditControl != nil {
		return t.CreditControl
	}
	t.CreditControl = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl{}
	return t.CreditControl
}

// GetOrCreateFilterRule retrieves the value of the FilterRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) GetOrCreateFilterRule() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule {
	if t.FilterRule != nil {
		return t.FilterRule
	}
	t.FilterRule = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule{}
	return t.FilterRule
}

// GetOrCreateWatermark retrieves the value of the Watermark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) GetOrCreateWatermark() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark {
	if t.Watermark != nil {
		return t.Watermark
	}
	t.Watermark = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark{}
	return t.Watermark
}

// GetCreditControl returns the value of the CreditControl struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry. If the receiver or the field CreditControl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) GetCreditControl() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl {
	if t != nil && t.CreditControl != nil {
		return t.CreditControl
	}
	return nil
}

// GetFilterRule returns the value of the FilterRule struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry. If the receiver or the field FilterRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) GetFilterRule() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule {
	if t != nil && t.FilterRule != nil {
		return t.FilterRule
	}
	return nil
}

// GetWatermark returns the value of the Watermark struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry. If the receiver or the field Watermark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) GetWatermark() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark {
	if t != nil && t.Watermark != nil {
		return t.Watermark
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CreditControl.PopulateDefaults()
	t.FilterRule.PopulateDefaults()
	t.Watermark.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl represents the /nokia-conf/configure/groups/group/filter/ip-filter/subscriber-mgmt/host-specific-entry/credit-control YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl struct {
	Range *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl) GetRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range represents the /nokia-conf/configure/groups/group/filter/ip-filter/subscriber-mgmt/host-specific-entry/credit-control/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_CreditControl_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule represents the /nokia-conf/configure/groups/group/filter/ip-filter/subscriber-mgmt/host-specific-entry/filter-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule struct {
	Range *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule) GetRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range represents the /nokia-conf/configure/groups/group/filter/ip-filter/subscriber-mgmt/host-specific-entry/filter-rule/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_FilterRule_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark represents the /nokia-conf/configure/groups/group/filter/ip-filter/subscriber-mgmt/host-specific-entry/watermark YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark struct {
	High *int32 `path:"high" module:"nokia-conf"`
	Low  *int32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark) IsYANGGoStruct() {
}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark) GetHigh() int32 {
	if t == nil || t.High == nil {
		return 95
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark) GetLow() int32 {
	if t == nil || t.Low == nil {
		return 90
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.High == nil {
		var v int32 = 95
		t.High = &v
	}
	if t.Low == nil {
		var v int32 = 90
		t.Low = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_HostSpecificEntry_Watermark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry represents the /nokia-conf/configure/groups/group/filter/ip-filter/subscriber-mgmt/shared-entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry struct {
	FilterRule *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule `path:"filter-rule" module:"nokia-conf"`
	PccRule    *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule    `path:"pcc-rule" module:"nokia-conf"`
	Watermark  *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark  `path:"watermark" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry) IsYANGGoStruct() {
}

// GetOrCreateFilterRule retrieves the value of the FilterRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry) GetOrCreateFilterRule() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule {
	if t.FilterRule != nil {
		return t.FilterRule
	}
	t.FilterRule = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule{}
	return t.FilterRule
}

// GetOrCreatePccRule retrieves the value of the PccRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry) GetOrCreatePccRule() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule {
	if t.PccRule != nil {
		return t.PccRule
	}
	t.PccRule = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule{}
	return t.PccRule
}

// GetOrCreateWatermark retrieves the value of the Watermark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry) GetOrCreateWatermark() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark {
	if t.Watermark != nil {
		return t.Watermark
	}
	t.Watermark = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark{}
	return t.Watermark
}

// GetFilterRule returns the value of the FilterRule struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry. If the receiver or the field FilterRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry) GetFilterRule() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule {
	if t != nil && t.FilterRule != nil {
		return t.FilterRule
	}
	return nil
}

// GetPccRule returns the value of the PccRule struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry. If the receiver or the field PccRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry) GetPccRule() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule {
	if t != nil && t.PccRule != nil {
		return t.PccRule
	}
	return nil
}

// GetWatermark returns the value of the Watermark struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry. If the receiver or the field Watermark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry) GetWatermark() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark {
	if t != nil && t.Watermark != nil {
		return t.Watermark
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FilterRule.PopulateDefaults()
	t.PccRule.PopulateDefaults()
	t.Watermark.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule represents the /nokia-conf/configure/groups/group/filter/ip-filter/subscriber-mgmt/shared-entry/filter-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule struct {
	Range *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule) GetRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range represents the /nokia-conf/configure/groups/group/filter/ip-filter/subscriber-mgmt/shared-entry/filter-rule/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_FilterRule_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule represents the /nokia-conf/configure/groups/group/filter/ip-filter/subscriber-mgmt/shared-entry/pcc-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule struct {
	Range *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule) GetRange() *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range represents the /nokia-conf/configure/groups/group/filter/ip-filter/subscriber-mgmt/shared-entry/pcc-rule/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_PccRule_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark represents the /nokia-conf/configure/groups/group/filter/ip-filter/subscriber-mgmt/shared-entry/watermark YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark struct {
	High *int32 `path:"high" module:"nokia-conf"`
	Low  *int32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark) IsYANGGoStruct() {
}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark) GetHigh() int32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark) GetLow() int32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark.
func (*NokiaConf_Configure_Groups_Group_Filter_IpFilter_SubscriberMgmt_SharedEntry_Watermark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception represents the /nokia-conf/configure/groups/group/filter/ipv6-exception YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception struct {
	Description *string                                                                                                                                    `path:"description" module:"nokia-conf"`
	Entry       map[NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry `path:"entry" module:"nokia-conf"`
	FilterId    *uint32                                                                                                                                    `path:"filter-id" module:"nokia-conf"`
	FilterName  *string                                                                                                                                    `path:"filter-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception) NewEntry(EntryId NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception) GetEntry(EntryId NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception) AppendEntry(v *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFilterId retrieves the value of the leaf FilterId from the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterId is set, it can
// safely use t.GetFilterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception) GetFilterId() uint32 {
	if t == nil || t.FilterId == nil {
		return 0
	}
	return *t.FilterId
}

// GetFilterName retrieves the value of the leaf FilterName from the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterName is set, it can
// safely use t.GetFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception) GetFilterName() string {
	if t == nil || t.FilterName == nil {
		return ""
	}
	return *t.FilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FilterName == nil {
		return nil, fmt.Errorf("nil value for key FilterName")
	}

	return map[string]interface{}{
		"filter-name": *t.FilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception.
func (*NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry represents the /nokia-conf/configure/groups/group/filter/ipv6-exception/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry struct {
	Description *string                                                                   `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match        `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry) IsYANGGoStruct() {}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry.
func (*NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match represents the /nokia-conf/configure/groups/group/filter/ipv6-exception/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match struct {
	DstIp      *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp           `path:"dst-ip" module:"nokia-conf"`
	DstPort    *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort         `path:"dst-port" module:"nokia-conf"`
	Icmp       *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_Icmp            `path:"icmp" module:"nokia-conf"`
	NextHeader NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_NextHeader_Union `path:"next-header" module:"nokia-conf"`
	Port       *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_Port            `path:"port" module:"nokia-conf"`
	SrcIp      *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_SrcIp           `path:"src-ip" module:"nokia-conf"`
	SrcPort    *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_SrcPort         `path:"src-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match) GetOrCreateIcmp() *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_Icmp{}
	return t.Icmp
}

// GetOrCreatePort retrieves the value of the Port field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match) GetOrCreatePort() *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_Port {
	if t.Port != nil {
		return t.Port
	}
	t.Port = &NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_Port{}
	return t.Port
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match) GetDstIp() *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match) GetIcmp() *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetPort returns the value of the Port struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match. If the receiver or the field Port is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match) GetPort() *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_Port {
	if t != nil && t.Port != nil {
		return t.Port
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match) GetSrcIp() *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetNextHeader retrieves the value of the leaf NextHeader from the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeader is set, it can
// safely use t.GetNextHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match) GetNextHeader() NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_NextHeader_Union {
	if t == nil || t.NextHeader == nil {
		return nil
	}
	return t.NextHeader
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.Port.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp represents the /nokia-conf/configure/groups/group/filter/ipv6-exception/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp.
func (*NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/filter/ipv6-exception/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort struct {
	Eq       *uint16                                                                          `path:"eq" module:"nokia-conf"`
	Gt       *uint16                                                                          `path:"gt" module:"nokia-conf"`
	Lt       *uint16                                                                          `path:"lt" module:"nokia-conf"`
	PortList *string                                                                          `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort) GetGt() uint16 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort) GetLt() uint16 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_Filter_Ipv6Exception_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}
