/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"encoding/json"
	"fmt"
	"reflect"

	gpb "github.com/openconfig/gnmi/proto/gnmi"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Device{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// ΓModelData contains the catalogue information corresponding to the modules for
// which Go code was generated.
var ΓModelData = []*gpb.ModelData{
	{
		Name:         "ietf-inet-types",
		Organization: "IETF NETMOD (NETCONF Data Modeling Language) Working Group",
	},
	{
		Name:         "ietf-yang-types",
		Organization: "IETF NETMOD (NETCONF Data Modeling Language) Working Group",
	},
	{
		Name:         "nokia-conf",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-sros-yang-extensions",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-application-assurance",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-bgp",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-card",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-cellular",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-cflowd",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-chassis",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-dhcp",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-diameter",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-esa",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-eth-cfm",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-filter",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-igmp",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-igp",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-ipsec",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-isa",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-isis",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-l2tp",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-ldp",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-lldp",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-log",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-mcast-cac",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-mcast-mgmt",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-mcr",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-mpls",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-nat",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-oam",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-operation",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-ospf",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-policy",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-port",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-ppp",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-ptp",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-qos",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-radius",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-redundancy",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-rip",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-ripng",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-router",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-rsvp",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-security",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-services",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-sfm",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-sros",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-subscriber-mgmt",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-system",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-vrrp",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-wlan",
		Organization: "Nokia",
	},
	{
		Name:         "nokia-types-wlangw",
		Organization: "Nokia",
	},
}

// Device represents the /device YANG schema element.
type Device struct {
	Configure *NokiaConf_Configure `path:"configure" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// GetOrCreateConfigure retrieves the value of the Configure field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateConfigure() *NokiaConf_Configure {
	if t.Configure != nil {
		return t.Configure
	}
	t.Configure = &NokiaConf_Configure{}
	return t.Configure
}

// GetConfigure returns the value of the Configure struct pointer
// from Device. If the receiver or the field Configure is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetConfigure() *NokiaConf_Configure {
	if t != nil && t.Configure != nil {
		return t.Configure
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Device
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Device) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Configure.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Device.
func (*Device) ΛBelongingModule() string {
	return ""
}

// NokiaConf_Configure represents the /nokia-conf/configure YANG schema element.
type NokiaConf_Configure struct {
	Aaa                  *NokiaConf_Configure_Aaa                                         `path:"aaa" module:"nokia-conf"`
	ApplicationAssurance *NokiaConf_Configure_ApplicationAssurance                        `path:"application-assurance" module:"nokia-conf"`
	ApplyGroups          []string                                                         `path:"apply-groups" module:"nokia-conf"`
	Aps                  map[uint32]*NokiaConf_Configure_Aps                              `path:"aps" module:"nokia-conf"`
	Bfd                  *NokiaConf_Configure_Bfd                                         `path:"bfd" module:"nokia-conf"`
	Bmp                  *NokiaConf_Configure_Bmp                                         `path:"bmp" module:"nokia-conf"`
	CallTrace            *NokiaConf_Configure_CallTrace                                   `path:"call-trace" module:"nokia-conf"`
	Card                 map[uint32]*NokiaConf_Configure_Card                             `path:"card" module:"nokia-conf"`
	Cflowd               *NokiaConf_Configure_Cflowd                                      `path:"cflowd" module:"nokia-conf" yangPresence:"true"`
	Chassis              map[NokiaConf_Configure_Chassis_Key]*NokiaConf_Configure_Chassis `path:"chassis" module:"nokia-conf"`
	ConnectionProfile    *NokiaConf_Configure_ConnectionProfile                           `path:"connection-profile" module:"nokia-conf"`
	Esa                  map[int32]*NokiaConf_Configure_Esa                               `path:"esa" module:"nokia-conf"`
	EthCfm               *NokiaConf_Configure_EthCfm                                      `path:"eth-cfm" module:"nokia-conf"`
	EthRing              map[uint32]*NokiaConf_Configure_EthRing                          `path:"eth-ring" module:"nokia-conf"`
	Filter               *NokiaConf_Configure_Filter                                      `path:"filter" module:"nokia-conf"`
	FwdPathExt           *NokiaConf_Configure_FwdPathExt                                  `path:"fwd-path-ext" module:"nokia-conf"`
	GroupEncryption      *NokiaConf_Configure_GroupEncryption                             `path:"group-encryption" module:"nokia-conf"`
	Groups               *NokiaConf_Configure_Groups                                      `path:"groups" module:"nokia-conf"`
	Ipsec                *NokiaConf_Configure_Ipsec                                       `path:"ipsec" module:"nokia-conf"`
	Isa                  *NokiaConf_Configure_Isa                                         `path:"isa" module:"nokia-conf"`
	Lag                  map[string]*NokiaConf_Configure_Lag                              `path:"lag" module:"nokia-conf"`
	Log                  *NokiaConf_Configure_Log                                         `path:"log" module:"nokia-conf"`
	Macsec               *NokiaConf_Configure_Macsec                                      `path:"macsec" module:"nokia-conf"`
	Mcac                 *NokiaConf_Configure_Mcac                                        `path:"mcac" module:"nokia-conf"`
	Mirror               *NokiaConf_Configure_Mirror                                      `path:"mirror" module:"nokia-conf"`
	MulticastManagement  *NokiaConf_Configure_MulticastManagement                         `path:"multicast-management" module:"nokia-conf"`
	MultilinkBundle      map[string]*NokiaConf_Configure_MultilinkBundle                  `path:"multilink-bundle" module:"nokia-conf"`
	OamPm                *NokiaConf_Configure_OamPm                                       `path:"oam-pm" module:"nokia-conf"`
	Openflow             *NokiaConf_Configure_Openflow                                    `path:"openflow" module:"nokia-conf"`
	PolicyOptions        *NokiaConf_Configure_PolicyOptions                               `path:"policy-options" module:"nokia-conf"`
	Port                 map[string]*NokiaConf_Configure_Port                             `path:"port" module:"nokia-conf"`
	PortPolicy           map[string]*NokiaConf_Configure_PortPolicy                       `path:"port-policy" module:"nokia-conf"`
	PortXc               *NokiaConf_Configure_PortXc                                      `path:"port-xc" module:"nokia-conf"`
	PwPort               map[uint32]*NokiaConf_Configure_PwPort                           `path:"pw-port" module:"nokia-conf"`
	Python               *NokiaConf_Configure_Python                                      `path:"python" module:"nokia-conf"`
	Qos                  *NokiaConf_Configure_Qos                                         `path:"qos" module:"nokia-conf"`
	Redundancy           *NokiaConf_Configure_Redundancy                                  `path:"redundancy" module:"nokia-conf"`
	Router               map[string]*NokiaConf_Configure_Router                           `path:"router" module:"nokia-conf"`
	RoutingOptions       *NokiaConf_Configure_RoutingOptions                              `path:"routing-options" module:"nokia-conf"`
	Saa                  *NokiaConf_Configure_Saa                                         `path:"saa" module:"nokia-conf"`
	Satellite            *NokiaConf_Configure_Satellite                                   `path:"satellite" module:"nokia-conf"`
	Service              *NokiaConf_Configure_Service                                     `path:"service" module:"nokia-conf"`
	Sfm                  map[uint32]*NokiaConf_Configure_Sfm                              `path:"sfm" module:"nokia-conf"`
	SubscriberMgmt       *NokiaConf_Configure_SubscriberMgmt                              `path:"subscriber-mgmt" module:"nokia-conf"`
	System               *NokiaConf_Configure_System                                      `path:"system" module:"nokia-conf"`
	TestOam              *NokiaConf_Configure_TestOam                                     `path:"test-oam" module:"nokia-conf"`
	Vrrp                 *NokiaConf_Configure_Vrrp                                        `path:"vrrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure) IsYANGGoStruct() {}

// NokiaConf_Configure_Chassis_Key represents the key for list Chassis of element /nokia-conf/configure.
type NokiaConf_Configure_Chassis_Key struct {
	ChassisClass  E_NokiaTypesChassis_ChassisClass `path:"chassis-class"`
	ChassisNumber uint32                           `path:"chassis-number"`
}

// NewAps creates a new entry in the Aps list of the
// NokiaConf_Configure struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure) NewAps(GroupId uint32) (*NokiaConf_Configure_Aps, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Aps == nil {
		t.Aps = make(map[uint32]*NokiaConf_Configure_Aps)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Aps[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Aps", key)
	}

	t.Aps[key] = &NokiaConf_Configure_Aps{
		GroupId: &GroupId,
	}

	return t.Aps[key], nil
}

// RenameAps renames an entry in the list Aps within
// the NokiaConf_Configure struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure) RenameAps(oldK, newK uint32) error {
	if _, ok := t.Aps[newK]; ok {
		return fmt.Errorf("key %v already exists in Aps", newK)
	}

	e, ok := t.Aps[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Aps", oldK)
	}
	e.GroupId = &newK

	t.Aps[newK] = e
	delete(t.Aps, oldK)
	return nil
}

// GetOrCreateAps retrieves the value with the specified keys from
// the receiver NokiaConf_Configure. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure) GetOrCreateAps(GroupId uint32) *NokiaConf_Configure_Aps {

	key := GroupId

	if v, ok := t.Aps[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAps(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAps got unexpected error: %v", err))
	}
	return v
}

// GetAps retrieves the value with the specified key from
// the Aps map field of NokiaConf_Configure. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure) GetAps(GroupId uint32) *NokiaConf_Configure_Aps {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.Aps[key]; ok {
		return lm
	}
	return nil
}

// DeleteAps deletes the value with the specified keys from
// the receiver NokiaConf_Configure. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure) DeleteAps(GroupId uint32) {
	key := GroupId

	delete(t.Aps, key)
}

// AppendAps appends the supplied NokiaConf_Configure_Aps struct to the
// list Aps of NokiaConf_Configure. If the key value(s) specified in
// the supplied NokiaConf_Configure_Aps already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure) AppendAps(v *NokiaConf_Configure_Aps) error {
	if v.GroupId == nil {
		return fmt.Errorf("invalid nil key received for GroupId")
	}

	key := *v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Aps == nil {
		t.Aps = make(map[uint32]*NokiaConf_Configure_Aps)
	}

	if _, ok := t.Aps[key]; ok {
		return fmt.Errorf("duplicate key for list Aps %v", key)
	}

	t.Aps[key] = v
	return nil
}

// NewCard creates a new entry in the Card list of the
// NokiaConf_Configure struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure) NewCard(SlotNumber uint32) (*NokiaConf_Configure_Card, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Card == nil {
		t.Card = make(map[uint32]*NokiaConf_Configure_Card)
	}

	key := SlotNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Card[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Card", key)
	}

	t.Card[key] = &NokiaConf_Configure_Card{
		SlotNumber: &SlotNumber,
	}

	return t.Card[key], nil
}

// RenameCard renames an entry in the list Card within
// the NokiaConf_Configure struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure) RenameCard(oldK, newK uint32) error {
	if _, ok := t.Card[newK]; ok {
		return fmt.Errorf("key %v already exists in Card", newK)
	}

	e, ok := t.Card[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Card", oldK)
	}
	e.SlotNumber = &newK

	t.Card[newK] = e
	delete(t.Card, oldK)
	return nil
}

// GetOrCreateCard retrieves the value with the specified keys from
// the receiver NokiaConf_Configure. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure) GetOrCreateCard(SlotNumber uint32) *NokiaConf_Configure_Card {

	key := SlotNumber

	if v, ok := t.Card[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCard(SlotNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCard got unexpected error: %v", err))
	}
	return v
}

// GetCard retrieves the value with the specified key from
// the Card map field of NokiaConf_Configure. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure) GetCard(SlotNumber uint32) *NokiaConf_Configure_Card {

	if t == nil {
		return nil
	}

	key := SlotNumber

	if lm, ok := t.Card[key]; ok {
		return lm
	}
	return nil
}

// DeleteCard deletes the value with the specified keys from
// the receiver NokiaConf_Configure. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure) DeleteCard(SlotNumber uint32) {
	key := SlotNumber

	delete(t.Card, key)
}

// AppendCard appends the supplied NokiaConf_Configure_Card struct to the
// list Card of NokiaConf_Configure. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure) AppendCard(v *NokiaConf_Configure_Card) error {
	if v.SlotNumber == nil {
		return fmt.Errorf("invalid nil key received for SlotNumber")
	}

	key := *v.SlotNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Card == nil {
		t.Card = make(map[uint32]*NokiaConf_Configure_Card)
	}

	if _, ok := t.Card[key]; ok {
		return fmt.Errorf("duplicate key for list Card %v", key)
	}

	t.Card[key] = v
	return nil
}

// NewChassis creates a new entry in the Chassis list of the
// NokiaConf_Configure struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure) NewChassis(ChassisClass E_NokiaTypesChassis_ChassisClass, ChassisNumber uint32) (*NokiaConf_Configure_Chassis, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Chassis == nil {
		t.Chassis = make(map[NokiaConf_Configure_Chassis_Key]*NokiaConf_Configure_Chassis)
	}

	key := NokiaConf_Configure_Chassis_Key{
		ChassisClass:  ChassisClass,
		ChassisNumber: ChassisNumber,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Chassis[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Chassis", key)
	}

	t.Chassis[key] = &NokiaConf_Configure_Chassis{
		ChassisClass:  ChassisClass,
		ChassisNumber: &ChassisNumber,
	}

	return t.Chassis[key], nil
}

// RenameChassis renames an entry in the list Chassis within
// the NokiaConf_Configure struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure) RenameChassis(oldK, newK NokiaConf_Configure_Chassis_Key) error {
	if _, ok := t.Chassis[newK]; ok {
		return fmt.Errorf("key %v already exists in Chassis", newK)
	}

	e, ok := t.Chassis[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Chassis", oldK)
	}
	e.ChassisClass = newK.ChassisClass
	e.ChassisNumber = &newK.ChassisNumber

	t.Chassis[newK] = e
	delete(t.Chassis, oldK)
	return nil
}

// GetOrCreateChassis retrieves the value with the specified keys from
// the receiver NokiaConf_Configure. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure) GetOrCreateChassis(ChassisClass E_NokiaTypesChassis_ChassisClass, ChassisNumber uint32) *NokiaConf_Configure_Chassis {

	key := NokiaConf_Configure_Chassis_Key{
		ChassisClass:  ChassisClass,
		ChassisNumber: ChassisNumber,
	}

	if v, ok := t.Chassis[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChassis(ChassisClass, ChassisNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChassis got unexpected error: %v", err))
	}
	return v
}

// GetChassis retrieves the value with the specified key from
// the Chassis map field of NokiaConf_Configure. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure) GetChassis(ChassisClass E_NokiaTypesChassis_ChassisClass, ChassisNumber uint32) *NokiaConf_Configure_Chassis {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Chassis_Key{
		ChassisClass:  ChassisClass,
		ChassisNumber: ChassisNumber,
	}

	if lm, ok := t.Chassis[key]; ok {
		return lm
	}
	return nil
}

// DeleteChassis deletes the value with the specified keys from
// the receiver NokiaConf_Configure. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure) DeleteChassis(ChassisClass E_NokiaTypesChassis_ChassisClass, ChassisNumber uint32) {
	key := NokiaConf_Configure_Chassis_Key{
		ChassisClass:  ChassisClass,
		ChassisNumber: ChassisNumber,
	}

	delete(t.Chassis, key)
}

// AppendChassis appends the supplied NokiaConf_Configure_Chassis struct to the
// list Chassis of NokiaConf_Configure. If the key value(s) specified in
// the supplied NokiaConf_Configure_Chassis already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure) AppendChassis(v *NokiaConf_Configure_Chassis) error {
	if v.ChassisNumber == nil {
		return fmt.Errorf("invalid nil key for ChassisNumber")
	}

	key := NokiaConf_Configure_Chassis_Key{
		ChassisClass:  v.ChassisClass,
		ChassisNumber: *v.ChassisNumber,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Chassis == nil {
		t.Chassis = make(map[NokiaConf_Configure_Chassis_Key]*NokiaConf_Configure_Chassis)
	}

	if _, ok := t.Chassis[key]; ok {
		return fmt.Errorf("duplicate key for list Chassis %v", key)
	}

	t.Chassis[key] = v
	return nil
}

// NewEsa creates a new entry in the Esa list of the
// NokiaConf_Configure struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure) NewEsa(EsaId int32) (*NokiaConf_Configure_Esa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Esa == nil {
		t.Esa = make(map[int32]*NokiaConf_Configure_Esa)
	}

	key := EsaId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Esa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Esa", key)
	}

	t.Esa[key] = &NokiaConf_Configure_Esa{
		EsaId: &EsaId,
	}

	return t.Esa[key], nil
}

// RenameEsa renames an entry in the list Esa within
// the NokiaConf_Configure struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure) RenameEsa(oldK, newK int32) error {
	if _, ok := t.Esa[newK]; ok {
		return fmt.Errorf("key %v already exists in Esa", newK)
	}

	e, ok := t.Esa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Esa", oldK)
	}
	e.EsaId = &newK

	t.Esa[newK] = e
	delete(t.Esa, oldK)
	return nil
}

// GetOrCreateEsa retrieves the value with the specified keys from
// the receiver NokiaConf_Configure. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure) GetOrCreateEsa(EsaId int32) *NokiaConf_Configure_Esa {

	key := EsaId

	if v, ok := t.Esa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEsa(EsaId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEsa got unexpected error: %v", err))
	}
	return v
}

// GetEsa retrieves the value with the specified key from
// the Esa map field of NokiaConf_Configure. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure) GetEsa(EsaId int32) *NokiaConf_Configure_Esa {

	if t == nil {
		return nil
	}

	key := EsaId

	if lm, ok := t.Esa[key]; ok {
		return lm
	}
	return nil
}

// DeleteEsa deletes the value with the specified keys from
// the receiver NokiaConf_Configure. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure) DeleteEsa(EsaId int32) {
	key := EsaId

	delete(t.Esa, key)
}

// AppendEsa appends the supplied NokiaConf_Configure_Esa struct to the
// list Esa of NokiaConf_Configure. If the key value(s) specified in
// the supplied NokiaConf_Configure_Esa already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure) AppendEsa(v *NokiaConf_Configure_Esa) error {
	if v.EsaId == nil {
		return fmt.Errorf("invalid nil key received for EsaId")
	}

	key := *v.EsaId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Esa == nil {
		t.Esa = make(map[int32]*NokiaConf_Configure_Esa)
	}

	if _, ok := t.Esa[key]; ok {
		return fmt.Errorf("duplicate key for list Esa %v", key)
	}

	t.Esa[key] = v
	return nil
}

// NewEthRing creates a new entry in the EthRing list of the
// NokiaConf_Configure struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure) NewEthRing(RingIndex uint32) (*NokiaConf_Configure_EthRing, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EthRing == nil {
		t.EthRing = make(map[uint32]*NokiaConf_Configure_EthRing)
	}

	key := RingIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EthRing[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EthRing", key)
	}

	t.EthRing[key] = &NokiaConf_Configure_EthRing{
		RingIndex: &RingIndex,
	}

	return t.EthRing[key], nil
}

// RenameEthRing renames an entry in the list EthRing within
// the NokiaConf_Configure struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure) RenameEthRing(oldK, newK uint32) error {
	if _, ok := t.EthRing[newK]; ok {
		return fmt.Errorf("key %v already exists in EthRing", newK)
	}

	e, ok := t.EthRing[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EthRing", oldK)
	}
	e.RingIndex = &newK

	t.EthRing[newK] = e
	delete(t.EthRing, oldK)
	return nil
}

// GetOrCreateEthRing retrieves the value with the specified keys from
// the receiver NokiaConf_Configure. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure) GetOrCreateEthRing(RingIndex uint32) *NokiaConf_Configure_EthRing {

	key := RingIndex

	if v, ok := t.EthRing[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEthRing(RingIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEthRing got unexpected error: %v", err))
	}
	return v
}

// GetEthRing retrieves the value with the specified key from
// the EthRing map field of NokiaConf_Configure. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure) GetEthRing(RingIndex uint32) *NokiaConf_Configure_EthRing {

	if t == nil {
		return nil
	}

	key := RingIndex

	if lm, ok := t.EthRing[key]; ok {
		return lm
	}
	return nil
}

// DeleteEthRing deletes the value with the specified keys from
// the receiver NokiaConf_Configure. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure) DeleteEthRing(RingIndex uint32) {
	key := RingIndex

	delete(t.EthRing, key)
}

// AppendEthRing appends the supplied NokiaConf_Configure_EthRing struct to the
// list EthRing of NokiaConf_Configure. If the key value(s) specified in
// the supplied NokiaConf_Configure_EthRing already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure) AppendEthRing(v *NokiaConf_Configure_EthRing) error {
	if v.RingIndex == nil {
		return fmt.Errorf("invalid nil key received for RingIndex")
	}

	key := *v.RingIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EthRing == nil {
		t.EthRing = make(map[uint32]*NokiaConf_Configure_EthRing)
	}

	if _, ok := t.EthRing[key]; ok {
		return fmt.Errorf("duplicate key for list EthRing %v", key)
	}

	t.EthRing[key] = v
	return nil
}

// NewLag creates a new entry in the Lag list of the
// NokiaConf_Configure struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure) NewLag(LagName string) (*NokiaConf_Configure_Lag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lag == nil {
		t.Lag = make(map[string]*NokiaConf_Configure_Lag)
	}

	key := LagName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lag", key)
	}

	t.Lag[key] = &NokiaConf_Configure_Lag{
		LagName: &LagName,
	}

	return t.Lag[key], nil
}

// RenameLag renames an entry in the list Lag within
// the NokiaConf_Configure struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure) RenameLag(oldK, newK string) error {
	if _, ok := t.Lag[newK]; ok {
		return fmt.Errorf("key %v already exists in Lag", newK)
	}

	e, ok := t.Lag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lag", oldK)
	}
	e.LagName = &newK

	t.Lag[newK] = e
	delete(t.Lag, oldK)
	return nil
}

// GetOrCreateLag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure) GetOrCreateLag(LagName string) *NokiaConf_Configure_Lag {

	key := LagName

	if v, ok := t.Lag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLag(LagName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLag got unexpected error: %v", err))
	}
	return v
}

// GetLag retrieves the value with the specified key from
// the Lag map field of NokiaConf_Configure. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure) GetLag(LagName string) *NokiaConf_Configure_Lag {

	if t == nil {
		return nil
	}

	key := LagName

	if lm, ok := t.Lag[key]; ok {
		return lm
	}
	return nil
}

// DeleteLag deletes the value with the specified keys from
// the receiver NokiaConf_Configure. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure) DeleteLag(LagName string) {
	key := LagName

	delete(t.Lag, key)
}

// AppendLag appends the supplied NokiaConf_Configure_Lag struct to the
// list Lag of NokiaConf_Configure. If the key value(s) specified in
// the supplied NokiaConf_Configure_Lag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure) AppendLag(v *NokiaConf_Configure_Lag) error {
	if v.LagName == nil {
		return fmt.Errorf("invalid nil key received for LagName")
	}

	key := *v.LagName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lag == nil {
		t.Lag = make(map[string]*NokiaConf_Configure_Lag)
	}

	if _, ok := t.Lag[key]; ok {
		return fmt.Errorf("duplicate key for list Lag %v", key)
	}

	t.Lag[key] = v
	return nil
}

// NewMultilinkBundle creates a new entry in the MultilinkBundle list of the
// NokiaConf_Configure struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure) NewMultilinkBundle(BundleId string) (*NokiaConf_Configure_MultilinkBundle, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MultilinkBundle == nil {
		t.MultilinkBundle = make(map[string]*NokiaConf_Configure_MultilinkBundle)
	}

	key := BundleId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MultilinkBundle[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MultilinkBundle", key)
	}

	t.MultilinkBundle[key] = &NokiaConf_Configure_MultilinkBundle{
		BundleId: &BundleId,
	}

	return t.MultilinkBundle[key], nil
}

// RenameMultilinkBundle renames an entry in the list MultilinkBundle within
// the NokiaConf_Configure struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure) RenameMultilinkBundle(oldK, newK string) error {
	if _, ok := t.MultilinkBundle[newK]; ok {
		return fmt.Errorf("key %v already exists in MultilinkBundle", newK)
	}

	e, ok := t.MultilinkBundle[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MultilinkBundle", oldK)
	}
	e.BundleId = &newK

	t.MultilinkBundle[newK] = e
	delete(t.MultilinkBundle, oldK)
	return nil
}

// GetOrCreateMultilinkBundle retrieves the value with the specified keys from
// the receiver NokiaConf_Configure. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure) GetOrCreateMultilinkBundle(BundleId string) *NokiaConf_Configure_MultilinkBundle {

	key := BundleId

	if v, ok := t.MultilinkBundle[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMultilinkBundle(BundleId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMultilinkBundle got unexpected error: %v", err))
	}
	return v
}

// GetMultilinkBundle retrieves the value with the specified key from
// the MultilinkBundle map field of NokiaConf_Configure. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure) GetMultilinkBundle(BundleId string) *NokiaConf_Configure_MultilinkBundle {

	if t == nil {
		return nil
	}

	key := BundleId

	if lm, ok := t.MultilinkBundle[key]; ok {
		return lm
	}
	return nil
}

// DeleteMultilinkBundle deletes the value with the specified keys from
// the receiver NokiaConf_Configure. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure) DeleteMultilinkBundle(BundleId string) {
	key := BundleId

	delete(t.MultilinkBundle, key)
}

// AppendMultilinkBundle appends the supplied NokiaConf_Configure_MultilinkBundle struct to the
// list MultilinkBundle of NokiaConf_Configure. If the key value(s) specified in
// the supplied NokiaConf_Configure_MultilinkBundle already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure) AppendMultilinkBundle(v *NokiaConf_Configure_MultilinkBundle) error {
	if v.BundleId == nil {
		return fmt.Errorf("invalid nil key received for BundleId")
	}

	key := *v.BundleId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MultilinkBundle == nil {
		t.MultilinkBundle = make(map[string]*NokiaConf_Configure_MultilinkBundle)
	}

	if _, ok := t.MultilinkBundle[key]; ok {
		return fmt.Errorf("duplicate key for list MultilinkBundle %v", key)
	}

	t.MultilinkBundle[key] = v
	return nil
}

// NewPort creates a new entry in the Port list of the
// NokiaConf_Configure struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure) NewPort(PortId string) (*NokiaConf_Configure_Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Port)
	}

	key := PortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &NokiaConf_Configure_Port{
		PortId: &PortId,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the NokiaConf_Configure struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure) RenamePort(oldK, newK string) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.PortId = &newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure) GetOrCreatePort(PortId string) *NokiaConf_Configure_Port {

	key := PortId

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(PortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of NokiaConf_Configure. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure) GetPort(PortId string) *NokiaConf_Configure_Port {

	if t == nil {
		return nil
	}

	key := PortId

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver NokiaConf_Configure. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure) DeletePort(PortId string) {
	key := PortId

	delete(t.Port, key)
}

// AppendPort appends the supplied NokiaConf_Configure_Port struct to the
// list Port of NokiaConf_Configure. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure) AppendPort(v *NokiaConf_Configure_Port) error {
	if v.PortId == nil {
		return fmt.Errorf("invalid nil key received for PortId")
	}

	key := *v.PortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// NewPortPolicy creates a new entry in the PortPolicy list of the
// NokiaConf_Configure struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure) NewPortPolicy(Name string) (*NokiaConf_Configure_PortPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortPolicy == nil {
		t.PortPolicy = make(map[string]*NokiaConf_Configure_PortPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortPolicy", key)
	}

	t.PortPolicy[key] = &NokiaConf_Configure_PortPolicy{
		Name: &Name,
	}

	return t.PortPolicy[key], nil
}

// RenamePortPolicy renames an entry in the list PortPolicy within
// the NokiaConf_Configure struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure) RenamePortPolicy(oldK, newK string) error {
	if _, ok := t.PortPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in PortPolicy", newK)
	}

	e, ok := t.PortPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortPolicy", oldK)
	}
	e.Name = &newK

	t.PortPolicy[newK] = e
	delete(t.PortPolicy, oldK)
	return nil
}

// GetOrCreatePortPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure) GetOrCreatePortPolicy(Name string) *NokiaConf_Configure_PortPolicy {

	key := Name

	if v, ok := t.PortPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortPolicy got unexpected error: %v", err))
	}
	return v
}

// GetPortPolicy retrieves the value with the specified key from
// the PortPolicy map field of NokiaConf_Configure. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure) GetPortPolicy(Name string) *NokiaConf_Configure_PortPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PortPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeletePortPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure) DeletePortPolicy(Name string) {
	key := Name

	delete(t.PortPolicy, key)
}

// AppendPortPolicy appends the supplied NokiaConf_Configure_PortPolicy struct to the
// list PortPolicy of NokiaConf_Configure. If the key value(s) specified in
// the supplied NokiaConf_Configure_PortPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure) AppendPortPolicy(v *NokiaConf_Configure_PortPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortPolicy == nil {
		t.PortPolicy = make(map[string]*NokiaConf_Configure_PortPolicy)
	}

	if _, ok := t.PortPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list PortPolicy %v", key)
	}

	t.PortPolicy[key] = v
	return nil
}

// NewPwPort creates a new entry in the PwPort list of the
// NokiaConf_Configure struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure) NewPwPort(PwPortId uint32) (*NokiaConf_Configure_PwPort, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwPort == nil {
		t.PwPort = make(map[uint32]*NokiaConf_Configure_PwPort)
	}

	key := PwPortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PwPort[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PwPort", key)
	}

	t.PwPort[key] = &NokiaConf_Configure_PwPort{
		PwPortId: &PwPortId,
	}

	return t.PwPort[key], nil
}

// RenamePwPort renames an entry in the list PwPort within
// the NokiaConf_Configure struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure) RenamePwPort(oldK, newK uint32) error {
	if _, ok := t.PwPort[newK]; ok {
		return fmt.Errorf("key %v already exists in PwPort", newK)
	}

	e, ok := t.PwPort[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PwPort", oldK)
	}
	e.PwPortId = &newK

	t.PwPort[newK] = e
	delete(t.PwPort, oldK)
	return nil
}

// GetOrCreatePwPort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure) GetOrCreatePwPort(PwPortId uint32) *NokiaConf_Configure_PwPort {

	key := PwPortId

	if v, ok := t.PwPort[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPwPort(PwPortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePwPort got unexpected error: %v", err))
	}
	return v
}

// GetPwPort retrieves the value with the specified key from
// the PwPort map field of NokiaConf_Configure. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure) GetPwPort(PwPortId uint32) *NokiaConf_Configure_PwPort {

	if t == nil {
		return nil
	}

	key := PwPortId

	if lm, ok := t.PwPort[key]; ok {
		return lm
	}
	return nil
}

// DeletePwPort deletes the value with the specified keys from
// the receiver NokiaConf_Configure. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure) DeletePwPort(PwPortId uint32) {
	key := PwPortId

	delete(t.PwPort, key)
}

// AppendPwPort appends the supplied NokiaConf_Configure_PwPort struct to the
// list PwPort of NokiaConf_Configure. If the key value(s) specified in
// the supplied NokiaConf_Configure_PwPort already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure) AppendPwPort(v *NokiaConf_Configure_PwPort) error {
	if v.PwPortId == nil {
		return fmt.Errorf("invalid nil key received for PwPortId")
	}

	key := *v.PwPortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwPort == nil {
		t.PwPort = make(map[uint32]*NokiaConf_Configure_PwPort)
	}

	if _, ok := t.PwPort[key]; ok {
		return fmt.Errorf("duplicate key for list PwPort %v", key)
	}

	t.PwPort[key] = v
	return nil
}

// NewRouter creates a new entry in the Router list of the
// NokiaConf_Configure struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure) NewRouter(RouterName string) (*NokiaConf_Configure_Router, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Router == nil {
		t.Router = make(map[string]*NokiaConf_Configure_Router)
	}

	key := RouterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Router[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Router", key)
	}

	t.Router[key] = &NokiaConf_Configure_Router{
		RouterName: &RouterName,
	}

	return t.Router[key], nil
}

// RenameRouter renames an entry in the list Router within
// the NokiaConf_Configure struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure) RenameRouter(oldK, newK string) error {
	if _, ok := t.Router[newK]; ok {
		return fmt.Errorf("key %v already exists in Router", newK)
	}

	e, ok := t.Router[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Router", oldK)
	}
	e.RouterName = &newK

	t.Router[newK] = e
	delete(t.Router, oldK)
	return nil
}

// GetOrCreateRouter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure) GetOrCreateRouter(RouterName string) *NokiaConf_Configure_Router {

	key := RouterName

	if v, ok := t.Router[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouter(RouterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouter got unexpected error: %v", err))
	}
	return v
}

// GetRouter retrieves the value with the specified key from
// the Router map field of NokiaConf_Configure. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure) GetRouter(RouterName string) *NokiaConf_Configure_Router {

	if t == nil {
		return nil
	}

	key := RouterName

	if lm, ok := t.Router[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouter deletes the value with the specified keys from
// the receiver NokiaConf_Configure. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure) DeleteRouter(RouterName string) {
	key := RouterName

	delete(t.Router, key)
}

// AppendRouter appends the supplied NokiaConf_Configure_Router struct to the
// list Router of NokiaConf_Configure. If the key value(s) specified in
// the supplied NokiaConf_Configure_Router already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure) AppendRouter(v *NokiaConf_Configure_Router) error {
	if v.RouterName == nil {
		return fmt.Errorf("invalid nil key received for RouterName")
	}

	key := *v.RouterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Router == nil {
		t.Router = make(map[string]*NokiaConf_Configure_Router)
	}

	if _, ok := t.Router[key]; ok {
		return fmt.Errorf("duplicate key for list Router %v", key)
	}

	t.Router[key] = v
	return nil
}

// NewSfm creates a new entry in the Sfm list of the
// NokiaConf_Configure struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure) NewSfm(SfmSlot uint32) (*NokiaConf_Configure_Sfm, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sfm == nil {
		t.Sfm = make(map[uint32]*NokiaConf_Configure_Sfm)
	}

	key := SfmSlot

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sfm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sfm", key)
	}

	t.Sfm[key] = &NokiaConf_Configure_Sfm{
		SfmSlot: &SfmSlot,
	}

	return t.Sfm[key], nil
}

// RenameSfm renames an entry in the list Sfm within
// the NokiaConf_Configure struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure) RenameSfm(oldK, newK uint32) error {
	if _, ok := t.Sfm[newK]; ok {
		return fmt.Errorf("key %v already exists in Sfm", newK)
	}

	e, ok := t.Sfm[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sfm", oldK)
	}
	e.SfmSlot = &newK

	t.Sfm[newK] = e
	delete(t.Sfm, oldK)
	return nil
}

// GetOrCreateSfm retrieves the value with the specified keys from
// the receiver NokiaConf_Configure. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure) GetOrCreateSfm(SfmSlot uint32) *NokiaConf_Configure_Sfm {

	key := SfmSlot

	if v, ok := t.Sfm[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSfm(SfmSlot)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSfm got unexpected error: %v", err))
	}
	return v
}

// GetSfm retrieves the value with the specified key from
// the Sfm map field of NokiaConf_Configure. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure) GetSfm(SfmSlot uint32) *NokiaConf_Configure_Sfm {

	if t == nil {
		return nil
	}

	key := SfmSlot

	if lm, ok := t.Sfm[key]; ok {
		return lm
	}
	return nil
}

// DeleteSfm deletes the value with the specified keys from
// the receiver NokiaConf_Configure. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure) DeleteSfm(SfmSlot uint32) {
	key := SfmSlot

	delete(t.Sfm, key)
}

// AppendSfm appends the supplied NokiaConf_Configure_Sfm struct to the
// list Sfm of NokiaConf_Configure. If the key value(s) specified in
// the supplied NokiaConf_Configure_Sfm already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure) AppendSfm(v *NokiaConf_Configure_Sfm) error {
	if v.SfmSlot == nil {
		return fmt.Errorf("invalid nil key received for SfmSlot")
	}

	key := *v.SfmSlot

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sfm == nil {
		t.Sfm = make(map[uint32]*NokiaConf_Configure_Sfm)
	}

	if _, ok := t.Sfm[key]; ok {
		return fmt.Errorf("duplicate key for list Sfm %v", key)
	}

	t.Sfm[key] = v
	return nil
}

// GetOrCreateAaa retrieves the value of the Aaa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateAaa() *NokiaConf_Configure_Aaa {
	if t.Aaa != nil {
		return t.Aaa
	}
	t.Aaa = &NokiaConf_Configure_Aaa{}
	return t.Aaa
}

// GetOrCreateApplicationAssurance retrieves the value of the ApplicationAssurance field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateApplicationAssurance() *NokiaConf_Configure_ApplicationAssurance {
	if t.ApplicationAssurance != nil {
		return t.ApplicationAssurance
	}
	t.ApplicationAssurance = &NokiaConf_Configure_ApplicationAssurance{}
	return t.ApplicationAssurance
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateBfd() *NokiaConf_Configure_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Bfd{}
	return t.Bfd
}

// GetOrCreateBmp retrieves the value of the Bmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateBmp() *NokiaConf_Configure_Bmp {
	if t.Bmp != nil {
		return t.Bmp
	}
	t.Bmp = &NokiaConf_Configure_Bmp{}
	return t.Bmp
}

// GetOrCreateCallTrace retrieves the value of the CallTrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateCallTrace() *NokiaConf_Configure_CallTrace {
	if t.CallTrace != nil {
		return t.CallTrace
	}
	t.CallTrace = &NokiaConf_Configure_CallTrace{}
	return t.CallTrace
}

// GetOrCreateCflowd retrieves the value of the Cflowd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateCflowd() *NokiaConf_Configure_Cflowd {
	if t.Cflowd != nil {
		return t.Cflowd
	}
	t.Cflowd = &NokiaConf_Configure_Cflowd{}
	return t.Cflowd
}

// GetOrCreateConnectionProfile retrieves the value of the ConnectionProfile field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateConnectionProfile() *NokiaConf_Configure_ConnectionProfile {
	if t.ConnectionProfile != nil {
		return t.ConnectionProfile
	}
	t.ConnectionProfile = &NokiaConf_Configure_ConnectionProfile{}
	return t.ConnectionProfile
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateEthCfm() *NokiaConf_Configure_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_EthCfm{}
	return t.EthCfm
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateFilter() *NokiaConf_Configure_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Filter{}
	return t.Filter
}

// GetOrCreateFwdPathExt retrieves the value of the FwdPathExt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateFwdPathExt() *NokiaConf_Configure_FwdPathExt {
	if t.FwdPathExt != nil {
		return t.FwdPathExt
	}
	t.FwdPathExt = &NokiaConf_Configure_FwdPathExt{}
	return t.FwdPathExt
}

// GetOrCreateGroupEncryption retrieves the value of the GroupEncryption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateGroupEncryption() *NokiaConf_Configure_GroupEncryption {
	if t.GroupEncryption != nil {
		return t.GroupEncryption
	}
	t.GroupEncryption = &NokiaConf_Configure_GroupEncryption{}
	return t.GroupEncryption
}

// GetOrCreateGroups retrieves the value of the Groups field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateGroups() *NokiaConf_Configure_Groups {
	if t.Groups != nil {
		return t.Groups
	}
	t.Groups = &NokiaConf_Configure_Groups{}
	return t.Groups
}

// GetOrCreateIpsec retrieves the value of the Ipsec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateIpsec() *NokiaConf_Configure_Ipsec {
	if t.Ipsec != nil {
		return t.Ipsec
	}
	t.Ipsec = &NokiaConf_Configure_Ipsec{}
	return t.Ipsec
}

// GetOrCreateIsa retrieves the value of the Isa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateIsa() *NokiaConf_Configure_Isa {
	if t.Isa != nil {
		return t.Isa
	}
	t.Isa = &NokiaConf_Configure_Isa{}
	return t.Isa
}

// GetOrCreateLog retrieves the value of the Log field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateLog() *NokiaConf_Configure_Log {
	if t.Log != nil {
		return t.Log
	}
	t.Log = &NokiaConf_Configure_Log{}
	return t.Log
}

// GetOrCreateMacsec retrieves the value of the Macsec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateMacsec() *NokiaConf_Configure_Macsec {
	if t.Macsec != nil {
		return t.Macsec
	}
	t.Macsec = &NokiaConf_Configure_Macsec{}
	return t.Macsec
}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateMcac() *NokiaConf_Configure_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Mcac{}
	return t.Mcac
}

// GetOrCreateMirror retrieves the value of the Mirror field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateMirror() *NokiaConf_Configure_Mirror {
	if t.Mirror != nil {
		return t.Mirror
	}
	t.Mirror = &NokiaConf_Configure_Mirror{}
	return t.Mirror
}

// GetOrCreateMulticastManagement retrieves the value of the MulticastManagement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateMulticastManagement() *NokiaConf_Configure_MulticastManagement {
	if t.MulticastManagement != nil {
		return t.MulticastManagement
	}
	t.MulticastManagement = &NokiaConf_Configure_MulticastManagement{}
	return t.MulticastManagement
}

// GetOrCreateOamPm retrieves the value of the OamPm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateOamPm() *NokiaConf_Configure_OamPm {
	if t.OamPm != nil {
		return t.OamPm
	}
	t.OamPm = &NokiaConf_Configure_OamPm{}
	return t.OamPm
}

// GetOrCreateOpenflow retrieves the value of the Openflow field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateOpenflow() *NokiaConf_Configure_Openflow {
	if t.Openflow != nil {
		return t.Openflow
	}
	t.Openflow = &NokiaConf_Configure_Openflow{}
	return t.Openflow
}

// GetOrCreatePolicyOptions retrieves the value of the PolicyOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreatePolicyOptions() *NokiaConf_Configure_PolicyOptions {
	if t.PolicyOptions != nil {
		return t.PolicyOptions
	}
	t.PolicyOptions = &NokiaConf_Configure_PolicyOptions{}
	return t.PolicyOptions
}

// GetOrCreatePortXc retrieves the value of the PortXc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreatePortXc() *NokiaConf_Configure_PortXc {
	if t.PortXc != nil {
		return t.PortXc
	}
	t.PortXc = &NokiaConf_Configure_PortXc{}
	return t.PortXc
}

// GetOrCreatePython retrieves the value of the Python field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreatePython() *NokiaConf_Configure_Python {
	if t.Python != nil {
		return t.Python
	}
	t.Python = &NokiaConf_Configure_Python{}
	return t.Python
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateQos() *NokiaConf_Configure_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Qos{}
	return t.Qos
}

// GetOrCreateRedundancy retrieves the value of the Redundancy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateRedundancy() *NokiaConf_Configure_Redundancy {
	if t.Redundancy != nil {
		return t.Redundancy
	}
	t.Redundancy = &NokiaConf_Configure_Redundancy{}
	return t.Redundancy
}

// GetOrCreateRoutingOptions retrieves the value of the RoutingOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateRoutingOptions() *NokiaConf_Configure_RoutingOptions {
	if t.RoutingOptions != nil {
		return t.RoutingOptions
	}
	t.RoutingOptions = &NokiaConf_Configure_RoutingOptions{}
	return t.RoutingOptions
}

// GetOrCreateSaa retrieves the value of the Saa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateSaa() *NokiaConf_Configure_Saa {
	if t.Saa != nil {
		return t.Saa
	}
	t.Saa = &NokiaConf_Configure_Saa{}
	return t.Saa
}

// GetOrCreateSatellite retrieves the value of the Satellite field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateSatellite() *NokiaConf_Configure_Satellite {
	if t.Satellite != nil {
		return t.Satellite
	}
	t.Satellite = &NokiaConf_Configure_Satellite{}
	return t.Satellite
}

// GetOrCreateService retrieves the value of the Service field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateService() *NokiaConf_Configure_Service {
	if t.Service != nil {
		return t.Service
	}
	t.Service = &NokiaConf_Configure_Service{}
	return t.Service
}

// GetOrCreateSubscriberMgmt retrieves the value of the SubscriberMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateSubscriberMgmt() *NokiaConf_Configure_SubscriberMgmt {
	if t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	t.SubscriberMgmt = &NokiaConf_Configure_SubscriberMgmt{}
	return t.SubscriberMgmt
}

// GetOrCreateSystem retrieves the value of the System field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateSystem() *NokiaConf_Configure_System {
	if t.System != nil {
		return t.System
	}
	t.System = &NokiaConf_Configure_System{}
	return t.System
}

// GetOrCreateTestOam retrieves the value of the TestOam field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateTestOam() *NokiaConf_Configure_TestOam {
	if t.TestOam != nil {
		return t.TestOam
	}
	t.TestOam = &NokiaConf_Configure_TestOam{}
	return t.TestOam
}

// GetOrCreateVrrp retrieves the value of the Vrrp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure) GetOrCreateVrrp() *NokiaConf_Configure_Vrrp {
	if t.Vrrp != nil {
		return t.Vrrp
	}
	t.Vrrp = &NokiaConf_Configure_Vrrp{}
	return t.Vrrp
}

// GetAaa returns the value of the Aaa struct pointer
// from NokiaConf_Configure. If the receiver or the field Aaa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetAaa() *NokiaConf_Configure_Aaa {
	if t != nil && t.Aaa != nil {
		return t.Aaa
	}
	return nil
}

// GetApplicationAssurance returns the value of the ApplicationAssurance struct pointer
// from NokiaConf_Configure. If the receiver or the field ApplicationAssurance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetApplicationAssurance() *NokiaConf_Configure_ApplicationAssurance {
	if t != nil && t.ApplicationAssurance != nil {
		return t.ApplicationAssurance
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetBfd() *NokiaConf_Configure_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetBmp returns the value of the Bmp struct pointer
// from NokiaConf_Configure. If the receiver or the field Bmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetBmp() *NokiaConf_Configure_Bmp {
	if t != nil && t.Bmp != nil {
		return t.Bmp
	}
	return nil
}

// GetCallTrace returns the value of the CallTrace struct pointer
// from NokiaConf_Configure. If the receiver or the field CallTrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetCallTrace() *NokiaConf_Configure_CallTrace {
	if t != nil && t.CallTrace != nil {
		return t.CallTrace
	}
	return nil
}

// GetCflowd returns the value of the Cflowd struct pointer
// from NokiaConf_Configure. If the receiver or the field Cflowd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetCflowd() *NokiaConf_Configure_Cflowd {
	if t != nil && t.Cflowd != nil {
		return t.Cflowd
	}
	return nil
}

// GetConnectionProfile returns the value of the ConnectionProfile struct pointer
// from NokiaConf_Configure. If the receiver or the field ConnectionProfile is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetConnectionProfile() *NokiaConf_Configure_ConnectionProfile {
	if t != nil && t.ConnectionProfile != nil {
		return t.ConnectionProfile
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetEthCfm() *NokiaConf_Configure_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetFilter() *NokiaConf_Configure_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetFwdPathExt returns the value of the FwdPathExt struct pointer
// from NokiaConf_Configure. If the receiver or the field FwdPathExt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetFwdPathExt() *NokiaConf_Configure_FwdPathExt {
	if t != nil && t.FwdPathExt != nil {
		return t.FwdPathExt
	}
	return nil
}

// GetGroupEncryption returns the value of the GroupEncryption struct pointer
// from NokiaConf_Configure. If the receiver or the field GroupEncryption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetGroupEncryption() *NokiaConf_Configure_GroupEncryption {
	if t != nil && t.GroupEncryption != nil {
		return t.GroupEncryption
	}
	return nil
}

// GetGroups returns the value of the Groups struct pointer
// from NokiaConf_Configure. If the receiver or the field Groups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetGroups() *NokiaConf_Configure_Groups {
	if t != nil && t.Groups != nil {
		return t.Groups
	}
	return nil
}

// GetIpsec returns the value of the Ipsec struct pointer
// from NokiaConf_Configure. If the receiver or the field Ipsec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetIpsec() *NokiaConf_Configure_Ipsec {
	if t != nil && t.Ipsec != nil {
		return t.Ipsec
	}
	return nil
}

// GetIsa returns the value of the Isa struct pointer
// from NokiaConf_Configure. If the receiver or the field Isa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetIsa() *NokiaConf_Configure_Isa {
	if t != nil && t.Isa != nil {
		return t.Isa
	}
	return nil
}

// GetLog returns the value of the Log struct pointer
// from NokiaConf_Configure. If the receiver or the field Log is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetLog() *NokiaConf_Configure_Log {
	if t != nil && t.Log != nil {
		return t.Log
	}
	return nil
}

// GetMacsec returns the value of the Macsec struct pointer
// from NokiaConf_Configure. If the receiver or the field Macsec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetMacsec() *NokiaConf_Configure_Macsec {
	if t != nil && t.Macsec != nil {
		return t.Macsec
	}
	return nil
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetMcac() *NokiaConf_Configure_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetMirror returns the value of the Mirror struct pointer
// from NokiaConf_Configure. If the receiver or the field Mirror is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetMirror() *NokiaConf_Configure_Mirror {
	if t != nil && t.Mirror != nil {
		return t.Mirror
	}
	return nil
}

// GetMulticastManagement returns the value of the MulticastManagement struct pointer
// from NokiaConf_Configure. If the receiver or the field MulticastManagement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetMulticastManagement() *NokiaConf_Configure_MulticastManagement {
	if t != nil && t.MulticastManagement != nil {
		return t.MulticastManagement
	}
	return nil
}

// GetOamPm returns the value of the OamPm struct pointer
// from NokiaConf_Configure. If the receiver or the field OamPm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetOamPm() *NokiaConf_Configure_OamPm {
	if t != nil && t.OamPm != nil {
		return t.OamPm
	}
	return nil
}

// GetOpenflow returns the value of the Openflow struct pointer
// from NokiaConf_Configure. If the receiver or the field Openflow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetOpenflow() *NokiaConf_Configure_Openflow {
	if t != nil && t.Openflow != nil {
		return t.Openflow
	}
	return nil
}

// GetPolicyOptions returns the value of the PolicyOptions struct pointer
// from NokiaConf_Configure. If the receiver or the field PolicyOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetPolicyOptions() *NokiaConf_Configure_PolicyOptions {
	if t != nil && t.PolicyOptions != nil {
		return t.PolicyOptions
	}
	return nil
}

// GetPortXc returns the value of the PortXc struct pointer
// from NokiaConf_Configure. If the receiver or the field PortXc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetPortXc() *NokiaConf_Configure_PortXc {
	if t != nil && t.PortXc != nil {
		return t.PortXc
	}
	return nil
}

// GetPython returns the value of the Python struct pointer
// from NokiaConf_Configure. If the receiver or the field Python is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetPython() *NokiaConf_Configure_Python {
	if t != nil && t.Python != nil {
		return t.Python
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetQos() *NokiaConf_Configure_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetRedundancy returns the value of the Redundancy struct pointer
// from NokiaConf_Configure. If the receiver or the field Redundancy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetRedundancy() *NokiaConf_Configure_Redundancy {
	if t != nil && t.Redundancy != nil {
		return t.Redundancy
	}
	return nil
}

// GetRoutingOptions returns the value of the RoutingOptions struct pointer
// from NokiaConf_Configure. If the receiver or the field RoutingOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetRoutingOptions() *NokiaConf_Configure_RoutingOptions {
	if t != nil && t.RoutingOptions != nil {
		return t.RoutingOptions
	}
	return nil
}

// GetSaa returns the value of the Saa struct pointer
// from NokiaConf_Configure. If the receiver or the field Saa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetSaa() *NokiaConf_Configure_Saa {
	if t != nil && t.Saa != nil {
		return t.Saa
	}
	return nil
}

// GetSatellite returns the value of the Satellite struct pointer
// from NokiaConf_Configure. If the receiver or the field Satellite is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetSatellite() *NokiaConf_Configure_Satellite {
	if t != nil && t.Satellite != nil {
		return t.Satellite
	}
	return nil
}

// GetService returns the value of the Service struct pointer
// from NokiaConf_Configure. If the receiver or the field Service is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetService() *NokiaConf_Configure_Service {
	if t != nil && t.Service != nil {
		return t.Service
	}
	return nil
}

// GetSubscriberMgmt returns the value of the SubscriberMgmt struct pointer
// from NokiaConf_Configure. If the receiver or the field SubscriberMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetSubscriberMgmt() *NokiaConf_Configure_SubscriberMgmt {
	if t != nil && t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	return nil
}

// GetSystem returns the value of the System struct pointer
// from NokiaConf_Configure. If the receiver or the field System is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetSystem() *NokiaConf_Configure_System {
	if t != nil && t.System != nil {
		return t.System
	}
	return nil
}

// GetTestOam returns the value of the TestOam struct pointer
// from NokiaConf_Configure. If the receiver or the field TestOam is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetTestOam() *NokiaConf_Configure_TestOam {
	if t != nil && t.TestOam != nil {
		return t.TestOam
	}
	return nil
}

// GetVrrp returns the value of the Vrrp struct pointer
// from NokiaConf_Configure. If the receiver or the field Vrrp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure) GetVrrp() *NokiaConf_Configure_Vrrp {
	if t != nil && t.Vrrp != nil {
		return t.Vrrp
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Aaa.PopulateDefaults()
	t.ApplicationAssurance.PopulateDefaults()
	t.Bfd.PopulateDefaults()
	t.Bmp.PopulateDefaults()
	t.CallTrace.PopulateDefaults()
	t.Cflowd.PopulateDefaults()
	t.ConnectionProfile.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.Filter.PopulateDefaults()
	t.FwdPathExt.PopulateDefaults()
	t.GroupEncryption.PopulateDefaults()
	t.Groups.PopulateDefaults()
	t.Ipsec.PopulateDefaults()
	t.Isa.PopulateDefaults()
	t.Log.PopulateDefaults()
	t.Macsec.PopulateDefaults()
	t.Mcac.PopulateDefaults()
	t.Mirror.PopulateDefaults()
	t.MulticastManagement.PopulateDefaults()
	t.OamPm.PopulateDefaults()
	t.Openflow.PopulateDefaults()
	t.PolicyOptions.PopulateDefaults()
	t.PortXc.PopulateDefaults()
	t.Python.PopulateDefaults()
	t.Qos.PopulateDefaults()
	t.Redundancy.PopulateDefaults()
	t.RoutingOptions.PopulateDefaults()
	t.Saa.PopulateDefaults()
	t.Satellite.PopulateDefaults()
	t.Service.PopulateDefaults()
	t.SubscriberMgmt.PopulateDefaults()
	t.System.PopulateDefaults()
	t.TestOam.PopulateDefaults()
	t.Vrrp.PopulateDefaults()
	for _, e := range t.Aps {
		e.PopulateDefaults()
	}
	for _, e := range t.Card {
		e.PopulateDefaults()
	}
	for _, e := range t.Chassis {
		e.PopulateDefaults()
	}
	for _, e := range t.Esa {
		e.PopulateDefaults()
	}
	for _, e := range t.EthRing {
		e.PopulateDefaults()
	}
	for _, e := range t.Lag {
		e.PopulateDefaults()
	}
	for _, e := range t.MultilinkBundle {
		e.PopulateDefaults()
	}
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
	for _, e := range t.PortPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.PwPort {
		e.PopulateDefaults()
	}
	for _, e := range t.Router {
		e.PopulateDefaults()
	}
	for _, e := range t.Sfm {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure.
func (*NokiaConf_Configure) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa represents the /nokia-conf/configure/aaa YANG schema element.
type NokiaConf_Configure_Aaa struct {
	ApplyGroups        []string                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Diameter           *NokiaConf_Configure_Aaa_Diameter `path:"diameter" module:"nokia-conf"`
	Radius             *NokiaConf_Configure_Aaa_Radius   `path:"radius" module:"nokia-conf"`
	Wpp                *NokiaConf_Configure_Aaa_Wpp      `path:"wpp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa) IsYANGGoStruct() {}

// GetOrCreateDiameter retrieves the value of the Diameter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa) GetOrCreateDiameter() *NokiaConf_Configure_Aaa_Diameter {
	if t.Diameter != nil {
		return t.Diameter
	}
	t.Diameter = &NokiaConf_Configure_Aaa_Diameter{}
	return t.Diameter
}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa) GetOrCreateRadius() *NokiaConf_Configure_Aaa_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &NokiaConf_Configure_Aaa_Radius{}
	return t.Radius
}

// GetOrCreateWpp retrieves the value of the Wpp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa) GetOrCreateWpp() *NokiaConf_Configure_Aaa_Wpp {
	if t.Wpp != nil {
		return t.Wpp
	}
	t.Wpp = &NokiaConf_Configure_Aaa_Wpp{}
	return t.Wpp
}

// GetDiameter returns the value of the Diameter struct pointer
// from NokiaConf_Configure_Aaa. If the receiver or the field Diameter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa) GetDiameter() *NokiaConf_Configure_Aaa_Diameter {
	if t != nil && t.Diameter != nil {
		return t.Diameter
	}
	return nil
}

// GetRadius returns the value of the Radius struct pointer
// from NokiaConf_Configure_Aaa. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa) GetRadius() *NokiaConf_Configure_Aaa_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetWpp returns the value of the Wpp struct pointer
// from NokiaConf_Configure_Aaa. If the receiver or the field Wpp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa) GetWpp() *NokiaConf_Configure_Aaa_Wpp {
	if t != nil && t.Wpp != nil {
		return t.Wpp
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Aaa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Aaa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Diameter.PopulateDefaults()
	t.Radius.PopulateDefaults()
	t.Wpp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa.
func (*NokiaConf_Configure_Aaa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Diameter represents the /nokia-conf/configure/aaa/diameter YANG schema element.
type NokiaConf_Configure_Aaa_Diameter struct {
	Node       map[string]*NokiaConf_Configure_Aaa_Diameter_Node       `path:"node" module:"nokia-conf"`
	PeerPolicy map[string]*NokiaConf_Configure_Aaa_Diameter_PeerPolicy `path:"peer-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Diameter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Diameter) IsYANGGoStruct() {}

// NewNode creates a new entry in the Node list of the
// NokiaConf_Configure_Aaa_Diameter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Aaa_Diameter) NewNode(OriginHost string) (*NokiaConf_Configure_Aaa_Diameter_Node, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Node == nil {
		t.Node = make(map[string]*NokiaConf_Configure_Aaa_Diameter_Node)
	}

	key := OriginHost

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Node[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Node", key)
	}

	t.Node[key] = &NokiaConf_Configure_Aaa_Diameter_Node{
		OriginHost: &OriginHost,
	}

	return t.Node[key], nil
}

// RenameNode renames an entry in the list Node within
// the NokiaConf_Configure_Aaa_Diameter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Aaa_Diameter) RenameNode(oldK, newK string) error {
	if _, ok := t.Node[newK]; ok {
		return fmt.Errorf("key %v already exists in Node", newK)
	}

	e, ok := t.Node[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Node", oldK)
	}
	e.OriginHost = &newK

	t.Node[newK] = e
	delete(t.Node, oldK)
	return nil
}

// GetOrCreateNode retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Diameter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Aaa_Diameter) GetOrCreateNode(OriginHost string) *NokiaConf_Configure_Aaa_Diameter_Node {

	key := OriginHost

	if v, ok := t.Node[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNode(OriginHost)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNode got unexpected error: %v", err))
	}
	return v
}

// GetNode retrieves the value with the specified key from
// the Node map field of NokiaConf_Configure_Aaa_Diameter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Aaa_Diameter) GetNode(OriginHost string) *NokiaConf_Configure_Aaa_Diameter_Node {

	if t == nil {
		return nil
	}

	key := OriginHost

	if lm, ok := t.Node[key]; ok {
		return lm
	}
	return nil
}

// DeleteNode deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Diameter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Aaa_Diameter) DeleteNode(OriginHost string) {
	key := OriginHost

	delete(t.Node, key)
}

// AppendNode appends the supplied NokiaConf_Configure_Aaa_Diameter_Node struct to the
// list Node of NokiaConf_Configure_Aaa_Diameter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Aaa_Diameter_Node already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Aaa_Diameter) AppendNode(v *NokiaConf_Configure_Aaa_Diameter_Node) error {
	if v.OriginHost == nil {
		return fmt.Errorf("invalid nil key received for OriginHost")
	}

	key := *v.OriginHost

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Node == nil {
		t.Node = make(map[string]*NokiaConf_Configure_Aaa_Diameter_Node)
	}

	if _, ok := t.Node[key]; ok {
		return fmt.Errorf("duplicate key for list Node %v", key)
	}

	t.Node[key] = v
	return nil
}

// NewPeerPolicy creates a new entry in the PeerPolicy list of the
// NokiaConf_Configure_Aaa_Diameter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Aaa_Diameter) NewPeerPolicy(Name string) (*NokiaConf_Configure_Aaa_Diameter_PeerPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PeerPolicy == nil {
		t.PeerPolicy = make(map[string]*NokiaConf_Configure_Aaa_Diameter_PeerPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PeerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PeerPolicy", key)
	}

	t.PeerPolicy[key] = &NokiaConf_Configure_Aaa_Diameter_PeerPolicy{
		Name: &Name,
	}

	return t.PeerPolicy[key], nil
}

// RenamePeerPolicy renames an entry in the list PeerPolicy within
// the NokiaConf_Configure_Aaa_Diameter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Aaa_Diameter) RenamePeerPolicy(oldK, newK string) error {
	if _, ok := t.PeerPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in PeerPolicy", newK)
	}

	e, ok := t.PeerPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PeerPolicy", oldK)
	}
	e.Name = &newK

	t.PeerPolicy[newK] = e
	delete(t.PeerPolicy, oldK)
	return nil
}

// GetOrCreatePeerPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Diameter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Aaa_Diameter) GetOrCreatePeerPolicy(Name string) *NokiaConf_Configure_Aaa_Diameter_PeerPolicy {

	key := Name

	if v, ok := t.PeerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeerPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetPeerPolicy retrieves the value with the specified key from
// the PeerPolicy map field of NokiaConf_Configure_Aaa_Diameter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Aaa_Diameter) GetPeerPolicy(Name string) *NokiaConf_Configure_Aaa_Diameter_PeerPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PeerPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeletePeerPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Diameter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Aaa_Diameter) DeletePeerPolicy(Name string) {
	key := Name

	delete(t.PeerPolicy, key)
}

// AppendPeerPolicy appends the supplied NokiaConf_Configure_Aaa_Diameter_PeerPolicy struct to the
// list PeerPolicy of NokiaConf_Configure_Aaa_Diameter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Aaa_Diameter_PeerPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Aaa_Diameter) AppendPeerPolicy(v *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PeerPolicy == nil {
		t.PeerPolicy = make(map[string]*NokiaConf_Configure_Aaa_Diameter_PeerPolicy)
	}

	if _, ok := t.PeerPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list PeerPolicy %v", key)
	}

	t.PeerPolicy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Diameter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Diameter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Node {
		e.PopulateDefaults()
	}
	for _, e := range t.PeerPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Diameter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Diameter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Diameter.
func (*NokiaConf_Configure_Aaa_Diameter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Diameter_Node represents the /nokia-conf/configure/aaa/diameter/node YANG schema element.
type NokiaConf_Configure_Aaa_Diameter_Node struct {
	ApplyGroups        []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Connection         *NokiaConf_Configure_Aaa_Diameter_Node_Connection      `path:"connection" module:"nokia-conf"`
	Description        *string                                                `path:"description" module:"nokia-conf"`
	OriginHost         *string                                                `path:"origin-host" module:"nokia-conf"`
	OriginRealm        *string                                                `path:"origin-realm" module:"nokia-conf"`
	Peer               map[uint32]*NokiaConf_Configure_Aaa_Diameter_Node_Peer `path:"peer" module:"nokia-conf"`
	PythonPolicy       *string                                                `path:"python-policy" module:"nokia-conf"`
	RouterInstance     *string                                                `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Diameter_Node implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Diameter_Node) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Aaa_Diameter_Node struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Aaa_Diameter_Node) NewPeer(Index uint32) (*NokiaConf_Configure_Aaa_Diameter_Node_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[uint32]*NokiaConf_Configure_Aaa_Diameter_Node_Peer)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Aaa_Diameter_Node_Peer{
		Index: &Index,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Aaa_Diameter_Node struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node) RenamePeer(oldK, newK uint32) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.Index = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Diameter_Node. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Aaa_Diameter_Node) GetOrCreatePeer(Index uint32) *NokiaConf_Configure_Aaa_Diameter_Node_Peer {

	key := Index

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Aaa_Diameter_Node. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Aaa_Diameter_Node) GetPeer(Index uint32) *NokiaConf_Configure_Aaa_Diameter_Node_Peer {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Diameter_Node. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Aaa_Diameter_Node) DeletePeer(Index uint32) {
	key := Index

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Aaa_Diameter_Node_Peer struct to the
// list Peer of NokiaConf_Configure_Aaa_Diameter_Node. If the key value(s) specified in
// the supplied NokiaConf_Configure_Aaa_Diameter_Node_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Aaa_Diameter_Node) AppendPeer(v *NokiaConf_Configure_Aaa_Diameter_Node_Peer) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[uint32]*NokiaConf_Configure_Aaa_Diameter_Node_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetOrCreateConnection retrieves the value of the Connection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Diameter_Node) GetOrCreateConnection() *NokiaConf_Configure_Aaa_Diameter_Node_Connection {
	if t.Connection != nil {
		return t.Connection
	}
	t.Connection = &NokiaConf_Configure_Aaa_Diameter_Node_Connection{}
	return t.Connection
}

// GetConnection returns the value of the Connection struct pointer
// from NokiaConf_Configure_Aaa_Diameter_Node. If the receiver or the field Connection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Diameter_Node) GetConnection() *NokiaConf_Configure_Aaa_Diameter_Node_Connection {
	if t != nil && t.Connection != nil {
		return t.Connection
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Aaa_Diameter_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Aaa_Diameter_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Aaa_Diameter_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetOriginHost retrieves the value of the leaf OriginHost from the NokiaConf_Configure_Aaa_Diameter_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginHost is set, it can
// safely use t.GetOriginHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node) GetOriginHost() string {
	if t == nil || t.OriginHost == nil {
		return ""
	}
	return *t.OriginHost
}

// GetOriginRealm retrieves the value of the leaf OriginRealm from the NokiaConf_Configure_Aaa_Diameter_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginRealm is set, it can
// safely use t.GetOriginRealm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginRealm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node) GetOriginRealm() string {
	if t == nil || t.OriginRealm == nil {
		return ""
	}
	return *t.OriginRealm
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Aaa_Diameter_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Aaa_Diameter_Node
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "Base"
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Diameter_Node
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Diameter_Node) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RouterInstance == nil {
		var v string = "Base"
		t.RouterInstance = &v
	}
	t.Connection.PopulateDefaults()
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Aaa_Diameter_Node struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Aaa_Diameter_Node) ΛListKeyMap() (map[string]interface{}, error) {
	if t.OriginHost == nil {
		return nil, fmt.Errorf("nil value for key OriginHost")
	}

	return map[string]interface{}{
		"origin-host": *t.OriginHost,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_Node) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Diameter_Node"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_Node) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Diameter_Node) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Diameter_Node.
func (*NokiaConf_Configure_Aaa_Diameter_Node) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Diameter_Node_Connection represents the /nokia-conf/configure/aaa/diameter/node/connection YANG schema element.
type NokiaConf_Configure_Aaa_Diameter_Node_Connection struct {
	Ipv4  *NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6  *NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv6 `path:"ipv6" module:"nokia-conf"`
	Timer *uint32                                                `path:"timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Diameter_Node_Connection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Diameter_Node_Connection) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection) GetOrCreateIpv4() *NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection) GetOrCreateIpv6() *NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Aaa_Diameter_Node_Connection. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection) GetIpv4() *NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Aaa_Diameter_Node_Connection. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection) GetIpv6() *NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetTimer retrieves the value of the leaf Timer from the NokiaConf_Configure_Aaa_Diameter_Node_Connection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timer is set, it can
// safely use t.GetTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection) GetTimer() uint32 {
	if t == nil || t.Timer == nil {
		return 30
	}
	return *t.Timer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Diameter_Node_Connection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Timer == nil {
		var v uint32 = 30
		t.Timer = &v
	}
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Diameter_Node_Connection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Diameter_Node_Connection.
func (*NokiaConf_Configure_Aaa_Diameter_Node_Connection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv4 represents the /nokia-conf/configure/aaa/diameter/node/connection/ipv4 YANG schema element.
type NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv4 struct {
	AllowConnections *bool   `path:"allow-connections" module:"nokia-conf"`
	LocalAddress     *string `path:"local-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv4) IsYANGGoStruct() {}

// GetAllowConnections retrieves the value of the leaf AllowConnections from the NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowConnections is set, it can
// safely use t.GetAllowConnections() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowConnections == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv4) GetAllowConnections() bool {
	if t == nil || t.AllowConnections == nil {
		return false
	}
	return *t.AllowConnections
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv4) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowConnections == nil {
		var v bool = false
		t.AllowConnections = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv4.
func (*NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv6 represents the /nokia-conf/configure/aaa/diameter/node/connection/ipv6 YANG schema element.
type NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv6 struct {
	AllowConnections *bool   `path:"allow-connections" module:"nokia-conf"`
	LocalAddress     *string `path:"local-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv6) IsYANGGoStruct() {}

// GetAllowConnections retrieves the value of the leaf AllowConnections from the NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowConnections is set, it can
// safely use t.GetAllowConnections() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowConnections == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv6) GetAllowConnections() bool {
	if t == nil || t.AllowConnections == nil {
		return false
	}
	return *t.AllowConnections
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv6) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowConnections == nil {
		var v bool = false
		t.AllowConnections = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv6.
func (*NokiaConf_Configure_Aaa_Diameter_Node_Connection_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Diameter_Node_Peer represents the /nokia-conf/configure/aaa/diameter/node/peer YANG schema element.
type NokiaConf_Configure_Aaa_Diameter_Node_Peer struct {
	Address            *string                                                      `path:"address" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	ConnectionTimer    *uint32                                                      `path:"connection-timer" module:"nokia-conf"`
	DefaultPeer        *bool                                                        `path:"default-peer" module:"nokia-conf"`
	DestinationHost    *string                                                      `path:"destination-host" module:"nokia-conf"`
	Index              *uint32                                                      `path:"index" module:"nokia-conf"`
	Preference         *uint32                                                      `path:"preference" module:"nokia-conf"`
	Route              map[uint32]*NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route `path:"route" module:"nokia-conf"`
	WatchdogTimer      *uint32                                                      `path:"watchdog-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Diameter_Node_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Diameter_Node_Peer) IsYANGGoStruct() {}

// NewRoute creates a new entry in the Route list of the
// NokiaConf_Configure_Aaa_Diameter_Node_Peer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) NewRoute(Index uint32) (*NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[uint32]*NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route{
		Index: &Index,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NokiaConf_Configure_Aaa_Diameter_Node_Peer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) RenameRoute(oldK, newK uint32) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Index = &newK

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Diameter_Node_Peer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) GetOrCreateRoute(Index uint32) *NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route {

	key := Index

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NokiaConf_Configure_Aaa_Diameter_Node_Peer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) GetRoute(Index uint32) *NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Diameter_Node_Peer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) DeleteRoute(Index uint32) {
	key := Index

	delete(t.Route, key)
}

// AppendRoute appends the supplied NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route struct to the
// list Route of NokiaConf_Configure_Aaa_Diameter_Node_Peer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) AppendRoute(v *NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[uint32]*NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Aaa_Diameter_Node_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Aaa_Diameter_Node_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Aaa_Diameter_Node_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Aaa_Diameter_Node_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetConnectionTimer retrieves the value of the leaf ConnectionTimer from the NokiaConf_Configure_Aaa_Diameter_Node_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionTimer is set, it can
// safely use t.GetConnectionTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) GetConnectionTimer() uint32 {
	if t == nil || t.ConnectionTimer == nil {
		return 0
	}
	return *t.ConnectionTimer
}

// GetDefaultPeer retrieves the value of the leaf DefaultPeer from the NokiaConf_Configure_Aaa_Diameter_Node_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultPeer is set, it can
// safely use t.GetDefaultPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultPeer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) GetDefaultPeer() bool {
	if t == nil || t.DefaultPeer == nil {
		return false
	}
	return *t.DefaultPeer
}

// GetDestinationHost retrieves the value of the leaf DestinationHost from the NokiaConf_Configure_Aaa_Diameter_Node_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationHost is set, it can
// safely use t.GetDestinationHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) GetDestinationHost() string {
	if t == nil || t.DestinationHost == nil {
		return ""
	}
	return *t.DestinationHost
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Aaa_Diameter_Node_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Aaa_Diameter_Node_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 50
	}
	return *t.Preference
}

// GetWatchdogTimer retrieves the value of the leaf WatchdogTimer from the NokiaConf_Configure_Aaa_Diameter_Node_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WatchdogTimer is set, it can
// safely use t.GetWatchdogTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WatchdogTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) GetWatchdogTimer() uint32 {
	if t == nil || t.WatchdogTimer == nil {
		return 0
	}
	return *t.WatchdogTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Diameter_Node_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DefaultPeer == nil {
		var v bool = false
		t.DefaultPeer = &v
	}
	if t.Preference == nil {
		var v uint32 = 50
		t.Preference = &v
	}
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Aaa_Diameter_Node_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Diameter_Node_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Diameter_Node_Peer.
func (*NokiaConf_Configure_Aaa_Diameter_Node_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route represents the /nokia-conf/configure/aaa/diameter/node/peer/route YANG schema element.
type NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route struct {
	Application        E_NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route_Application `path:"application" module:"nokia-conf"`
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *uint32                                                        `path:"index" module:"nokia-conf"`
	Preference         *uint32                                                        `path:"preference" module:"nokia-conf"`
	Realm              *string                                                        `path:"realm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route) IsYANGGoStruct() {}

// GetApplication retrieves the value of the leaf Application from the NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Application is set, it can
// safely use t.GetApplication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Application == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route) GetApplication() E_NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route_Application {
	if t == nil || t.Application == 0 {
		return 0
	}
	return t.Application
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 50
	}
	return *t.Preference
}

// GetRealm retrieves the value of the leaf Realm from the NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Realm is set, it can
// safely use t.GetRealm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Realm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route) GetRealm() string {
	if t == nil || t.Realm == nil {
		return ""
	}
	return *t.Realm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Preference == nil {
		var v uint32 = 50
		t.Preference = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route.
func (*NokiaConf_Configure_Aaa_Diameter_Node_Peer_Route) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Diameter_PeerPolicy represents the /nokia-conf/configure/aaa/diameter/peer-policy YANG schema element.
type NokiaConf_Configure_Aaa_Diameter_PeerPolicy struct {
	Applications       *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications    `path:"applications" module:"nokia-conf"`
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	ConnectionTimer    *uint32                                                      `path:"connection-timer" module:"nokia-conf"`
	Description        *string                                                      `path:"description" module:"nokia-conf"`
	Ipv4SourceAddress  *string                                                      `path:"ipv4-source-address" module:"nokia-conf"`
	Ipv6SourceAddress  *string                                                      `path:"ipv6-source-address" module:"nokia-conf"`
	Name               *string                                                      `path:"name" module:"nokia-conf"`
	OriginHost         *string                                                      `path:"origin-host" module:"nokia-conf"`
	OriginRealm        *string                                                      `path:"origin-realm" module:"nokia-conf"`
	Peer               map[string]*NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer `path:"peer" module:"nokia-conf"`
	Proxy              *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy           `path:"proxy" module:"nokia-conf"`
	PythonPolicy       *string                                                      `path:"python-policy" module:"nokia-conf"`
	Role               E_NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Role           `path:"role" module:"nokia-conf"`
	RouterInstance     *string                                                      `path:"router-instance" module:"nokia-conf"`
	TransactionTimer   *uint32                                                      `path:"transaction-timer" module:"nokia-conf"`
	VendorSupport      E_NokiaTypesDiameter_DiamVendorSupport                       `path:"vendor-support" module:"nokia-conf"`
	WatchdogTimer      *uint32                                                      `path:"watchdog-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Diameter_PeerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Diameter_PeerPolicy) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Aaa_Diameter_PeerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) NewPeer(PeerName string) (*NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer)
	}

	key := PeerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer{
		PeerName: &PeerName,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Aaa_Diameter_PeerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.PeerName = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Diameter_PeerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetOrCreatePeer(PeerName string) *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer {

	key := PeerName

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(PeerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Aaa_Diameter_PeerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetPeer(PeerName string) *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer {

	if t == nil {
		return nil
	}

	key := PeerName

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Diameter_PeerPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) DeletePeer(PeerName string) {
	key := PeerName

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer struct to the
// list Peer of NokiaConf_Configure_Aaa_Diameter_PeerPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) AppendPeer(v *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) error {
	if v.PeerName == nil {
		return fmt.Errorf("invalid nil key received for PeerName")
	}

	key := *v.PeerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetOrCreateApplications retrieves the value of the Applications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetOrCreateApplications() *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications {
	if t.Applications != nil {
		return t.Applications
	}
	t.Applications = &NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications{}
	return t.Applications
}

// GetOrCreateProxy retrieves the value of the Proxy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetOrCreateProxy() *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy {
	if t.Proxy != nil {
		return t.Proxy
	}
	t.Proxy = &NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy{}
	return t.Proxy
}

// GetApplications returns the value of the Applications struct pointer
// from NokiaConf_Configure_Aaa_Diameter_PeerPolicy. If the receiver or the field Applications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetApplications() *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications {
	if t != nil && t.Applications != nil {
		return t.Applications
	}
	return nil
}

// GetProxy returns the value of the Proxy struct pointer
// from NokiaConf_Configure_Aaa_Diameter_PeerPolicy. If the receiver or the field Proxy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetProxy() *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy {
	if t != nil && t.Proxy != nil {
		return t.Proxy
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetConnectionTimer retrieves the value of the leaf ConnectionTimer from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionTimer is set, it can
// safely use t.GetConnectionTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetConnectionTimer() uint32 {
	if t == nil || t.ConnectionTimer == nil {
		return 30
	}
	return *t.ConnectionTimer
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpv4SourceAddress retrieves the value of the leaf Ipv4SourceAddress from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4SourceAddress is set, it can
// safely use t.GetIpv4SourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetIpv4SourceAddress() string {
	if t == nil || t.Ipv4SourceAddress == nil {
		return ""
	}
	return *t.Ipv4SourceAddress
}

// GetIpv6SourceAddress retrieves the value of the leaf Ipv6SourceAddress from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6SourceAddress is set, it can
// safely use t.GetIpv6SourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetIpv6SourceAddress() string {
	if t == nil || t.Ipv6SourceAddress == nil {
		return ""
	}
	return *t.Ipv6SourceAddress
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOriginHost retrieves the value of the leaf OriginHost from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginHost is set, it can
// safely use t.GetOriginHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetOriginHost() string {
	if t == nil || t.OriginHost == nil {
		return ""
	}
	return *t.OriginHost
}

// GetOriginRealm retrieves the value of the leaf OriginRealm from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginRealm is set, it can
// safely use t.GetOriginRealm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginRealm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetOriginRealm() string {
	if t == nil || t.OriginRealm == nil {
		return ""
	}
	return *t.OriginRealm
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetRole retrieves the value of the leaf Role from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Role is set, it can
// safely use t.GetRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Role == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetRole() E_NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Role {
	if t == nil || t.Role == 0 {
		return NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Role_client
	}
	return t.Role
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "Base"
	}
	return *t.RouterInstance
}

// GetTransactionTimer retrieves the value of the leaf TransactionTimer from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransactionTimer is set, it can
// safely use t.GetTransactionTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransactionTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetTransactionTimer() uint32 {
	if t == nil || t.TransactionTimer == nil {
		return 30
	}
	return *t.TransactionTimer
}

// GetVendorSupport retrieves the value of the leaf VendorSupport from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VendorSupport is set, it can
// safely use t.GetVendorSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VendorSupport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetVendorSupport() E_NokiaTypesDiameter_DiamVendorSupport {
	if t == nil || t.VendorSupport == 0 {
		return NokiaTypesDiameter_DiamVendorSupport_three_gpp
	}
	return t.VendorSupport
}

// GetWatchdogTimer retrieves the value of the leaf WatchdogTimer from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WatchdogTimer is set, it can
// safely use t.GetWatchdogTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WatchdogTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) GetWatchdogTimer() uint32 {
	if t == nil || t.WatchdogTimer == nil {
		return 30
	}
	return *t.WatchdogTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Diameter_PeerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ConnectionTimer == nil {
		var v uint32 = 30
		t.ConnectionTimer = &v
	}
	if t.Role == 0 {
		t.Role = NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Role_client
	}
	if t.RouterInstance == nil {
		var v string = "Base"
		t.RouterInstance = &v
	}
	if t.TransactionTimer == nil {
		var v uint32 = 30
		t.TransactionTimer = &v
	}
	if t.VendorSupport == 0 {
		t.VendorSupport = NokiaTypesDiameter_DiamVendorSupport_three_gpp
	}
	if t.WatchdogTimer == nil {
		var v uint32 = 30
		t.WatchdogTimer = &v
	}
	t.Applications.PopulateDefaults()
	t.Proxy.PopulateDefaults()
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Aaa_Diameter_PeerPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Diameter_PeerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Diameter_PeerPolicy.
func (*NokiaConf_Configure_Aaa_Diameter_PeerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications represents the /nokia-conf/configure/aaa/diameter/peer-policy/applications YANG schema element.
type NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications struct {
	Gx     *bool `path:"gx" module:"nokia-conf"`
	Gy     *bool `path:"gy" module:"nokia-conf"`
	Nasreq *bool `path:"nasreq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications) IsYANGGoStruct() {}

// GetGx retrieves the value of the leaf Gx from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gx is set, it can
// safely use t.GetGx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gx == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications) GetGx() bool {
	if t == nil || t.Gx == nil {
		return false
	}
	return *t.Gx
}

// GetGy retrieves the value of the leaf Gy from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gy is set, it can
// safely use t.GetGy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications) GetGy() bool {
	if t == nil || t.Gy == nil {
		return false
	}
	return *t.Gy
}

// GetNasreq retrieves the value of the leaf Nasreq from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Nasreq is set, it can
// safely use t.GetNasreq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Nasreq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications) GetNasreq() bool {
	if t == nil || t.Nasreq == nil {
		return false
	}
	return *t.Nasreq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Gx == nil {
		var v bool = false
		t.Gx = &v
	}
	if t.Gy == nil {
		var v bool = false
		t.Gy = &v
	}
	if t.Nasreq == nil {
		var v bool = false
		t.Nasreq = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications.
func (*NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Applications) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer represents the /nokia-conf/configure/aaa/diameter/peer-policy/peer YANG schema element.
type NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer struct {
	Address            *string                                                      `path:"address" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	ConnectionTimer    *uint32                                                      `path:"connection-timer" module:"nokia-conf"`
	DestinationHost    *string                                                      `path:"destination-host" module:"nokia-conf"`
	DestinationRealm   *string                                                      `path:"destination-realm" module:"nokia-conf"`
	PeerName           *string                                                      `path:"peer-name" module:"nokia-conf"`
	Preference         *uint32                                                      `path:"preference" module:"nokia-conf"`
	Statistics         *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Statistics `path:"statistics" module:"nokia-conf"`
	TransactionTimer   *uint32                                                      `path:"transaction-timer" module:"nokia-conf"`
	Transport          *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Transport  `path:"transport" module:"nokia-conf"`
	WatchdogTimer      *uint32                                                      `path:"watchdog-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) IsYANGGoStruct() {}

// GetOrCreateStatistics retrieves the value of the Statistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) GetOrCreateStatistics() *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Statistics {
	if t.Statistics != nil {
		return t.Statistics
	}
	t.Statistics = &NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Statistics{}
	return t.Statistics
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) GetOrCreateTransport() *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Transport{}
	return t.Transport
}

// GetStatistics returns the value of the Statistics struct pointer
// from NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer. If the receiver or the field Statistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) GetStatistics() *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Statistics {
	if t != nil && t.Statistics != nil {
		return t.Statistics
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) GetTransport() *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetConnectionTimer retrieves the value of the leaf ConnectionTimer from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionTimer is set, it can
// safely use t.GetConnectionTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) GetConnectionTimer() uint32 {
	if t == nil || t.ConnectionTimer == nil {
		return 0
	}
	return *t.ConnectionTimer
}

// GetDestinationHost retrieves the value of the leaf DestinationHost from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationHost is set, it can
// safely use t.GetDestinationHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) GetDestinationHost() string {
	if t == nil || t.DestinationHost == nil {
		return ""
	}
	return *t.DestinationHost
}

// GetDestinationRealm retrieves the value of the leaf DestinationRealm from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationRealm is set, it can
// safely use t.GetDestinationRealm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationRealm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) GetDestinationRealm() string {
	if t == nil || t.DestinationRealm == nil {
		return ""
	}
	return *t.DestinationRealm
}

// GetPeerName retrieves the value of the leaf PeerName from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerName is set, it can
// safely use t.GetPeerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) GetPeerName() string {
	if t == nil || t.PeerName == nil {
		return ""
	}
	return *t.PeerName
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 50
	}
	return *t.Preference
}

// GetTransactionTimer retrieves the value of the leaf TransactionTimer from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransactionTimer is set, it can
// safely use t.GetTransactionTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransactionTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) GetTransactionTimer() uint32 {
	if t == nil || t.TransactionTimer == nil {
		return 0
	}
	return *t.TransactionTimer
}

// GetWatchdogTimer retrieves the value of the leaf WatchdogTimer from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WatchdogTimer is set, it can
// safely use t.GetWatchdogTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WatchdogTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) GetWatchdogTimer() uint32 {
	if t == nil || t.WatchdogTimer == nil {
		return 0
	}
	return *t.WatchdogTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Preference == nil {
		var v uint32 = 50
		t.Preference = &v
	}
	t.Statistics.PopulateDefaults()
	t.Transport.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerName == nil {
		return nil, fmt.Errorf("nil value for key PeerName")
	}

	return map[string]interface{}{
		"peer-name": *t.PeerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer.
func (*NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Statistics represents the /nokia-conf/configure/aaa/diameter/peer-policy/peer/statistics YANG schema element.
type NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Statistics struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Statistics) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Statistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Statistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Statistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Statistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Statistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Statistics.
func (*NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Statistics) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Transport represents the /nokia-conf/configure/aaa/diameter/peer-policy/peer/transport YANG schema element.
type NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Transport struct {
	PortNumber *uint32 `path:"port-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Transport) IsYANGGoStruct() {}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Transport) GetPortNumber() uint32 {
	if t == nil || t.PortNumber == nil {
		return 3868
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Transport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Transport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v uint32 = 3868
		t.PortNumber = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Transport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Transport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Transport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Transport.
func (*NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Peer_Transport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy represents the /nokia-conf/configure/aaa/diameter/peer-policy/proxy YANG schema element.
type NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy struct {
	AdminState     E_NokiaTypesSros_AdminState                                `path:"admin-state" module:"nokia-conf"`
	LocalAddress   *string                                                    `path:"local-address" module:"nokia-conf"`
	McsPeer        *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer `path:"mcs-peer" module:"nokia-conf" yangPresence:"true"`
	RouterInstance *string                                                    `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy) IsYANGGoStruct() {}

// GetOrCreateMcsPeer retrieves the value of the McsPeer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy) GetOrCreateMcsPeer() *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer {
	if t.McsPeer != nil {
		return t.McsPeer
	}
	t.McsPeer = &NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer{}
	return t.McsPeer
}

// GetMcsPeer returns the value of the McsPeer struct pointer
// from NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy. If the receiver or the field McsPeer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy) GetMcsPeer() *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer {
	if t != nil && t.McsPeer != nil {
		return t.McsPeer
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.McsPeer.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy.
func (*NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer represents the /nokia-conf/configure/aaa/diameter/peer-policy/proxy/mcs-peer YANG schema element.
type NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	SyncTag            *string  `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer.
func (*NokiaConf_Configure_Aaa_Diameter_PeerPolicy_Proxy_McsPeer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius represents the /nokia-conf/configure/aaa/radius YANG schema element.
type NokiaConf_Configure_Aaa_Radius struct {
	AcctOnOffGroup       map[string]*NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup       `path:"acct-on-off-group" module:"nokia-conf"`
	CoaPort              *uint16                                                         `path:"coa-port" module:"nokia-conf"`
	IsaPolicy            map[string]*NokiaConf_Configure_Aaa_Radius_IsaPolicy            `path:"isa-policy" module:"nokia-conf"`
	L2TpAccountingPolicy map[string]*NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy `path:"l2tp-accounting-policy" module:"nokia-conf"`
	RouteDownloader      map[string]*NokiaConf_Configure_Aaa_Radius_RouteDownloader      `path:"route-downloader" module:"nokia-conf"`
	ServerPolicy         map[string]*NokiaConf_Configure_Aaa_Radius_ServerPolicy         `path:"server-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius) IsYANGGoStruct() {}

// NewAcctOnOffGroup creates a new entry in the AcctOnOffGroup list of the
// NokiaConf_Configure_Aaa_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Aaa_Radius) NewAcctOnOffGroup(Name string) (*NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AcctOnOffGroup == nil {
		t.AcctOnOffGroup = make(map[string]*NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AcctOnOffGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AcctOnOffGroup", key)
	}

	t.AcctOnOffGroup[key] = &NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup{
		Name: &Name,
	}

	return t.AcctOnOffGroup[key], nil
}

// RenameAcctOnOffGroup renames an entry in the list AcctOnOffGroup within
// the NokiaConf_Configure_Aaa_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Aaa_Radius) RenameAcctOnOffGroup(oldK, newK string) error {
	if _, ok := t.AcctOnOffGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AcctOnOffGroup", newK)
	}

	e, ok := t.AcctOnOffGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AcctOnOffGroup", oldK)
	}
	e.Name = &newK

	t.AcctOnOffGroup[newK] = e
	delete(t.AcctOnOffGroup, oldK)
	return nil
}

// GetOrCreateAcctOnOffGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Aaa_Radius) GetOrCreateAcctOnOffGroup(Name string) *NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup {

	key := Name

	if v, ok := t.AcctOnOffGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAcctOnOffGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAcctOnOffGroup got unexpected error: %v", err))
	}
	return v
}

// GetAcctOnOffGroup retrieves the value with the specified key from
// the AcctOnOffGroup map field of NokiaConf_Configure_Aaa_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius) GetAcctOnOffGroup(Name string) *NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.AcctOnOffGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAcctOnOffGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Aaa_Radius) DeleteAcctOnOffGroup(Name string) {
	key := Name

	delete(t.AcctOnOffGroup, key)
}

// AppendAcctOnOffGroup appends the supplied NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup struct to the
// list AcctOnOffGroup of NokiaConf_Configure_Aaa_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Aaa_Radius) AppendAcctOnOffGroup(v *NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AcctOnOffGroup == nil {
		t.AcctOnOffGroup = make(map[string]*NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup)
	}

	if _, ok := t.AcctOnOffGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AcctOnOffGroup %v", key)
	}

	t.AcctOnOffGroup[key] = v
	return nil
}

// NewIsaPolicy creates a new entry in the IsaPolicy list of the
// NokiaConf_Configure_Aaa_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Aaa_Radius) NewIsaPolicy(Name string) (*NokiaConf_Configure_Aaa_Radius_IsaPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IsaPolicy == nil {
		t.IsaPolicy = make(map[string]*NokiaConf_Configure_Aaa_Radius_IsaPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IsaPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IsaPolicy", key)
	}

	t.IsaPolicy[key] = &NokiaConf_Configure_Aaa_Radius_IsaPolicy{
		Name: &Name,
	}

	return t.IsaPolicy[key], nil
}

// RenameIsaPolicy renames an entry in the list IsaPolicy within
// the NokiaConf_Configure_Aaa_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Aaa_Radius) RenameIsaPolicy(oldK, newK string) error {
	if _, ok := t.IsaPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in IsaPolicy", newK)
	}

	e, ok := t.IsaPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IsaPolicy", oldK)
	}
	e.Name = &newK

	t.IsaPolicy[newK] = e
	delete(t.IsaPolicy, oldK)
	return nil
}

// GetOrCreateIsaPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Aaa_Radius) GetOrCreateIsaPolicy(Name string) *NokiaConf_Configure_Aaa_Radius_IsaPolicy {

	key := Name

	if v, ok := t.IsaPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIsaPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIsaPolicy got unexpected error: %v", err))
	}
	return v
}

// GetIsaPolicy retrieves the value with the specified key from
// the IsaPolicy map field of NokiaConf_Configure_Aaa_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius) GetIsaPolicy(Name string) *NokiaConf_Configure_Aaa_Radius_IsaPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.IsaPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteIsaPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Aaa_Radius) DeleteIsaPolicy(Name string) {
	key := Name

	delete(t.IsaPolicy, key)
}

// AppendIsaPolicy appends the supplied NokiaConf_Configure_Aaa_Radius_IsaPolicy struct to the
// list IsaPolicy of NokiaConf_Configure_Aaa_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_Aaa_Radius_IsaPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Aaa_Radius) AppendIsaPolicy(v *NokiaConf_Configure_Aaa_Radius_IsaPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IsaPolicy == nil {
		t.IsaPolicy = make(map[string]*NokiaConf_Configure_Aaa_Radius_IsaPolicy)
	}

	if _, ok := t.IsaPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list IsaPolicy %v", key)
	}

	t.IsaPolicy[key] = v
	return nil
}

// NewL2TpAccountingPolicy creates a new entry in the L2TpAccountingPolicy list of the
// NokiaConf_Configure_Aaa_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Aaa_Radius) NewL2TpAccountingPolicy(Name string) (*NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.L2TpAccountingPolicy == nil {
		t.L2TpAccountingPolicy = make(map[string]*NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.L2TpAccountingPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list L2TpAccountingPolicy", key)
	}

	t.L2TpAccountingPolicy[key] = &NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy{
		Name: &Name,
	}

	return t.L2TpAccountingPolicy[key], nil
}

// RenameL2TpAccountingPolicy renames an entry in the list L2TpAccountingPolicy within
// the NokiaConf_Configure_Aaa_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Aaa_Radius) RenameL2TpAccountingPolicy(oldK, newK string) error {
	if _, ok := t.L2TpAccountingPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in L2TpAccountingPolicy", newK)
	}

	e, ok := t.L2TpAccountingPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in L2TpAccountingPolicy", oldK)
	}
	e.Name = &newK

	t.L2TpAccountingPolicy[newK] = e
	delete(t.L2TpAccountingPolicy, oldK)
	return nil
}

// GetOrCreateL2TpAccountingPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Aaa_Radius) GetOrCreateL2TpAccountingPolicy(Name string) *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy {

	key := Name

	if v, ok := t.L2TpAccountingPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewL2TpAccountingPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateL2TpAccountingPolicy got unexpected error: %v", err))
	}
	return v
}

// GetL2TpAccountingPolicy retrieves the value with the specified key from
// the L2TpAccountingPolicy map field of NokiaConf_Configure_Aaa_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius) GetL2TpAccountingPolicy(Name string) *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.L2TpAccountingPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteL2TpAccountingPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Aaa_Radius) DeleteL2TpAccountingPolicy(Name string) {
	key := Name

	delete(t.L2TpAccountingPolicy, key)
}

// AppendL2TpAccountingPolicy appends the supplied NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy struct to the
// list L2TpAccountingPolicy of NokiaConf_Configure_Aaa_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Aaa_Radius) AppendL2TpAccountingPolicy(v *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.L2TpAccountingPolicy == nil {
		t.L2TpAccountingPolicy = make(map[string]*NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy)
	}

	if _, ok := t.L2TpAccountingPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list L2TpAccountingPolicy %v", key)
	}

	t.L2TpAccountingPolicy[key] = v
	return nil
}

// NewRouteDownloader creates a new entry in the RouteDownloader list of the
// NokiaConf_Configure_Aaa_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Aaa_Radius) NewRouteDownloader(Name string) (*NokiaConf_Configure_Aaa_Radius_RouteDownloader, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteDownloader == nil {
		t.RouteDownloader = make(map[string]*NokiaConf_Configure_Aaa_Radius_RouteDownloader)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouteDownloader[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouteDownloader", key)
	}

	t.RouteDownloader[key] = &NokiaConf_Configure_Aaa_Radius_RouteDownloader{
		Name: &Name,
	}

	return t.RouteDownloader[key], nil
}

// RenameRouteDownloader renames an entry in the list RouteDownloader within
// the NokiaConf_Configure_Aaa_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Aaa_Radius) RenameRouteDownloader(oldK, newK string) error {
	if _, ok := t.RouteDownloader[newK]; ok {
		return fmt.Errorf("key %v already exists in RouteDownloader", newK)
	}

	e, ok := t.RouteDownloader[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RouteDownloader", oldK)
	}
	e.Name = &newK

	t.RouteDownloader[newK] = e
	delete(t.RouteDownloader, oldK)
	return nil
}

// GetOrCreateRouteDownloader retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Aaa_Radius) GetOrCreateRouteDownloader(Name string) *NokiaConf_Configure_Aaa_Radius_RouteDownloader {

	key := Name

	if v, ok := t.RouteDownloader[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouteDownloader(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouteDownloader got unexpected error: %v", err))
	}
	return v
}

// GetRouteDownloader retrieves the value with the specified key from
// the RouteDownloader map field of NokiaConf_Configure_Aaa_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius) GetRouteDownloader(Name string) *NokiaConf_Configure_Aaa_Radius_RouteDownloader {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.RouteDownloader[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouteDownloader deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Aaa_Radius) DeleteRouteDownloader(Name string) {
	key := Name

	delete(t.RouteDownloader, key)
}

// AppendRouteDownloader appends the supplied NokiaConf_Configure_Aaa_Radius_RouteDownloader struct to the
// list RouteDownloader of NokiaConf_Configure_Aaa_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_Aaa_Radius_RouteDownloader already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Aaa_Radius) AppendRouteDownloader(v *NokiaConf_Configure_Aaa_Radius_RouteDownloader) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteDownloader == nil {
		t.RouteDownloader = make(map[string]*NokiaConf_Configure_Aaa_Radius_RouteDownloader)
	}

	if _, ok := t.RouteDownloader[key]; ok {
		return fmt.Errorf("duplicate key for list RouteDownloader %v", key)
	}

	t.RouteDownloader[key] = v
	return nil
}

// NewServerPolicy creates a new entry in the ServerPolicy list of the
// NokiaConf_Configure_Aaa_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Aaa_Radius) NewServerPolicy(Name string) (*NokiaConf_Configure_Aaa_Radius_ServerPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerPolicy == nil {
		t.ServerPolicy = make(map[string]*NokiaConf_Configure_Aaa_Radius_ServerPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServerPolicy", key)
	}

	t.ServerPolicy[key] = &NokiaConf_Configure_Aaa_Radius_ServerPolicy{
		Name: &Name,
	}

	return t.ServerPolicy[key], nil
}

// RenameServerPolicy renames an entry in the list ServerPolicy within
// the NokiaConf_Configure_Aaa_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Aaa_Radius) RenameServerPolicy(oldK, newK string) error {
	if _, ok := t.ServerPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in ServerPolicy", newK)
	}

	e, ok := t.ServerPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServerPolicy", oldK)
	}
	e.Name = &newK

	t.ServerPolicy[newK] = e
	delete(t.ServerPolicy, oldK)
	return nil
}

// GetOrCreateServerPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Aaa_Radius) GetOrCreateServerPolicy(Name string) *NokiaConf_Configure_Aaa_Radius_ServerPolicy {

	key := Name

	if v, ok := t.ServerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServerPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetServerPolicy retrieves the value with the specified key from
// the ServerPolicy map field of NokiaConf_Configure_Aaa_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius) GetServerPolicy(Name string) *NokiaConf_Configure_Aaa_Radius_ServerPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ServerPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteServerPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Aaa_Radius) DeleteServerPolicy(Name string) {
	key := Name

	delete(t.ServerPolicy, key)
}

// AppendServerPolicy appends the supplied NokiaConf_Configure_Aaa_Radius_ServerPolicy struct to the
// list ServerPolicy of NokiaConf_Configure_Aaa_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_Aaa_Radius_ServerPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Aaa_Radius) AppendServerPolicy(v *NokiaConf_Configure_Aaa_Radius_ServerPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerPolicy == nil {
		t.ServerPolicy = make(map[string]*NokiaConf_Configure_Aaa_Radius_ServerPolicy)
	}

	if _, ok := t.ServerPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list ServerPolicy %v", key)
	}

	t.ServerPolicy[key] = v
	return nil
}

// GetCoaPort retrieves the value of the leaf CoaPort from the NokiaConf_Configure_Aaa_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CoaPort is set, it can
// safely use t.GetCoaPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CoaPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius) GetCoaPort() uint16 {
	if t == nil || t.CoaPort == nil {
		return 3799
	}
	return *t.CoaPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CoaPort == nil {
		var v uint16 = 3799
		t.CoaPort = &v
	}
	for _, e := range t.AcctOnOffGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.IsaPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.L2TpAccountingPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.RouteDownloader {
		e.PopulateDefaults()
	}
	for _, e := range t.ServerPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius.
func (*NokiaConf_Configure_Aaa_Radius) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup represents the /nokia-conf/configure/aaa/radius/acct-on-off-group YANG schema element.
type NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	Name               *string  `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup.
func (*NokiaConf_Configure_Aaa_Radius_AcctOnOffGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_IsaPolicy represents the /nokia-conf/configure/aaa/radius/isa-policy YANG schema element.
type NokiaConf_Configure_Aaa_Radius_IsaPolicy struct {
	Accounting         *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting          `path:"accounting" module:"nokia-conf"`
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Authentication     *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication      `path:"authentication" module:"nokia-conf"`
	Description        *string                                                       `path:"description" module:"nokia-conf"`
	Name               *string                                                       `path:"name" module:"nokia-conf"`
	NasIpAddressOrigin E_NokiaConf_Configure_Aaa_Radius_IsaPolicy_NasIpAddressOrigin `path:"nas-ip-address-origin" module:"nokia-conf"`
	Password           *string                                                       `path:"password" module:"nokia-conf"`
	PythonPolicy       *string                                                       `path:"python-policy" module:"nokia-conf"`
	Servers            *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers             `path:"servers" module:"nokia-conf"`
	UserName           *NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName            `path:"user-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_IsaPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy) IsYANGGoStruct() {}

// GetOrCreateAccounting retrieves the value of the Accounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy) GetOrCreateAccounting() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting {
	if t.Accounting != nil {
		return t.Accounting
	}
	t.Accounting = &NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting{}
	return t.Accounting
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy) GetOrCreateAuthentication() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication{}
	return t.Authentication
}

// GetOrCreateServers retrieves the value of the Servers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy) GetOrCreateServers() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers {
	if t.Servers != nil {
		return t.Servers
	}
	t.Servers = &NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers{}
	return t.Servers
}

// GetOrCreateUserName retrieves the value of the UserName field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy) GetOrCreateUserName() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName {
	if t.UserName != nil {
		return t.UserName
	}
	t.UserName = &NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName{}
	return t.UserName
}

// GetAccounting returns the value of the Accounting struct pointer
// from NokiaConf_Configure_Aaa_Radius_IsaPolicy. If the receiver or the field Accounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy) GetAccounting() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting {
	if t != nil && t.Accounting != nil {
		return t.Accounting
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from NokiaConf_Configure_Aaa_Radius_IsaPolicy. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy) GetAuthentication() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetServers returns the value of the Servers struct pointer
// from NokiaConf_Configure_Aaa_Radius_IsaPolicy. If the receiver or the field Servers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy) GetServers() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers {
	if t != nil && t.Servers != nil {
		return t.Servers
	}
	return nil
}

// GetUserName returns the value of the UserName struct pointer
// from NokiaConf_Configure_Aaa_Radius_IsaPolicy. If the receiver or the field UserName is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy) GetUserName() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName {
	if t != nil && t.UserName != nil {
		return t.UserName
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Aaa_Radius_IsaPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Aaa_Radius_IsaPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Aaa_Radius_IsaPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Aaa_Radius_IsaPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNasIpAddressOrigin retrieves the value of the leaf NasIpAddressOrigin from the NokiaConf_Configure_Aaa_Radius_IsaPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasIpAddressOrigin is set, it can
// safely use t.GetNasIpAddressOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasIpAddressOrigin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy) GetNasIpAddressOrigin() E_NokiaConf_Configure_Aaa_Radius_IsaPolicy_NasIpAddressOrigin {
	if t == nil || t.NasIpAddressOrigin == 0 {
		return NokiaConf_Configure_Aaa_Radius_IsaPolicy_NasIpAddressOrigin_system_ip
	}
	return t.NasIpAddressOrigin
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Aaa_Radius_IsaPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Aaa_Radius_IsaPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_IsaPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NasIpAddressOrigin == 0 {
		t.NasIpAddressOrigin = NokiaConf_Configure_Aaa_Radius_IsaPolicy_NasIpAddressOrigin_system_ip
	}
	t.Accounting.PopulateDefaults()
	t.Authentication.PopulateDefaults()
	t.Servers.PopulateDefaults()
	t.UserName.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Aaa_Radius_IsaPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_IsaPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_IsaPolicy.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting represents the /nokia-conf/configure/aaa/radius/isa-policy/accounting YANG schema element.
type NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting struct {
	IncludeAttributes *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes `path:"include-attributes" module:"nokia-conf"`
	NatPeriodicUpdate *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate `path:"nat-periodic-update" module:"nokia-conf"`
	UpdateTriggers    *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers    `path:"update-triggers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting) IsYANGGoStruct() {}

// GetOrCreateIncludeAttributes retrieves the value of the IncludeAttributes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting) GetOrCreateIncludeAttributes() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes {
	if t.IncludeAttributes != nil {
		return t.IncludeAttributes
	}
	t.IncludeAttributes = &NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes{}
	return t.IncludeAttributes
}

// GetOrCreateNatPeriodicUpdate retrieves the value of the NatPeriodicUpdate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting) GetOrCreateNatPeriodicUpdate() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate {
	if t.NatPeriodicUpdate != nil {
		return t.NatPeriodicUpdate
	}
	t.NatPeriodicUpdate = &NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate{}
	return t.NatPeriodicUpdate
}

// GetOrCreateUpdateTriggers retrieves the value of the UpdateTriggers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting) GetOrCreateUpdateTriggers() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers {
	if t.UpdateTriggers != nil {
		return t.UpdateTriggers
	}
	t.UpdateTriggers = &NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers{}
	return t.UpdateTriggers
}

// GetIncludeAttributes returns the value of the IncludeAttributes struct pointer
// from NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting. If the receiver or the field IncludeAttributes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting) GetIncludeAttributes() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes {
	if t != nil && t.IncludeAttributes != nil {
		return t.IncludeAttributes
	}
	return nil
}

// GetNatPeriodicUpdate returns the value of the NatPeriodicUpdate struct pointer
// from NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting. If the receiver or the field NatPeriodicUpdate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting) GetNatPeriodicUpdate() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate {
	if t != nil && t.NatPeriodicUpdate != nil {
		return t.NatPeriodicUpdate
	}
	return nil
}

// GetUpdateTriggers returns the value of the UpdateTriggers struct pointer
// from NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting. If the receiver or the field UpdateTriggers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting) GetUpdateTriggers() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers {
	if t != nil && t.UpdateTriggers != nil {
		return t.UpdateTriggers
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IncludeAttributes.PopulateDefaults()
	t.NatPeriodicUpdate.PopulateDefaults()
	t.UpdateTriggers.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes represents the /nokia-conf/configure/aaa/radius/isa-policy/accounting/include-attributes YANG schema element.
type NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes struct {
	AcctDelayTime                   *bool `path:"acct-delay-time" module:"nokia-conf"`
	AcctTriggeredReason             *bool `path:"acct-triggered-reason" module:"nokia-conf"`
	CalledStationId                 *bool `path:"called-station-id" module:"nokia-conf"`
	CallingStationId                *bool `path:"calling-station-id" module:"nokia-conf"`
	CircuitId                       *bool `path:"circuit-id" module:"nokia-conf"`
	Class                           *bool `path:"class" module:"nokia-conf"`
	CreditControlQuota              *bool `path:"credit-control-quota" module:"nokia-conf"`
	DhcpOptions                     *bool `path:"dhcp-options" module:"nokia-conf"`
	DhcpVendorClassId               *bool `path:"dhcp-vendor-class-id" module:"nokia-conf"`
	FrameCounters                   *bool `path:"frame-counters" module:"nokia-conf"`
	FramedIpAddress                 *bool `path:"framed-ip-address" module:"nokia-conf"`
	FramedIpNetmask                 *bool `path:"framed-ip-netmask" module:"nokia-conf"`
	FramedIpv6Prefix                *bool `path:"framed-ipv6-prefix" module:"nokia-conf"`
	HardwareTimestamp               *bool `path:"hardware-timestamp" module:"nokia-conf"`
	Ipv6Address                     *bool `path:"ipv6-address" module:"nokia-conf"`
	MacAddress                      *bool `path:"mac-address" module:"nokia-conf"`
	MillisecondEventTimestamp       *bool `path:"millisecond-event-timestamp" module:"nokia-conf"`
	MultiSessionId                  *bool `path:"multi-session-id" module:"nokia-conf"`
	NasIdentifier                   *bool `path:"nas-identifier" module:"nokia-conf"`
	NasIpAddress                    *bool `path:"nas-ip-address" module:"nokia-conf"`
	NasPort                         *bool `path:"nas-port" module:"nokia-conf"`
	NasPortId                       *bool `path:"nas-port-id" module:"nokia-conf"`
	NasPortType                     *bool `path:"nas-port-type" module:"nokia-conf"`
	NatInsideServiceId              *bool `path:"nat-inside-service-id" module:"nokia-conf"`
	NatOutsideIpAddress             *bool `path:"nat-outside-ip-address" module:"nokia-conf"`
	NatOutsideServiceId             *bool `path:"nat-outside-service-id" module:"nokia-conf"`
	NatPortRangeBlock               *bool `path:"nat-port-range-block" module:"nokia-conf"`
	NatSubscriberString             *bool `path:"nat-subscriber-string" module:"nokia-conf"`
	OctetCounters                   *bool `path:"octet-counters" module:"nokia-conf"`
	ProxiedSubscriberData           *bool `path:"proxied-subscriber-data" module:"nokia-conf"`
	ReleaseReason                   *bool `path:"release-reason" module:"nokia-conf"`
	RemoteId                        *bool `path:"remote-id" module:"nokia-conf"`
	Rssi                            *bool `path:"rssi" module:"nokia-conf"`
	SessionTime                     *bool `path:"session-time" module:"nokia-conf"`
	SubscriberId                    *bool `path:"subscriber-id" module:"nokia-conf"`
	ToserverDhcp6Options            *bool `path:"toserver-dhcp6-options" module:"nokia-conf"`
	UeCreationType                  *bool `path:"ue-creation-type" module:"nokia-conf"`
	UserName                        *bool `path:"user-name" module:"nokia-conf"`
	WlanSsidVlan                    *bool `path:"wlan-ssid-vlan" module:"nokia-conf"`
	XconnectTunnelHomeAddress       *bool `path:"xconnect-tunnel-home-address" module:"nokia-conf"`
	XconnectTunnelLocalIpv6Address  *bool `path:"xconnect-tunnel-local-ipv6-address" module:"nokia-conf"`
	XconnectTunnelRemoteIpv6Address *bool `path:"xconnect-tunnel-remote-ipv6-address" module:"nokia-conf"`
	XconnectTunnelService           *bool `path:"xconnect-tunnel-service" module:"nokia-conf"`
	XconnectTunnelType              *bool `path:"xconnect-tunnel-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) IsYANGGoStruct() {}

// GetAcctDelayTime retrieves the value of the leaf AcctDelayTime from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcctDelayTime is set, it can
// safely use t.GetAcctDelayTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcctDelayTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetAcctDelayTime() bool {
	if t == nil || t.AcctDelayTime == nil {
		return false
	}
	return *t.AcctDelayTime
}

// GetAcctTriggeredReason retrieves the value of the leaf AcctTriggeredReason from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcctTriggeredReason is set, it can
// safely use t.GetAcctTriggeredReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcctTriggeredReason == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetAcctTriggeredReason() bool {
	if t == nil || t.AcctTriggeredReason == nil {
		return false
	}
	return *t.AcctTriggeredReason
}

// GetCalledStationId retrieves the value of the leaf CalledStationId from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CalledStationId is set, it can
// safely use t.GetCalledStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CalledStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetCalledStationId() bool {
	if t == nil || t.CalledStationId == nil {
		return false
	}
	return *t.CalledStationId
}

// GetCallingStationId retrieves the value of the leaf CallingStationId from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingStationId is set, it can
// safely use t.GetCallingStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetCallingStationId() bool {
	if t == nil || t.CallingStationId == nil {
		return false
	}
	return *t.CallingStationId
}

// GetCircuitId retrieves the value of the leaf CircuitId from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CircuitId is set, it can
// safely use t.GetCircuitId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CircuitId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetCircuitId() bool {
	if t == nil || t.CircuitId == nil {
		return false
	}
	return *t.CircuitId
}

// GetClass retrieves the value of the leaf Class from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Class is set, it can
// safely use t.GetClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Class == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetClass() bool {
	if t == nil || t.Class == nil {
		return false
	}
	return *t.Class
}

// GetCreditControlQuota retrieves the value of the leaf CreditControlQuota from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreditControlQuota is set, it can
// safely use t.GetCreditControlQuota() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreditControlQuota == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetCreditControlQuota() bool {
	if t == nil || t.CreditControlQuota == nil {
		return false
	}
	return *t.CreditControlQuota
}

// GetDhcpOptions retrieves the value of the leaf DhcpOptions from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpOptions is set, it can
// safely use t.GetDhcpOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpOptions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetDhcpOptions() bool {
	if t == nil || t.DhcpOptions == nil {
		return false
	}
	return *t.DhcpOptions
}

// GetDhcpVendorClassId retrieves the value of the leaf DhcpVendorClassId from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpVendorClassId is set, it can
// safely use t.GetDhcpVendorClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpVendorClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetDhcpVendorClassId() bool {
	if t == nil || t.DhcpVendorClassId == nil {
		return false
	}
	return *t.DhcpVendorClassId
}

// GetFrameCounters retrieves the value of the leaf FrameCounters from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameCounters is set, it can
// safely use t.GetFrameCounters() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameCounters == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetFrameCounters() bool {
	if t == nil || t.FrameCounters == nil {
		return false
	}
	return *t.FrameCounters
}

// GetFramedIpAddress retrieves the value of the leaf FramedIpAddress from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FramedIpAddress is set, it can
// safely use t.GetFramedIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FramedIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetFramedIpAddress() bool {
	if t == nil || t.FramedIpAddress == nil {
		return false
	}
	return *t.FramedIpAddress
}

// GetFramedIpNetmask retrieves the value of the leaf FramedIpNetmask from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FramedIpNetmask is set, it can
// safely use t.GetFramedIpNetmask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FramedIpNetmask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetFramedIpNetmask() bool {
	if t == nil || t.FramedIpNetmask == nil {
		return false
	}
	return *t.FramedIpNetmask
}

// GetFramedIpv6Prefix retrieves the value of the leaf FramedIpv6Prefix from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FramedIpv6Prefix is set, it can
// safely use t.GetFramedIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FramedIpv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetFramedIpv6Prefix() bool {
	if t == nil || t.FramedIpv6Prefix == nil {
		return false
	}
	return *t.FramedIpv6Prefix
}

// GetHardwareTimestamp retrieves the value of the leaf HardwareTimestamp from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HardwareTimestamp is set, it can
// safely use t.GetHardwareTimestamp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HardwareTimestamp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetHardwareTimestamp() bool {
	if t == nil || t.HardwareTimestamp == nil {
		return false
	}
	return *t.HardwareTimestamp
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetIpv6Address() bool {
	if t == nil || t.Ipv6Address == nil {
		return false
	}
	return *t.Ipv6Address
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetMacAddress() bool {
	if t == nil || t.MacAddress == nil {
		return false
	}
	return *t.MacAddress
}

// GetMillisecondEventTimestamp retrieves the value of the leaf MillisecondEventTimestamp from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MillisecondEventTimestamp is set, it can
// safely use t.GetMillisecondEventTimestamp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MillisecondEventTimestamp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetMillisecondEventTimestamp() bool {
	if t == nil || t.MillisecondEventTimestamp == nil {
		return false
	}
	return *t.MillisecondEventTimestamp
}

// GetMultiSessionId retrieves the value of the leaf MultiSessionId from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiSessionId is set, it can
// safely use t.GetMultiSessionId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiSessionId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetMultiSessionId() bool {
	if t == nil || t.MultiSessionId == nil {
		return false
	}
	return *t.MultiSessionId
}

// GetNasIdentifier retrieves the value of the leaf NasIdentifier from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasIdentifier is set, it can
// safely use t.GetNasIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasIdentifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetNasIdentifier() bool {
	if t == nil || t.NasIdentifier == nil {
		return false
	}
	return *t.NasIdentifier
}

// GetNasIpAddress retrieves the value of the leaf NasIpAddress from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasIpAddress is set, it can
// safely use t.GetNasIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetNasIpAddress() bool {
	if t == nil || t.NasIpAddress == nil {
		return false
	}
	return *t.NasIpAddress
}

// GetNasPort retrieves the value of the leaf NasPort from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasPort is set, it can
// safely use t.GetNasPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetNasPort() bool {
	if t == nil || t.NasPort == nil {
		return false
	}
	return *t.NasPort
}

// GetNasPortId retrieves the value of the leaf NasPortId from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasPortId is set, it can
// safely use t.GetNasPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasPortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetNasPortId() bool {
	if t == nil || t.NasPortId == nil {
		return false
	}
	return *t.NasPortId
}

// GetNasPortType retrieves the value of the leaf NasPortType from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasPortType is set, it can
// safely use t.GetNasPortType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasPortType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetNasPortType() bool {
	if t == nil || t.NasPortType == nil {
		return false
	}
	return *t.NasPortType
}

// GetNatInsideServiceId retrieves the value of the leaf NatInsideServiceId from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatInsideServiceId is set, it can
// safely use t.GetNatInsideServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatInsideServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetNatInsideServiceId() bool {
	if t == nil || t.NatInsideServiceId == nil {
		return false
	}
	return *t.NatInsideServiceId
}

// GetNatOutsideIpAddress retrieves the value of the leaf NatOutsideIpAddress from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatOutsideIpAddress is set, it can
// safely use t.GetNatOutsideIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatOutsideIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetNatOutsideIpAddress() bool {
	if t == nil || t.NatOutsideIpAddress == nil {
		return false
	}
	return *t.NatOutsideIpAddress
}

// GetNatOutsideServiceId retrieves the value of the leaf NatOutsideServiceId from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatOutsideServiceId is set, it can
// safely use t.GetNatOutsideServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatOutsideServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetNatOutsideServiceId() bool {
	if t == nil || t.NatOutsideServiceId == nil {
		return false
	}
	return *t.NatOutsideServiceId
}

// GetNatPortRangeBlock retrieves the value of the leaf NatPortRangeBlock from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPortRangeBlock is set, it can
// safely use t.GetNatPortRangeBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPortRangeBlock == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetNatPortRangeBlock() bool {
	if t == nil || t.NatPortRangeBlock == nil {
		return false
	}
	return *t.NatPortRangeBlock
}

// GetNatSubscriberString retrieves the value of the leaf NatSubscriberString from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatSubscriberString is set, it can
// safely use t.GetNatSubscriberString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatSubscriberString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetNatSubscriberString() bool {
	if t == nil || t.NatSubscriberString == nil {
		return false
	}
	return *t.NatSubscriberString
}

// GetOctetCounters retrieves the value of the leaf OctetCounters from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OctetCounters is set, it can
// safely use t.GetOctetCounters() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OctetCounters == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetOctetCounters() bool {
	if t == nil || t.OctetCounters == nil {
		return false
	}
	return *t.OctetCounters
}

// GetProxiedSubscriberData retrieves the value of the leaf ProxiedSubscriberData from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxiedSubscriberData is set, it can
// safely use t.GetProxiedSubscriberData() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxiedSubscriberData == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetProxiedSubscriberData() bool {
	if t == nil || t.ProxiedSubscriberData == nil {
		return false
	}
	return *t.ProxiedSubscriberData
}

// GetReleaseReason retrieves the value of the leaf ReleaseReason from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleaseReason is set, it can
// safely use t.GetReleaseReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleaseReason == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetReleaseReason() bool {
	if t == nil || t.ReleaseReason == nil {
		return false
	}
	return *t.ReleaseReason
}

// GetRemoteId retrieves the value of the leaf RemoteId from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetRemoteId() bool {
	if t == nil || t.RemoteId == nil {
		return false
	}
	return *t.RemoteId
}

// GetRssi retrieves the value of the leaf Rssi from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rssi is set, it can
// safely use t.GetRssi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rssi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetRssi() bool {
	if t == nil || t.Rssi == nil {
		return false
	}
	return *t.Rssi
}

// GetSessionTime retrieves the value of the leaf SessionTime from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionTime is set, it can
// safely use t.GetSessionTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetSessionTime() bool {
	if t == nil || t.SessionTime == nil {
		return false
	}
	return *t.SessionTime
}

// GetSubscriberId retrieves the value of the leaf SubscriberId from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberId is set, it can
// safely use t.GetSubscriberId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetSubscriberId() bool {
	if t == nil || t.SubscriberId == nil {
		return false
	}
	return *t.SubscriberId
}

// GetToserverDhcp6Options retrieves the value of the leaf ToserverDhcp6Options from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ToserverDhcp6Options is set, it can
// safely use t.GetToserverDhcp6Options() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ToserverDhcp6Options == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetToserverDhcp6Options() bool {
	if t == nil || t.ToserverDhcp6Options == nil {
		return false
	}
	return *t.ToserverDhcp6Options
}

// GetUeCreationType retrieves the value of the leaf UeCreationType from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UeCreationType is set, it can
// safely use t.GetUeCreationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UeCreationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetUeCreationType() bool {
	if t == nil || t.UeCreationType == nil {
		return false
	}
	return *t.UeCreationType
}

// GetUserName retrieves the value of the leaf UserName from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserName is set, it can
// safely use t.GetUserName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetUserName() bool {
	if t == nil || t.UserName == nil {
		return false
	}
	return *t.UserName
}

// GetWlanSsidVlan retrieves the value of the leaf WlanSsidVlan from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanSsidVlan is set, it can
// safely use t.GetWlanSsidVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanSsidVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetWlanSsidVlan() bool {
	if t == nil || t.WlanSsidVlan == nil {
		return false
	}
	return *t.WlanSsidVlan
}

// GetXconnectTunnelHomeAddress retrieves the value of the leaf XconnectTunnelHomeAddress from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XconnectTunnelHomeAddress is set, it can
// safely use t.GetXconnectTunnelHomeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XconnectTunnelHomeAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetXconnectTunnelHomeAddress() bool {
	if t == nil || t.XconnectTunnelHomeAddress == nil {
		return false
	}
	return *t.XconnectTunnelHomeAddress
}

// GetXconnectTunnelLocalIpv6Address retrieves the value of the leaf XconnectTunnelLocalIpv6Address from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XconnectTunnelLocalIpv6Address is set, it can
// safely use t.GetXconnectTunnelLocalIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XconnectTunnelLocalIpv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetXconnectTunnelLocalIpv6Address() bool {
	if t == nil || t.XconnectTunnelLocalIpv6Address == nil {
		return false
	}
	return *t.XconnectTunnelLocalIpv6Address
}

// GetXconnectTunnelRemoteIpv6Address retrieves the value of the leaf XconnectTunnelRemoteIpv6Address from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XconnectTunnelRemoteIpv6Address is set, it can
// safely use t.GetXconnectTunnelRemoteIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XconnectTunnelRemoteIpv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetXconnectTunnelRemoteIpv6Address() bool {
	if t == nil || t.XconnectTunnelRemoteIpv6Address == nil {
		return false
	}
	return *t.XconnectTunnelRemoteIpv6Address
}

// GetXconnectTunnelService retrieves the value of the leaf XconnectTunnelService from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XconnectTunnelService is set, it can
// safely use t.GetXconnectTunnelService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XconnectTunnelService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetXconnectTunnelService() bool {
	if t == nil || t.XconnectTunnelService == nil {
		return false
	}
	return *t.XconnectTunnelService
}

// GetXconnectTunnelType retrieves the value of the leaf XconnectTunnelType from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XconnectTunnelType is set, it can
// safely use t.GetXconnectTunnelType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XconnectTunnelType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) GetXconnectTunnelType() bool {
	if t == nil || t.XconnectTunnelType == nil {
		return false
	}
	return *t.XconnectTunnelType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcctDelayTime == nil {
		var v bool = false
		t.AcctDelayTime = &v
	}
	if t.AcctTriggeredReason == nil {
		var v bool = false
		t.AcctTriggeredReason = &v
	}
	if t.CalledStationId == nil {
		var v bool = false
		t.CalledStationId = &v
	}
	if t.CallingStationId == nil {
		var v bool = false
		t.CallingStationId = &v
	}
	if t.CircuitId == nil {
		var v bool = false
		t.CircuitId = &v
	}
	if t.Class == nil {
		var v bool = false
		t.Class = &v
	}
	if t.CreditControlQuota == nil {
		var v bool = false
		t.CreditControlQuota = &v
	}
	if t.DhcpOptions == nil {
		var v bool = false
		t.DhcpOptions = &v
	}
	if t.DhcpVendorClassId == nil {
		var v bool = false
		t.DhcpVendorClassId = &v
	}
	if t.FrameCounters == nil {
		var v bool = false
		t.FrameCounters = &v
	}
	if t.FramedIpAddress == nil {
		var v bool = false
		t.FramedIpAddress = &v
	}
	if t.FramedIpNetmask == nil {
		var v bool = false
		t.FramedIpNetmask = &v
	}
	if t.FramedIpv6Prefix == nil {
		var v bool = false
		t.FramedIpv6Prefix = &v
	}
	if t.HardwareTimestamp == nil {
		var v bool = false
		t.HardwareTimestamp = &v
	}
	if t.Ipv6Address == nil {
		var v bool = false
		t.Ipv6Address = &v
	}
	if t.MacAddress == nil {
		var v bool = false
		t.MacAddress = &v
	}
	if t.MillisecondEventTimestamp == nil {
		var v bool = false
		t.MillisecondEventTimestamp = &v
	}
	if t.MultiSessionId == nil {
		var v bool = false
		t.MultiSessionId = &v
	}
	if t.NasIdentifier == nil {
		var v bool = false
		t.NasIdentifier = &v
	}
	if t.NasIpAddress == nil {
		var v bool = false
		t.NasIpAddress = &v
	}
	if t.NasPort == nil {
		var v bool = false
		t.NasPort = &v
	}
	if t.NasPortId == nil {
		var v bool = false
		t.NasPortId = &v
	}
	if t.NasPortType == nil {
		var v bool = false
		t.NasPortType = &v
	}
	if t.NatInsideServiceId == nil {
		var v bool = false
		t.NatInsideServiceId = &v
	}
	if t.NatOutsideIpAddress == nil {
		var v bool = false
		t.NatOutsideIpAddress = &v
	}
	if t.NatOutsideServiceId == nil {
		var v bool = false
		t.NatOutsideServiceId = &v
	}
	if t.NatPortRangeBlock == nil {
		var v bool = false
		t.NatPortRangeBlock = &v
	}
	if t.NatSubscriberString == nil {
		var v bool = false
		t.NatSubscriberString = &v
	}
	if t.OctetCounters == nil {
		var v bool = false
		t.OctetCounters = &v
	}
	if t.ProxiedSubscriberData == nil {
		var v bool = false
		t.ProxiedSubscriberData = &v
	}
	if t.ReleaseReason == nil {
		var v bool = false
		t.ReleaseReason = &v
	}
	if t.RemoteId == nil {
		var v bool = false
		t.RemoteId = &v
	}
	if t.Rssi == nil {
		var v bool = false
		t.Rssi = &v
	}
	if t.SessionTime == nil {
		var v bool = false
		t.SessionTime = &v
	}
	if t.SubscriberId == nil {
		var v bool = false
		t.SubscriberId = &v
	}
	if t.ToserverDhcp6Options == nil {
		var v bool = false
		t.ToserverDhcp6Options = &v
	}
	if t.UeCreationType == nil {
		var v bool = false
		t.UeCreationType = &v
	}
	if t.UserName == nil {
		var v bool = false
		t.UserName = &v
	}
	if t.WlanSsidVlan == nil {
		var v bool = false
		t.WlanSsidVlan = &v
	}
	if t.XconnectTunnelHomeAddress == nil {
		var v bool = false
		t.XconnectTunnelHomeAddress = &v
	}
	if t.XconnectTunnelLocalIpv6Address == nil {
		var v bool = false
		t.XconnectTunnelLocalIpv6Address = &v
	}
	if t.XconnectTunnelRemoteIpv6Address == nil {
		var v bool = false
		t.XconnectTunnelRemoteIpv6Address = &v
	}
	if t.XconnectTunnelService == nil {
		var v bool = false
		t.XconnectTunnelService = &v
	}
	if t.XconnectTunnelType == nil {
		var v bool = false
		t.XconnectTunnelType = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_IncludeAttributes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate represents the /nokia-conf/configure/aaa/radius/isa-policy/accounting/nat-periodic-update YANG schema element.
type NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate struct {
	Interval  *uint32                                                                               `path:"interval" module:"nokia-conf"`
	RateLimit NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate_RateLimit_Union `path:"rate-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate) IsYANGGoStruct() {}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetRateLimit retrieves the value of the leaf RateLimit from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateLimit is set, it can
// safely use t.GetRateLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate) GetRateLimit() NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate_RateLimit_Union {
	if t == nil || t.RateLimit == nil {
		return NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate_RateLimit_Enum_unlimited
	}
	return t.RateLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RateLimit == nil {
		t.RateLimit = NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate_RateLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_NatPeriodicUpdate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers represents the /nokia-conf/configure/aaa/radius/isa-policy/accounting/update-triggers YANG schema element.
type NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers struct {
	AddressState       *bool `path:"address-state" module:"nokia-conf"`
	SoftQuotaExhausted *bool `path:"soft-quota-exhausted" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers) IsYANGGoStruct() {}

// GetAddressState retrieves the value of the leaf AddressState from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressState is set, it can
// safely use t.GetAddressState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers) GetAddressState() bool {
	if t == nil || t.AddressState == nil {
		return false
	}
	return *t.AddressState
}

// GetSoftQuotaExhausted retrieves the value of the leaf SoftQuotaExhausted from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SoftQuotaExhausted is set, it can
// safely use t.GetSoftQuotaExhausted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SoftQuotaExhausted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers) GetSoftQuotaExhausted() bool {
	if t == nil || t.SoftQuotaExhausted == nil {
		return false
	}
	return *t.SoftQuotaExhausted
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AddressState == nil {
		var v bool = false
		t.AddressState = &v
	}
	if t.SoftQuotaExhausted == nil {
		var v bool = false
		t.SoftQuotaExhausted = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Accounting_UpdateTriggers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication represents the /nokia-conf/configure/aaa/radius/isa-policy/authentication YANG schema element.
type NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication struct {
	IncludeAttributes *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes `path:"include-attributes" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication) IsYANGGoStruct() {}

// GetOrCreateIncludeAttributes retrieves the value of the IncludeAttributes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication) GetOrCreateIncludeAttributes() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes {
	if t.IncludeAttributes != nil {
		return t.IncludeAttributes
	}
	t.IncludeAttributes = &NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes{}
	return t.IncludeAttributes
}

// GetIncludeAttributes returns the value of the IncludeAttributes struct pointer
// from NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication. If the receiver or the field IncludeAttributes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication) GetIncludeAttributes() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes {
	if t != nil && t.IncludeAttributes != nil {
		return t.IncludeAttributes
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IncludeAttributes.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes represents the /nokia-conf/configure/aaa/radius/isa-policy/authentication/include-attributes YANG schema element.
type NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes struct {
	CalledStationId           *bool `path:"called-station-id" module:"nokia-conf"`
	CallingStationId          *bool `path:"calling-station-id" module:"nokia-conf"`
	CircuitId                 *bool `path:"circuit-id" module:"nokia-conf"`
	DhcpVendorClassId         *bool `path:"dhcp-vendor-class-id" module:"nokia-conf"`
	FramedIpAddress           *bool `path:"framed-ip-address" module:"nokia-conf"`
	Ipv6Address               *bool `path:"ipv6-address" module:"nokia-conf"`
	MacAddress                *bool `path:"mac-address" module:"nokia-conf"`
	NasIdentifier             *bool `path:"nas-identifier" module:"nokia-conf"`
	NasIpAddress              *bool `path:"nas-ip-address" module:"nokia-conf"`
	NasPort                   *bool `path:"nas-port" module:"nokia-conf"`
	NasPortId                 *bool `path:"nas-port-id" module:"nokia-conf"`
	NasPortType               *bool `path:"nas-port-type" module:"nokia-conf"`
	RemoteId                  *bool `path:"remote-id" module:"nokia-conf"`
	ToserverDhcpOptions       *bool `path:"toserver-dhcp-options" module:"nokia-conf"`
	ToserverDhcp6Options      *bool `path:"toserver-dhcp6-options" module:"nokia-conf"`
	WlanSsidVlan              *bool `path:"wlan-ssid-vlan" module:"nokia-conf"`
	XconnectTunnelHomeAddress *bool `path:"xconnect-tunnel-home-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) IsYANGGoStruct() {}

// GetCalledStationId retrieves the value of the leaf CalledStationId from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CalledStationId is set, it can
// safely use t.GetCalledStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CalledStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetCalledStationId() bool {
	if t == nil || t.CalledStationId == nil {
		return false
	}
	return *t.CalledStationId
}

// GetCallingStationId retrieves the value of the leaf CallingStationId from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingStationId is set, it can
// safely use t.GetCallingStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetCallingStationId() bool {
	if t == nil || t.CallingStationId == nil {
		return false
	}
	return *t.CallingStationId
}

// GetCircuitId retrieves the value of the leaf CircuitId from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CircuitId is set, it can
// safely use t.GetCircuitId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CircuitId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetCircuitId() bool {
	if t == nil || t.CircuitId == nil {
		return false
	}
	return *t.CircuitId
}

// GetDhcpVendorClassId retrieves the value of the leaf DhcpVendorClassId from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpVendorClassId is set, it can
// safely use t.GetDhcpVendorClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpVendorClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetDhcpVendorClassId() bool {
	if t == nil || t.DhcpVendorClassId == nil {
		return false
	}
	return *t.DhcpVendorClassId
}

// GetFramedIpAddress retrieves the value of the leaf FramedIpAddress from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FramedIpAddress is set, it can
// safely use t.GetFramedIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FramedIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetFramedIpAddress() bool {
	if t == nil || t.FramedIpAddress == nil {
		return false
	}
	return *t.FramedIpAddress
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetIpv6Address() bool {
	if t == nil || t.Ipv6Address == nil {
		return false
	}
	return *t.Ipv6Address
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetMacAddress() bool {
	if t == nil || t.MacAddress == nil {
		return false
	}
	return *t.MacAddress
}

// GetNasIdentifier retrieves the value of the leaf NasIdentifier from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasIdentifier is set, it can
// safely use t.GetNasIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasIdentifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetNasIdentifier() bool {
	if t == nil || t.NasIdentifier == nil {
		return false
	}
	return *t.NasIdentifier
}

// GetNasIpAddress retrieves the value of the leaf NasIpAddress from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasIpAddress is set, it can
// safely use t.GetNasIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetNasIpAddress() bool {
	if t == nil || t.NasIpAddress == nil {
		return true
	}
	return *t.NasIpAddress
}

// GetNasPort retrieves the value of the leaf NasPort from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasPort is set, it can
// safely use t.GetNasPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetNasPort() bool {
	if t == nil || t.NasPort == nil {
		return false
	}
	return *t.NasPort
}

// GetNasPortId retrieves the value of the leaf NasPortId from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasPortId is set, it can
// safely use t.GetNasPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasPortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetNasPortId() bool {
	if t == nil || t.NasPortId == nil {
		return false
	}
	return *t.NasPortId
}

// GetNasPortType retrieves the value of the leaf NasPortType from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasPortType is set, it can
// safely use t.GetNasPortType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasPortType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetNasPortType() bool {
	if t == nil || t.NasPortType == nil {
		return false
	}
	return *t.NasPortType
}

// GetRemoteId retrieves the value of the leaf RemoteId from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetRemoteId() bool {
	if t == nil || t.RemoteId == nil {
		return false
	}
	return *t.RemoteId
}

// GetToserverDhcpOptions retrieves the value of the leaf ToserverDhcpOptions from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ToserverDhcpOptions is set, it can
// safely use t.GetToserverDhcpOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ToserverDhcpOptions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetToserverDhcpOptions() bool {
	if t == nil || t.ToserverDhcpOptions == nil {
		return false
	}
	return *t.ToserverDhcpOptions
}

// GetToserverDhcp6Options retrieves the value of the leaf ToserverDhcp6Options from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ToserverDhcp6Options is set, it can
// safely use t.GetToserverDhcp6Options() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ToserverDhcp6Options == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetToserverDhcp6Options() bool {
	if t == nil || t.ToserverDhcp6Options == nil {
		return false
	}
	return *t.ToserverDhcp6Options
}

// GetWlanSsidVlan retrieves the value of the leaf WlanSsidVlan from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanSsidVlan is set, it can
// safely use t.GetWlanSsidVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanSsidVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetWlanSsidVlan() bool {
	if t == nil || t.WlanSsidVlan == nil {
		return false
	}
	return *t.WlanSsidVlan
}

// GetXconnectTunnelHomeAddress retrieves the value of the leaf XconnectTunnelHomeAddress from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XconnectTunnelHomeAddress is set, it can
// safely use t.GetXconnectTunnelHomeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XconnectTunnelHomeAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) GetXconnectTunnelHomeAddress() bool {
	if t == nil || t.XconnectTunnelHomeAddress == nil {
		return false
	}
	return *t.XconnectTunnelHomeAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CalledStationId == nil {
		var v bool = false
		t.CalledStationId = &v
	}
	if t.CallingStationId == nil {
		var v bool = false
		t.CallingStationId = &v
	}
	if t.CircuitId == nil {
		var v bool = false
		t.CircuitId = &v
	}
	if t.DhcpVendorClassId == nil {
		var v bool = false
		t.DhcpVendorClassId = &v
	}
	if t.FramedIpAddress == nil {
		var v bool = false
		t.FramedIpAddress = &v
	}
	if t.Ipv6Address == nil {
		var v bool = false
		t.Ipv6Address = &v
	}
	if t.MacAddress == nil {
		var v bool = false
		t.MacAddress = &v
	}
	if t.NasIdentifier == nil {
		var v bool = false
		t.NasIdentifier = &v
	}
	if t.NasIpAddress == nil {
		var v bool = true
		t.NasIpAddress = &v
	}
	if t.NasPort == nil {
		var v bool = false
		t.NasPort = &v
	}
	if t.NasPortId == nil {
		var v bool = false
		t.NasPortId = &v
	}
	if t.NasPortType == nil {
		var v bool = false
		t.NasPortType = &v
	}
	if t.RemoteId == nil {
		var v bool = false
		t.RemoteId = &v
	}
	if t.ToserverDhcpOptions == nil {
		var v bool = false
		t.ToserverDhcpOptions = &v
	}
	if t.ToserverDhcp6Options == nil {
		var v bool = false
		t.ToserverDhcp6Options = &v
	}
	if t.WlanSsidVlan == nil {
		var v bool = false
		t.WlanSsidVlan = &v
	}
	if t.XconnectTunnelHomeAddress == nil {
		var v bool = false
		t.XconnectTunnelHomeAddress = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Authentication_IncludeAttributes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers represents the /nokia-conf/configure/aaa/radius/isa-policy/servers YANG schema element.
type NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers struct {
	AccessAlgorithm    E_NokiaTypesRadius_IsaServerSelectionAlgo                           `path:"access-algorithm" module:"nokia-conf"`
	RouterInstance     *string                                                             `path:"router-instance" module:"nokia-conf"`
	Server             map[uint32]*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server `path:"server" module:"nokia-conf"`
	SourceAddressRange *string                                                             `path:"source-address-range" module:"nokia-conf"`
	Timeout            *uint32                                                             `path:"timeout" module:"nokia-conf"`
	TotalTries         *uint32                                                             `path:"total-tries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers) NewServer(Index uint32) (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[uint32]*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server{
		Index: &Index,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers) RenameServer(oldK, newK uint32) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Index = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers) GetOrCreateServer(Index uint32) *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server {

	key := Index

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers) GetServer(Index uint32) *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers) DeleteServer(Index uint32) {
	key := Index

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server struct to the
// list Server of NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers. If the key value(s) specified in
// the supplied NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers) AppendServer(v *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[uint32]*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetAccessAlgorithm retrieves the value of the leaf AccessAlgorithm from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessAlgorithm is set, it can
// safely use t.GetAccessAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers) GetAccessAlgorithm() E_NokiaTypesRadius_IsaServerSelectionAlgo {
	if t == nil || t.AccessAlgorithm == 0 {
		return NokiaTypesRadius_IsaServerSelectionAlgo_direct
	}
	return t.AccessAlgorithm
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetSourceAddressRange retrieves the value of the leaf SourceAddressRange from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddressRange is set, it can
// safely use t.GetSourceAddressRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddressRange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers) GetSourceAddressRange() string {
	if t == nil || t.SourceAddressRange == nil {
		return ""
	}
	return *t.SourceAddressRange
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 5
	}
	return *t.Timeout
}

// GetTotalTries retrieves the value of the leaf TotalTries from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalTries is set, it can
// safely use t.GetTotalTries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalTries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers) GetTotalTries() uint32 {
	if t == nil || t.TotalTries == nil {
		return 3
	}
	return *t.TotalTries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AccessAlgorithm == 0 {
		t.AccessAlgorithm = NokiaTypesRadius_IsaServerSelectionAlgo_direct
	}
	if t.Timeout == nil {
		var v uint32 = 5
		t.Timeout = &v
	}
	if t.TotalTries == nil {
		var v uint32 = 3
		t.TotalTries = &v
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server represents the /nokia-conf/configure/aaa/radius/isa-policy/servers/server YANG schema element.
type NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server struct {
	AdminState         E_NokiaTypesSros_AdminState                                      `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *uint32                                                          `path:"index" module:"nokia-conf"`
	IpAddress          *string                                                          `path:"ip-address" module:"nokia-conf"`
	Purpose            *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose `path:"purpose" module:"nokia-conf"`
	Secret             *string                                                          `path:"secret" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server) IsYANGGoStruct() {}

// GetOrCreatePurpose retrieves the value of the Purpose field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server) GetOrCreatePurpose() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose {
	if t.Purpose != nil {
		return t.Purpose
	}
	t.Purpose = &NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose{}
	return t.Purpose
}

// GetPurpose returns the value of the Purpose struct pointer
// from NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server. If the receiver or the field Purpose is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server) GetPurpose() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose {
	if t != nil && t.Purpose != nil {
		return t.Purpose
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Purpose.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose represents the /nokia-conf/configure/aaa/radius/isa-policy/servers/server/purpose YANG schema element.
type NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose struct {
	Accounting     *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting     `path:"accounting" module:"nokia-conf" yangPresence:"true"`
	Authentication *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication `path:"authentication" module:"nokia-conf" yangPresence:"true"`
	Coa            *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa            `path:"coa" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) IsYANGGoStruct() {}

// GetOrCreateAccounting retrieves the value of the Accounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) GetOrCreateAccounting() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting {
	if t.Accounting != nil {
		return t.Accounting
	}
	t.Accounting = &NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting{}
	return t.Accounting
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) GetOrCreateAuthentication() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication{}
	return t.Authentication
}

// GetOrCreateCoa retrieves the value of the Coa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) GetOrCreateCoa() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa {
	if t.Coa != nil {
		return t.Coa
	}
	t.Coa = &NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa{}
	return t.Coa
}

// GetAccounting returns the value of the Accounting struct pointer
// from NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose. If the receiver or the field Accounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) GetAccounting() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting {
	if t != nil && t.Accounting != nil {
		return t.Accounting
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) GetAuthentication() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetCoa returns the value of the Coa struct pointer
// from NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose. If the receiver or the field Coa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) GetCoa() *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa {
	if t != nil && t.Coa != nil {
		return t.Coa
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Accounting.PopulateDefaults()
	t.Authentication.PopulateDefaults()
	t.Coa.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting represents the /nokia-conf/configure/aaa/radius/isa-policy/servers/server/purpose/accounting YANG schema element.
type NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting struct {
	UdpPort *int32 `path:"udp-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting) IsYANGGoStruct() {}

// GetUdpPort retrieves the value of the leaf UdpPort from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UdpPort is set, it can
// safely use t.GetUdpPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UdpPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting) GetUdpPort() int32 {
	if t == nil || t.UdpPort == nil {
		return 1813
	}
	return *t.UdpPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UdpPort == nil {
		var v int32 = 1813
		t.UdpPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Accounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication represents the /nokia-conf/configure/aaa/radius/isa-policy/servers/server/purpose/authentication YANG schema element.
type NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication struct {
	UdpPort *int32 `path:"udp-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication) IsYANGGoStruct() {
}

// GetUdpPort retrieves the value of the leaf UdpPort from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UdpPort is set, it can
// safely use t.GetUdpPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UdpPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication) GetUdpPort() int32 {
	if t == nil || t.UdpPort == nil {
		return 1812
	}
	return *t.UdpPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UdpPort == nil {
		var v int32 = 1812
		t.UdpPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Authentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa represents the /nokia-conf/configure/aaa/radius/isa-policy/servers/server/purpose/coa YANG schema element.
type NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa struct {
	UdpPort *int32 `path:"udp-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa) IsYANGGoStruct() {}

// GetUdpPort retrieves the value of the leaf UdpPort from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UdpPort is set, it can
// safely use t.GetUdpPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UdpPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa) GetUdpPort() int32 {
	if t == nil || t.UdpPort == nil {
		return 3799
	}
	return *t.UdpPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UdpPort == nil {
		var v int32 = 3799
		t.UdpPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_Servers_Server_Purpose_Coa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName represents the /nokia-conf/configure/aaa/radius/isa-policy/user-name YANG schema element.
type NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName struct {
	Format    E_NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName_Format `path:"format" module:"nokia-conf"`
	MacFormat E_NokiaTypesNat_MacFormat                                  `path:"mac-format" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName) IsYANGGoStruct() {}

// GetFormat retrieves the value of the leaf Format from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Format is set, it can
// safely use t.GetFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Format == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName) GetFormat() E_NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName_Format {
	if t == nil || t.Format == 0 {
		return NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName_Format_mac
	}
	return t.Format
}

// GetMacFormat retrieves the value of the leaf MacFormat from the NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacFormat is set, it can
// safely use t.GetMacFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName) GetMacFormat() E_NokiaTypesNat_MacFormat {
	if t == nil || t.MacFormat == 0 {
		return NokiaTypesNat_MacFormat_alu
	}
	return t.MacFormat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Format == 0 {
		t.Format = NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName_Format_mac
	}
	if t.MacFormat == 0 {
		t.MacFormat = NokiaTypesNat_MacFormat_alu
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName.
func (*NokiaConf_Configure_Aaa_Radius_IsaPolicy_UserName) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy represents the /nokia-conf/configure/aaa/radius/l2tp-accounting-policy YANG schema element.
type NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy struct {
	AccountingType          *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_AccountingType         `path:"accounting-type" module:"nokia-conf"`
	AcctTunnelConnectionFmt *string                                                                     `path:"acct-tunnel-connection-fmt" module:"nokia-conf"`
	ApplyGroups             []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Description             *string                                                                     `path:"description" module:"nokia-conf"`
	IncludeRadiusAttribute  *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute `path:"include-radius-attribute" module:"nokia-conf"`
	Name                    *string                                                                     `path:"name" module:"nokia-conf"`
	RadiusServerPolicy      *string                                                                     `path:"radius-server-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy) IsYANGGoStruct() {}

// GetOrCreateAccountingType retrieves the value of the AccountingType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy) GetOrCreateAccountingType() *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_AccountingType {
	if t.AccountingType != nil {
		return t.AccountingType
	}
	t.AccountingType = &NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_AccountingType{}
	return t.AccountingType
}

// GetOrCreateIncludeRadiusAttribute retrieves the value of the IncludeRadiusAttribute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy) GetOrCreateIncludeRadiusAttribute() *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute {
	if t.IncludeRadiusAttribute != nil {
		return t.IncludeRadiusAttribute
	}
	t.IncludeRadiusAttribute = &NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute{}
	return t.IncludeRadiusAttribute
}

// GetAccountingType returns the value of the AccountingType struct pointer
// from NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy. If the receiver or the field AccountingType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy) GetAccountingType() *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_AccountingType {
	if t != nil && t.AccountingType != nil {
		return t.AccountingType
	}
	return nil
}

// GetIncludeRadiusAttribute returns the value of the IncludeRadiusAttribute struct pointer
// from NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy. If the receiver or the field IncludeRadiusAttribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy) GetIncludeRadiusAttribute() *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute {
	if t != nil && t.IncludeRadiusAttribute != nil {
		return t.IncludeRadiusAttribute
	}
	return nil
}

// GetAcctTunnelConnectionFmt retrieves the value of the leaf AcctTunnelConnectionFmt from the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcctTunnelConnectionFmt is set, it can
// safely use t.GetAcctTunnelConnectionFmt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcctTunnelConnectionFmt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy) GetAcctTunnelConnectionFmt() string {
	if t == nil || t.AcctTunnelConnectionFmt == nil {
		return "%n"
	}
	return *t.AcctTunnelConnectionFmt
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRadiusServerPolicy retrieves the value of the leaf RadiusServerPolicy from the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusServerPolicy is set, it can
// safely use t.GetRadiusServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy) GetRadiusServerPolicy() string {
	if t == nil || t.RadiusServerPolicy == nil {
		return ""
	}
	return *t.RadiusServerPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcctTunnelConnectionFmt == nil {
		var v string = "%n"
		t.AcctTunnelConnectionFmt = &v
	}
	t.AccountingType.PopulateDefaults()
	t.IncludeRadiusAttribute.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy.
func (*NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_AccountingType represents the /nokia-conf/configure/aaa/radius/l2tp-accounting-policy/accounting-type YANG schema element.
type NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_AccountingType struct {
	Session *bool `path:"session" module:"nokia-conf"`
	Tunnel  *bool `path:"tunnel" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_AccountingType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_AccountingType) IsYANGGoStruct() {}

// GetSession retrieves the value of the leaf Session from the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_AccountingType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Session is set, it can
// safely use t.GetSession() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Session == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_AccountingType) GetSession() bool {
	if t == nil || t.Session == nil {
		return true
	}
	return *t.Session
}

// GetTunnel retrieves the value of the leaf Tunnel from the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_AccountingType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tunnel is set, it can
// safely use t.GetTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_AccountingType) GetTunnel() bool {
	if t == nil || t.Tunnel == nil {
		return true
	}
	return *t.Tunnel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_AccountingType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_AccountingType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Session == nil {
		var v bool = true
		t.Session = &v
	}
	if t.Tunnel == nil {
		var v bool = true
		t.Tunnel = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_AccountingType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_AccountingType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_AccountingType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_AccountingType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_AccountingType.
func (*NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_AccountingType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute represents the /nokia-conf/configure/aaa/radius/l2tp-accounting-policy/include-radius-attribute YANG schema element.
type NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute struct {
	CallingStationId *bool                                                                                   `path:"calling-station-id" module:"nokia-conf"`
	NasIdentifier    *bool                                                                                   `path:"nas-identifier" module:"nokia-conf"`
	NasPort          *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort     `path:"nas-port" module:"nokia-conf" yangPresence:"true"`
	NasPortId        *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId   `path:"nas-port-id" module:"nokia-conf" yangPresence:"true"`
	NasPortType      *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType `path:"nas-port-type" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) IsYANGGoStruct() {}

// GetOrCreateNasPort retrieves the value of the NasPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) GetOrCreateNasPort() *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort {
	if t.NasPort != nil {
		return t.NasPort
	}
	t.NasPort = &NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort{}
	return t.NasPort
}

// GetOrCreateNasPortId retrieves the value of the NasPortId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) GetOrCreateNasPortId() *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId {
	if t.NasPortId != nil {
		return t.NasPortId
	}
	t.NasPortId = &NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId{}
	return t.NasPortId
}

// GetOrCreateNasPortType retrieves the value of the NasPortType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) GetOrCreateNasPortType() *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType {
	if t.NasPortType != nil {
		return t.NasPortType
	}
	t.NasPortType = &NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType{}
	return t.NasPortType
}

// GetNasPort returns the value of the NasPort struct pointer
// from NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute. If the receiver or the field NasPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) GetNasPort() *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort {
	if t != nil && t.NasPort != nil {
		return t.NasPort
	}
	return nil
}

// GetNasPortId returns the value of the NasPortId struct pointer
// from NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute. If the receiver or the field NasPortId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) GetNasPortId() *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId {
	if t != nil && t.NasPortId != nil {
		return t.NasPortId
	}
	return nil
}

// GetNasPortType returns the value of the NasPortType struct pointer
// from NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute. If the receiver or the field NasPortType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) GetNasPortType() *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType {
	if t != nil && t.NasPortType != nil {
		return t.NasPortType
	}
	return nil
}

// GetCallingStationId retrieves the value of the leaf CallingStationId from the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingStationId is set, it can
// safely use t.GetCallingStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) GetCallingStationId() bool {
	if t == nil || t.CallingStationId == nil {
		return false
	}
	return *t.CallingStationId
}

// GetNasIdentifier retrieves the value of the leaf NasIdentifier from the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasIdentifier is set, it can
// safely use t.GetNasIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasIdentifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) GetNasIdentifier() bool {
	if t == nil || t.NasIdentifier == nil {
		return false
	}
	return *t.NasIdentifier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CallingStationId == nil {
		var v bool = false
		t.CallingStationId = &v
	}
	if t.NasIdentifier == nil {
		var v bool = false
		t.NasIdentifier = &v
	}
	t.NasPort.PopulateDefaults()
	t.NasPortId.PopulateDefaults()
	t.NasPortType.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute.
func (*NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort represents the /nokia-conf/configure/aaa/radius/l2tp-accounting-policy/include-radius-attribute/nas-port YANG schema element.
type NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort struct {
	BitSpec *string `path:"bit-spec" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort) IsYANGGoStruct() {
}

// GetBitSpec retrieves the value of the leaf BitSpec from the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitSpec is set, it can
// safely use t.GetBitSpec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitSpec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort) GetBitSpec() string {
	if t == nil || t.BitSpec == nil {
		return ""
	}
	return *t.BitSpec
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort.
func (*NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId represents the /nokia-conf/configure/aaa/radius/l2tp-accounting-policy/include-radius-attribute/nas-port-id YANG schema element.
type NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId struct {
	PrefixString *string                                                                                       `path:"prefix-string" module:"nokia-conf"`
	Suffix       E_NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId_Suffix `path:"suffix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId) IsYANGGoStruct() {
}

// GetPrefixString retrieves the value of the leaf PrefixString from the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixString is set, it can
// safely use t.GetPrefixString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId) GetPrefixString() string {
	if t == nil || t.PrefixString == nil {
		return ""
	}
	return *t.PrefixString
}

// GetSuffix retrieves the value of the leaf Suffix from the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Suffix is set, it can
// safely use t.GetSuffix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Suffix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId) GetSuffix() E_NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId_Suffix {
	if t == nil || t.Suffix == 0 {
		return 0
	}
	return t.Suffix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId.
func (*NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType represents the /nokia-conf/configure/aaa/radius/l2tp-accounting-policy/include-radius-attribute/nas-port-type YANG schema element.
type NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType struct {
	Type NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType_Type_Union `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType) GetType() NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType_Type_Union {
	if t == nil || t.Type == nil {
		return NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType_Type_Enum_rfc_aligned
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == nil {
		t.Type = NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType_Type_Enum_rfc_aligned
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType.
func (*NokiaConf_Configure_Aaa_Radius_L2TpAccountingPolicy_IncludeRadiusAttribute_NasPortType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_RouteDownloader represents the /nokia-conf/configure/aaa/radius/route-downloader YANG schema element.
type NokiaConf_Configure_Aaa_Radius_RouteDownloader struct {
	AdminState         E_NokiaTypesSros_AdminState                                   `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	BaseUserName       *string                                                       `path:"base-user-name" module:"nokia-conf"`
	DefaultMetric      *uint32                                                       `path:"default-metric" module:"nokia-conf"`
	DefaultTag         *uint32                                                       `path:"default-tag" module:"nokia-conf"`
	Description        *string                                                       `path:"description" module:"nokia-conf"`
	DownloadInterval   *uint32                                                       `path:"download-interval" module:"nokia-conf"`
	MaxRoutes          *uint32                                                       `path:"max-routes" module:"nokia-conf"`
	Name               *string                                                       `path:"name" module:"nokia-conf"`
	Password           *string                                                       `path:"password" module:"nokia-conf"`
	RadiusServerPolicy *string                                                       `path:"radius-server-policy" module:"nokia-conf"`
	RetryInterval      *NokiaConf_Configure_Aaa_Radius_RouteDownloader_RetryInterval `path:"retry-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_RouteDownloader implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_RouteDownloader) IsYANGGoStruct() {}

// GetOrCreateRetryInterval retrieves the value of the RetryInterval field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader) GetOrCreateRetryInterval() *NokiaConf_Configure_Aaa_Radius_RouteDownloader_RetryInterval {
	if t.RetryInterval != nil {
		return t.RetryInterval
	}
	t.RetryInterval = &NokiaConf_Configure_Aaa_Radius_RouteDownloader_RetryInterval{}
	return t.RetryInterval
}

// GetRetryInterval returns the value of the RetryInterval struct pointer
// from NokiaConf_Configure_Aaa_Radius_RouteDownloader. If the receiver or the field RetryInterval is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader) GetRetryInterval() *NokiaConf_Configure_Aaa_Radius_RouteDownloader_RetryInterval {
	if t != nil && t.RetryInterval != nil {
		return t.RetryInterval
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBaseUserName retrieves the value of the leaf BaseUserName from the NokiaConf_Configure_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BaseUserName is set, it can
// safely use t.GetBaseUserName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BaseUserName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader) GetBaseUserName() string {
	if t == nil || t.BaseUserName == nil {
		return ""
	}
	return *t.BaseUserName
}

// GetDefaultMetric retrieves the value of the leaf DefaultMetric from the NokiaConf_Configure_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultMetric is set, it can
// safely use t.GetDefaultMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader) GetDefaultMetric() uint32 {
	if t == nil || t.DefaultMetric == nil {
		return 2
	}
	return *t.DefaultMetric
}

// GetDefaultTag retrieves the value of the leaf DefaultTag from the NokiaConf_Configure_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultTag is set, it can
// safely use t.GetDefaultTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader) GetDefaultTag() uint32 {
	if t == nil || t.DefaultTag == nil {
		return 0
	}
	return *t.DefaultTag
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDownloadInterval retrieves the value of the leaf DownloadInterval from the NokiaConf_Configure_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DownloadInterval is set, it can
// safely use t.GetDownloadInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DownloadInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader) GetDownloadInterval() uint32 {
	if t == nil || t.DownloadInterval == nil {
		return 720
	}
	return *t.DownloadInterval
}

// GetMaxRoutes retrieves the value of the leaf MaxRoutes from the NokiaConf_Configure_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRoutes is set, it can
// safely use t.GetMaxRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRoutes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader) GetMaxRoutes() uint32 {
	if t == nil || t.MaxRoutes == nil {
		return 200000
	}
	return *t.MaxRoutes
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetRadiusServerPolicy retrieves the value of the leaf RadiusServerPolicy from the NokiaConf_Configure_Aaa_Radius_RouteDownloader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusServerPolicy is set, it can
// safely use t.GetRadiusServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader) GetRadiusServerPolicy() string {
	if t == nil || t.RadiusServerPolicy == nil {
		return ""
	}
	return *t.RadiusServerPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_RouteDownloader
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DefaultMetric == nil {
		var v uint32 = 2
		t.DefaultMetric = &v
	}
	if t.DefaultTag == nil {
		var v uint32 = 0
		t.DefaultTag = &v
	}
	if t.DownloadInterval == nil {
		var v uint32 = 720
		t.DownloadInterval = &v
	}
	if t.MaxRoutes == nil {
		var v uint32 = 200000
		t.MaxRoutes = &v
	}
	t.RetryInterval.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Aaa_Radius_RouteDownloader struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_RouteDownloader"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_RouteDownloader.
func (*NokiaConf_Configure_Aaa_Radius_RouteDownloader) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_RouteDownloader_RetryInterval represents the /nokia-conf/configure/aaa/radius/route-downloader/retry-interval YANG schema element.
type NokiaConf_Configure_Aaa_Radius_RouteDownloader_RetryInterval struct {
	Max *uint32 `path:"max" module:"nokia-conf"`
	Min *uint32 `path:"min" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_RouteDownloader_RetryInterval implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_RouteDownloader_RetryInterval) IsYANGGoStruct() {}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Aaa_Radius_RouteDownloader_RetryInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader_RetryInterval) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 20
	}
	return *t.Max
}

// GetMin retrieves the value of the leaf Min from the NokiaConf_Configure_Aaa_Radius_RouteDownloader_RetryInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader_RetryInterval) GetMin() uint32 {
	if t == nil || t.Min == nil {
		return 10
	}
	return *t.Min
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_RouteDownloader_RetryInterval
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader_RetryInterval) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Max == nil {
		var v uint32 = 20
		t.Max = &v
	}
	if t.Min == nil {
		var v uint32 = 10
		t.Min = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader_RetryInterval) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_RouteDownloader_RetryInterval"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader_RetryInterval) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_RouteDownloader_RetryInterval) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_RouteDownloader_RetryInterval.
func (*NokiaConf_Configure_Aaa_Radius_RouteDownloader_RetryInterval) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_ServerPolicy represents the /nokia-conf/configure/aaa/radius/server-policy YANG schema element.
type NokiaConf_Configure_Aaa_Radius_ServerPolicy struct {
	AcctOnOff          *NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff `path:"acct-on-off" module:"nokia-conf" yangPresence:"true"`
	ApplyGroups        []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                `path:"description" module:"nokia-conf"`
	Name               *string                                                `path:"name" module:"nokia-conf"`
	PythonPolicy       *string                                                `path:"python-policy" module:"nokia-conf"`
	Servers            *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers   `path:"servers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_ServerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy) IsYANGGoStruct() {}

// GetOrCreateAcctOnOff retrieves the value of the AcctOnOff field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy) GetOrCreateAcctOnOff() *NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff {
	if t.AcctOnOff != nil {
		return t.AcctOnOff
	}
	t.AcctOnOff = &NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff{}
	return t.AcctOnOff
}

// GetOrCreateServers retrieves the value of the Servers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy) GetOrCreateServers() *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers {
	if t.Servers != nil {
		return t.Servers
	}
	t.Servers = &NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers{}
	return t.Servers
}

// GetAcctOnOff returns the value of the AcctOnOff struct pointer
// from NokiaConf_Configure_Aaa_Radius_ServerPolicy. If the receiver or the field AcctOnOff is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy) GetAcctOnOff() *NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff {
	if t != nil && t.AcctOnOff != nil {
		return t.AcctOnOff
	}
	return nil
}

// GetServers returns the value of the Servers struct pointer
// from NokiaConf_Configure_Aaa_Radius_ServerPolicy. If the receiver or the field Servers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy) GetServers() *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers {
	if t != nil && t.Servers != nil {
		return t.Servers
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Aaa_Radius_ServerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Aaa_Radius_ServerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Aaa_Radius_ServerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Aaa_Radius_ServerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Aaa_Radius_ServerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_ServerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AcctOnOff.PopulateDefaults()
	t.Servers.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Aaa_Radius_ServerPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_ServerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_ServerPolicy.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff represents the /nokia-conf/configure/aaa/radius/server-policy/acct-on-off YANG schema element.
type NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff struct {
	ApplyGroups        []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Monitor            *string                                                                `path:"monitor" module:"nokia-conf"`
	OperStateChange    *NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange `path:"oper-state-change" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff) IsYANGGoStruct() {}

// GetOrCreateOperStateChange retrieves the value of the OperStateChange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff) GetOrCreateOperStateChange() *NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange {
	if t.OperStateChange != nil {
		return t.OperStateChange
	}
	t.OperStateChange = &NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange{}
	return t.OperStateChange
}

// GetOperStateChange returns the value of the OperStateChange struct pointer
// from NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff. If the receiver or the field OperStateChange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff) GetOperStateChange() *NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange {
	if t != nil && t.OperStateChange != nil {
		return t.OperStateChange
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMonitor retrieves the value of the leaf Monitor from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Monitor is set, it can
// safely use t.GetMonitor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Monitor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff) GetMonitor() string {
	if t == nil || t.Monitor == nil {
		return ""
	}
	return *t.Monitor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.OperStateChange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange represents the /nokia-conf/configure/aaa/radius/server-policy/acct-on-off/oper-state-change YANG schema element.
type NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange struct {
	Group *string `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange) IsYANGGoStruct() {}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_AcctOnOff_OperStateChange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers represents the /nokia-conf/configure/aaa/radius/server-policy/servers YANG schema element.
type NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers struct {
	AccessAlgorithm   E_NokiaTypesRadius_ServerSelectionAlgo                                 `path:"access-algorithm" module:"nokia-conf"`
	Buffering         *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering         `path:"buffering" module:"nokia-conf"`
	HealthCheck       *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck       `path:"health-check" module:"nokia-conf"`
	HoldDownTime      *uint32                                                                `path:"hold-down-time" module:"nokia-conf"`
	Ipv6SourceAddress *string                                                                `path:"ipv6-source-address" module:"nokia-conf"`
	RetryCount        *uint32                                                                `path:"retry-count" module:"nokia-conf"`
	RouterInstance    *string                                                                `path:"router-instance" module:"nokia-conf"`
	Server            map[uint32]*NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server `path:"server" module:"nokia-conf"`
	SourceAddress     *string                                                                `path:"source-address" module:"nokia-conf"`
	Stickiness        *bool                                                                  `path:"stickiness" module:"nokia-conf"`
	Timeout           *uint32                                                                `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) NewServer(ServerIndex uint32) (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[uint32]*NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server)
	}

	key := ServerIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server{
		ServerIndex: &ServerIndex,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) RenameServer(oldK, newK uint32) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.ServerIndex = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) GetOrCreateServer(ServerIndex uint32) *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server {

	key := ServerIndex

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(ServerIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) GetServer(ServerIndex uint32) *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server {

	if t == nil {
		return nil
	}

	key := ServerIndex

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) DeleteServer(ServerIndex uint32) {
	key := ServerIndex

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server struct to the
// list Server of NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers. If the key value(s) specified in
// the supplied NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) AppendServer(v *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server) error {
	if v.ServerIndex == nil {
		return fmt.Errorf("invalid nil key received for ServerIndex")
	}

	key := *v.ServerIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[uint32]*NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetOrCreateBuffering retrieves the value of the Buffering field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) GetOrCreateBuffering() *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering {
	if t.Buffering != nil {
		return t.Buffering
	}
	t.Buffering = &NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering{}
	return t.Buffering
}

// GetOrCreateHealthCheck retrieves the value of the HealthCheck field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) GetOrCreateHealthCheck() *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck {
	if t.HealthCheck != nil {
		return t.HealthCheck
	}
	t.HealthCheck = &NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck{}
	return t.HealthCheck
}

// GetBuffering returns the value of the Buffering struct pointer
// from NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers. If the receiver or the field Buffering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) GetBuffering() *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering {
	if t != nil && t.Buffering != nil {
		return t.Buffering
	}
	return nil
}

// GetHealthCheck returns the value of the HealthCheck struct pointer
// from NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers. If the receiver or the field HealthCheck is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) GetHealthCheck() *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck {
	if t != nil && t.HealthCheck != nil {
		return t.HealthCheck
	}
	return nil
}

// GetAccessAlgorithm retrieves the value of the leaf AccessAlgorithm from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessAlgorithm is set, it can
// safely use t.GetAccessAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) GetAccessAlgorithm() E_NokiaTypesRadius_ServerSelectionAlgo {
	if t == nil || t.AccessAlgorithm == 0 {
		return NokiaTypesRadius_ServerSelectionAlgo_direct
	}
	return t.AccessAlgorithm
}

// GetHoldDownTime retrieves the value of the leaf HoldDownTime from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTime is set, it can
// safely use t.GetHoldDownTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) GetHoldDownTime() uint32 {
	if t == nil || t.HoldDownTime == nil {
		return 30
	}
	return *t.HoldDownTime
}

// GetIpv6SourceAddress retrieves the value of the leaf Ipv6SourceAddress from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6SourceAddress is set, it can
// safely use t.GetIpv6SourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) GetIpv6SourceAddress() string {
	if t == nil || t.Ipv6SourceAddress == nil {
		return ""
	}
	return *t.Ipv6SourceAddress
}

// GetRetryCount retrieves the value of the leaf RetryCount from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryCount is set, it can
// safely use t.GetRetryCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) GetRetryCount() uint32 {
	if t == nil || t.RetryCount == nil {
		return 3
	}
	return *t.RetryCount
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetStickiness retrieves the value of the leaf Stickiness from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Stickiness is set, it can
// safely use t.GetStickiness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Stickiness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) GetStickiness() bool {
	if t == nil || t.Stickiness == nil {
		return true
	}
	return *t.Stickiness
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 5
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AccessAlgorithm == 0 {
		t.AccessAlgorithm = NokiaTypesRadius_ServerSelectionAlgo_direct
	}
	if t.HoldDownTime == nil {
		var v uint32 = 30
		t.HoldDownTime = &v
	}
	if t.RetryCount == nil {
		var v uint32 = 3
		t.RetryCount = &v
	}
	if t.Stickiness == nil {
		var v bool = true
		t.Stickiness = &v
	}
	if t.Timeout == nil {
		var v uint32 = 5
		t.Timeout = &v
	}
	t.Buffering.PopulateDefaults()
	t.HealthCheck.PopulateDefaults()
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering represents the /nokia-conf/configure/aaa/radius/server-policy/servers/buffering YANG schema element.
type NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering struct {
	AcctInterim *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim `path:"acct-interim" module:"nokia-conf" yangPresence:"true"`
	AcctStart   *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart   `path:"acct-start" module:"nokia-conf" yangPresence:"true"`
	AcctStop    *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop    `path:"acct-stop" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering) IsYANGGoStruct() {}

// GetOrCreateAcctInterim retrieves the value of the AcctInterim field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering) GetOrCreateAcctInterim() *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim {
	if t.AcctInterim != nil {
		return t.AcctInterim
	}
	t.AcctInterim = &NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim{}
	return t.AcctInterim
}

// GetOrCreateAcctStart retrieves the value of the AcctStart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering) GetOrCreateAcctStart() *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart {
	if t.AcctStart != nil {
		return t.AcctStart
	}
	t.AcctStart = &NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart{}
	return t.AcctStart
}

// GetOrCreateAcctStop retrieves the value of the AcctStop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering) GetOrCreateAcctStop() *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop {
	if t.AcctStop != nil {
		return t.AcctStop
	}
	t.AcctStop = &NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop{}
	return t.AcctStop
}

// GetAcctInterim returns the value of the AcctInterim struct pointer
// from NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering. If the receiver or the field AcctInterim is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering) GetAcctInterim() *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim {
	if t != nil && t.AcctInterim != nil {
		return t.AcctInterim
	}
	return nil
}

// GetAcctStart returns the value of the AcctStart struct pointer
// from NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering. If the receiver or the field AcctStart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering) GetAcctStart() *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart {
	if t != nil && t.AcctStart != nil {
		return t.AcctStart
	}
	return nil
}

// GetAcctStop returns the value of the AcctStop struct pointer
// from NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering. If the receiver or the field AcctStop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering) GetAcctStop() *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop {
	if t != nil && t.AcctStop != nil {
		return t.AcctStop
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AcctInterim.PopulateDefaults()
	t.AcctStart.PopulateDefaults()
	t.AcctStop.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim represents the /nokia-conf/configure/aaa/radius/server-policy/servers/buffering/acct-interim YANG schema element.
type NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim struct {
	Lifetime *uint32 `path:"lifetime" module:"nokia-conf"`
	Max      *uint32 `path:"max" module:"nokia-conf"`
	Min      *uint32 `path:"min" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim) IsYANGGoStruct() {}

// GetLifetime retrieves the value of the leaf Lifetime from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lifetime is set, it can
// safely use t.GetLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim) GetLifetime() uint32 {
	if t == nil || t.Lifetime == nil {
		return 0
	}
	return *t.Lifetime
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMin retrieves the value of the leaf Min from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim) GetMin() uint32 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctInterim) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart represents the /nokia-conf/configure/aaa/radius/server-policy/servers/buffering/acct-start YANG schema element.
type NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart struct {
	Lifetime *uint32 `path:"lifetime" module:"nokia-conf"`
	Max      *uint32 `path:"max" module:"nokia-conf"`
	Min      *uint32 `path:"min" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart) IsYANGGoStruct() {}

// GetLifetime retrieves the value of the leaf Lifetime from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lifetime is set, it can
// safely use t.GetLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart) GetLifetime() uint32 {
	if t == nil || t.Lifetime == nil {
		return 0
	}
	return *t.Lifetime
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMin retrieves the value of the leaf Min from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart) GetMin() uint32 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStart) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop represents the /nokia-conf/configure/aaa/radius/server-policy/servers/buffering/acct-stop YANG schema element.
type NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop struct {
	Lifetime *uint32 `path:"lifetime" module:"nokia-conf"`
	Max      *uint32 `path:"max" module:"nokia-conf"`
	Min      *uint32 `path:"min" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop) IsYANGGoStruct() {}

// GetLifetime retrieves the value of the leaf Lifetime from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lifetime is set, it can
// safely use t.GetLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop) GetLifetime() uint32 {
	if t == nil || t.Lifetime == nil {
		return 0
	}
	return *t.Lifetime
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMin retrieves the value of the leaf Min from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop) GetMin() uint32 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Buffering_AcctStop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck represents the /nokia-conf/configure/aaa/radius/server-policy/servers/health-check YANG schema element.
type NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck struct {
	DownTimeout *uint32                                                                      `path:"down-timeout" module:"nokia-conf"`
	TestAccount *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount `path:"test-account" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck) IsYANGGoStruct() {}

// GetOrCreateTestAccount retrieves the value of the TestAccount field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck) GetOrCreateTestAccount() *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount {
	if t.TestAccount != nil {
		return t.TestAccount
	}
	t.TestAccount = &NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount{}
	return t.TestAccount
}

// GetTestAccount returns the value of the TestAccount struct pointer
// from NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck. If the receiver or the field TestAccount is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck) GetTestAccount() *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount {
	if t != nil && t.TestAccount != nil {
		return t.TestAccount
	}
	return nil
}

// GetDownTimeout retrieves the value of the leaf DownTimeout from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DownTimeout is set, it can
// safely use t.GetDownTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DownTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck) GetDownTimeout() uint32 {
	if t == nil || t.DownTimeout == nil {
		return 0
	}
	return *t.DownTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TestAccount.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount represents the /nokia-conf/configure/aaa/radius/server-policy/servers/health-check/test-account YANG schema element.
type NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Interval   *uint32                     `path:"interval" module:"nokia-conf"`
	Password   *string                     `path:"password" module:"nokia-conf"`
	UserName   *string                     `path:"user-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 3
	}
	return *t.Interval
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetUserName retrieves the value of the leaf UserName from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserName is set, it can
// safely use t.GetUserName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount) GetUserName() string {
	if t == nil || t.UserName == nil {
		return ""
	}
	return *t.UserName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Interval == nil {
		var v uint32 = 3
		t.Interval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_HealthCheck_TestAccount) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server represents the /nokia-conf/configure/aaa/radius/server-policy/servers/server YANG schema element.
type NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	ServerIndex        *uint32  `path:"server-index" module:"nokia-conf"`
	ServerName         *string  `path:"server-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetServerIndex retrieves the value of the leaf ServerIndex from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerIndex is set, it can
// safely use t.GetServerIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server) GetServerIndex() uint32 {
	if t == nil || t.ServerIndex == nil {
		return 0
	}
	return *t.ServerIndex
}

// GetServerName retrieves the value of the leaf ServerName from the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerName is set, it can
// safely use t.GetServerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server) GetServerName() string {
	if t == nil || t.ServerName == nil {
		return ""
	}
	return *t.ServerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServerIndex == nil {
		return nil, fmt.Errorf("nil value for key ServerIndex")
	}

	return map[string]interface{}{
		"server-index": *t.ServerIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server.
func (*NokiaConf_Configure_Aaa_Radius_ServerPolicy_Servers_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Wpp represents the /nokia-conf/configure/aaa/wpp YANG schema element.
type NokiaConf_Configure_Aaa_Wpp struct {
	ApplyGroups        []string                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	PortalGroup        map[string]*NokiaConf_Configure_Aaa_Wpp_PortalGroup `path:"portal-group" module:"nokia-conf"`
	SystemName         *string                                             `path:"system-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Wpp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Wpp) IsYANGGoStruct() {}

// NewPortalGroup creates a new entry in the PortalGroup list of the
// NokiaConf_Configure_Aaa_Wpp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Aaa_Wpp) NewPortalGroup(GroupName string) (*NokiaConf_Configure_Aaa_Wpp_PortalGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortalGroup == nil {
		t.PortalGroup = make(map[string]*NokiaConf_Configure_Aaa_Wpp_PortalGroup)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortalGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortalGroup", key)
	}

	t.PortalGroup[key] = &NokiaConf_Configure_Aaa_Wpp_PortalGroup{
		GroupName: &GroupName,
	}

	return t.PortalGroup[key], nil
}

// RenamePortalGroup renames an entry in the list PortalGroup within
// the NokiaConf_Configure_Aaa_Wpp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Aaa_Wpp) RenamePortalGroup(oldK, newK string) error {
	if _, ok := t.PortalGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in PortalGroup", newK)
	}

	e, ok := t.PortalGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortalGroup", oldK)
	}
	e.GroupName = &newK

	t.PortalGroup[newK] = e
	delete(t.PortalGroup, oldK)
	return nil
}

// GetOrCreatePortalGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Wpp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Aaa_Wpp) GetOrCreatePortalGroup(GroupName string) *NokiaConf_Configure_Aaa_Wpp_PortalGroup {

	key := GroupName

	if v, ok := t.PortalGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortalGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortalGroup got unexpected error: %v", err))
	}
	return v
}

// GetPortalGroup retrieves the value with the specified key from
// the PortalGroup map field of NokiaConf_Configure_Aaa_Wpp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Aaa_Wpp) GetPortalGroup(GroupName string) *NokiaConf_Configure_Aaa_Wpp_PortalGroup {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.PortalGroup[key]; ok {
		return lm
	}
	return nil
}

// DeletePortalGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Wpp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Aaa_Wpp) DeletePortalGroup(GroupName string) {
	key := GroupName

	delete(t.PortalGroup, key)
}

// AppendPortalGroup appends the supplied NokiaConf_Configure_Aaa_Wpp_PortalGroup struct to the
// list PortalGroup of NokiaConf_Configure_Aaa_Wpp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Aaa_Wpp_PortalGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Aaa_Wpp) AppendPortalGroup(v *NokiaConf_Configure_Aaa_Wpp_PortalGroup) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortalGroup == nil {
		t.PortalGroup = make(map[string]*NokiaConf_Configure_Aaa_Wpp_PortalGroup)
	}

	if _, ok := t.PortalGroup[key]; ok {
		return fmt.Errorf("duplicate key for list PortalGroup %v", key)
	}

	t.PortalGroup[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Aaa_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Wpp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Aaa_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Wpp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSystemName retrieves the value of the leaf SystemName from the NokiaConf_Configure_Aaa_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemName is set, it can
// safely use t.GetSystemName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Wpp) GetSystemName() string {
	if t == nil || t.SystemName == nil {
		return ""
	}
	return *t.SystemName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Wpp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Wpp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PortalGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Wpp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Wpp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Wpp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Wpp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Wpp.
func (*NokiaConf_Configure_Aaa_Wpp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Wpp_PortalGroup represents the /nokia-conf/configure/aaa/wpp/portal-group YANG schema element.
type NokiaConf_Configure_Aaa_Wpp_PortalGroup struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                                `path:"description" module:"nokia-conf"`
	GroupName          *string                                                                                                `path:"group-name" module:"nokia-conf"`
	Portal             map[NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal_Key]*NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal `path:"portal" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Wpp_PortalGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Wpp_PortalGroup) IsYANGGoStruct() {}

// NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal_Key represents the key for list Portal of element /nokia-conf/configure/aaa/wpp/portal-group.
type NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal_Key struct {
	RouterInstance string `path:"router-instance"`
	Name           string `path:"name"`
}

// NewPortal creates a new entry in the Portal list of the
// NokiaConf_Configure_Aaa_Wpp_PortalGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup) NewPortal(RouterInstance string, Name string) (*NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Portal == nil {
		t.Portal = make(map[NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal_Key]*NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal)
	}

	key := NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal_Key{
		RouterInstance: RouterInstance,
		Name:           Name,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Portal[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Portal", key)
	}

	t.Portal[key] = &NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal{
		RouterInstance: &RouterInstance,
		Name:           &Name,
	}

	return t.Portal[key], nil
}

// RenamePortal renames an entry in the list Portal within
// the NokiaConf_Configure_Aaa_Wpp_PortalGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup) RenamePortal(oldK, newK NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal_Key) error {
	if _, ok := t.Portal[newK]; ok {
		return fmt.Errorf("key %v already exists in Portal", newK)
	}

	e, ok := t.Portal[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Portal", oldK)
	}
	e.RouterInstance = &newK.RouterInstance
	e.Name = &newK.Name

	t.Portal[newK] = e
	delete(t.Portal, oldK)
	return nil
}

// GetOrCreatePortal retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Wpp_PortalGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup) GetOrCreatePortal(RouterInstance string, Name string) *NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal {

	key := NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal_Key{
		RouterInstance: RouterInstance,
		Name:           Name,
	}

	if v, ok := t.Portal[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortal(RouterInstance, Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortal got unexpected error: %v", err))
	}
	return v
}

// GetPortal retrieves the value with the specified key from
// the Portal map field of NokiaConf_Configure_Aaa_Wpp_PortalGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup) GetPortal(RouterInstance string, Name string) *NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal_Key{
		RouterInstance: RouterInstance,
		Name:           Name,
	}

	if lm, ok := t.Portal[key]; ok {
		return lm
	}
	return nil
}

// DeletePortal deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Aaa_Wpp_PortalGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup) DeletePortal(RouterInstance string, Name string) {
	key := NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal_Key{
		RouterInstance: RouterInstance,
		Name:           Name,
	}

	delete(t.Portal, key)
}

// AppendPortal appends the supplied NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal struct to the
// list Portal of NokiaConf_Configure_Aaa_Wpp_PortalGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup) AppendPortal(v *NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal) error {
	if v.RouterInstance == nil {
		return fmt.Errorf("invalid nil key for RouterInstance")
	}

	if v.Name == nil {
		return fmt.Errorf("invalid nil key for Name")
	}

	key := NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal_Key{
		RouterInstance: *v.RouterInstance,
		Name:           *v.Name,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Portal == nil {
		t.Portal = make(map[NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal_Key]*NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal)
	}

	if _, ok := t.Portal[key]; ok {
		return fmt.Errorf("duplicate key for list Portal %v", key)
	}

	t.Portal[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Aaa_Wpp_PortalGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Aaa_Wpp_PortalGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Aaa_Wpp_PortalGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Aaa_Wpp_PortalGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Aaa_Wpp_PortalGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Wpp_PortalGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Portal {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Aaa_Wpp_PortalGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Wpp_PortalGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Wpp_PortalGroup.
func (*NokiaConf_Configure_Aaa_Wpp_PortalGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal represents the /nokia-conf/configure/aaa/wpp/portal-group/portal YANG schema element.
type NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal struct {
	Name           *string `path:"name" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	if t.RouterInstance == nil {
		return nil, fmt.Errorf("nil value for key RouterInstance")
	}

	return map[string]interface{}{
		"name":            *t.Name,
		"router-instance": *t.RouterInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal.
func (*NokiaConf_Configure_Aaa_Wpp_PortalGroup_Portal) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance represents the /nokia-conf/configure/application-assurance YANG schema element.
type NokiaConf_Configure_ApplicationAssurance struct {
	Aarp                   map[uint32]*NokiaConf_Configure_ApplicationAssurance_Aarp                   `path:"aarp" module:"nokia-conf"`
	ApplyGroups            []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Cflowd                 *NokiaConf_Configure_ApplicationAssurance_Cflowd                            `path:"cflowd" module:"nokia-conf"`
	FlowAttribute          *NokiaConf_Configure_ApplicationAssurance_FlowAttribute                     `path:"flow-attribute" module:"nokia-conf"`
	Group                  map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group                  `path:"group" module:"nokia-conf"`
	HttpEnrich             *NokiaConf_Configure_ApplicationAssurance_HttpEnrich                        `path:"http-enrich" module:"nokia-conf"`
	HttpErrorRedirect      *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect                 `path:"http-error-redirect" module:"nokia-conf"`
	HttpNotification       *NokiaConf_Configure_ApplicationAssurance_HttpNotification                  `path:"http-notification" module:"nokia-conf"`
	HttpRedirect           *NokiaConf_Configure_ApplicationAssurance_HttpRedirect                      `path:"http-redirect" module:"nokia-conf"`
	Protocol               map[string]*NokiaConf_Configure_ApplicationAssurance_Protocol               `path:"protocol" module:"nokia-conf"`
	RadiusAccountingPolicy map[string]*NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy `path:"radius-accounting-policy" module:"nokia-conf"`
	UsageAlertThresholds   *NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds              `path:"usage-alert-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance) IsYANGGoStruct() {}

// NewAarp creates a new entry in the Aarp list of the
// NokiaConf_Configure_ApplicationAssurance struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance) NewAarp(AarpId uint32) (*NokiaConf_Configure_ApplicationAssurance_Aarp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Aarp == nil {
		t.Aarp = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Aarp)
	}

	key := AarpId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Aarp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Aarp", key)
	}

	t.Aarp[key] = &NokiaConf_Configure_ApplicationAssurance_Aarp{
		AarpId: &AarpId,
	}

	return t.Aarp[key], nil
}

// RenameAarp renames an entry in the list Aarp within
// the NokiaConf_Configure_ApplicationAssurance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance) RenameAarp(oldK, newK uint32) error {
	if _, ok := t.Aarp[newK]; ok {
		return fmt.Errorf("key %v already exists in Aarp", newK)
	}

	e, ok := t.Aarp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Aarp", oldK)
	}
	e.AarpId = &newK

	t.Aarp[newK] = e
	delete(t.Aarp, oldK)
	return nil
}

// GetOrCreateAarp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance) GetOrCreateAarp(AarpId uint32) *NokiaConf_Configure_ApplicationAssurance_Aarp {

	key := AarpId

	if v, ok := t.Aarp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAarp(AarpId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAarp got unexpected error: %v", err))
	}
	return v
}

// GetAarp retrieves the value with the specified key from
// the Aarp map field of NokiaConf_Configure_ApplicationAssurance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance) GetAarp(AarpId uint32) *NokiaConf_Configure_ApplicationAssurance_Aarp {

	if t == nil {
		return nil
	}

	key := AarpId

	if lm, ok := t.Aarp[key]; ok {
		return lm
	}
	return nil
}

// DeleteAarp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance) DeleteAarp(AarpId uint32) {
	key := AarpId

	delete(t.Aarp, key)
}

// AppendAarp appends the supplied NokiaConf_Configure_ApplicationAssurance_Aarp struct to the
// list Aarp of NokiaConf_Configure_ApplicationAssurance. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Aarp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance) AppendAarp(v *NokiaConf_Configure_ApplicationAssurance_Aarp) error {
	if v.AarpId == nil {
		return fmt.Errorf("invalid nil key received for AarpId")
	}

	key := *v.AarpId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Aarp == nil {
		t.Aarp = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Aarp)
	}

	if _, ok := t.Aarp[key]; ok {
		return fmt.Errorf("duplicate key for list Aarp %v", key)
	}

	t.Aarp[key] = v
	return nil
}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_ApplicationAssurance struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance) NewGroup(AaGroupId uint32) (*NokiaConf_Configure_ApplicationAssurance_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group)
	}

	key := AaGroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_ApplicationAssurance_Group{
		AaGroupId: &AaGroupId,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_ApplicationAssurance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance) RenameGroup(oldK, newK uint32) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.AaGroupId = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance) GetOrCreateGroup(AaGroupId uint32) *NokiaConf_Configure_ApplicationAssurance_Group {

	key := AaGroupId

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(AaGroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_ApplicationAssurance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance) GetGroup(AaGroupId uint32) *NokiaConf_Configure_ApplicationAssurance_Group {

	if t == nil {
		return nil
	}

	key := AaGroupId

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance) DeleteGroup(AaGroupId uint32) {
	key := AaGroupId

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_ApplicationAssurance_Group struct to the
// list Group of NokiaConf_Configure_ApplicationAssurance. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance) AppendGroup(v *NokiaConf_Configure_ApplicationAssurance_Group) error {
	if v.AaGroupId == nil {
		return fmt.Errorf("invalid nil key received for AaGroupId")
	}

	key := *v.AaGroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewProtocol creates a new entry in the Protocol list of the
// NokiaConf_Configure_ApplicationAssurance struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance) NewProtocol(ProtocolName string) (*NokiaConf_Configure_ApplicationAssurance_Protocol, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Protocol == nil {
		t.Protocol = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Protocol)
	}

	key := ProtocolName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Protocol[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Protocol", key)
	}

	t.Protocol[key] = &NokiaConf_Configure_ApplicationAssurance_Protocol{
		ProtocolName: &ProtocolName,
	}

	return t.Protocol[key], nil
}

// RenameProtocol renames an entry in the list Protocol within
// the NokiaConf_Configure_ApplicationAssurance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance) RenameProtocol(oldK, newK string) error {
	if _, ok := t.Protocol[newK]; ok {
		return fmt.Errorf("key %v already exists in Protocol", newK)
	}

	e, ok := t.Protocol[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Protocol", oldK)
	}
	e.ProtocolName = &newK

	t.Protocol[newK] = e
	delete(t.Protocol, oldK)
	return nil
}

// GetOrCreateProtocol retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance) GetOrCreateProtocol(ProtocolName string) *NokiaConf_Configure_ApplicationAssurance_Protocol {

	key := ProtocolName

	if v, ok := t.Protocol[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProtocol(ProtocolName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProtocol got unexpected error: %v", err))
	}
	return v
}

// GetProtocol retrieves the value with the specified key from
// the Protocol map field of NokiaConf_Configure_ApplicationAssurance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance) GetProtocol(ProtocolName string) *NokiaConf_Configure_ApplicationAssurance_Protocol {

	if t == nil {
		return nil
	}

	key := ProtocolName

	if lm, ok := t.Protocol[key]; ok {
		return lm
	}
	return nil
}

// DeleteProtocol deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance) DeleteProtocol(ProtocolName string) {
	key := ProtocolName

	delete(t.Protocol, key)
}

// AppendProtocol appends the supplied NokiaConf_Configure_ApplicationAssurance_Protocol struct to the
// list Protocol of NokiaConf_Configure_ApplicationAssurance. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Protocol already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance) AppendProtocol(v *NokiaConf_Configure_ApplicationAssurance_Protocol) error {
	if v.ProtocolName == nil {
		return fmt.Errorf("invalid nil key received for ProtocolName")
	}

	key := *v.ProtocolName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Protocol == nil {
		t.Protocol = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Protocol)
	}

	if _, ok := t.Protocol[key]; ok {
		return fmt.Errorf("duplicate key for list Protocol %v", key)
	}

	t.Protocol[key] = v
	return nil
}

// NewRadiusAccountingPolicy creates a new entry in the RadiusAccountingPolicy list of the
// NokiaConf_Configure_ApplicationAssurance struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance) NewRadiusAccountingPolicy(RadAcctPlcyName string) (*NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RadiusAccountingPolicy == nil {
		t.RadiusAccountingPolicy = make(map[string]*NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy)
	}

	key := RadAcctPlcyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RadiusAccountingPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RadiusAccountingPolicy", key)
	}

	t.RadiusAccountingPolicy[key] = &NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy{
		RadAcctPlcyName: &RadAcctPlcyName,
	}

	return t.RadiusAccountingPolicy[key], nil
}

// RenameRadiusAccountingPolicy renames an entry in the list RadiusAccountingPolicy within
// the NokiaConf_Configure_ApplicationAssurance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance) RenameRadiusAccountingPolicy(oldK, newK string) error {
	if _, ok := t.RadiusAccountingPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in RadiusAccountingPolicy", newK)
	}

	e, ok := t.RadiusAccountingPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RadiusAccountingPolicy", oldK)
	}
	e.RadAcctPlcyName = &newK

	t.RadiusAccountingPolicy[newK] = e
	delete(t.RadiusAccountingPolicy, oldK)
	return nil
}

// GetOrCreateRadiusAccountingPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance) GetOrCreateRadiusAccountingPolicy(RadAcctPlcyName string) *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy {

	key := RadAcctPlcyName

	if v, ok := t.RadiusAccountingPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRadiusAccountingPolicy(RadAcctPlcyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRadiusAccountingPolicy got unexpected error: %v", err))
	}
	return v
}

// GetRadiusAccountingPolicy retrieves the value with the specified key from
// the RadiusAccountingPolicy map field of NokiaConf_Configure_ApplicationAssurance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance) GetRadiusAccountingPolicy(RadAcctPlcyName string) *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy {

	if t == nil {
		return nil
	}

	key := RadAcctPlcyName

	if lm, ok := t.RadiusAccountingPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteRadiusAccountingPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance) DeleteRadiusAccountingPolicy(RadAcctPlcyName string) {
	key := RadAcctPlcyName

	delete(t.RadiusAccountingPolicy, key)
}

// AppendRadiusAccountingPolicy appends the supplied NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy struct to the
// list RadiusAccountingPolicy of NokiaConf_Configure_ApplicationAssurance. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance) AppendRadiusAccountingPolicy(v *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy) error {
	if v.RadAcctPlcyName == nil {
		return fmt.Errorf("invalid nil key received for RadAcctPlcyName")
	}

	key := *v.RadAcctPlcyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RadiusAccountingPolicy == nil {
		t.RadiusAccountingPolicy = make(map[string]*NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy)
	}

	if _, ok := t.RadiusAccountingPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list RadiusAccountingPolicy %v", key)
	}

	t.RadiusAccountingPolicy[key] = v
	return nil
}

// GetOrCreateCflowd retrieves the value of the Cflowd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance) GetOrCreateCflowd() *NokiaConf_Configure_ApplicationAssurance_Cflowd {
	if t.Cflowd != nil {
		return t.Cflowd
	}
	t.Cflowd = &NokiaConf_Configure_ApplicationAssurance_Cflowd{}
	return t.Cflowd
}

// GetOrCreateFlowAttribute retrieves the value of the FlowAttribute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance) GetOrCreateFlowAttribute() *NokiaConf_Configure_ApplicationAssurance_FlowAttribute {
	if t.FlowAttribute != nil {
		return t.FlowAttribute
	}
	t.FlowAttribute = &NokiaConf_Configure_ApplicationAssurance_FlowAttribute{}
	return t.FlowAttribute
}

// GetOrCreateHttpEnrich retrieves the value of the HttpEnrich field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance) GetOrCreateHttpEnrich() *NokiaConf_Configure_ApplicationAssurance_HttpEnrich {
	if t.HttpEnrich != nil {
		return t.HttpEnrich
	}
	t.HttpEnrich = &NokiaConf_Configure_ApplicationAssurance_HttpEnrich{}
	return t.HttpEnrich
}

// GetOrCreateHttpErrorRedirect retrieves the value of the HttpErrorRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance) GetOrCreateHttpErrorRedirect() *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect {
	if t.HttpErrorRedirect != nil {
		return t.HttpErrorRedirect
	}
	t.HttpErrorRedirect = &NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect{}
	return t.HttpErrorRedirect
}

// GetOrCreateHttpNotification retrieves the value of the HttpNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance) GetOrCreateHttpNotification() *NokiaConf_Configure_ApplicationAssurance_HttpNotification {
	if t.HttpNotification != nil {
		return t.HttpNotification
	}
	t.HttpNotification = &NokiaConf_Configure_ApplicationAssurance_HttpNotification{}
	return t.HttpNotification
}

// GetOrCreateHttpRedirect retrieves the value of the HttpRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance) GetOrCreateHttpRedirect() *NokiaConf_Configure_ApplicationAssurance_HttpRedirect {
	if t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	t.HttpRedirect = &NokiaConf_Configure_ApplicationAssurance_HttpRedirect{}
	return t.HttpRedirect
}

// GetOrCreateUsageAlertThresholds retrieves the value of the UsageAlertThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance) GetOrCreateUsageAlertThresholds() *NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds {
	if t.UsageAlertThresholds != nil {
		return t.UsageAlertThresholds
	}
	t.UsageAlertThresholds = &NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds{}
	return t.UsageAlertThresholds
}

// GetCflowd returns the value of the Cflowd struct pointer
// from NokiaConf_Configure_ApplicationAssurance. If the receiver or the field Cflowd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance) GetCflowd() *NokiaConf_Configure_ApplicationAssurance_Cflowd {
	if t != nil && t.Cflowd != nil {
		return t.Cflowd
	}
	return nil
}

// GetFlowAttribute returns the value of the FlowAttribute struct pointer
// from NokiaConf_Configure_ApplicationAssurance. If the receiver or the field FlowAttribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance) GetFlowAttribute() *NokiaConf_Configure_ApplicationAssurance_FlowAttribute {
	if t != nil && t.FlowAttribute != nil {
		return t.FlowAttribute
	}
	return nil
}

// GetHttpEnrich returns the value of the HttpEnrich struct pointer
// from NokiaConf_Configure_ApplicationAssurance. If the receiver or the field HttpEnrich is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance) GetHttpEnrich() *NokiaConf_Configure_ApplicationAssurance_HttpEnrich {
	if t != nil && t.HttpEnrich != nil {
		return t.HttpEnrich
	}
	return nil
}

// GetHttpErrorRedirect returns the value of the HttpErrorRedirect struct pointer
// from NokiaConf_Configure_ApplicationAssurance. If the receiver or the field HttpErrorRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance) GetHttpErrorRedirect() *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect {
	if t != nil && t.HttpErrorRedirect != nil {
		return t.HttpErrorRedirect
	}
	return nil
}

// GetHttpNotification returns the value of the HttpNotification struct pointer
// from NokiaConf_Configure_ApplicationAssurance. If the receiver or the field HttpNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance) GetHttpNotification() *NokiaConf_Configure_ApplicationAssurance_HttpNotification {
	if t != nil && t.HttpNotification != nil {
		return t.HttpNotification
	}
	return nil
}

// GetHttpRedirect returns the value of the HttpRedirect struct pointer
// from NokiaConf_Configure_ApplicationAssurance. If the receiver or the field HttpRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance) GetHttpRedirect() *NokiaConf_Configure_ApplicationAssurance_HttpRedirect {
	if t != nil && t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	return nil
}

// GetUsageAlertThresholds returns the value of the UsageAlertThresholds struct pointer
// from NokiaConf_Configure_ApplicationAssurance. If the receiver or the field UsageAlertThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance) GetUsageAlertThresholds() *NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds {
	if t != nil && t.UsageAlertThresholds != nil {
		return t.UsageAlertThresholds
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Cflowd.PopulateDefaults()
	t.FlowAttribute.PopulateDefaults()
	t.HttpEnrich.PopulateDefaults()
	t.HttpErrorRedirect.PopulateDefaults()
	t.HttpNotification.PopulateDefaults()
	t.HttpRedirect.PopulateDefaults()
	t.UsageAlertThresholds.PopulateDefaults()
	for _, e := range t.Aarp {
		e.PopulateDefaults()
	}
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.Protocol {
		e.PopulateDefaults()
	}
	for _, e := range t.RadiusAccountingPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance.
func (*NokiaConf_Configure_ApplicationAssurance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Aarp represents the /nokia-conf/configure/application-assurance/aarp YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Aarp struct {
	AarpId              *uint32                                                             `path:"aarp-id" module:"nokia-conf"`
	AdminState          E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups         []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Description         *string                                                             `path:"description" module:"nokia-conf"`
	MasterSelectionMode E_NokiaConf_Configure_ApplicationAssurance_Aarp_MasterSelectionMode `path:"master-selection-mode" module:"nokia-conf"`
	Peer                *string                                                             `path:"peer" module:"nokia-conf"`
	PeerEndpoint        *NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint         `path:"peer-endpoint" module:"nokia-conf"`
	Priority            *uint32                                                             `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Aarp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Aarp) IsYANGGoStruct() {}

// GetOrCreatePeerEndpoint retrieves the value of the PeerEndpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp) GetOrCreatePeerEndpoint() *NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint {
	if t.PeerEndpoint != nil {
		return t.PeerEndpoint
	}
	t.PeerEndpoint = &NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint{}
	return t.PeerEndpoint
}

// GetPeerEndpoint returns the value of the PeerEndpoint struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Aarp. If the receiver or the field PeerEndpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp) GetPeerEndpoint() *NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint {
	if t != nil && t.PeerEndpoint != nil {
		return t.PeerEndpoint
	}
	return nil
}

// GetAarpId retrieves the value of the leaf AarpId from the NokiaConf_Configure_ApplicationAssurance_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AarpId is set, it can
// safely use t.GetAarpId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AarpId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp) GetAarpId() uint32 {
	if t == nil || t.AarpId == nil {
		return 0
	}
	return *t.AarpId
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMasterSelectionMode retrieves the value of the leaf MasterSelectionMode from the NokiaConf_Configure_ApplicationAssurance_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MasterSelectionMode is set, it can
// safely use t.GetMasterSelectionMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MasterSelectionMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp) GetMasterSelectionMode() E_NokiaConf_Configure_ApplicationAssurance_Aarp_MasterSelectionMode {
	if t == nil || t.MasterSelectionMode == 0 {
		return NokiaConf_Configure_ApplicationAssurance_Aarp_MasterSelectionMode_minimize_switchovers
	}
	return t.MasterSelectionMode
}

// GetPeer retrieves the value of the leaf Peer from the NokiaConf_Configure_ApplicationAssurance_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Peer is set, it can
// safely use t.GetPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Peer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp) GetPeer() string {
	if t == nil || t.Peer == nil {
		return ""
	}
	return *t.Peer
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_ApplicationAssurance_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Aarp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MasterSelectionMode == 0 {
		t.MasterSelectionMode = NokiaConf_Configure_ApplicationAssurance_Aarp_MasterSelectionMode_minimize_switchovers
	}
	if t.Priority == nil {
		var v uint32 = 100
		t.Priority = &v
	}
	t.PeerEndpoint.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Aarp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AarpId == nil {
		return nil, fmt.Errorf("nil value for key AarpId")
	}

	return map[string]interface{}{
		"aarp-id": *t.AarpId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Aarp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Aarp.
func (*NokiaConf_Configure_ApplicationAssurance_Aarp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint represents the /nokia-conf/configure/application-assurance/aarp/peer-endpoint YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint struct {
	Sap      *NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint_Sap `path:"sap" module:"nokia-conf" yangPresence:"true"`
	SpokeSdp *string                                                         `path:"spoke-sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint) IsYANGGoStruct() {}

// GetOrCreateSap retrieves the value of the Sap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint) GetOrCreateSap() *NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint_Sap {
	if t.Sap != nil {
		return t.Sap
	}
	t.Sap = &NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint_Sap{}
	return t.Sap
}

// GetSap returns the value of the Sap struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint. If the receiver or the field Sap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint) GetSap() *NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint_Sap {
	if t != nil && t.Sap != nil {
		return t.Sap
	}
	return nil
}

// GetSpokeSdp retrieves the value of the leaf SpokeSdp from the NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpokeSdp is set, it can
// safely use t.GetSpokeSdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpokeSdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint) GetSpokeSdp() string {
	if t == nil || t.SpokeSdp == nil {
		return ""
	}
	return *t.SpokeSdp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Sap.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint.
func (*NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint_Sap represents the /nokia-conf/configure/application-assurance/aarp/peer-endpoint/sap YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint_Sap struct {
	EncapType E_NokiaTypesPort_EthernetEncapType `path:"encap-type" module:"nokia-conf"`
	SapId     *string                            `path:"sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint_Sap) IsYANGGoStruct() {}

// GetEncapType retrieves the value of the leaf EncapType from the NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapType is set, it can
// safely use t.GetEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint_Sap) GetEncapType() E_NokiaTypesPort_EthernetEncapType {
	if t == nil || t.EncapType == 0 {
		return 0
	}
	return t.EncapType
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint_Sap.
func (*NokiaConf_Configure_ApplicationAssurance_Aarp_PeerEndpoint_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Cflowd represents the /nokia-conf/configure/application-assurance/cflowd YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Cflowd struct {
	Field map[string]*NokiaConf_Configure_ApplicationAssurance_Cflowd_Field `path:"field" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Cflowd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Cflowd) IsYANGGoStruct() {}

// NewField creates a new entry in the Field list of the
// NokiaConf_Configure_ApplicationAssurance_Cflowd struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Cflowd) NewField(FieldName string) (*NokiaConf_Configure_ApplicationAssurance_Cflowd_Field, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Cflowd_Field)
	}

	key := FieldName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Field[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Field", key)
	}

	t.Field[key] = &NokiaConf_Configure_ApplicationAssurance_Cflowd_Field{
		FieldName: &FieldName,
	}

	return t.Field[key], nil
}

// RenameField renames an entry in the list Field within
// the NokiaConf_Configure_ApplicationAssurance_Cflowd struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Cflowd) RenameField(oldK, newK string) error {
	if _, ok := t.Field[newK]; ok {
		return fmt.Errorf("key %v already exists in Field", newK)
	}

	e, ok := t.Field[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Field", oldK)
	}
	e.FieldName = &newK

	t.Field[newK] = e
	delete(t.Field, oldK)
	return nil
}

// GetOrCreateField retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Cflowd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Cflowd) GetOrCreateField(FieldName string) *NokiaConf_Configure_ApplicationAssurance_Cflowd_Field {

	key := FieldName

	if v, ok := t.Field[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewField(FieldName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateField got unexpected error: %v", err))
	}
	return v
}

// GetField retrieves the value with the specified key from
// the Field map field of NokiaConf_Configure_ApplicationAssurance_Cflowd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Cflowd) GetField(FieldName string) *NokiaConf_Configure_ApplicationAssurance_Cflowd_Field {

	if t == nil {
		return nil
	}

	key := FieldName

	if lm, ok := t.Field[key]; ok {
		return lm
	}
	return nil
}

// DeleteField deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Cflowd. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Cflowd) DeleteField(FieldName string) {
	key := FieldName

	delete(t.Field, key)
}

// AppendField appends the supplied NokiaConf_Configure_ApplicationAssurance_Cflowd_Field struct to the
// list Field of NokiaConf_Configure_ApplicationAssurance_Cflowd. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Cflowd_Field already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Cflowd) AppendField(v *NokiaConf_Configure_ApplicationAssurance_Cflowd_Field) error {
	if v.FieldName == nil {
		return fmt.Errorf("invalid nil key received for FieldName")
	}

	key := *v.FieldName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Cflowd_Field)
	}

	if _, ok := t.Field[key]; ok {
		return fmt.Errorf("duplicate key for list Field %v", key)
	}

	t.Field[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Cflowd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Cflowd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Field {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Cflowd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Cflowd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Cflowd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Cflowd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Cflowd.
func (*NokiaConf_Configure_ApplicationAssurance_Cflowd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Cflowd_Field represents the /nokia-conf/configure/application-assurance/cflowd/field YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Cflowd_Field struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Comment            *string  `path:"comment" module:"nokia-conf"`
	FieldName          *string  `path:"field-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Cflowd_Field implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Cflowd_Field) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Cflowd_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Cflowd_Field) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Cflowd_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Cflowd_Field) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetComment retrieves the value of the leaf Comment from the NokiaConf_Configure_ApplicationAssurance_Cflowd_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Comment is set, it can
// safely use t.GetComment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Comment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Cflowd_Field) GetComment() string {
	if t == nil || t.Comment == nil {
		return ""
	}
	return *t.Comment
}

// GetFieldName retrieves the value of the leaf FieldName from the NokiaConf_Configure_ApplicationAssurance_Cflowd_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldName is set, it can
// safely use t.GetFieldName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Cflowd_Field) GetFieldName() string {
	if t == nil || t.FieldName == nil {
		return ""
	}
	return *t.FieldName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Cflowd_Field
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Cflowd_Field) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Cflowd_Field struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Cflowd_Field) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FieldName == nil {
		return nil, fmt.Errorf("nil value for key FieldName")
	}

	return map[string]interface{}{
		"field-name": *t.FieldName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Cflowd_Field) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Cflowd_Field"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Cflowd_Field) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Cflowd_Field) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Cflowd_Field.
func (*NokiaConf_Configure_ApplicationAssurance_Cflowd_Field) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_FlowAttribute represents the /nokia-conf/configure/application-assurance/flow-attribute YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_FlowAttribute struct {
	Attribute map[string]*NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute `path:"attribute" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_FlowAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_FlowAttribute) IsYANGGoStruct() {}

// NewAttribute creates a new entry in the Attribute list of the
// NokiaConf_Configure_ApplicationAssurance_FlowAttribute struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_FlowAttribute) NewAttribute(AttributeName string) (*NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Attribute == nil {
		t.Attribute = make(map[string]*NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute)
	}

	key := AttributeName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Attribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Attribute", key)
	}

	t.Attribute[key] = &NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute{
		AttributeName: &AttributeName,
	}

	return t.Attribute[key], nil
}

// RenameAttribute renames an entry in the list Attribute within
// the NokiaConf_Configure_ApplicationAssurance_FlowAttribute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_FlowAttribute) RenameAttribute(oldK, newK string) error {
	if _, ok := t.Attribute[newK]; ok {
		return fmt.Errorf("key %v already exists in Attribute", newK)
	}

	e, ok := t.Attribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Attribute", oldK)
	}
	e.AttributeName = &newK

	t.Attribute[newK] = e
	delete(t.Attribute, oldK)
	return nil
}

// GetOrCreateAttribute retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_FlowAttribute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_FlowAttribute) GetOrCreateAttribute(AttributeName string) *NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute {

	key := AttributeName

	if v, ok := t.Attribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAttribute(AttributeName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAttribute got unexpected error: %v", err))
	}
	return v
}

// GetAttribute retrieves the value with the specified key from
// the Attribute map field of NokiaConf_Configure_ApplicationAssurance_FlowAttribute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_FlowAttribute) GetAttribute(AttributeName string) *NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute {

	if t == nil {
		return nil
	}

	key := AttributeName

	if lm, ok := t.Attribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteAttribute deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_FlowAttribute. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_FlowAttribute) DeleteAttribute(AttributeName string) {
	key := AttributeName

	delete(t.Attribute, key)
}

// AppendAttribute appends the supplied NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute struct to the
// list Attribute of NokiaConf_Configure_ApplicationAssurance_FlowAttribute. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_FlowAttribute) AppendAttribute(v *NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute) error {
	if v.AttributeName == nil {
		return fmt.Errorf("invalid nil key received for AttributeName")
	}

	key := *v.AttributeName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Attribute == nil {
		t.Attribute = make(map[string]*NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute)
	}

	if _, ok := t.Attribute[key]; ok {
		return fmt.Errorf("duplicate key for list Attribute %v", key)
	}

	t.Attribute[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_FlowAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_FlowAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Attribute {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_FlowAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_FlowAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_FlowAttribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_FlowAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_FlowAttribute.
func (*NokiaConf_Configure_ApplicationAssurance_FlowAttribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute represents the /nokia-conf/configure/application-assurance/flow-attribute/attribute YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	AttributeName      *string  `path:"attribute-name" module:"nokia-conf"`
	Comment            *string  `path:"comment" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAttributeName retrieves the value of the leaf AttributeName from the NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttributeName is set, it can
// safely use t.GetAttributeName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttributeName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute) GetAttributeName() string {
	if t == nil || t.AttributeName == nil {
		return ""
	}
	return *t.AttributeName
}

// GetComment retrieves the value of the leaf Comment from the NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Comment is set, it can
// safely use t.GetComment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Comment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute) GetComment() string {
	if t == nil || t.Comment == nil {
		return ""
	}
	return *t.Comment
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttributeName == nil {
		return nil, fmt.Errorf("nil value for key AttributeName")
	}

	return map[string]interface{}{
		"attribute-name": *t.AttributeName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute.
func (*NokiaConf_Configure_ApplicationAssurance_FlowAttribute_Attribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group represents the /nokia-conf/configure/application-assurance/group YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group struct {
	AaGroupId          *uint32                                                                       `path:"aa-group-id" module:"nokia-conf"`
	ApplyGroups        []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	CertificateProfile map[string]*NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile `path:"certificate-profile" module:"nokia-conf"`
	Cflowd             *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd                        `path:"cflowd" module:"nokia-conf"`
	DnsIpCache         map[string]*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache         `path:"dns-ip-cache" module:"nokia-conf"`
	HttpEnrich         map[string]*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich         `path:"http-enrich" module:"nokia-conf"`
	HttpErrorRedirect  map[string]*NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect  `path:"http-error-redirect" module:"nokia-conf"`
	HttpNotification   map[string]*NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification   `path:"http-notification" module:"nokia-conf"`
	HttpRedirect       map[string]*NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect       `path:"http-redirect" module:"nokia-conf"`
	Partition          map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition          `path:"partition" module:"nokia-conf"`
	Policer            *NokiaConf_Configure_ApplicationAssurance_Group_Policer                       `path:"policer" module:"nokia-conf"`
	TcpOptimizer       map[string]*NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer       `path:"tcp-optimizer" module:"nokia-conf"`
	UrlFilter          map[string]*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter          `path:"url-filter" module:"nokia-conf"`
	UrlList            map[string]*NokiaConf_Configure_ApplicationAssurance_Group_UrlList            `path:"url-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group) IsYANGGoStruct() {}

// NewCertificateProfile creates a new entry in the CertificateProfile list of the
// NokiaConf_Configure_ApplicationAssurance_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) NewCertificateProfile(CertProfName string) (*NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CertificateProfile == nil {
		t.CertificateProfile = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile)
	}

	key := CertProfName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CertificateProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CertificateProfile", key)
	}

	t.CertificateProfile[key] = &NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile{
		CertProfName: &CertProfName,
	}

	return t.CertificateProfile[key], nil
}

// RenameCertificateProfile renames an entry in the list CertificateProfile within
// the NokiaConf_Configure_ApplicationAssurance_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) RenameCertificateProfile(oldK, newK string) error {
	if _, ok := t.CertificateProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in CertificateProfile", newK)
	}

	e, ok := t.CertificateProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CertificateProfile", oldK)
	}
	e.CertProfName = &newK

	t.CertificateProfile[newK] = e
	delete(t.CertificateProfile, oldK)
	return nil
}

// GetOrCreateCertificateProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetOrCreateCertificateProfile(CertProfName string) *NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile {

	key := CertProfName

	if v, ok := t.CertificateProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCertificateProfile(CertProfName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCertificateProfile got unexpected error: %v", err))
	}
	return v
}

// GetCertificateProfile retrieves the value with the specified key from
// the CertificateProfile map field of NokiaConf_Configure_ApplicationAssurance_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetCertificateProfile(CertProfName string) *NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile {

	if t == nil {
		return nil
	}

	key := CertProfName

	if lm, ok := t.CertificateProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteCertificateProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) DeleteCertificateProfile(CertProfName string) {
	key := CertProfName

	delete(t.CertificateProfile, key)
}

// AppendCertificateProfile appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile struct to the
// list CertificateProfile of NokiaConf_Configure_ApplicationAssurance_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) AppendCertificateProfile(v *NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile) error {
	if v.CertProfName == nil {
		return fmt.Errorf("invalid nil key received for CertProfName")
	}

	key := *v.CertProfName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CertificateProfile == nil {
		t.CertificateProfile = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile)
	}

	if _, ok := t.CertificateProfile[key]; ok {
		return fmt.Errorf("duplicate key for list CertificateProfile %v", key)
	}

	t.CertificateProfile[key] = v
	return nil
}

// NewDnsIpCache creates a new entry in the DnsIpCache list of the
// NokiaConf_Configure_ApplicationAssurance_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) NewDnsIpCache(DnsIpCacheName string) (*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DnsIpCache == nil {
		t.DnsIpCache = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache)
	}

	key := DnsIpCacheName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DnsIpCache[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DnsIpCache", key)
	}

	t.DnsIpCache[key] = &NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache{
		DnsIpCacheName: &DnsIpCacheName,
	}

	return t.DnsIpCache[key], nil
}

// RenameDnsIpCache renames an entry in the list DnsIpCache within
// the NokiaConf_Configure_ApplicationAssurance_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) RenameDnsIpCache(oldK, newK string) error {
	if _, ok := t.DnsIpCache[newK]; ok {
		return fmt.Errorf("key %v already exists in DnsIpCache", newK)
	}

	e, ok := t.DnsIpCache[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DnsIpCache", oldK)
	}
	e.DnsIpCacheName = &newK

	t.DnsIpCache[newK] = e
	delete(t.DnsIpCache, oldK)
	return nil
}

// GetOrCreateDnsIpCache retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetOrCreateDnsIpCache(DnsIpCacheName string) *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache {

	key := DnsIpCacheName

	if v, ok := t.DnsIpCache[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDnsIpCache(DnsIpCacheName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDnsIpCache got unexpected error: %v", err))
	}
	return v
}

// GetDnsIpCache retrieves the value with the specified key from
// the DnsIpCache map field of NokiaConf_Configure_ApplicationAssurance_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetDnsIpCache(DnsIpCacheName string) *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache {

	if t == nil {
		return nil
	}

	key := DnsIpCacheName

	if lm, ok := t.DnsIpCache[key]; ok {
		return lm
	}
	return nil
}

// DeleteDnsIpCache deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) DeleteDnsIpCache(DnsIpCacheName string) {
	key := DnsIpCacheName

	delete(t.DnsIpCache, key)
}

// AppendDnsIpCache appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache struct to the
// list DnsIpCache of NokiaConf_Configure_ApplicationAssurance_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) AppendDnsIpCache(v *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache) error {
	if v.DnsIpCacheName == nil {
		return fmt.Errorf("invalid nil key received for DnsIpCacheName")
	}

	key := *v.DnsIpCacheName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DnsIpCache == nil {
		t.DnsIpCache = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache)
	}

	if _, ok := t.DnsIpCache[key]; ok {
		return fmt.Errorf("duplicate key for list DnsIpCache %v", key)
	}

	t.DnsIpCache[key] = v
	return nil
}

// NewHttpEnrich creates a new entry in the HttpEnrich list of the
// NokiaConf_Configure_ApplicationAssurance_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) NewHttpEnrich(HttpEnrichName string) (*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HttpEnrich == nil {
		t.HttpEnrich = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich)
	}

	key := HttpEnrichName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HttpEnrich[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HttpEnrich", key)
	}

	t.HttpEnrich[key] = &NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich{
		HttpEnrichName: &HttpEnrichName,
	}

	return t.HttpEnrich[key], nil
}

// RenameHttpEnrich renames an entry in the list HttpEnrich within
// the NokiaConf_Configure_ApplicationAssurance_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) RenameHttpEnrich(oldK, newK string) error {
	if _, ok := t.HttpEnrich[newK]; ok {
		return fmt.Errorf("key %v already exists in HttpEnrich", newK)
	}

	e, ok := t.HttpEnrich[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HttpEnrich", oldK)
	}
	e.HttpEnrichName = &newK

	t.HttpEnrich[newK] = e
	delete(t.HttpEnrich, oldK)
	return nil
}

// GetOrCreateHttpEnrich retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetOrCreateHttpEnrich(HttpEnrichName string) *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich {

	key := HttpEnrichName

	if v, ok := t.HttpEnrich[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHttpEnrich(HttpEnrichName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHttpEnrich got unexpected error: %v", err))
	}
	return v
}

// GetHttpEnrich retrieves the value with the specified key from
// the HttpEnrich map field of NokiaConf_Configure_ApplicationAssurance_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetHttpEnrich(HttpEnrichName string) *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich {

	if t == nil {
		return nil
	}

	key := HttpEnrichName

	if lm, ok := t.HttpEnrich[key]; ok {
		return lm
	}
	return nil
}

// DeleteHttpEnrich deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) DeleteHttpEnrich(HttpEnrichName string) {
	key := HttpEnrichName

	delete(t.HttpEnrich, key)
}

// AppendHttpEnrich appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich struct to the
// list HttpEnrich of NokiaConf_Configure_ApplicationAssurance_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) AppendHttpEnrich(v *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) error {
	if v.HttpEnrichName == nil {
		return fmt.Errorf("invalid nil key received for HttpEnrichName")
	}

	key := *v.HttpEnrichName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HttpEnrich == nil {
		t.HttpEnrich = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich)
	}

	if _, ok := t.HttpEnrich[key]; ok {
		return fmt.Errorf("duplicate key for list HttpEnrich %v", key)
	}

	t.HttpEnrich[key] = v
	return nil
}

// NewHttpErrorRedirect creates a new entry in the HttpErrorRedirect list of the
// NokiaConf_Configure_ApplicationAssurance_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) NewHttpErrorRedirect(HttpErrorRedirectName string) (*NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HttpErrorRedirect == nil {
		t.HttpErrorRedirect = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect)
	}

	key := HttpErrorRedirectName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HttpErrorRedirect[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HttpErrorRedirect", key)
	}

	t.HttpErrorRedirect[key] = &NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect{
		HttpErrorRedirectName: &HttpErrorRedirectName,
	}

	return t.HttpErrorRedirect[key], nil
}

// RenameHttpErrorRedirect renames an entry in the list HttpErrorRedirect within
// the NokiaConf_Configure_ApplicationAssurance_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) RenameHttpErrorRedirect(oldK, newK string) error {
	if _, ok := t.HttpErrorRedirect[newK]; ok {
		return fmt.Errorf("key %v already exists in HttpErrorRedirect", newK)
	}

	e, ok := t.HttpErrorRedirect[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HttpErrorRedirect", oldK)
	}
	e.HttpErrorRedirectName = &newK

	t.HttpErrorRedirect[newK] = e
	delete(t.HttpErrorRedirect, oldK)
	return nil
}

// GetOrCreateHttpErrorRedirect retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetOrCreateHttpErrorRedirect(HttpErrorRedirectName string) *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect {

	key := HttpErrorRedirectName

	if v, ok := t.HttpErrorRedirect[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHttpErrorRedirect(HttpErrorRedirectName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHttpErrorRedirect got unexpected error: %v", err))
	}
	return v
}

// GetHttpErrorRedirect retrieves the value with the specified key from
// the HttpErrorRedirect map field of NokiaConf_Configure_ApplicationAssurance_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetHttpErrorRedirect(HttpErrorRedirectName string) *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect {

	if t == nil {
		return nil
	}

	key := HttpErrorRedirectName

	if lm, ok := t.HttpErrorRedirect[key]; ok {
		return lm
	}
	return nil
}

// DeleteHttpErrorRedirect deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) DeleteHttpErrorRedirect(HttpErrorRedirectName string) {
	key := HttpErrorRedirectName

	delete(t.HttpErrorRedirect, key)
}

// AppendHttpErrorRedirect appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect struct to the
// list HttpErrorRedirect of NokiaConf_Configure_ApplicationAssurance_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) AppendHttpErrorRedirect(v *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) error {
	if v.HttpErrorRedirectName == nil {
		return fmt.Errorf("invalid nil key received for HttpErrorRedirectName")
	}

	key := *v.HttpErrorRedirectName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HttpErrorRedirect == nil {
		t.HttpErrorRedirect = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect)
	}

	if _, ok := t.HttpErrorRedirect[key]; ok {
		return fmt.Errorf("duplicate key for list HttpErrorRedirect %v", key)
	}

	t.HttpErrorRedirect[key] = v
	return nil
}

// NewHttpNotification creates a new entry in the HttpNotification list of the
// NokiaConf_Configure_ApplicationAssurance_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) NewHttpNotification(HttpNotificationName string) (*NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HttpNotification == nil {
		t.HttpNotification = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification)
	}

	key := HttpNotificationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HttpNotification[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HttpNotification", key)
	}

	t.HttpNotification[key] = &NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification{
		HttpNotificationName: &HttpNotificationName,
	}

	return t.HttpNotification[key], nil
}

// RenameHttpNotification renames an entry in the list HttpNotification within
// the NokiaConf_Configure_ApplicationAssurance_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) RenameHttpNotification(oldK, newK string) error {
	if _, ok := t.HttpNotification[newK]; ok {
		return fmt.Errorf("key %v already exists in HttpNotification", newK)
	}

	e, ok := t.HttpNotification[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HttpNotification", oldK)
	}
	e.HttpNotificationName = &newK

	t.HttpNotification[newK] = e
	delete(t.HttpNotification, oldK)
	return nil
}

// GetOrCreateHttpNotification retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetOrCreateHttpNotification(HttpNotificationName string) *NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification {

	key := HttpNotificationName

	if v, ok := t.HttpNotification[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHttpNotification(HttpNotificationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHttpNotification got unexpected error: %v", err))
	}
	return v
}

// GetHttpNotification retrieves the value with the specified key from
// the HttpNotification map field of NokiaConf_Configure_ApplicationAssurance_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetHttpNotification(HttpNotificationName string) *NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification {

	if t == nil {
		return nil
	}

	key := HttpNotificationName

	if lm, ok := t.HttpNotification[key]; ok {
		return lm
	}
	return nil
}

// DeleteHttpNotification deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) DeleteHttpNotification(HttpNotificationName string) {
	key := HttpNotificationName

	delete(t.HttpNotification, key)
}

// AppendHttpNotification appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification struct to the
// list HttpNotification of NokiaConf_Configure_ApplicationAssurance_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) AppendHttpNotification(v *NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification) error {
	if v.HttpNotificationName == nil {
		return fmt.Errorf("invalid nil key received for HttpNotificationName")
	}

	key := *v.HttpNotificationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HttpNotification == nil {
		t.HttpNotification = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification)
	}

	if _, ok := t.HttpNotification[key]; ok {
		return fmt.Errorf("duplicate key for list HttpNotification %v", key)
	}

	t.HttpNotification[key] = v
	return nil
}

// NewHttpRedirect creates a new entry in the HttpRedirect list of the
// NokiaConf_Configure_ApplicationAssurance_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) NewHttpRedirect(HttpRedirectName string) (*NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HttpRedirect == nil {
		t.HttpRedirect = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect)
	}

	key := HttpRedirectName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HttpRedirect[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HttpRedirect", key)
	}

	t.HttpRedirect[key] = &NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect{
		HttpRedirectName: &HttpRedirectName,
	}

	return t.HttpRedirect[key], nil
}

// RenameHttpRedirect renames an entry in the list HttpRedirect within
// the NokiaConf_Configure_ApplicationAssurance_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) RenameHttpRedirect(oldK, newK string) error {
	if _, ok := t.HttpRedirect[newK]; ok {
		return fmt.Errorf("key %v already exists in HttpRedirect", newK)
	}

	e, ok := t.HttpRedirect[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HttpRedirect", oldK)
	}
	e.HttpRedirectName = &newK

	t.HttpRedirect[newK] = e
	delete(t.HttpRedirect, oldK)
	return nil
}

// GetOrCreateHttpRedirect retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetOrCreateHttpRedirect(HttpRedirectName string) *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect {

	key := HttpRedirectName

	if v, ok := t.HttpRedirect[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHttpRedirect(HttpRedirectName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHttpRedirect got unexpected error: %v", err))
	}
	return v
}

// GetHttpRedirect retrieves the value with the specified key from
// the HttpRedirect map field of NokiaConf_Configure_ApplicationAssurance_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetHttpRedirect(HttpRedirectName string) *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect {

	if t == nil {
		return nil
	}

	key := HttpRedirectName

	if lm, ok := t.HttpRedirect[key]; ok {
		return lm
	}
	return nil
}

// DeleteHttpRedirect deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) DeleteHttpRedirect(HttpRedirectName string) {
	key := HttpRedirectName

	delete(t.HttpRedirect, key)
}

// AppendHttpRedirect appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect struct to the
// list HttpRedirect of NokiaConf_Configure_ApplicationAssurance_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) AppendHttpRedirect(v *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect) error {
	if v.HttpRedirectName == nil {
		return fmt.Errorf("invalid nil key received for HttpRedirectName")
	}

	key := *v.HttpRedirectName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HttpRedirect == nil {
		t.HttpRedirect = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect)
	}

	if _, ok := t.HttpRedirect[key]; ok {
		return fmt.Errorf("duplicate key for list HttpRedirect %v", key)
	}

	t.HttpRedirect[key] = v
	return nil
}

// NewPartition creates a new entry in the Partition list of the
// NokiaConf_Configure_ApplicationAssurance_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) NewPartition(AaPartitionId uint32) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Partition == nil {
		t.Partition = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition)
	}

	key := AaPartitionId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Partition[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Partition", key)
	}

	t.Partition[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition{
		AaPartitionId: &AaPartitionId,
	}

	return t.Partition[key], nil
}

// RenamePartition renames an entry in the list Partition within
// the NokiaConf_Configure_ApplicationAssurance_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) RenamePartition(oldK, newK uint32) error {
	if _, ok := t.Partition[newK]; ok {
		return fmt.Errorf("key %v already exists in Partition", newK)
	}

	e, ok := t.Partition[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Partition", oldK)
	}
	e.AaPartitionId = &newK

	t.Partition[newK] = e
	delete(t.Partition, oldK)
	return nil
}

// GetOrCreatePartition retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetOrCreatePartition(AaPartitionId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition {

	key := AaPartitionId

	if v, ok := t.Partition[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPartition(AaPartitionId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePartition got unexpected error: %v", err))
	}
	return v
}

// GetPartition retrieves the value with the specified key from
// the Partition map field of NokiaConf_Configure_ApplicationAssurance_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetPartition(AaPartitionId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition {

	if t == nil {
		return nil
	}

	key := AaPartitionId

	if lm, ok := t.Partition[key]; ok {
		return lm
	}
	return nil
}

// DeletePartition deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) DeletePartition(AaPartitionId uint32) {
	key := AaPartitionId

	delete(t.Partition, key)
}

// AppendPartition appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition struct to the
// list Partition of NokiaConf_Configure_ApplicationAssurance_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) AppendPartition(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition) error {
	if v.AaPartitionId == nil {
		return fmt.Errorf("invalid nil key received for AaPartitionId")
	}

	key := *v.AaPartitionId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Partition == nil {
		t.Partition = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition)
	}

	if _, ok := t.Partition[key]; ok {
		return fmt.Errorf("duplicate key for list Partition %v", key)
	}

	t.Partition[key] = v
	return nil
}

// NewTcpOptimizer creates a new entry in the TcpOptimizer list of the
// NokiaConf_Configure_ApplicationAssurance_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) NewTcpOptimizer(TcpOptimizerName string) (*NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TcpOptimizer == nil {
		t.TcpOptimizer = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer)
	}

	key := TcpOptimizerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TcpOptimizer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TcpOptimizer", key)
	}

	t.TcpOptimizer[key] = &NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer{
		TcpOptimizerName: &TcpOptimizerName,
	}

	return t.TcpOptimizer[key], nil
}

// RenameTcpOptimizer renames an entry in the list TcpOptimizer within
// the NokiaConf_Configure_ApplicationAssurance_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) RenameTcpOptimizer(oldK, newK string) error {
	if _, ok := t.TcpOptimizer[newK]; ok {
		return fmt.Errorf("key %v already exists in TcpOptimizer", newK)
	}

	e, ok := t.TcpOptimizer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TcpOptimizer", oldK)
	}
	e.TcpOptimizerName = &newK

	t.TcpOptimizer[newK] = e
	delete(t.TcpOptimizer, oldK)
	return nil
}

// GetOrCreateTcpOptimizer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetOrCreateTcpOptimizer(TcpOptimizerName string) *NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer {

	key := TcpOptimizerName

	if v, ok := t.TcpOptimizer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTcpOptimizer(TcpOptimizerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTcpOptimizer got unexpected error: %v", err))
	}
	return v
}

// GetTcpOptimizer retrieves the value with the specified key from
// the TcpOptimizer map field of NokiaConf_Configure_ApplicationAssurance_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetTcpOptimizer(TcpOptimizerName string) *NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer {

	if t == nil {
		return nil
	}

	key := TcpOptimizerName

	if lm, ok := t.TcpOptimizer[key]; ok {
		return lm
	}
	return nil
}

// DeleteTcpOptimizer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) DeleteTcpOptimizer(TcpOptimizerName string) {
	key := TcpOptimizerName

	delete(t.TcpOptimizer, key)
}

// AppendTcpOptimizer appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer struct to the
// list TcpOptimizer of NokiaConf_Configure_ApplicationAssurance_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) AppendTcpOptimizer(v *NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer) error {
	if v.TcpOptimizerName == nil {
		return fmt.Errorf("invalid nil key received for TcpOptimizerName")
	}

	key := *v.TcpOptimizerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TcpOptimizer == nil {
		t.TcpOptimizer = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer)
	}

	if _, ok := t.TcpOptimizer[key]; ok {
		return fmt.Errorf("duplicate key for list TcpOptimizer %v", key)
	}

	t.TcpOptimizer[key] = v
	return nil
}

// NewUrlFilter creates a new entry in the UrlFilter list of the
// NokiaConf_Configure_ApplicationAssurance_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) NewUrlFilter(UrlFilterName string) (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UrlFilter == nil {
		t.UrlFilter = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter)
	}

	key := UrlFilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UrlFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UrlFilter", key)
	}

	t.UrlFilter[key] = &NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter{
		UrlFilterName: &UrlFilterName,
	}

	return t.UrlFilter[key], nil
}

// RenameUrlFilter renames an entry in the list UrlFilter within
// the NokiaConf_Configure_ApplicationAssurance_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) RenameUrlFilter(oldK, newK string) error {
	if _, ok := t.UrlFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in UrlFilter", newK)
	}

	e, ok := t.UrlFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UrlFilter", oldK)
	}
	e.UrlFilterName = &newK

	t.UrlFilter[newK] = e
	delete(t.UrlFilter, oldK)
	return nil
}

// GetOrCreateUrlFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetOrCreateUrlFilter(UrlFilterName string) *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter {

	key := UrlFilterName

	if v, ok := t.UrlFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUrlFilter(UrlFilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUrlFilter got unexpected error: %v", err))
	}
	return v
}

// GetUrlFilter retrieves the value with the specified key from
// the UrlFilter map field of NokiaConf_Configure_ApplicationAssurance_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetUrlFilter(UrlFilterName string) *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter {

	if t == nil {
		return nil
	}

	key := UrlFilterName

	if lm, ok := t.UrlFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteUrlFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) DeleteUrlFilter(UrlFilterName string) {
	key := UrlFilterName

	delete(t.UrlFilter, key)
}

// AppendUrlFilter appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter struct to the
// list UrlFilter of NokiaConf_Configure_ApplicationAssurance_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) AppendUrlFilter(v *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) error {
	if v.UrlFilterName == nil {
		return fmt.Errorf("invalid nil key received for UrlFilterName")
	}

	key := *v.UrlFilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UrlFilter == nil {
		t.UrlFilter = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter)
	}

	if _, ok := t.UrlFilter[key]; ok {
		return fmt.Errorf("duplicate key for list UrlFilter %v", key)
	}

	t.UrlFilter[key] = v
	return nil
}

// NewUrlList creates a new entry in the UrlList list of the
// NokiaConf_Configure_ApplicationAssurance_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) NewUrlList(UrlListName string) (*NokiaConf_Configure_ApplicationAssurance_Group_UrlList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UrlList == nil {
		t.UrlList = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_UrlList)
	}

	key := UrlListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UrlList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UrlList", key)
	}

	t.UrlList[key] = &NokiaConf_Configure_ApplicationAssurance_Group_UrlList{
		UrlListName: &UrlListName,
	}

	return t.UrlList[key], nil
}

// RenameUrlList renames an entry in the list UrlList within
// the NokiaConf_Configure_ApplicationAssurance_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) RenameUrlList(oldK, newK string) error {
	if _, ok := t.UrlList[newK]; ok {
		return fmt.Errorf("key %v already exists in UrlList", newK)
	}

	e, ok := t.UrlList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UrlList", oldK)
	}
	e.UrlListName = &newK

	t.UrlList[newK] = e
	delete(t.UrlList, oldK)
	return nil
}

// GetOrCreateUrlList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetOrCreateUrlList(UrlListName string) *NokiaConf_Configure_ApplicationAssurance_Group_UrlList {

	key := UrlListName

	if v, ok := t.UrlList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUrlList(UrlListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUrlList got unexpected error: %v", err))
	}
	return v
}

// GetUrlList retrieves the value with the specified key from
// the UrlList map field of NokiaConf_Configure_ApplicationAssurance_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetUrlList(UrlListName string) *NokiaConf_Configure_ApplicationAssurance_Group_UrlList {

	if t == nil {
		return nil
	}

	key := UrlListName

	if lm, ok := t.UrlList[key]; ok {
		return lm
	}
	return nil
}

// DeleteUrlList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) DeleteUrlList(UrlListName string) {
	key := UrlListName

	delete(t.UrlList, key)
}

// AppendUrlList appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_UrlList struct to the
// list UrlList of NokiaConf_Configure_ApplicationAssurance_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_UrlList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) AppendUrlList(v *NokiaConf_Configure_ApplicationAssurance_Group_UrlList) error {
	if v.UrlListName == nil {
		return fmt.Errorf("invalid nil key received for UrlListName")
	}

	key := *v.UrlListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UrlList == nil {
		t.UrlList = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_UrlList)
	}

	if _, ok := t.UrlList[key]; ok {
		return fmt.Errorf("duplicate key for list UrlList %v", key)
	}

	t.UrlList[key] = v
	return nil
}

// GetOrCreateCflowd retrieves the value of the Cflowd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetOrCreateCflowd() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd {
	if t.Cflowd != nil {
		return t.Cflowd
	}
	t.Cflowd = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd{}
	return t.Cflowd
}

// GetOrCreatePolicer retrieves the value of the Policer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetOrCreatePolicer() *NokiaConf_Configure_ApplicationAssurance_Group_Policer {
	if t.Policer != nil {
		return t.Policer
	}
	t.Policer = &NokiaConf_Configure_ApplicationAssurance_Group_Policer{}
	return t.Policer
}

// GetCflowd returns the value of the Cflowd struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group. If the receiver or the field Cflowd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetCflowd() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd {
	if t != nil && t.Cflowd != nil {
		return t.Cflowd
	}
	return nil
}

// GetPolicer returns the value of the Policer struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group. If the receiver or the field Policer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetPolicer() *NokiaConf_Configure_ApplicationAssurance_Group_Policer {
	if t != nil && t.Policer != nil {
		return t.Policer
	}
	return nil
}

// GetAaGroupId retrieves the value of the leaf AaGroupId from the NokiaConf_Configure_ApplicationAssurance_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AaGroupId is set, it can
// safely use t.GetAaGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AaGroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetAaGroupId() uint32 {
	if t == nil || t.AaGroupId == nil {
		return 0
	}
	return *t.AaGroupId
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Cflowd.PopulateDefaults()
	t.Policer.PopulateDefaults()
	for _, e := range t.CertificateProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.DnsIpCache {
		e.PopulateDefaults()
	}
	for _, e := range t.HttpEnrich {
		e.PopulateDefaults()
	}
	for _, e := range t.HttpErrorRedirect {
		e.PopulateDefaults()
	}
	for _, e := range t.HttpNotification {
		e.PopulateDefaults()
	}
	for _, e := range t.HttpRedirect {
		e.PopulateDefaults()
	}
	for _, e := range t.Partition {
		e.PopulateDefaults()
	}
	for _, e := range t.TcpOptimizer {
		e.PopulateDefaults()
	}
	for _, e := range t.UrlFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.UrlList {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AaGroupId == nil {
		return nil, fmt.Errorf("nil value for key AaGroupId")
	}

	return map[string]interface{}{
		"aa-group-id": *t.AaGroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group.
func (*NokiaConf_Configure_ApplicationAssurance_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile represents the /nokia-conf/configure/application-assurance/group/certificate-profile YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	CertProfName       *string                     `path:"cert-prof-name" module:"nokia-conf"`
	Description        *string                     `path:"description" module:"nokia-conf"`
	File               *string                     `path:"file" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCertProfName retrieves the value of the leaf CertProfName from the NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertProfName is set, it can
// safely use t.GetCertProfName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertProfName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile) GetCertProfName() string {
	if t == nil || t.CertProfName == nil {
		return ""
	}
	return *t.CertProfName
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFile retrieves the value of the leaf File from the NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if File is set, it can
// safely use t.GetFile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.File == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile) GetFile() string {
	if t == nil || t.File == nil {
		return ""
	}
	return *t.File
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CertProfName == nil {
		return nil, fmt.Errorf("nil value for key CertProfName")
	}

	return map[string]interface{}{
		"cert-prof-name": *t.CertProfName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile.
func (*NokiaConf_Configure_ApplicationAssurance_Group_CertificateProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd represents the /nokia-conf/configure/application-assurance/group/cflowd YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                                              `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Collector          map[NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector `path:"collector" module:"nokia-conf"`
	Comprehensive      *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive                                                                     `path:"comprehensive" module:"nokia-conf"`
	DirectExport       *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport                                                                      `path:"direct-export" module:"nokia-conf"`
	ExportOverride     *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_ExportOverride                                                                    `path:"export-override" module:"nokia-conf"`
	Obfuscation        *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Obfuscation                                                                       `path:"obfuscation" module:"nokia-conf"`
	RtpPerformance     *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance                                                                    `path:"rtp-performance" module:"nokia-conf"`
	TcpPerformance     *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance                                                                    `path:"tcp-performance" module:"nokia-conf"`
	TemplateRetransmit *uint32                                                                                                                                  `path:"template-retransmit" module:"nokia-conf"`
	Volume             *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume                                                                            `path:"volume" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) IsYANGGoStruct() {}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector_Key represents the key for list Collector of element /nokia-conf/configure/application-assurance/group/cflowd.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector_Key struct {
	IpAddress string `path:"ip-address"`
	Port      int32  `path:"port"`
}

// NewCollector creates a new entry in the Collector list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) NewCollector(IpAddress string, Port int32) (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector)
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Collector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Collector", key)
	}

	t.Collector[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector{
		IpAddress: &IpAddress,
		Port:      &Port,
	}

	return t.Collector[key], nil
}

// RenameCollector renames an entry in the list Collector within
// the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) RenameCollector(oldK, newK NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector_Key) error {
	if _, ok := t.Collector[newK]; ok {
		return fmt.Errorf("key %v already exists in Collector", newK)
	}

	e, ok := t.Collector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Collector", oldK)
	}
	e.IpAddress = &newK.IpAddress
	e.Port = &newK.Port

	t.Collector[newK] = e
	delete(t.Collector, oldK)
	return nil
}

// GetOrCreateCollector retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Cflowd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) GetOrCreateCollector(IpAddress string, Port int32) *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector {

	key := NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	if v, ok := t.Collector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCollector(IpAddress, Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCollector got unexpected error: %v", err))
	}
	return v
}

// GetCollector retrieves the value with the specified key from
// the Collector map field of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) GetCollector(IpAddress string, Port int32) *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	if lm, ok := t.Collector[key]; ok {
		return lm
	}
	return nil
}

// DeleteCollector deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Cflowd. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) DeleteCollector(IpAddress string, Port int32) {
	key := NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	delete(t.Collector, key)
}

// AppendCollector appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector struct to the
// list Collector of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) AppendCollector(v *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key for IpAddress")
	}

	if v.Port == nil {
		return fmt.Errorf("invalid nil key for Port")
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector_Key{
		IpAddress: *v.IpAddress,
		Port:      *v.Port,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector)
	}

	if _, ok := t.Collector[key]; ok {
		return fmt.Errorf("duplicate key for list Collector %v", key)
	}

	t.Collector[key] = v
	return nil
}

// GetOrCreateComprehensive retrieves the value of the Comprehensive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) GetOrCreateComprehensive() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive {
	if t.Comprehensive != nil {
		return t.Comprehensive
	}
	t.Comprehensive = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive{}
	return t.Comprehensive
}

// GetOrCreateDirectExport retrieves the value of the DirectExport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) GetOrCreateDirectExport() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport {
	if t.DirectExport != nil {
		return t.DirectExport
	}
	t.DirectExport = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport{}
	return t.DirectExport
}

// GetOrCreateExportOverride retrieves the value of the ExportOverride field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) GetOrCreateExportOverride() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_ExportOverride {
	if t.ExportOverride != nil {
		return t.ExportOverride
	}
	t.ExportOverride = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_ExportOverride{}
	return t.ExportOverride
}

// GetOrCreateObfuscation retrieves the value of the Obfuscation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) GetOrCreateObfuscation() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Obfuscation {
	if t.Obfuscation != nil {
		return t.Obfuscation
	}
	t.Obfuscation = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Obfuscation{}
	return t.Obfuscation
}

// GetOrCreateRtpPerformance retrieves the value of the RtpPerformance field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) GetOrCreateRtpPerformance() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance {
	if t.RtpPerformance != nil {
		return t.RtpPerformance
	}
	t.RtpPerformance = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance{}
	return t.RtpPerformance
}

// GetOrCreateTcpPerformance retrieves the value of the TcpPerformance field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) GetOrCreateTcpPerformance() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance {
	if t.TcpPerformance != nil {
		return t.TcpPerformance
	}
	t.TcpPerformance = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance{}
	return t.TcpPerformance
}

// GetOrCreateVolume retrieves the value of the Volume field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) GetOrCreateVolume() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume {
	if t.Volume != nil {
		return t.Volume
	}
	t.Volume = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume{}
	return t.Volume
}

// GetComprehensive returns the value of the Comprehensive struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Cflowd. If the receiver or the field Comprehensive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) GetComprehensive() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive {
	if t != nil && t.Comprehensive != nil {
		return t.Comprehensive
	}
	return nil
}

// GetDirectExport returns the value of the DirectExport struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Cflowd. If the receiver or the field DirectExport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) GetDirectExport() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport {
	if t != nil && t.DirectExport != nil {
		return t.DirectExport
	}
	return nil
}

// GetExportOverride returns the value of the ExportOverride struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Cflowd. If the receiver or the field ExportOverride is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) GetExportOverride() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_ExportOverride {
	if t != nil && t.ExportOverride != nil {
		return t.ExportOverride
	}
	return nil
}

// GetObfuscation returns the value of the Obfuscation struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Cflowd. If the receiver or the field Obfuscation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) GetObfuscation() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Obfuscation {
	if t != nil && t.Obfuscation != nil {
		return t.Obfuscation
	}
	return nil
}

// GetRtpPerformance returns the value of the RtpPerformance struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Cflowd. If the receiver or the field RtpPerformance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) GetRtpPerformance() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance {
	if t != nil && t.RtpPerformance != nil {
		return t.RtpPerformance
	}
	return nil
}

// GetTcpPerformance returns the value of the TcpPerformance struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Cflowd. If the receiver or the field TcpPerformance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) GetTcpPerformance() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance {
	if t != nil && t.TcpPerformance != nil {
		return t.TcpPerformance
	}
	return nil
}

// GetVolume returns the value of the Volume struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Cflowd. If the receiver or the field Volume is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) GetVolume() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume {
	if t != nil && t.Volume != nil {
		return t.Volume
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetTemplateRetransmit retrieves the value of the leaf TemplateRetransmit from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateRetransmit is set, it can
// safely use t.GetTemplateRetransmit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateRetransmit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) GetTemplateRetransmit() uint32 {
	if t == nil || t.TemplateRetransmit == nil {
		return 600
	}
	return *t.TemplateRetransmit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.TemplateRetransmit == nil {
		var v uint32 = 600
		t.TemplateRetransmit = &v
	}
	t.Comprehensive.PopulateDefaults()
	t.DirectExport.PopulateDefaults()
	t.ExportOverride.PopulateDefaults()
	t.Obfuscation.PopulateDefaults()
	t.RtpPerformance.PopulateDefaults()
	t.TcpPerformance.PopulateDefaults()
	t.Volume.PopulateDefaults()
	for _, e := range t.Collector {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector represents the /nokia-conf/configure/application-assurance/group/cflowd/collector YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                     `path:"description" module:"nokia-conf"`
	IpAddress          *string                     `path:"ip-address" module:"nokia-conf"`
	Port               *int32                      `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	if t.Port == nil {
		return nil, fmt.Errorf("nil value for key Port")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
		"port":       *t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Collector) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive represents the /nokia-conf/configure/application-assurance/group/cflowd/comprehensive YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive struct {
	ApplyGroups        []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	FlowRate           *uint32                                                                       `path:"flow-rate" module:"nokia-conf"`
	FlowRate_2         *uint32                                                                       `path:"flow-rate-2" module:"nokia-conf"`
	Template           *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive) IsYANGGoStruct() {}

// GetOrCreateTemplate retrieves the value of the Template field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive) GetOrCreateTemplate() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template {
	if t.Template != nil {
		return t.Template
	}
	t.Template = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template{}
	return t.Template
}

// GetTemplate returns the value of the Template struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive. If the receiver or the field Template is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive) GetTemplate() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template {
	if t != nil && t.Template != nil {
		return t.Template
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFlowRate retrieves the value of the leaf FlowRate from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowRate is set, it can
// safely use t.GetFlowRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive) GetFlowRate() uint32 {
	if t == nil || t.FlowRate == nil {
		return 0
	}
	return *t.FlowRate
}

// GetFlowRate_2 retrieves the value of the leaf FlowRate_2 from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowRate_2 is set, it can
// safely use t.GetFlowRate_2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowRate_2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive) GetFlowRate_2() uint32 {
	if t == nil || t.FlowRate_2 == nil {
		return 0
	}
	return *t.FlowRate_2
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Template.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template represents the /nokia-conf/configure/application-assurance/group/cflowd/comprehensive/template YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template struct {
	ApplyGroups        []string                                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	DynamicFields      *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields `path:"dynamic-fields" module:"nokia-conf"`
	FieldSelection     E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect                                  `path:"field-selection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template) IsYANGGoStruct() {
}

// GetOrCreateDynamicFields retrieves the value of the DynamicFields field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template) GetOrCreateDynamicFields() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields {
	if t.DynamicFields != nil {
		return t.DynamicFields
	}
	t.DynamicFields = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields{}
	return t.DynamicFields
}

// GetDynamicFields returns the value of the DynamicFields struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template. If the receiver or the field DynamicFields is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template) GetDynamicFields() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields {
	if t != nil && t.DynamicFields != nil {
		return t.DynamicFields
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFieldSelection retrieves the value of the leaf FieldSelection from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldSelection is set, it can
// safely use t.GetFieldSelection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldSelection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template) GetFieldSelection() E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect {
	if t == nil || t.FieldSelection == 0 {
		return NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	return t.FieldSelection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FieldSelection == 0 {
		t.FieldSelection = NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	t.DynamicFields.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields represents the /nokia-conf/configure/application-assurance/group/cflowd/comprehensive/template/dynamic-fields YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                  `path:"admin-state" module:"nokia-conf"`
	Field      map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field `path:"field" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) IsYANGGoStruct() {
}

// NewField creates a new entry in the Field list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) NewField(FieldName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field)
	}

	key := FieldName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Field[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Field", key)
	}

	t.Field[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field{
		FieldName: &FieldName,
	}

	return t.Field[key], nil
}

// RenameField renames an entry in the list Field within
// the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) RenameField(oldK, newK string) error {
	if _, ok := t.Field[newK]; ok {
		return fmt.Errorf("key %v already exists in Field", newK)
	}

	e, ok := t.Field[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Field", oldK)
	}
	e.FieldName = &newK

	t.Field[newK] = e
	delete(t.Field, oldK)
	return nil
}

// GetOrCreateField retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) GetOrCreateField(FieldName string) *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field {

	key := FieldName

	if v, ok := t.Field[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewField(FieldName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateField got unexpected error: %v", err))
	}
	return v
}

// GetField retrieves the value with the specified key from
// the Field map field of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) GetField(FieldName string) *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field {

	if t == nil {
		return nil
	}

	key := FieldName

	if lm, ok := t.Field[key]; ok {
		return lm
	}
	return nil
}

// DeleteField deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) DeleteField(FieldName string) {
	key := FieldName

	delete(t.Field, key)
}

// AppendField appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field struct to the
// list Field of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) AppendField(v *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field) error {
	if v.FieldName == nil {
		return fmt.Errorf("invalid nil key received for FieldName")
	}

	key := *v.FieldName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field)
	}

	if _, ok := t.Field[key]; ok {
		return fmt.Errorf("duplicate key for list Field %v", key)
	}

	t.Field[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Field {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field represents the /nokia-conf/configure/application-assurance/group/cflowd/comprehensive/template/dynamic-fields/field YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field struct {
	FieldName *string `path:"field-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field) IsYANGGoStruct() {
}

// GetFieldName retrieves the value of the leaf FieldName from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldName is set, it can
// safely use t.GetFieldName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field) GetFieldName() string {
	if t == nil || t.FieldName == nil {
		return ""
	}
	return *t.FieldName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FieldName == nil {
		return nil, fmt.Errorf("nil value for key FieldName")
	}

	return map[string]interface{}{
		"field-name": *t.FieldName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Comprehensive_Template_DynamicFields_Field) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport represents the /nokia-conf/configure/application-assurance/group/cflowd/direct-export YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport struct {
	Collector map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector `path:"collector" module:"nokia-conf"`
	VlanId    *int32                                                                                   `path:"vlan-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport) IsYANGGoStruct() {}

// NewCollector creates a new entry in the Collector list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport) NewCollector(CollectorId uint32) (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector)
	}

	key := CollectorId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Collector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Collector", key)
	}

	t.Collector[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector{
		CollectorId: &CollectorId,
	}

	return t.Collector[key], nil
}

// RenameCollector renames an entry in the list Collector within
// the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport) RenameCollector(oldK, newK uint32) error {
	if _, ok := t.Collector[newK]; ok {
		return fmt.Errorf("key %v already exists in Collector", newK)
	}

	e, ok := t.Collector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Collector", oldK)
	}
	e.CollectorId = &newK

	t.Collector[newK] = e
	delete(t.Collector, oldK)
	return nil
}

// GetOrCreateCollector retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport) GetOrCreateCollector(CollectorId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector {

	key := CollectorId

	if v, ok := t.Collector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCollector(CollectorId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCollector got unexpected error: %v", err))
	}
	return v
}

// GetCollector retrieves the value with the specified key from
// the Collector map field of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport) GetCollector(CollectorId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector {

	if t == nil {
		return nil
	}

	key := CollectorId

	if lm, ok := t.Collector[key]; ok {
		return lm
	}
	return nil
}

// DeleteCollector deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport) DeleteCollector(CollectorId uint32) {
	key := CollectorId

	delete(t.Collector, key)
}

// AppendCollector appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector struct to the
// list Collector of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport) AppendCollector(v *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) error {
	if v.CollectorId == nil {
		return fmt.Errorf("invalid nil key received for CollectorId")
	}

	key := *v.CollectorId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector)
	}

	if _, ok := t.Collector[key]; ok {
		return fmt.Errorf("duplicate key for list Collector %v", key)
	}

	t.Collector[key] = v
	return nil
}

// GetVlanId retrieves the value of the leaf VlanId from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport) GetVlanId() int32 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Collector {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector represents the /nokia-conf/configure/application-assurance/group/cflowd/direct-export/collector YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector struct {
	Address            map[NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address `path:"address" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectorId        *uint32                                                                                                                                                                            `path:"collector-id" module:"nokia-conf"`
	Description        *string                                                                                                                                                                            `path:"description" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) IsYANGGoStruct() {
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key represents the key for list Address of element /nokia-conf/configure/application-assurance/group/cflowd/direct-export/collector.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key struct {
	IpAddress string `path:"ip-address"`
	Port      int32  `path:"port"`
}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) NewAddress(IpAddress string, Port int32) (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address)
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address{
		IpAddress: &IpAddress,
		Port:      &Port,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) RenameAddress(oldK, newK NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.IpAddress = &newK.IpAddress
	e.Port = &newK.Port

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) GetOrCreateAddress(IpAddress string, Port int32) *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address {

	key := NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(IpAddress, Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) GetAddress(IpAddress string, Port int32) *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) DeleteAddress(IpAddress string, Port int32) {
	key := NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address struct to the
// list Address of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) AppendAddress(v *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key for IpAddress")
	}

	if v.Port == nil {
		return fmt.Errorf("invalid nil key for Port")
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key{
		IpAddress: *v.IpAddress,
		Port:      *v.Port,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectorId retrieves the value of the leaf CollectorId from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectorId is set, it can
// safely use t.GetCollectorId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectorId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) GetCollectorId() uint32 {
	if t == nil || t.CollectorId == nil {
		return 0
	}
	return *t.CollectorId
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CollectorId == nil {
		return nil, fmt.Errorf("nil value for key CollectorId")
	}

	return map[string]interface{}{
		"collector-id": *t.CollectorId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address represents the /nokia-conf/configure/application-assurance/group/cflowd/direct-export/collector/address YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	IpAddress          *string                     `path:"ip-address" module:"nokia-conf"`
	Port               *int32                      `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	if t.Port == nil {
		return nil, fmt.Errorf("nil value for key Port")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
		"port":       *t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_DirectExport_Collector_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_ExportOverride represents the /nokia-conf/configure/application-assurance/group/cflowd/export-override YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_ExportOverride struct {
	Mode   E_NokiaTypesApplicationAssurance_CflowdExportOverrideType `path:"mode" module:"nokia-conf"`
	Prefix *string                                                   `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_ExportOverride implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_ExportOverride) IsYANGGoStruct() {}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_ExportOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_ExportOverride) GetMode() E_NokiaTypesApplicationAssurance_CflowdExportOverrideType {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_ExportOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_ExportOverride) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_ExportOverride
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_ExportOverride) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_ExportOverride) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_ExportOverride"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_ExportOverride) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_ExportOverride) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_ExportOverride.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_ExportOverride) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Obfuscation represents the /nokia-conf/configure/application-assurance/group/cflowd/obfuscation YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Obfuscation struct {
	Aes_128EncryptionKey *string `path:"aes-128-encryption-key" module:"nokia-conf"`
	Aes_256EncryptionKey *string `path:"aes-256-encryption-key" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Obfuscation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Obfuscation) IsYANGGoStruct() {}

// GetAes_128EncryptionKey retrieves the value of the leaf Aes_128EncryptionKey from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Obfuscation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aes_128EncryptionKey is set, it can
// safely use t.GetAes_128EncryptionKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aes_128EncryptionKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Obfuscation) GetAes_128EncryptionKey() string {
	if t == nil || t.Aes_128EncryptionKey == nil {
		return ""
	}
	return *t.Aes_128EncryptionKey
}

// GetAes_256EncryptionKey retrieves the value of the leaf Aes_256EncryptionKey from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Obfuscation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aes_256EncryptionKey is set, it can
// safely use t.GetAes_256EncryptionKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aes_256EncryptionKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Obfuscation) GetAes_256EncryptionKey() string {
	if t == nil || t.Aes_256EncryptionKey == nil {
		return ""
	}
	return *t.Aes_256EncryptionKey
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Obfuscation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Obfuscation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Obfuscation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Obfuscation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Obfuscation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Obfuscation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Obfuscation.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Obfuscation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance represents the /nokia-conf/configure/application-assurance/group/cflowd/rtp-performance YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance struct {
	ApplyGroups        []string                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	AudioTemplate      *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate `path:"audio-template" module:"nokia-conf"`
	FlowRate           *uint32                                                                             `path:"flow-rate" module:"nokia-conf"`
	FlowRate_2         *uint32                                                                             `path:"flow-rate-2" module:"nokia-conf"`
	VideoTemplate      *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate `path:"video-template" module:"nokia-conf"`
	VoiceTemplate      *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate `path:"voice-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance) IsYANGGoStruct() {}

// GetOrCreateAudioTemplate retrieves the value of the AudioTemplate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance) GetOrCreateAudioTemplate() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate {
	if t.AudioTemplate != nil {
		return t.AudioTemplate
	}
	t.AudioTemplate = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate{}
	return t.AudioTemplate
}

// GetOrCreateVideoTemplate retrieves the value of the VideoTemplate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance) GetOrCreateVideoTemplate() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate {
	if t.VideoTemplate != nil {
		return t.VideoTemplate
	}
	t.VideoTemplate = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate{}
	return t.VideoTemplate
}

// GetOrCreateVoiceTemplate retrieves the value of the VoiceTemplate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance) GetOrCreateVoiceTemplate() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate {
	if t.VoiceTemplate != nil {
		return t.VoiceTemplate
	}
	t.VoiceTemplate = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate{}
	return t.VoiceTemplate
}

// GetAudioTemplate returns the value of the AudioTemplate struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance. If the receiver or the field AudioTemplate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance) GetAudioTemplate() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate {
	if t != nil && t.AudioTemplate != nil {
		return t.AudioTemplate
	}
	return nil
}

// GetVideoTemplate returns the value of the VideoTemplate struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance. If the receiver or the field VideoTemplate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance) GetVideoTemplate() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate {
	if t != nil && t.VideoTemplate != nil {
		return t.VideoTemplate
	}
	return nil
}

// GetVoiceTemplate returns the value of the VoiceTemplate struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance. If the receiver or the field VoiceTemplate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance) GetVoiceTemplate() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate {
	if t != nil && t.VoiceTemplate != nil {
		return t.VoiceTemplate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFlowRate retrieves the value of the leaf FlowRate from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowRate is set, it can
// safely use t.GetFlowRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance) GetFlowRate() uint32 {
	if t == nil || t.FlowRate == nil {
		return 0
	}
	return *t.FlowRate
}

// GetFlowRate_2 retrieves the value of the leaf FlowRate_2 from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowRate_2 is set, it can
// safely use t.GetFlowRate_2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowRate_2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance) GetFlowRate_2() uint32 {
	if t == nil || t.FlowRate_2 == nil {
		return 0
	}
	return *t.FlowRate_2
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AudioTemplate.PopulateDefaults()
	t.VideoTemplate.PopulateDefaults()
	t.VoiceTemplate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate represents the /nokia-conf/configure/application-assurance/group/cflowd/rtp-performance/audio-template YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate struct {
	ApplyGroups        []string                                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	DynamicFields      *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields `path:"dynamic-fields" module:"nokia-conf"`
	FieldSelection     E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect                                        `path:"field-selection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate) IsYANGGoStruct() {
}

// GetOrCreateDynamicFields retrieves the value of the DynamicFields field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate) GetOrCreateDynamicFields() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields {
	if t.DynamicFields != nil {
		return t.DynamicFields
	}
	t.DynamicFields = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields{}
	return t.DynamicFields
}

// GetDynamicFields returns the value of the DynamicFields struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate. If the receiver or the field DynamicFields is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate) GetDynamicFields() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields {
	if t != nil && t.DynamicFields != nil {
		return t.DynamicFields
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFieldSelection retrieves the value of the leaf FieldSelection from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldSelection is set, it can
// safely use t.GetFieldSelection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldSelection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate) GetFieldSelection() E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect {
	if t == nil || t.FieldSelection == 0 {
		return NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	return t.FieldSelection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FieldSelection == 0 {
		t.FieldSelection = NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	t.DynamicFields.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields represents the /nokia-conf/configure/application-assurance/group/cflowd/rtp-performance/audio-template/dynamic-fields YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                        `path:"admin-state" module:"nokia-conf"`
	Field      map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field `path:"field" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) IsYANGGoStruct() {
}

// NewField creates a new entry in the Field list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) NewField(FieldName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field)
	}

	key := FieldName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Field[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Field", key)
	}

	t.Field[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field{
		FieldName: &FieldName,
	}

	return t.Field[key], nil
}

// RenameField renames an entry in the list Field within
// the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) RenameField(oldK, newK string) error {
	if _, ok := t.Field[newK]; ok {
		return fmt.Errorf("key %v already exists in Field", newK)
	}

	e, ok := t.Field[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Field", oldK)
	}
	e.FieldName = &newK

	t.Field[newK] = e
	delete(t.Field, oldK)
	return nil
}

// GetOrCreateField retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) GetOrCreateField(FieldName string) *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field {

	key := FieldName

	if v, ok := t.Field[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewField(FieldName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateField got unexpected error: %v", err))
	}
	return v
}

// GetField retrieves the value with the specified key from
// the Field map field of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) GetField(FieldName string) *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field {

	if t == nil {
		return nil
	}

	key := FieldName

	if lm, ok := t.Field[key]; ok {
		return lm
	}
	return nil
}

// DeleteField deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) DeleteField(FieldName string) {
	key := FieldName

	delete(t.Field, key)
}

// AppendField appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field struct to the
// list Field of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) AppendField(v *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field) error {
	if v.FieldName == nil {
		return fmt.Errorf("invalid nil key received for FieldName")
	}

	key := *v.FieldName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field)
	}

	if _, ok := t.Field[key]; ok {
		return fmt.Errorf("duplicate key for list Field %v", key)
	}

	t.Field[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Field {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field represents the /nokia-conf/configure/application-assurance/group/cflowd/rtp-performance/audio-template/dynamic-fields/field YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field struct {
	FieldName *string `path:"field-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field) IsYANGGoStruct() {
}

// GetFieldName retrieves the value of the leaf FieldName from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldName is set, it can
// safely use t.GetFieldName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field) GetFieldName() string {
	if t == nil || t.FieldName == nil {
		return ""
	}
	return *t.FieldName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FieldName == nil {
		return nil, fmt.Errorf("nil value for key FieldName")
	}

	return map[string]interface{}{
		"field-name": *t.FieldName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_AudioTemplate_DynamicFields_Field) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate represents the /nokia-conf/configure/application-assurance/group/cflowd/rtp-performance/video-template YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate struct {
	ApplyGroups        []string                                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	DynamicFields      *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields `path:"dynamic-fields" module:"nokia-conf"`
	FieldSelection     E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect                                        `path:"field-selection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate) IsYANGGoStruct() {
}

// GetOrCreateDynamicFields retrieves the value of the DynamicFields field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate) GetOrCreateDynamicFields() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields {
	if t.DynamicFields != nil {
		return t.DynamicFields
	}
	t.DynamicFields = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields{}
	return t.DynamicFields
}

// GetDynamicFields returns the value of the DynamicFields struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate. If the receiver or the field DynamicFields is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate) GetDynamicFields() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields {
	if t != nil && t.DynamicFields != nil {
		return t.DynamicFields
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFieldSelection retrieves the value of the leaf FieldSelection from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldSelection is set, it can
// safely use t.GetFieldSelection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldSelection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate) GetFieldSelection() E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect {
	if t == nil || t.FieldSelection == 0 {
		return NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	return t.FieldSelection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FieldSelection == 0 {
		t.FieldSelection = NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	t.DynamicFields.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields represents the /nokia-conf/configure/application-assurance/group/cflowd/rtp-performance/video-template/dynamic-fields YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                        `path:"admin-state" module:"nokia-conf"`
	Field      map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field `path:"field" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) IsYANGGoStruct() {
}

// NewField creates a new entry in the Field list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) NewField(FieldName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field)
	}

	key := FieldName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Field[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Field", key)
	}

	t.Field[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field{
		FieldName: &FieldName,
	}

	return t.Field[key], nil
}

// RenameField renames an entry in the list Field within
// the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) RenameField(oldK, newK string) error {
	if _, ok := t.Field[newK]; ok {
		return fmt.Errorf("key %v already exists in Field", newK)
	}

	e, ok := t.Field[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Field", oldK)
	}
	e.FieldName = &newK

	t.Field[newK] = e
	delete(t.Field, oldK)
	return nil
}

// GetOrCreateField retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) GetOrCreateField(FieldName string) *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field {

	key := FieldName

	if v, ok := t.Field[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewField(FieldName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateField got unexpected error: %v", err))
	}
	return v
}

// GetField retrieves the value with the specified key from
// the Field map field of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) GetField(FieldName string) *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field {

	if t == nil {
		return nil
	}

	key := FieldName

	if lm, ok := t.Field[key]; ok {
		return lm
	}
	return nil
}

// DeleteField deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) DeleteField(FieldName string) {
	key := FieldName

	delete(t.Field, key)
}

// AppendField appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field struct to the
// list Field of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) AppendField(v *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field) error {
	if v.FieldName == nil {
		return fmt.Errorf("invalid nil key received for FieldName")
	}

	key := *v.FieldName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field)
	}

	if _, ok := t.Field[key]; ok {
		return fmt.Errorf("duplicate key for list Field %v", key)
	}

	t.Field[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Field {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field represents the /nokia-conf/configure/application-assurance/group/cflowd/rtp-performance/video-template/dynamic-fields/field YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field struct {
	FieldName *string `path:"field-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field) IsYANGGoStruct() {
}

// GetFieldName retrieves the value of the leaf FieldName from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldName is set, it can
// safely use t.GetFieldName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field) GetFieldName() string {
	if t == nil || t.FieldName == nil {
		return ""
	}
	return *t.FieldName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FieldName == nil {
		return nil, fmt.Errorf("nil value for key FieldName")
	}

	return map[string]interface{}{
		"field-name": *t.FieldName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VideoTemplate_DynamicFields_Field) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate represents the /nokia-conf/configure/application-assurance/group/cflowd/rtp-performance/voice-template YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate struct {
	ApplyGroups        []string                                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	DynamicFields      *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields `path:"dynamic-fields" module:"nokia-conf"`
	FieldSelection     E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect                                        `path:"field-selection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate) IsYANGGoStruct() {
}

// GetOrCreateDynamicFields retrieves the value of the DynamicFields field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate) GetOrCreateDynamicFields() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields {
	if t.DynamicFields != nil {
		return t.DynamicFields
	}
	t.DynamicFields = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields{}
	return t.DynamicFields
}

// GetDynamicFields returns the value of the DynamicFields struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate. If the receiver or the field DynamicFields is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate) GetDynamicFields() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields {
	if t != nil && t.DynamicFields != nil {
		return t.DynamicFields
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFieldSelection retrieves the value of the leaf FieldSelection from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldSelection is set, it can
// safely use t.GetFieldSelection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldSelection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate) GetFieldSelection() E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect {
	if t == nil || t.FieldSelection == 0 {
		return NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	return t.FieldSelection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FieldSelection == 0 {
		t.FieldSelection = NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	t.DynamicFields.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields represents the /nokia-conf/configure/application-assurance/group/cflowd/rtp-performance/voice-template/dynamic-fields YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                        `path:"admin-state" module:"nokia-conf"`
	Field      map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field `path:"field" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) IsYANGGoStruct() {
}

// NewField creates a new entry in the Field list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) NewField(FieldName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field)
	}

	key := FieldName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Field[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Field", key)
	}

	t.Field[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field{
		FieldName: &FieldName,
	}

	return t.Field[key], nil
}

// RenameField renames an entry in the list Field within
// the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) RenameField(oldK, newK string) error {
	if _, ok := t.Field[newK]; ok {
		return fmt.Errorf("key %v already exists in Field", newK)
	}

	e, ok := t.Field[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Field", oldK)
	}
	e.FieldName = &newK

	t.Field[newK] = e
	delete(t.Field, oldK)
	return nil
}

// GetOrCreateField retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) GetOrCreateField(FieldName string) *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field {

	key := FieldName

	if v, ok := t.Field[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewField(FieldName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateField got unexpected error: %v", err))
	}
	return v
}

// GetField retrieves the value with the specified key from
// the Field map field of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) GetField(FieldName string) *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field {

	if t == nil {
		return nil
	}

	key := FieldName

	if lm, ok := t.Field[key]; ok {
		return lm
	}
	return nil
}

// DeleteField deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) DeleteField(FieldName string) {
	key := FieldName

	delete(t.Field, key)
}

// AppendField appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field struct to the
// list Field of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) AppendField(v *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field) error {
	if v.FieldName == nil {
		return fmt.Errorf("invalid nil key received for FieldName")
	}

	key := *v.FieldName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field)
	}

	if _, ok := t.Field[key]; ok {
		return fmt.Errorf("duplicate key for list Field %v", key)
	}

	t.Field[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Field {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field represents the /nokia-conf/configure/application-assurance/group/cflowd/rtp-performance/voice-template/dynamic-fields/field YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field struct {
	FieldName *string `path:"field-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field) IsYANGGoStruct() {
}

// GetFieldName retrieves the value of the leaf FieldName from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldName is set, it can
// safely use t.GetFieldName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field) GetFieldName() string {
	if t == nil || t.FieldName == nil {
		return ""
	}
	return *t.FieldName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FieldName == nil {
		return nil, fmt.Errorf("nil value for key FieldName")
	}

	return map[string]interface{}{
		"field-name": *t.FieldName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_RtpPerformance_VoiceTemplate_DynamicFields_Field) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance represents the /nokia-conf/configure/application-assurance/group/cflowd/tcp-performance YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance struct {
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	FlowRate           *uint32                                                                        `path:"flow-rate" module:"nokia-conf"`
	FlowRate_2         *uint32                                                                        `path:"flow-rate-2" module:"nokia-conf"`
	Template           *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance) IsYANGGoStruct() {}

// GetOrCreateTemplate retrieves the value of the Template field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance) GetOrCreateTemplate() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template {
	if t.Template != nil {
		return t.Template
	}
	t.Template = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template{}
	return t.Template
}

// GetTemplate returns the value of the Template struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance. If the receiver or the field Template is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance) GetTemplate() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template {
	if t != nil && t.Template != nil {
		return t.Template
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFlowRate retrieves the value of the leaf FlowRate from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowRate is set, it can
// safely use t.GetFlowRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance) GetFlowRate() uint32 {
	if t == nil || t.FlowRate == nil {
		return 0
	}
	return *t.FlowRate
}

// GetFlowRate_2 retrieves the value of the leaf FlowRate_2 from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowRate_2 is set, it can
// safely use t.GetFlowRate_2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowRate_2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance) GetFlowRate_2() uint32 {
	if t == nil || t.FlowRate_2 == nil {
		return 0
	}
	return *t.FlowRate_2
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Template.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template represents the /nokia-conf/configure/application-assurance/group/cflowd/tcp-performance/template YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template struct {
	ApplyGroups        []string                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	DynamicFields      *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields `path:"dynamic-fields" module:"nokia-conf"`
	FieldSelection     E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect                                   `path:"field-selection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template) IsYANGGoStruct() {
}

// GetOrCreateDynamicFields retrieves the value of the DynamicFields field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template) GetOrCreateDynamicFields() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields {
	if t.DynamicFields != nil {
		return t.DynamicFields
	}
	t.DynamicFields = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields{}
	return t.DynamicFields
}

// GetDynamicFields returns the value of the DynamicFields struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template. If the receiver or the field DynamicFields is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template) GetDynamicFields() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields {
	if t != nil && t.DynamicFields != nil {
		return t.DynamicFields
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFieldSelection retrieves the value of the leaf FieldSelection from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldSelection is set, it can
// safely use t.GetFieldSelection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldSelection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template) GetFieldSelection() E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect {
	if t == nil || t.FieldSelection == 0 {
		return NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	return t.FieldSelection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FieldSelection == 0 {
		t.FieldSelection = NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	t.DynamicFields.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields represents the /nokia-conf/configure/application-assurance/group/cflowd/tcp-performance/template/dynamic-fields YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                   `path:"admin-state" module:"nokia-conf"`
	Field      map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field `path:"field" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) IsYANGGoStruct() {
}

// NewField creates a new entry in the Field list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) NewField(FieldName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field)
	}

	key := FieldName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Field[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Field", key)
	}

	t.Field[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field{
		FieldName: &FieldName,
	}

	return t.Field[key], nil
}

// RenameField renames an entry in the list Field within
// the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) RenameField(oldK, newK string) error {
	if _, ok := t.Field[newK]; ok {
		return fmt.Errorf("key %v already exists in Field", newK)
	}

	e, ok := t.Field[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Field", oldK)
	}
	e.FieldName = &newK

	t.Field[newK] = e
	delete(t.Field, oldK)
	return nil
}

// GetOrCreateField retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) GetOrCreateField(FieldName string) *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field {

	key := FieldName

	if v, ok := t.Field[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewField(FieldName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateField got unexpected error: %v", err))
	}
	return v
}

// GetField retrieves the value with the specified key from
// the Field map field of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) GetField(FieldName string) *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field {

	if t == nil {
		return nil
	}

	key := FieldName

	if lm, ok := t.Field[key]; ok {
		return lm
	}
	return nil
}

// DeleteField deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) DeleteField(FieldName string) {
	key := FieldName

	delete(t.Field, key)
}

// AppendField appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field struct to the
// list Field of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) AppendField(v *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field) error {
	if v.FieldName == nil {
		return fmt.Errorf("invalid nil key received for FieldName")
	}

	key := *v.FieldName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field)
	}

	if _, ok := t.Field[key]; ok {
		return fmt.Errorf("duplicate key for list Field %v", key)
	}

	t.Field[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Field {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field represents the /nokia-conf/configure/application-assurance/group/cflowd/tcp-performance/template/dynamic-fields/field YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field struct {
	FieldName *string `path:"field-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field) IsYANGGoStruct() {
}

// GetFieldName retrieves the value of the leaf FieldName from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldName is set, it can
// safely use t.GetFieldName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field) GetFieldName() string {
	if t == nil || t.FieldName == nil {
		return ""
	}
	return *t.FieldName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FieldName == nil {
		return nil, fmt.Errorf("nil value for key FieldName")
	}

	return map[string]interface{}{
		"field-name": *t.FieldName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_TcpPerformance_Template_DynamicFields_Field) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume represents the /nokia-conf/configure/application-assurance/group/cflowd/volume YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume struct {
	Rate     *uint32                                                                `path:"rate" module:"nokia-conf"`
	Template *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume) IsYANGGoStruct() {}

// GetOrCreateTemplate retrieves the value of the Template field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume) GetOrCreateTemplate() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template {
	if t.Template != nil {
		return t.Template
	}
	t.Template = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template{}
	return t.Template
}

// GetTemplate returns the value of the Template struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume. If the receiver or the field Template is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume) GetTemplate() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template {
	if t != nil && t.Template != nil {
		return t.Template
	}
	return nil
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume) GetRate() uint32 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Template.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template represents the /nokia-conf/configure/application-assurance/group/cflowd/volume/template YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template struct {
	ApplyGroups        []string                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	DynamicFields      *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields `path:"dynamic-fields" module:"nokia-conf"`
	FieldSelection     E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect                           `path:"field-selection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template) IsYANGGoStruct() {}

// GetOrCreateDynamicFields retrieves the value of the DynamicFields field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template) GetOrCreateDynamicFields() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields {
	if t.DynamicFields != nil {
		return t.DynamicFields
	}
	t.DynamicFields = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields{}
	return t.DynamicFields
}

// GetDynamicFields returns the value of the DynamicFields struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template. If the receiver or the field DynamicFields is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template) GetDynamicFields() *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields {
	if t != nil && t.DynamicFields != nil {
		return t.DynamicFields
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFieldSelection retrieves the value of the leaf FieldSelection from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldSelection is set, it can
// safely use t.GetFieldSelection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldSelection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template) GetFieldSelection() E_NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect {
	if t == nil || t.FieldSelection == 0 {
		return NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	return t.FieldSelection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FieldSelection == 0 {
		t.FieldSelection = NokiaTypesApplicationAssurance_AaGrpCflowdTemplateSelect_legacy
	}
	t.DynamicFields.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields represents the /nokia-conf/configure/application-assurance/group/cflowd/volume/template/dynamic-fields YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields struct {
	AdminState E_NokiaTypesSros_AdminState                                                                           `path:"admin-state" module:"nokia-conf"`
	Field      map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field `path:"field" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) IsYANGGoStruct() {
}

// NewField creates a new entry in the Field list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) NewField(FieldName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field)
	}

	key := FieldName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Field[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Field", key)
	}

	t.Field[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field{
		FieldName: &FieldName,
	}

	return t.Field[key], nil
}

// RenameField renames an entry in the list Field within
// the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) RenameField(oldK, newK string) error {
	if _, ok := t.Field[newK]; ok {
		return fmt.Errorf("key %v already exists in Field", newK)
	}

	e, ok := t.Field[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Field", oldK)
	}
	e.FieldName = &newK

	t.Field[newK] = e
	delete(t.Field, oldK)
	return nil
}

// GetOrCreateField retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) GetOrCreateField(FieldName string) *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field {

	key := FieldName

	if v, ok := t.Field[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewField(FieldName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateField got unexpected error: %v", err))
	}
	return v
}

// GetField retrieves the value with the specified key from
// the Field map field of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) GetField(FieldName string) *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field {

	if t == nil {
		return nil
	}

	key := FieldName

	if lm, ok := t.Field[key]; ok {
		return lm
	}
	return nil
}

// DeleteField deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) DeleteField(FieldName string) {
	key := FieldName

	delete(t.Field, key)
}

// AppendField appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field struct to the
// list Field of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) AppendField(v *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field) error {
	if v.FieldName == nil {
		return fmt.Errorf("invalid nil key received for FieldName")
	}

	key := *v.FieldName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field)
	}

	if _, ok := t.Field[key]; ok {
		return fmt.Errorf("duplicate key for list Field %v", key)
	}

	t.Field[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Field {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field represents the /nokia-conf/configure/application-assurance/group/cflowd/volume/template/dynamic-fields/field YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field struct {
	FieldName *string `path:"field-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field) IsYANGGoStruct() {
}

// GetFieldName retrieves the value of the leaf FieldName from the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldName is set, it can
// safely use t.GetFieldName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field) GetFieldName() string {
	if t == nil || t.FieldName == nil {
		return ""
	}
	return *t.FieldName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FieldName == nil {
		return nil, fmt.Errorf("nil value for key FieldName")
	}

	return map[string]interface{}{
		"field-name": *t.FieldName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Cflowd_Volume_Template_DynamicFields_Field) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache represents the /nokia-conf/configure/application-assurance/group/dns-ip-cache YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache struct {
	AdminState         E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                             `path:"description" module:"nokia-conf"`
	DnsIpCacheName     *string                                                             `path:"dns-ip-cache-name" module:"nokia-conf"`
	DnsMatch           *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch `path:"dns-match" module:"nokia-conf"`
	IpCache            *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache  `path:"ip-cache" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache) IsYANGGoStruct() {}

// GetOrCreateDnsMatch retrieves the value of the DnsMatch field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache) GetOrCreateDnsMatch() *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch {
	if t.DnsMatch != nil {
		return t.DnsMatch
	}
	t.DnsMatch = &NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch{}
	return t.DnsMatch
}

// GetOrCreateIpCache retrieves the value of the IpCache field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache) GetOrCreateIpCache() *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache {
	if t.IpCache != nil {
		return t.IpCache
	}
	t.IpCache = &NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache{}
	return t.IpCache
}

// GetDnsMatch returns the value of the DnsMatch struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache. If the receiver or the field DnsMatch is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache) GetDnsMatch() *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch {
	if t != nil && t.DnsMatch != nil {
		return t.DnsMatch
	}
	return nil
}

// GetIpCache returns the value of the IpCache struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache. If the receiver or the field IpCache is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache) GetIpCache() *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache {
	if t != nil && t.IpCache != nil {
		return t.IpCache
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDnsIpCacheName retrieves the value of the leaf DnsIpCacheName from the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnsIpCacheName is set, it can
// safely use t.GetDnsIpCacheName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnsIpCacheName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache) GetDnsIpCacheName() string {
	if t == nil || t.DnsIpCacheName == nil {
		return ""
	}
	return *t.DnsIpCacheName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.DnsMatch.PopulateDefaults()
	t.IpCache.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DnsIpCacheName == nil {
		return nil, fmt.Errorf("nil value for key DnsIpCacheName")
	}

	return map[string]interface{}{
		"dns-ip-cache-name": *t.DnsIpCacheName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache.
func (*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch represents the /nokia-conf/configure/application-assurance/group/dns-ip-cache/dns-match YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch struct {
	Domain               map[string]*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain               `path:"domain" module:"nokia-conf"`
	TrustedServerAddress map[string]*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress `path:"trusted-server-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch) IsYANGGoStruct() {}

// NewDomain creates a new entry in the Domain list of the
// NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch) NewDomain(DomainName string) (*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain)
	}

	key := DomainName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Domain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Domain", key)
	}

	t.Domain[key] = &NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain{
		DomainName: &DomainName,
	}

	return t.Domain[key], nil
}

// RenameDomain renames an entry in the list Domain within
// the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch) RenameDomain(oldK, newK string) error {
	if _, ok := t.Domain[newK]; ok {
		return fmt.Errorf("key %v already exists in Domain", newK)
	}

	e, ok := t.Domain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Domain", oldK)
	}
	e.DomainName = &newK

	t.Domain[newK] = e
	delete(t.Domain, oldK)
	return nil
}

// GetOrCreateDomain retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch) GetOrCreateDomain(DomainName string) *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain {

	key := DomainName

	if v, ok := t.Domain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDomain(DomainName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDomain got unexpected error: %v", err))
	}
	return v
}

// GetDomain retrieves the value with the specified key from
// the Domain map field of NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch) GetDomain(DomainName string) *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain {

	if t == nil {
		return nil
	}

	key := DomainName

	if lm, ok := t.Domain[key]; ok {
		return lm
	}
	return nil
}

// DeleteDomain deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch) DeleteDomain(DomainName string) {
	key := DomainName

	delete(t.Domain, key)
}

// AppendDomain appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain struct to the
// list Domain of NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch) AppendDomain(v *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) error {
	if v.DomainName == nil {
		return fmt.Errorf("invalid nil key received for DomainName")
	}

	key := *v.DomainName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain)
	}

	if _, ok := t.Domain[key]; ok {
		return fmt.Errorf("duplicate key for list Domain %v", key)
	}

	t.Domain[key] = v
	return nil
}

// NewTrustedServerAddress creates a new entry in the TrustedServerAddress list of the
// NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch) NewTrustedServerAddress(DnsServerAddress string) (*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrustedServerAddress == nil {
		t.TrustedServerAddress = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress)
	}

	key := DnsServerAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrustedServerAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrustedServerAddress", key)
	}

	t.TrustedServerAddress[key] = &NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress{
		DnsServerAddress: &DnsServerAddress,
	}

	return t.TrustedServerAddress[key], nil
}

// RenameTrustedServerAddress renames an entry in the list TrustedServerAddress within
// the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch) RenameTrustedServerAddress(oldK, newK string) error {
	if _, ok := t.TrustedServerAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in TrustedServerAddress", newK)
	}

	e, ok := t.TrustedServerAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TrustedServerAddress", oldK)
	}
	e.DnsServerAddress = &newK

	t.TrustedServerAddress[newK] = e
	delete(t.TrustedServerAddress, oldK)
	return nil
}

// GetOrCreateTrustedServerAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch) GetOrCreateTrustedServerAddress(DnsServerAddress string) *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress {

	key := DnsServerAddress

	if v, ok := t.TrustedServerAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTrustedServerAddress(DnsServerAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTrustedServerAddress got unexpected error: %v", err))
	}
	return v
}

// GetTrustedServerAddress retrieves the value with the specified key from
// the TrustedServerAddress map field of NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch) GetTrustedServerAddress(DnsServerAddress string) *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress {

	if t == nil {
		return nil
	}

	key := DnsServerAddress

	if lm, ok := t.TrustedServerAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteTrustedServerAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch) DeleteTrustedServerAddress(DnsServerAddress string) {
	key := DnsServerAddress

	delete(t.TrustedServerAddress, key)
}

// AppendTrustedServerAddress appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress struct to the
// list TrustedServerAddress of NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch) AppendTrustedServerAddress(v *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) error {
	if v.DnsServerAddress == nil {
		return fmt.Errorf("invalid nil key received for DnsServerAddress")
	}

	key := *v.DnsServerAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrustedServerAddress == nil {
		t.TrustedServerAddress = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress)
	}

	if _, ok := t.TrustedServerAddress[key]; ok {
		return fmt.Errorf("duplicate key for list TrustedServerAddress %v", key)
	}

	t.TrustedServerAddress[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Domain {
		e.PopulateDefaults()
	}
	for _, e := range t.TrustedServerAddress {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch.
func (*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain represents the /nokia-conf/configure/application-assurance/group/dns-ip-cache/dns-match/domain YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DomainName         *string  `path:"domain-name" module:"nokia-conf"`
	Expression         *string  `path:"expression" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDomainName retrieves the value of the leaf DomainName from the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainName is set, it can
// safely use t.GetDomainName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) GetDomainName() string {
	if t == nil || t.DomainName == nil {
		return ""
	}
	return *t.DomainName
}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DomainName == nil {
		return nil, fmt.Errorf("nil value for key DomainName")
	}

	return map[string]interface{}{
		"domain-name": *t.DomainName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain.
func (*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_Domain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress represents the /nokia-conf/configure/application-assurance/group/dns-ip-cache/dns-match/trusted-server-address YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DnsServerAddress   *string  `path:"dns-server-address" module:"nokia-conf"`
	ServerName         *string  `path:"server-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDnsServerAddress retrieves the value of the leaf DnsServerAddress from the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnsServerAddress is set, it can
// safely use t.GetDnsServerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnsServerAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) GetDnsServerAddress() string {
	if t == nil || t.DnsServerAddress == nil {
		return ""
	}
	return *t.DnsServerAddress
}

// GetServerName retrieves the value of the leaf ServerName from the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerName is set, it can
// safely use t.GetServerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) GetServerName() string {
	if t == nil || t.ServerName == nil {
		return ""
	}
	return *t.ServerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DnsServerAddress == nil {
		return nil, fmt.Errorf("nil value for key DnsServerAddress")
	}

	return map[string]interface{}{
		"dns-server-address": *t.DnsServerAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress.
func (*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_DnsMatch_TrustedServerAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache represents the /nokia-conf/configure/application-assurance/group/dns-ip-cache/ip-cache YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache struct {
	HighWatermark *uint32                                                                                     `path:"high-watermark" module:"nokia-conf"`
	LowWatermark  *uint32                                                                                     `path:"low-watermark" module:"nokia-conf"`
	Size          *uint32                                                                                     `path:"size" module:"nokia-conf"`
	StaticAddress map[string]*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress `path:"static-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache) IsYANGGoStruct() {}

// NewStaticAddress creates a new entry in the StaticAddress list of the
// NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache) NewStaticAddress(StaticIpAddress string) (*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticAddress == nil {
		t.StaticAddress = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress)
	}

	key := StaticIpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticAddress", key)
	}

	t.StaticAddress[key] = &NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress{
		StaticIpAddress: &StaticIpAddress,
	}

	return t.StaticAddress[key], nil
}

// RenameStaticAddress renames an entry in the list StaticAddress within
// the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache) RenameStaticAddress(oldK, newK string) error {
	if _, ok := t.StaticAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticAddress", newK)
	}

	e, ok := t.StaticAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticAddress", oldK)
	}
	e.StaticIpAddress = &newK

	t.StaticAddress[newK] = e
	delete(t.StaticAddress, oldK)
	return nil
}

// GetOrCreateStaticAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache) GetOrCreateStaticAddress(StaticIpAddress string) *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress {

	key := StaticIpAddress

	if v, ok := t.StaticAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticAddress(StaticIpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticAddress got unexpected error: %v", err))
	}
	return v
}

// GetStaticAddress retrieves the value with the specified key from
// the StaticAddress map field of NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache) GetStaticAddress(StaticIpAddress string) *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress {

	if t == nil {
		return nil
	}

	key := StaticIpAddress

	if lm, ok := t.StaticAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache) DeleteStaticAddress(StaticIpAddress string) {
	key := StaticIpAddress

	delete(t.StaticAddress, key)
}

// AppendStaticAddress appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress struct to the
// list StaticAddress of NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache) AppendStaticAddress(v *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress) error {
	if v.StaticIpAddress == nil {
		return fmt.Errorf("invalid nil key received for StaticIpAddress")
	}

	key := *v.StaticIpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticAddress == nil {
		t.StaticAddress = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress)
	}

	if _, ok := t.StaticAddress[key]; ok {
		return fmt.Errorf("duplicate key for list StaticAddress %v", key)
	}

	t.StaticAddress[key] = v
	return nil
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache) GetHighWatermark() uint32 {
	if t == nil || t.HighWatermark == nil {
		return 90
	}
	return *t.HighWatermark
}

// GetLowWatermark retrieves the value of the leaf LowWatermark from the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWatermark is set, it can
// safely use t.GetLowWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache) GetLowWatermark() uint32 {
	if t == nil || t.LowWatermark == nil {
		return 80
	}
	return *t.LowWatermark
}

// GetSize retrieves the value of the leaf Size from the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache) GetSize() uint32 {
	if t == nil || t.Size == nil {
		return 10
	}
	return *t.Size
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWatermark == nil {
		var v uint32 = 90
		t.HighWatermark = &v
	}
	if t.LowWatermark == nil {
		var v uint32 = 80
		t.LowWatermark = &v
	}
	if t.Size == nil {
		var v uint32 = 10
		t.Size = &v
	}
	for _, e := range t.StaticAddress {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache.
func (*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress represents the /nokia-conf/configure/application-assurance/group/dns-ip-cache/ip-cache/static-address YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress struct {
	StaticIpAddress *string `path:"static-ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress) IsYANGGoStruct() {
}

// GetStaticIpAddress retrieves the value of the leaf StaticIpAddress from the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticIpAddress is set, it can
// safely use t.GetStaticIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress) GetStaticIpAddress() string {
	if t == nil || t.StaticIpAddress == nil {
		return ""
	}
	return *t.StaticIpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.StaticIpAddress == nil {
		return nil, fmt.Errorf("nil value for key StaticIpAddress")
	}

	return map[string]interface{}{
		"static-ip-address": *t.StaticIpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress.
func (*NokiaConf_Configure_ApplicationAssurance_Group_DnsIpCache_IpCache_StaticAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich represents the /nokia-conf/configure/application-assurance/group/http-enrich YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich struct {
	AdminState         E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                      `path:"description" module:"nokia-conf"`
	Field              map[string]*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field  `path:"field" module:"nokia-conf"`
	HttpEnrichName     *string                                                                      `path:"http-enrich-name" module:"nokia-conf"`
	RatTypeEnrichment  *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment `path:"rat-type-enrichment" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) IsYANGGoStruct() {}

// NewField creates a new entry in the Field list of the
// NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) NewField(FieldName string) (*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field)
	}

	key := FieldName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Field[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Field", key)
	}

	t.Field[key] = &NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field{
		FieldName: &FieldName,
	}

	return t.Field[key], nil
}

// RenameField renames an entry in the list Field within
// the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) RenameField(oldK, newK string) error {
	if _, ok := t.Field[newK]; ok {
		return fmt.Errorf("key %v already exists in Field", newK)
	}

	e, ok := t.Field[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Field", oldK)
	}
	e.FieldName = &newK

	t.Field[newK] = e
	delete(t.Field, oldK)
	return nil
}

// GetOrCreateField retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) GetOrCreateField(FieldName string) *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field {

	key := FieldName

	if v, ok := t.Field[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewField(FieldName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateField got unexpected error: %v", err))
	}
	return v
}

// GetField retrieves the value with the specified key from
// the Field map field of NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) GetField(FieldName string) *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field {

	if t == nil {
		return nil
	}

	key := FieldName

	if lm, ok := t.Field[key]; ok {
		return lm
	}
	return nil
}

// DeleteField deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) DeleteField(FieldName string) {
	key := FieldName

	delete(t.Field, key)
}

// AppendField appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field struct to the
// list Field of NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) AppendField(v *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field) error {
	if v.FieldName == nil {
		return fmt.Errorf("invalid nil key received for FieldName")
	}

	key := *v.FieldName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field)
	}

	if _, ok := t.Field[key]; ok {
		return fmt.Errorf("duplicate key for list Field %v", key)
	}

	t.Field[key] = v
	return nil
}

// GetOrCreateRatTypeEnrichment retrieves the value of the RatTypeEnrichment field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) GetOrCreateRatTypeEnrichment() *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment {
	if t.RatTypeEnrichment != nil {
		return t.RatTypeEnrichment
	}
	t.RatTypeEnrichment = &NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment{}
	return t.RatTypeEnrichment
}

// GetRatTypeEnrichment returns the value of the RatTypeEnrichment struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich. If the receiver or the field RatTypeEnrichment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) GetRatTypeEnrichment() *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment {
	if t != nil && t.RatTypeEnrichment != nil {
		return t.RatTypeEnrichment
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHttpEnrichName retrieves the value of the leaf HttpEnrichName from the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpEnrichName is set, it can
// safely use t.GetHttpEnrichName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpEnrichName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) GetHttpEnrichName() string {
	if t == nil || t.HttpEnrichName == nil {
		return ""
	}
	return *t.HttpEnrichName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.RatTypeEnrichment.PopulateDefaults()
	for _, e := range t.Field {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HttpEnrichName == nil {
		return nil, fmt.Errorf("nil value for key HttpEnrichName")
	}

	return map[string]interface{}{
		"http-enrich-name": *t.HttpEnrichName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field represents the /nokia-conf/configure/application-assurance/group/http-enrich/field YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field struct {
	AntiSpoof          *bool                                                                   `path:"anti-spoof" module:"nokia-conf"`
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	CallingLineId      *bool                                                                   `path:"calling-line-id" module:"nokia-conf"`
	Encode             *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode `path:"encode" module:"nokia-conf"`
	FieldName          *string                                                                 `path:"field-name" module:"nokia-conf"`
	Name               *string                                                                 `path:"name" module:"nokia-conf"`
	StaticString       *string                                                                 `path:"static-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field) IsYANGGoStruct() {}

// GetOrCreateEncode retrieves the value of the Encode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field) GetOrCreateEncode() *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode {
	if t.Encode != nil {
		return t.Encode
	}
	t.Encode = &NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode{}
	return t.Encode
}

// GetEncode returns the value of the Encode struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field. If the receiver or the field Encode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field) GetEncode() *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode {
	if t != nil && t.Encode != nil {
		return t.Encode
	}
	return nil
}

// GetAntiSpoof retrieves the value of the leaf AntiSpoof from the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AntiSpoof is set, it can
// safely use t.GetAntiSpoof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AntiSpoof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field) GetAntiSpoof() bool {
	if t == nil || t.AntiSpoof == nil {
		return false
	}
	return *t.AntiSpoof
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCallingLineId retrieves the value of the leaf CallingLineId from the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingLineId is set, it can
// safely use t.GetCallingLineId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingLineId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field) GetCallingLineId() bool {
	if t == nil || t.CallingLineId == nil {
		return false
	}
	return *t.CallingLineId
}

// GetFieldName retrieves the value of the leaf FieldName from the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldName is set, it can
// safely use t.GetFieldName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field) GetFieldName() string {
	if t == nil || t.FieldName == nil {
		return ""
	}
	return *t.FieldName
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetStaticString retrieves the value of the leaf StaticString from the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticString is set, it can
// safely use t.GetStaticString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field) GetStaticString() string {
	if t == nil || t.StaticString == nil {
		return ""
	}
	return *t.StaticString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AntiSpoof == nil {
		var v bool = false
		t.AntiSpoof = &v
	}
	if t.CallingLineId == nil {
		var v bool = false
		t.CallingLineId = &v
	}
	t.Encode.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FieldName == nil {
		return nil, fmt.Errorf("nil value for key FieldName")
	}

	return map[string]interface{}{
		"field-name": *t.FieldName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode represents the /nokia-conf/configure/application-assurance/group/http-enrich/field/encode YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode struct {
	CertProfile *string                                                                     `path:"cert-profile" module:"nokia-conf"`
	Key         *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key `path:"key" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode) IsYANGGoStruct() {}

// GetOrCreateKey retrieves the value of the Key field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode) GetOrCreateKey() *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key {
	if t.Key != nil {
		return t.Key
	}
	t.Key = &NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key{}
	return t.Key
}

// GetKey returns the value of the Key struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode. If the receiver or the field Key is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode) GetKey() *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key {
	if t != nil && t.Key != nil {
		return t.Key
	}
	return nil
}

// GetCertProfile retrieves the value of the leaf CertProfile from the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertProfile is set, it can
// safely use t.GetCertProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode) GetCertProfile() string {
	if t == nil || t.CertProfile == nil {
		return ""
	}
	return *t.CertProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Key.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key represents the /nokia-conf/configure/application-assurance/group/http-enrich/field/encode/key YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key struct {
	Type  E_NokiaTypesApplicationAssurance_HttpFieldEncoding `path:"type" module:"nokia-conf"`
	Value *string                                            `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key) IsYANGGoStruct() {}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key) GetType() E_NokiaTypesApplicationAssurance_HttpFieldEncoding {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_Field_Encode_Key) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment represents the /nokia-conf/configure/application-assurance/group/http-enrich/rat-type-enrichment YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment struct {
	RatType map[E_NokiaTypesApplicationAssurance_MobileRatType]*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType `path:"rat-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) IsYANGGoStruct() {
}

// NewRatType creates a new entry in the RatType list of the
// NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) NewRatType(RatTypeName E_NokiaTypesApplicationAssurance_MobileRatType) (*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RatType == nil {
		t.RatType = make(map[E_NokiaTypesApplicationAssurance_MobileRatType]*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType)
	}

	key := RatTypeName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RatType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RatType", key)
	}

	t.RatType[key] = &NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType{
		RatTypeName: RatTypeName,
	}

	return t.RatType[key], nil
}

// RenameRatType renames an entry in the list RatType within
// the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) RenameRatType(oldK, newK E_NokiaTypesApplicationAssurance_MobileRatType) error {
	if _, ok := t.RatType[newK]; ok {
		return fmt.Errorf("key %v already exists in RatType", newK)
	}

	e, ok := t.RatType[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RatType", oldK)
	}
	e.RatTypeName = newK

	t.RatType[newK] = e
	delete(t.RatType, oldK)
	return nil
}

// GetOrCreateRatType retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) GetOrCreateRatType(RatTypeName E_NokiaTypesApplicationAssurance_MobileRatType) *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType {

	key := RatTypeName

	if v, ok := t.RatType[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRatType(RatTypeName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRatType got unexpected error: %v", err))
	}
	return v
}

// GetRatType retrieves the value with the specified key from
// the RatType map field of NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) GetRatType(RatTypeName E_NokiaTypesApplicationAssurance_MobileRatType) *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType {

	if t == nil {
		return nil
	}

	key := RatTypeName

	if lm, ok := t.RatType[key]; ok {
		return lm
	}
	return nil
}

// DeleteRatType deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) DeleteRatType(RatTypeName E_NokiaTypesApplicationAssurance_MobileRatType) {
	key := RatTypeName

	delete(t.RatType, key)
}

// AppendRatType appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType struct to the
// list RatType of NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) AppendRatType(v *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) error {
	key := v.RatTypeName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RatType == nil {
		t.RatType = make(map[E_NokiaTypesApplicationAssurance_MobileRatType]*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType)
	}

	if _, ok := t.RatType[key]; ok {
		return fmt.Errorf("duplicate key for list RatType %v", key)
	}

	t.RatType[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.RatType {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType represents the /nokia-conf/configure/application-assurance/group/http-enrich/rat-type-enrichment/rat-type YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType struct {
	ApplyGroups        []string                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	RatString          *string                                        `path:"rat-string" module:"nokia-conf"`
	RatTypeName        E_NokiaTypesApplicationAssurance_MobileRatType `path:"rat-type-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRatString retrieves the value of the leaf RatString from the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RatString is set, it can
// safely use t.GetRatString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RatString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) GetRatString() string {
	if t == nil || t.RatString == nil {
		return ""
	}
	return *t.RatString
}

// GetRatTypeName retrieves the value of the leaf RatTypeName from the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RatTypeName is set, it can
// safely use t.GetRatTypeName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RatTypeName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) GetRatTypeName() E_NokiaTypesApplicationAssurance_MobileRatType {
	if t == nil || t.RatTypeName == 0 {
		return 0
	}
	return t.RatTypeName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"rat-type-name": t.RatTypeName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpEnrich_RatTypeEnrichment_RatType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect represents the /nokia-conf/configure/application-assurance/group/http-error-redirect YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect struct {
	AdminState            E_NokiaTypesSros_AdminState                                                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups           []string                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Description           *string                                                                                `path:"description" module:"nokia-conf"`
	ErrorCode             map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode `path:"error-code" module:"nokia-conf"`
	HttpErrorRedirectName *string                                                                                `path:"http-error-redirect-name" module:"nokia-conf"`
	HttpHost              *string                                                                                `path:"http-host" module:"nokia-conf"`
	ParticipantId         *string                                                                                `path:"participant-id" module:"nokia-conf"`
	Template              *uint32                                                                                `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) IsYANGGoStruct() {}

// NewErrorCode creates a new entry in the ErrorCode list of the
// NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) NewErrorCode(ErrorCodeValue uint32) (*NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ErrorCode == nil {
		t.ErrorCode = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode)
	}

	key := ErrorCodeValue

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ErrorCode[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ErrorCode", key)
	}

	t.ErrorCode[key] = &NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode{
		ErrorCodeValue: &ErrorCodeValue,
	}

	return t.ErrorCode[key], nil
}

// RenameErrorCode renames an entry in the list ErrorCode within
// the NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) RenameErrorCode(oldK, newK uint32) error {
	if _, ok := t.ErrorCode[newK]; ok {
		return fmt.Errorf("key %v already exists in ErrorCode", newK)
	}

	e, ok := t.ErrorCode[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ErrorCode", oldK)
	}
	e.ErrorCodeValue = &newK

	t.ErrorCode[newK] = e
	delete(t.ErrorCode, oldK)
	return nil
}

// GetOrCreateErrorCode retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) GetOrCreateErrorCode(ErrorCodeValue uint32) *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode {

	key := ErrorCodeValue

	if v, ok := t.ErrorCode[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewErrorCode(ErrorCodeValue)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateErrorCode got unexpected error: %v", err))
	}
	return v
}

// GetErrorCode retrieves the value with the specified key from
// the ErrorCode map field of NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) GetErrorCode(ErrorCodeValue uint32) *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode {

	if t == nil {
		return nil
	}

	key := ErrorCodeValue

	if lm, ok := t.ErrorCode[key]; ok {
		return lm
	}
	return nil
}

// DeleteErrorCode deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) DeleteErrorCode(ErrorCodeValue uint32) {
	key := ErrorCodeValue

	delete(t.ErrorCode, key)
}

// AppendErrorCode appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode struct to the
// list ErrorCode of NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) AppendErrorCode(v *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) error {
	if v.ErrorCodeValue == nil {
		return fmt.Errorf("invalid nil key received for ErrorCodeValue")
	}

	key := *v.ErrorCodeValue

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ErrorCode == nil {
		t.ErrorCode = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode)
	}

	if _, ok := t.ErrorCode[key]; ok {
		return fmt.Errorf("duplicate key for list ErrorCode %v", key)
	}

	t.ErrorCode[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHttpErrorRedirectName retrieves the value of the leaf HttpErrorRedirectName from the NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpErrorRedirectName is set, it can
// safely use t.GetHttpErrorRedirectName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpErrorRedirectName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) GetHttpErrorRedirectName() string {
	if t == nil || t.HttpErrorRedirectName == nil {
		return ""
	}
	return *t.HttpErrorRedirectName
}

// GetHttpHost retrieves the value of the leaf HttpHost from the NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpHost is set, it can
// safely use t.GetHttpHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) GetHttpHost() string {
	if t == nil || t.HttpHost == nil {
		return ""
	}
	return *t.HttpHost
}

// GetParticipantId retrieves the value of the leaf ParticipantId from the NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ParticipantId is set, it can
// safely use t.GetParticipantId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ParticipantId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) GetParticipantId() string {
	if t == nil || t.ParticipantId == nil {
		return ""
	}
	return *t.ParticipantId
}

// GetTemplate retrieves the value of the leaf Template from the NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Template is set, it can
// safely use t.GetTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Template == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) GetTemplate() uint32 {
	if t == nil || t.Template == nil {
		return 0
	}
	return *t.Template
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.ErrorCode {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HttpErrorRedirectName == nil {
		return nil, fmt.Errorf("nil value for key HttpErrorRedirectName")
	}

	return map[string]interface{}{
		"http-error-redirect-name": *t.HttpErrorRedirectName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode represents the /nokia-conf/configure/application-assurance/group/http-error-redirect/error-code YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CustomMessageSize  *uint32  `path:"custom-message-size" module:"nokia-conf"`
	ErrorCodeValue     *uint32  `path:"error-code-value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCustomMessageSize retrieves the value of the leaf CustomMessageSize from the NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CustomMessageSize is set, it can
// safely use t.GetCustomMessageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CustomMessageSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) GetCustomMessageSize() uint32 {
	if t == nil || t.CustomMessageSize == nil {
		return 1024
	}
	return *t.CustomMessageSize
}

// GetErrorCodeValue retrieves the value of the leaf ErrorCodeValue from the NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorCodeValue is set, it can
// safely use t.GetErrorCodeValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorCodeValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) GetErrorCodeValue() uint32 {
	if t == nil || t.ErrorCodeValue == nil {
		return 0
	}
	return *t.ErrorCodeValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CustomMessageSize == nil {
		var v uint32 = 1024
		t.CustomMessageSize = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ErrorCodeValue == nil {
		return nil, fmt.Errorf("nil value for key ErrorCodeValue")
	}

	return map[string]interface{}{
		"error-code-value": *t.ErrorCodeValue,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpErrorRedirect_ErrorCode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification represents the /nokia-conf/configure/application-assurance/group/http-notification YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification struct {
	AdminState           E_NokiaTypesSros_AdminState                                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups          []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Description          *string                                                                        `path:"description" module:"nokia-conf"`
	HttpNotificationName *string                                                                        `path:"http-notification-name" module:"nokia-conf"`
	Interval             NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification_Interval_Union `path:"interval" module:"nokia-conf"`
	ScriptUrl            *string                                                                        `path:"script-url" module:"nokia-conf"`
	Template             *uint32                                                                        `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHttpNotificationName retrieves the value of the leaf HttpNotificationName from the NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpNotificationName is set, it can
// safely use t.GetHttpNotificationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpNotificationName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification) GetHttpNotificationName() string {
	if t == nil || t.HttpNotificationName == nil {
		return ""
	}
	return *t.HttpNotificationName
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification) GetInterval() NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification_Interval_Union {
	if t == nil || t.Interval == nil {
		return NokiaTypesApplicationAssurance_HttpNotifInterval_Enum_one_time
	}
	return t.Interval
}

// GetScriptUrl retrieves the value of the leaf ScriptUrl from the NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ScriptUrl is set, it can
// safely use t.GetScriptUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ScriptUrl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification) GetScriptUrl() string {
	if t == nil || t.ScriptUrl == nil {
		return ""
	}
	return *t.ScriptUrl
}

// GetTemplate retrieves the value of the leaf Template from the NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Template is set, it can
// safely use t.GetTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Template == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification) GetTemplate() uint32 {
	if t == nil || t.Template == nil {
		return 0
	}
	return *t.Template
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Interval == nil {
		t.Interval = NokiaTypesApplicationAssurance_HttpNotifInterval_Enum_one_time
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HttpNotificationName == nil {
		return nil, fmt.Errorf("nil value for key HttpNotificationName")
	}

	return map[string]interface{}{
		"http-notification-name": *t.HttpNotificationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect represents the /nokia-conf/configure/application-assurance/group/http-redirect YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect struct {
	AdminState         E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	CaptiveRedirect    *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect `path:"captive-redirect" module:"nokia-conf"`
	Description        *string                                                                      `path:"description" module:"nokia-conf"`
	HttpRedirectName   *string                                                                      `path:"http-redirect-name" module:"nokia-conf"`
	RedirectHttps      *bool                                                                        `path:"redirect-https" module:"nokia-conf"`
	RedirectUrl        *string                                                                      `path:"redirect-url" module:"nokia-conf"`
	TcpClientReset     *bool                                                                        `path:"tcp-client-reset" module:"nokia-conf"`
	Template           *uint32                                                                      `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect) IsYANGGoStruct() {}

// GetOrCreateCaptiveRedirect retrieves the value of the CaptiveRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect) GetOrCreateCaptiveRedirect() *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect {
	if t.CaptiveRedirect != nil {
		return t.CaptiveRedirect
	}
	t.CaptiveRedirect = &NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect{}
	return t.CaptiveRedirect
}

// GetCaptiveRedirect returns the value of the CaptiveRedirect struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect. If the receiver or the field CaptiveRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect) GetCaptiveRedirect() *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect {
	if t != nil && t.CaptiveRedirect != nil {
		return t.CaptiveRedirect
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHttpRedirectName retrieves the value of the leaf HttpRedirectName from the NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpRedirectName is set, it can
// safely use t.GetHttpRedirectName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpRedirectName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect) GetHttpRedirectName() string {
	if t == nil || t.HttpRedirectName == nil {
		return ""
	}
	return *t.HttpRedirectName
}

// GetRedirectHttps retrieves the value of the leaf RedirectHttps from the NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedirectHttps is set, it can
// safely use t.GetRedirectHttps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedirectHttps == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect) GetRedirectHttps() bool {
	if t == nil || t.RedirectHttps == nil {
		return false
	}
	return *t.RedirectHttps
}

// GetRedirectUrl retrieves the value of the leaf RedirectUrl from the NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedirectUrl is set, it can
// safely use t.GetRedirectUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedirectUrl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect) GetRedirectUrl() string {
	if t == nil || t.RedirectUrl == nil {
		return ""
	}
	return *t.RedirectUrl
}

// GetTcpClientReset retrieves the value of the leaf TcpClientReset from the NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpClientReset is set, it can
// safely use t.GetTcpClientReset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpClientReset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect) GetTcpClientReset() bool {
	if t == nil || t.TcpClientReset == nil {
		return false
	}
	return *t.TcpClientReset
}

// GetTemplate retrieves the value of the leaf Template from the NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Template is set, it can
// safely use t.GetTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Template == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect) GetTemplate() uint32 {
	if t == nil || t.Template == nil {
		return 0
	}
	return *t.Template
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.RedirectHttps == nil {
		var v bool = false
		t.RedirectHttps = &v
	}
	if t.TcpClientReset == nil {
		var v bool = false
		t.TcpClientReset = &v
	}
	t.CaptiveRedirect.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HttpRedirectName == nil {
		return nil, fmt.Errorf("nil value for key HttpRedirectName")
	}

	return map[string]interface{}{
		"http-redirect-name": *t.HttpRedirectName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect represents the /nokia-conf/configure/application-assurance/group/http-redirect/captive-redirect YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect struct {
	VlanId *int32 `path:"vlan-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect) IsYANGGoStruct() {
}

// GetVlanId retrieves the value of the leaf VlanId from the NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect) GetVlanId() int32 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect.
func (*NokiaConf_Configure_ApplicationAssurance_Group_HttpRedirect_CaptiveRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition represents the /nokia-conf/configure/application-assurance/group/partition YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition struct {
	AaPartitionId            *uint32                                                                                  `path:"aa-partition-id" module:"nokia-conf"`
	AaSubCongestionDetection *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection       `path:"aa-sub-congestion-detection" module:"nokia-conf"`
	AaSubRemote              *bool                                                                                    `path:"aa-sub-remote" module:"nokia-conf"`
	AccessNetworkLocation    *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation          `path:"access-network-location" module:"nokia-conf"`
	ApplyGroups              []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude       []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	AqpInitialLookup         *bool                                                                                    `path:"aqp-initial-lookup" module:"nokia-conf"`
	Cflowd                   *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd                         `path:"cflowd" module:"nokia-conf"`
	Description              *string                                                                                  `path:"description" module:"nokia-conf"`
	EventLog                 map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog            `path:"event-log" module:"nokia-conf"`
	Gtp                      *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp                            `path:"gtp" module:"nokia-conf"`
	HttpMatchAllRequests     *bool                                                                                    `path:"http-match-all-requests" module:"nokia-conf"`
	HttpXOnlineHost          *bool                                                                                    `path:"http-x-online-host" module:"nokia-conf"`
	IpPrefixList             map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList        `path:"ip-prefix-list" module:"nokia-conf"`
	Policy                   *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy                         `path:"policy" module:"nokia-conf"`
	PolicyOverride           *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride                 `path:"policy-override" module:"nokia-conf"`
	PortList                 map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList            `path:"port-list" module:"nokia-conf"`
	SctpFilter               map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter          `path:"sctp-filter" module:"nokia-conf"`
	SessionFilter            map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter       `path:"session-filter" module:"nokia-conf"`
	ShallowInspection        *bool                                                                                    `path:"shallow-inspection" module:"nokia-conf"`
	Statistics               *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics                     `path:"statistics" module:"nokia-conf"`
	TcpValidate              map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate         `path:"tcp-validate" module:"nokia-conf"`
	TetheringDetection       *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection             `path:"tethering-detection" module:"nokia-conf"`
	ThresholdCrossingAlert   *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert         `path:"threshold-crossing-alert" module:"nokia-conf"`
	TransitIpPolicy          map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy     `path:"transit-ip-policy" module:"nokia-conf"`
	TransitPrefixPolicy      map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy `path:"transit-prefix-policy" module:"nokia-conf"`
	Wap1X                    *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X                          `path:"wap1x" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition) IsYANGGoStruct() {}

// NewEventLog creates a new entry in the EventLog list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) NewEventLog(EventLogName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EventLog == nil {
		t.EventLog = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog)
	}

	key := EventLogName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EventLog[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EventLog", key)
	}

	t.EventLog[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog{
		EventLogName: &EventLogName,
	}

	return t.EventLog[key], nil
}

// RenameEventLog renames an entry in the list EventLog within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) RenameEventLog(oldK, newK string) error {
	if _, ok := t.EventLog[newK]; ok {
		return fmt.Errorf("key %v already exists in EventLog", newK)
	}

	e, ok := t.EventLog[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EventLog", oldK)
	}
	e.EventLogName = &newK

	t.EventLog[newK] = e
	delete(t.EventLog, oldK)
	return nil
}

// GetOrCreateEventLog retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetOrCreateEventLog(EventLogName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog {

	key := EventLogName

	if v, ok := t.EventLog[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEventLog(EventLogName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEventLog got unexpected error: %v", err))
	}
	return v
}

// GetEventLog retrieves the value with the specified key from
// the EventLog map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetEventLog(EventLogName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog {

	if t == nil {
		return nil
	}

	key := EventLogName

	if lm, ok := t.EventLog[key]; ok {
		return lm
	}
	return nil
}

// DeleteEventLog deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) DeleteEventLog(EventLogName string) {
	key := EventLogName

	delete(t.EventLog, key)
}

// AppendEventLog appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog struct to the
// list EventLog of NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) AppendEventLog(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog) error {
	if v.EventLogName == nil {
		return fmt.Errorf("invalid nil key received for EventLogName")
	}

	key := *v.EventLogName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EventLog == nil {
		t.EventLog = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog)
	}

	if _, ok := t.EventLog[key]; ok {
		return fmt.Errorf("duplicate key for list EventLog %v", key)
	}

	t.EventLog[key] = v
	return nil
}

// NewIpPrefixList creates a new entry in the IpPrefixList list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) NewIpPrefixList(IpPrefixListName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpPrefixList == nil {
		t.IpPrefixList = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList)
	}

	key := IpPrefixListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpPrefixList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpPrefixList", key)
	}

	t.IpPrefixList[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList{
		IpPrefixListName: &IpPrefixListName,
	}

	return t.IpPrefixList[key], nil
}

// RenameIpPrefixList renames an entry in the list IpPrefixList within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) RenameIpPrefixList(oldK, newK string) error {
	if _, ok := t.IpPrefixList[newK]; ok {
		return fmt.Errorf("key %v already exists in IpPrefixList", newK)
	}

	e, ok := t.IpPrefixList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpPrefixList", oldK)
	}
	e.IpPrefixListName = &newK

	t.IpPrefixList[newK] = e
	delete(t.IpPrefixList, oldK)
	return nil
}

// GetOrCreateIpPrefixList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetOrCreateIpPrefixList(IpPrefixListName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList {

	key := IpPrefixListName

	if v, ok := t.IpPrefixList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpPrefixList(IpPrefixListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpPrefixList got unexpected error: %v", err))
	}
	return v
}

// GetIpPrefixList retrieves the value with the specified key from
// the IpPrefixList map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetIpPrefixList(IpPrefixListName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList {

	if t == nil {
		return nil
	}

	key := IpPrefixListName

	if lm, ok := t.IpPrefixList[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpPrefixList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) DeleteIpPrefixList(IpPrefixListName string) {
	key := IpPrefixListName

	delete(t.IpPrefixList, key)
}

// AppendIpPrefixList appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList struct to the
// list IpPrefixList of NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) AppendIpPrefixList(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList) error {
	if v.IpPrefixListName == nil {
		return fmt.Errorf("invalid nil key received for IpPrefixListName")
	}

	key := *v.IpPrefixListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpPrefixList == nil {
		t.IpPrefixList = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList)
	}

	if _, ok := t.IpPrefixList[key]; ok {
		return fmt.Errorf("duplicate key for list IpPrefixList %v", key)
	}

	t.IpPrefixList[key] = v
	return nil
}

// NewPortList creates a new entry in the PortList list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) NewPortList(PortListName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortList == nil {
		t.PortList = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList)
	}

	key := PortListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortList", key)
	}

	t.PortList[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList{
		PortListName: &PortListName,
	}

	return t.PortList[key], nil
}

// RenamePortList renames an entry in the list PortList within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) RenamePortList(oldK, newK string) error {
	if _, ok := t.PortList[newK]; ok {
		return fmt.Errorf("key %v already exists in PortList", newK)
	}

	e, ok := t.PortList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortList", oldK)
	}
	e.PortListName = &newK

	t.PortList[newK] = e
	delete(t.PortList, oldK)
	return nil
}

// GetOrCreatePortList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetOrCreatePortList(PortListName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList {

	key := PortListName

	if v, ok := t.PortList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortList(PortListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortList got unexpected error: %v", err))
	}
	return v
}

// GetPortList retrieves the value with the specified key from
// the PortList map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetPortList(PortListName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList {

	if t == nil {
		return nil
	}

	key := PortListName

	if lm, ok := t.PortList[key]; ok {
		return lm
	}
	return nil
}

// DeletePortList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) DeletePortList(PortListName string) {
	key := PortListName

	delete(t.PortList, key)
}

// AppendPortList appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList struct to the
// list PortList of NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) AppendPortList(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) error {
	if v.PortListName == nil {
		return fmt.Errorf("invalid nil key received for PortListName")
	}

	key := *v.PortListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortList == nil {
		t.PortList = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList)
	}

	if _, ok := t.PortList[key]; ok {
		return fmt.Errorf("duplicate key for list PortList %v", key)
	}

	t.PortList[key] = v
	return nil
}

// NewSctpFilter creates a new entry in the SctpFilter list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) NewSctpFilter(SctpFilterName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SctpFilter == nil {
		t.SctpFilter = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter)
	}

	key := SctpFilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SctpFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SctpFilter", key)
	}

	t.SctpFilter[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter{
		SctpFilterName: &SctpFilterName,
	}

	return t.SctpFilter[key], nil
}

// RenameSctpFilter renames an entry in the list SctpFilter within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) RenameSctpFilter(oldK, newK string) error {
	if _, ok := t.SctpFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in SctpFilter", newK)
	}

	e, ok := t.SctpFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SctpFilter", oldK)
	}
	e.SctpFilterName = &newK

	t.SctpFilter[newK] = e
	delete(t.SctpFilter, oldK)
	return nil
}

// GetOrCreateSctpFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetOrCreateSctpFilter(SctpFilterName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter {

	key := SctpFilterName

	if v, ok := t.SctpFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSctpFilter(SctpFilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSctpFilter got unexpected error: %v", err))
	}
	return v
}

// GetSctpFilter retrieves the value with the specified key from
// the SctpFilter map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetSctpFilter(SctpFilterName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter {

	if t == nil {
		return nil
	}

	key := SctpFilterName

	if lm, ok := t.SctpFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteSctpFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) DeleteSctpFilter(SctpFilterName string) {
	key := SctpFilterName

	delete(t.SctpFilter, key)
}

// AppendSctpFilter appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter struct to the
// list SctpFilter of NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) AppendSctpFilter(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter) error {
	if v.SctpFilterName == nil {
		return fmt.Errorf("invalid nil key received for SctpFilterName")
	}

	key := *v.SctpFilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SctpFilter == nil {
		t.SctpFilter = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter)
	}

	if _, ok := t.SctpFilter[key]; ok {
		return fmt.Errorf("duplicate key for list SctpFilter %v", key)
	}

	t.SctpFilter[key] = v
	return nil
}

// NewSessionFilter creates a new entry in the SessionFilter list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) NewSessionFilter(SessionFilterName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SessionFilter == nil {
		t.SessionFilter = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter)
	}

	key := SessionFilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SessionFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SessionFilter", key)
	}

	t.SessionFilter[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter{
		SessionFilterName: &SessionFilterName,
	}

	return t.SessionFilter[key], nil
}

// RenameSessionFilter renames an entry in the list SessionFilter within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) RenameSessionFilter(oldK, newK string) error {
	if _, ok := t.SessionFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in SessionFilter", newK)
	}

	e, ok := t.SessionFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SessionFilter", oldK)
	}
	e.SessionFilterName = &newK

	t.SessionFilter[newK] = e
	delete(t.SessionFilter, oldK)
	return nil
}

// GetOrCreateSessionFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetOrCreateSessionFilter(SessionFilterName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter {

	key := SessionFilterName

	if v, ok := t.SessionFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSessionFilter(SessionFilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSessionFilter got unexpected error: %v", err))
	}
	return v
}

// GetSessionFilter retrieves the value with the specified key from
// the SessionFilter map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetSessionFilter(SessionFilterName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter {

	if t == nil {
		return nil
	}

	key := SessionFilterName

	if lm, ok := t.SessionFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteSessionFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) DeleteSessionFilter(SessionFilterName string) {
	key := SessionFilterName

	delete(t.SessionFilter, key)
}

// AppendSessionFilter appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter struct to the
// list SessionFilter of NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) AppendSessionFilter(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter) error {
	if v.SessionFilterName == nil {
		return fmt.Errorf("invalid nil key received for SessionFilterName")
	}

	key := *v.SessionFilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SessionFilter == nil {
		t.SessionFilter = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter)
	}

	if _, ok := t.SessionFilter[key]; ok {
		return fmt.Errorf("duplicate key for list SessionFilter %v", key)
	}

	t.SessionFilter[key] = v
	return nil
}

// NewTcpValidate creates a new entry in the TcpValidate list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) NewTcpValidate(TcpValidateName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TcpValidate == nil {
		t.TcpValidate = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate)
	}

	key := TcpValidateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TcpValidate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TcpValidate", key)
	}

	t.TcpValidate[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate{
		TcpValidateName: &TcpValidateName,
	}

	return t.TcpValidate[key], nil
}

// RenameTcpValidate renames an entry in the list TcpValidate within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) RenameTcpValidate(oldK, newK string) error {
	if _, ok := t.TcpValidate[newK]; ok {
		return fmt.Errorf("key %v already exists in TcpValidate", newK)
	}

	e, ok := t.TcpValidate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TcpValidate", oldK)
	}
	e.TcpValidateName = &newK

	t.TcpValidate[newK] = e
	delete(t.TcpValidate, oldK)
	return nil
}

// GetOrCreateTcpValidate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetOrCreateTcpValidate(TcpValidateName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate {

	key := TcpValidateName

	if v, ok := t.TcpValidate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTcpValidate(TcpValidateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTcpValidate got unexpected error: %v", err))
	}
	return v
}

// GetTcpValidate retrieves the value with the specified key from
// the TcpValidate map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetTcpValidate(TcpValidateName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate {

	if t == nil {
		return nil
	}

	key := TcpValidateName

	if lm, ok := t.TcpValidate[key]; ok {
		return lm
	}
	return nil
}

// DeleteTcpValidate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) DeleteTcpValidate(TcpValidateName string) {
	key := TcpValidateName

	delete(t.TcpValidate, key)
}

// AppendTcpValidate appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate struct to the
// list TcpValidate of NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) AppendTcpValidate(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate) error {
	if v.TcpValidateName == nil {
		return fmt.Errorf("invalid nil key received for TcpValidateName")
	}

	key := *v.TcpValidateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TcpValidate == nil {
		t.TcpValidate = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate)
	}

	if _, ok := t.TcpValidate[key]; ok {
		return fmt.Errorf("duplicate key for list TcpValidate %v", key)
	}

	t.TcpValidate[key] = v
	return nil
}

// NewTransitIpPolicy creates a new entry in the TransitIpPolicy list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) NewTransitIpPolicy(IpPolicyId uint32) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TransitIpPolicy == nil {
		t.TransitIpPolicy = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy)
	}

	key := IpPolicyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TransitIpPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TransitIpPolicy", key)
	}

	t.TransitIpPolicy[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy{
		IpPolicyId: &IpPolicyId,
	}

	return t.TransitIpPolicy[key], nil
}

// RenameTransitIpPolicy renames an entry in the list TransitIpPolicy within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) RenameTransitIpPolicy(oldK, newK uint32) error {
	if _, ok := t.TransitIpPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in TransitIpPolicy", newK)
	}

	e, ok := t.TransitIpPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TransitIpPolicy", oldK)
	}
	e.IpPolicyId = &newK

	t.TransitIpPolicy[newK] = e
	delete(t.TransitIpPolicy, oldK)
	return nil
}

// GetOrCreateTransitIpPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetOrCreateTransitIpPolicy(IpPolicyId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy {

	key := IpPolicyId

	if v, ok := t.TransitIpPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTransitIpPolicy(IpPolicyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTransitIpPolicy got unexpected error: %v", err))
	}
	return v
}

// GetTransitIpPolicy retrieves the value with the specified key from
// the TransitIpPolicy map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetTransitIpPolicy(IpPolicyId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy {

	if t == nil {
		return nil
	}

	key := IpPolicyId

	if lm, ok := t.TransitIpPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteTransitIpPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) DeleteTransitIpPolicy(IpPolicyId uint32) {
	key := IpPolicyId

	delete(t.TransitIpPolicy, key)
}

// AppendTransitIpPolicy appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy struct to the
// list TransitIpPolicy of NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) AppendTransitIpPolicy(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) error {
	if v.IpPolicyId == nil {
		return fmt.Errorf("invalid nil key received for IpPolicyId")
	}

	key := *v.IpPolicyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TransitIpPolicy == nil {
		t.TransitIpPolicy = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy)
	}

	if _, ok := t.TransitIpPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list TransitIpPolicy %v", key)
	}

	t.TransitIpPolicy[key] = v
	return nil
}

// NewTransitPrefixPolicy creates a new entry in the TransitPrefixPolicy list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) NewTransitPrefixPolicy(PrefixPolicyId uint32) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TransitPrefixPolicy == nil {
		t.TransitPrefixPolicy = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy)
	}

	key := PrefixPolicyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TransitPrefixPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TransitPrefixPolicy", key)
	}

	t.TransitPrefixPolicy[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy{
		PrefixPolicyId: &PrefixPolicyId,
	}

	return t.TransitPrefixPolicy[key], nil
}

// RenameTransitPrefixPolicy renames an entry in the list TransitPrefixPolicy within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) RenameTransitPrefixPolicy(oldK, newK uint32) error {
	if _, ok := t.TransitPrefixPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in TransitPrefixPolicy", newK)
	}

	e, ok := t.TransitPrefixPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TransitPrefixPolicy", oldK)
	}
	e.PrefixPolicyId = &newK

	t.TransitPrefixPolicy[newK] = e
	delete(t.TransitPrefixPolicy, oldK)
	return nil
}

// GetOrCreateTransitPrefixPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetOrCreateTransitPrefixPolicy(PrefixPolicyId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy {

	key := PrefixPolicyId

	if v, ok := t.TransitPrefixPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTransitPrefixPolicy(PrefixPolicyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTransitPrefixPolicy got unexpected error: %v", err))
	}
	return v
}

// GetTransitPrefixPolicy retrieves the value with the specified key from
// the TransitPrefixPolicy map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetTransitPrefixPolicy(PrefixPolicyId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy {

	if t == nil {
		return nil
	}

	key := PrefixPolicyId

	if lm, ok := t.TransitPrefixPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteTransitPrefixPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) DeleteTransitPrefixPolicy(PrefixPolicyId uint32) {
	key := PrefixPolicyId

	delete(t.TransitPrefixPolicy, key)
}

// AppendTransitPrefixPolicy appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy struct to the
// list TransitPrefixPolicy of NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) AppendTransitPrefixPolicy(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) error {
	if v.PrefixPolicyId == nil {
		return fmt.Errorf("invalid nil key received for PrefixPolicyId")
	}

	key := *v.PrefixPolicyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TransitPrefixPolicy == nil {
		t.TransitPrefixPolicy = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy)
	}

	if _, ok := t.TransitPrefixPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list TransitPrefixPolicy %v", key)
	}

	t.TransitPrefixPolicy[key] = v
	return nil
}

// GetOrCreateAaSubCongestionDetection retrieves the value of the AaSubCongestionDetection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetOrCreateAaSubCongestionDetection() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection {
	if t.AaSubCongestionDetection != nil {
		return t.AaSubCongestionDetection
	}
	t.AaSubCongestionDetection = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection{}
	return t.AaSubCongestionDetection
}

// GetOrCreateAccessNetworkLocation retrieves the value of the AccessNetworkLocation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetOrCreateAccessNetworkLocation() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation {
	if t.AccessNetworkLocation != nil {
		return t.AccessNetworkLocation
	}
	t.AccessNetworkLocation = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation{}
	return t.AccessNetworkLocation
}

// GetOrCreateCflowd retrieves the value of the Cflowd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetOrCreateCflowd() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd {
	if t.Cflowd != nil {
		return t.Cflowd
	}
	t.Cflowd = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd{}
	return t.Cflowd
}

// GetOrCreateGtp retrieves the value of the Gtp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetOrCreateGtp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp {
	if t.Gtp != nil {
		return t.Gtp
	}
	t.Gtp = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp{}
	return t.Gtp
}

// GetOrCreatePolicy retrieves the value of the Policy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetOrCreatePolicy() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy {
	if t.Policy != nil {
		return t.Policy
	}
	t.Policy = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy{}
	return t.Policy
}

// GetOrCreatePolicyOverride retrieves the value of the PolicyOverride field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetOrCreatePolicyOverride() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride {
	if t.PolicyOverride != nil {
		return t.PolicyOverride
	}
	t.PolicyOverride = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride{}
	return t.PolicyOverride
}

// GetOrCreateStatistics retrieves the value of the Statistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetOrCreateStatistics() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics {
	if t.Statistics != nil {
		return t.Statistics
	}
	t.Statistics = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics{}
	return t.Statistics
}

// GetOrCreateTetheringDetection retrieves the value of the TetheringDetection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetOrCreateTetheringDetection() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection {
	if t.TetheringDetection != nil {
		return t.TetheringDetection
	}
	t.TetheringDetection = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection{}
	return t.TetheringDetection
}

// GetOrCreateThresholdCrossingAlert retrieves the value of the ThresholdCrossingAlert field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetOrCreateThresholdCrossingAlert() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert {
	if t.ThresholdCrossingAlert != nil {
		return t.ThresholdCrossingAlert
	}
	t.ThresholdCrossingAlert = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert{}
	return t.ThresholdCrossingAlert
}

// GetOrCreateWap1X retrieves the value of the Wap1X field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetOrCreateWap1X() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X {
	if t.Wap1X != nil {
		return t.Wap1X
	}
	t.Wap1X = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X{}
	return t.Wap1X
}

// GetAaSubCongestionDetection returns the value of the AaSubCongestionDetection struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the receiver or the field AaSubCongestionDetection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetAaSubCongestionDetection() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection {
	if t != nil && t.AaSubCongestionDetection != nil {
		return t.AaSubCongestionDetection
	}
	return nil
}

// GetAccessNetworkLocation returns the value of the AccessNetworkLocation struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the receiver or the field AccessNetworkLocation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetAccessNetworkLocation() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation {
	if t != nil && t.AccessNetworkLocation != nil {
		return t.AccessNetworkLocation
	}
	return nil
}

// GetCflowd returns the value of the Cflowd struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the receiver or the field Cflowd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetCflowd() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd {
	if t != nil && t.Cflowd != nil {
		return t.Cflowd
	}
	return nil
}

// GetGtp returns the value of the Gtp struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the receiver or the field Gtp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetGtp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp {
	if t != nil && t.Gtp != nil {
		return t.Gtp
	}
	return nil
}

// GetPolicy returns the value of the Policy struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the receiver or the field Policy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetPolicy() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy {
	if t != nil && t.Policy != nil {
		return t.Policy
	}
	return nil
}

// GetPolicyOverride returns the value of the PolicyOverride struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the receiver or the field PolicyOverride is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetPolicyOverride() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride {
	if t != nil && t.PolicyOverride != nil {
		return t.PolicyOverride
	}
	return nil
}

// GetStatistics returns the value of the Statistics struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the receiver or the field Statistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetStatistics() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics {
	if t != nil && t.Statistics != nil {
		return t.Statistics
	}
	return nil
}

// GetTetheringDetection returns the value of the TetheringDetection struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the receiver or the field TetheringDetection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetTetheringDetection() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection {
	if t != nil && t.TetheringDetection != nil {
		return t.TetheringDetection
	}
	return nil
}

// GetThresholdCrossingAlert returns the value of the ThresholdCrossingAlert struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the receiver or the field ThresholdCrossingAlert is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetThresholdCrossingAlert() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert {
	if t != nil && t.ThresholdCrossingAlert != nil {
		return t.ThresholdCrossingAlert
	}
	return nil
}

// GetWap1X returns the value of the Wap1X struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition. If the receiver or the field Wap1X is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetWap1X() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X {
	if t != nil && t.Wap1X != nil {
		return t.Wap1X
	}
	return nil
}

// GetAaPartitionId retrieves the value of the leaf AaPartitionId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AaPartitionId is set, it can
// safely use t.GetAaPartitionId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AaPartitionId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetAaPartitionId() uint32 {
	if t == nil || t.AaPartitionId == nil {
		return 0
	}
	return *t.AaPartitionId
}

// GetAaSubRemote retrieves the value of the leaf AaSubRemote from the NokiaConf_Configure_ApplicationAssurance_Group_Partition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AaSubRemote is set, it can
// safely use t.GetAaSubRemote() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AaSubRemote == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetAaSubRemote() bool {
	if t == nil || t.AaSubRemote == nil {
		return false
	}
	return *t.AaSubRemote
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAqpInitialLookup retrieves the value of the leaf AqpInitialLookup from the NokiaConf_Configure_ApplicationAssurance_Group_Partition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AqpInitialLookup is set, it can
// safely use t.GetAqpInitialLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AqpInitialLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetAqpInitialLookup() bool {
	if t == nil || t.AqpInitialLookup == nil {
		return false
	}
	return *t.AqpInitialLookup
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Partition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHttpMatchAllRequests retrieves the value of the leaf HttpMatchAllRequests from the NokiaConf_Configure_ApplicationAssurance_Group_Partition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpMatchAllRequests is set, it can
// safely use t.GetHttpMatchAllRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpMatchAllRequests == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetHttpMatchAllRequests() bool {
	if t == nil || t.HttpMatchAllRequests == nil {
		return false
	}
	return *t.HttpMatchAllRequests
}

// GetHttpXOnlineHost retrieves the value of the leaf HttpXOnlineHost from the NokiaConf_Configure_ApplicationAssurance_Group_Partition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpXOnlineHost is set, it can
// safely use t.GetHttpXOnlineHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpXOnlineHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetHttpXOnlineHost() bool {
	if t == nil || t.HttpXOnlineHost == nil {
		return false
	}
	return *t.HttpXOnlineHost
}

// GetShallowInspection retrieves the value of the leaf ShallowInspection from the NokiaConf_Configure_ApplicationAssurance_Group_Partition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShallowInspection is set, it can
// safely use t.GetShallowInspection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShallowInspection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) GetShallowInspection() bool {
	if t == nil || t.ShallowInspection == nil {
		return false
	}
	return *t.ShallowInspection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AaSubRemote == nil {
		var v bool = false
		t.AaSubRemote = &v
	}
	if t.AqpInitialLookup == nil {
		var v bool = false
		t.AqpInitialLookup = &v
	}
	if t.HttpMatchAllRequests == nil {
		var v bool = false
		t.HttpMatchAllRequests = &v
	}
	if t.HttpXOnlineHost == nil {
		var v bool = false
		t.HttpXOnlineHost = &v
	}
	if t.ShallowInspection == nil {
		var v bool = false
		t.ShallowInspection = &v
	}
	t.AaSubCongestionDetection.PopulateDefaults()
	t.AccessNetworkLocation.PopulateDefaults()
	t.Cflowd.PopulateDefaults()
	t.Gtp.PopulateDefaults()
	t.Policy.PopulateDefaults()
	t.PolicyOverride.PopulateDefaults()
	t.Statistics.PopulateDefaults()
	t.TetheringDetection.PopulateDefaults()
	t.ThresholdCrossingAlert.PopulateDefaults()
	t.Wap1X.PopulateDefaults()
	for _, e := range t.EventLog {
		e.PopulateDefaults()
	}
	for _, e := range t.IpPrefixList {
		e.PopulateDefaults()
	}
	for _, e := range t.PortList {
		e.PopulateDefaults()
	}
	for _, e := range t.SctpFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.SessionFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.TcpValidate {
		e.PopulateDefaults()
	}
	for _, e := range t.TransitIpPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.TransitPrefixPolicy {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AaPartitionId == nil {
		return nil, fmt.Errorf("nil value for key AaPartitionId")
	}

	return map[string]interface{}{
		"aa-partition-id": *t.AaPartitionId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection represents the /nokia-conf/configure/application-assurance/group/partition/aa-sub-congestion-detection YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection struct {
	AdminState            E_NokiaTypesSros_AdminState                                                                                                                   `path:"admin-state" module:"nokia-conf"`
	ApplyGroups           []string                                                                                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	RatType               map[E_NokiaTypesApplicationAssurance_MobileRatType]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType `path:"rat-type" module:"nokia-conf"`
	RttThreshold          NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RttThreshold_Union                                          `path:"rtt-threshold" module:"nokia-conf"`
	RttThresholdTolerance *uint32                                                                                                                                       `path:"rtt-threshold-tolerance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) IsYANGGoStruct() {
}

// NewRatType creates a new entry in the RatType list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) NewRatType(RatTypeName E_NokiaTypesApplicationAssurance_MobileRatType) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RatType == nil {
		t.RatType = make(map[E_NokiaTypesApplicationAssurance_MobileRatType]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType)
	}

	key := RatTypeName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RatType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RatType", key)
	}

	t.RatType[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType{
		RatTypeName: RatTypeName,
	}

	return t.RatType[key], nil
}

// RenameRatType renames an entry in the list RatType within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) RenameRatType(oldK, newK E_NokiaTypesApplicationAssurance_MobileRatType) error {
	if _, ok := t.RatType[newK]; ok {
		return fmt.Errorf("key %v already exists in RatType", newK)
	}

	e, ok := t.RatType[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RatType", oldK)
	}
	e.RatTypeName = newK

	t.RatType[newK] = e
	delete(t.RatType, oldK)
	return nil
}

// GetOrCreateRatType retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) GetOrCreateRatType(RatTypeName E_NokiaTypesApplicationAssurance_MobileRatType) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType {

	key := RatTypeName

	if v, ok := t.RatType[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRatType(RatTypeName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRatType got unexpected error: %v", err))
	}
	return v
}

// GetRatType retrieves the value with the specified key from
// the RatType map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) GetRatType(RatTypeName E_NokiaTypesApplicationAssurance_MobileRatType) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType {

	if t == nil {
		return nil
	}

	key := RatTypeName

	if lm, ok := t.RatType[key]; ok {
		return lm
	}
	return nil
}

// DeleteRatType deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) DeleteRatType(RatTypeName E_NokiaTypesApplicationAssurance_MobileRatType) {
	key := RatTypeName

	delete(t.RatType, key)
}

// AppendRatType appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType struct to the
// list RatType of NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) AppendRatType(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) error {
	key := v.RatTypeName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RatType == nil {
		t.RatType = make(map[E_NokiaTypesApplicationAssurance_MobileRatType]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType)
	}

	if _, ok := t.RatType[key]; ok {
		return fmt.Errorf("duplicate key for list RatType %v", key)
	}

	t.RatType[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRttThreshold retrieves the value of the leaf RttThreshold from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RttThreshold is set, it can
// safely use t.GetRttThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RttThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) GetRttThreshold() NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RttThreshold_Union {
	if t == nil || t.RttThreshold == nil {
		return UnionUint32(173)
	}
	return t.RttThreshold
}

// GetRttThresholdTolerance retrieves the value of the leaf RttThresholdTolerance from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RttThresholdTolerance is set, it can
// safely use t.GetRttThresholdTolerance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RttThresholdTolerance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) GetRttThresholdTolerance() uint32 {
	if t == nil || t.RttThresholdTolerance == nil {
		return 50
	}
	return *t.RttThresholdTolerance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.RttThreshold == nil {
		t.RttThreshold = UnionUint32(173)
	}
	if t.RttThresholdTolerance == nil {
		var v uint32 = 50
		t.RttThresholdTolerance = &v
	}
	for _, e := range t.RatType {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType represents the /nokia-conf/configure/application-assurance/group/partition/aa-sub-congestion-detection/rat-type YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType struct {
	ApplyGroups        []string                                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	RatTypeName        E_NokiaTypesApplicationAssurance_MobileRatType                                                               `path:"rat-type-name" module:"nokia-conf"`
	RttThreshold       NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType_RttThreshold_Union `path:"rtt-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRatTypeName retrieves the value of the leaf RatTypeName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RatTypeName is set, it can
// safely use t.GetRatTypeName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RatTypeName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) GetRatTypeName() E_NokiaTypesApplicationAssurance_MobileRatType {
	if t == nil || t.RatTypeName == 0 {
		return 0
	}
	return t.RatTypeName
}

// GetRttThreshold retrieves the value of the leaf RttThreshold from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RttThreshold is set, it can
// safely use t.GetRttThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RttThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) GetRttThreshold() NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType_RttThreshold_Union {
	if t == nil || t.RttThreshold == nil {
		return nil
	}
	return t.RttThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"rat-type-name": t.RatTypeName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AaSubCongestionDetection_RatType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation represents the /nokia-conf/configure/application-assurance/group/partition/access-network-location YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation struct {
	Source map[E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceType]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source `path:"source" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation) NewSource(SourceType E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceType) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceType]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source)
	}

	key := SourceType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source{
		SourceType: SourceType,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation) RenameSource(oldK, newK E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceType) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceType = newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation) GetOrCreateSource(SourceType E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceType) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source {

	key := SourceType

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation) GetSource(SourceType E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceType) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source {

	if t == nil {
		return nil
	}

	key := SourceType

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation) DeleteSource(SourceType E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceType) {
	key := SourceType

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source struct to the
// list Source of NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation) AppendSource(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) error {
	key := v.SourceType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceType]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source represents the /nokia-conf/configure/application-assurance/group/partition/access-network-location/source YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source struct {
	ApplyGroups           []string                                                                                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	RatType               map[E_NokiaTypesApplicationAssurance_MobileRatType]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType `path:"rat-type" module:"nokia-conf"`
	RttThreshold          NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RttThreshold_Union                                          `path:"rtt-threshold" module:"nokia-conf"`
	RttThresholdTolerance *uint32                                                                                                                                           `path:"rtt-threshold-tolerance" module:"nokia-conf"`
	SourceLevel           E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceLevel                                               `path:"source-level" module:"nokia-conf"`
	SourceType            E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceType                                                `path:"source-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) IsYANGGoStruct() {
}

// NewRatType creates a new entry in the RatType list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) NewRatType(RatTypeName E_NokiaTypesApplicationAssurance_MobileRatType) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RatType == nil {
		t.RatType = make(map[E_NokiaTypesApplicationAssurance_MobileRatType]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType)
	}

	key := RatTypeName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RatType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RatType", key)
	}

	t.RatType[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType{
		RatTypeName: RatTypeName,
	}

	return t.RatType[key], nil
}

// RenameRatType renames an entry in the list RatType within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) RenameRatType(oldK, newK E_NokiaTypesApplicationAssurance_MobileRatType) error {
	if _, ok := t.RatType[newK]; ok {
		return fmt.Errorf("key %v already exists in RatType", newK)
	}

	e, ok := t.RatType[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RatType", oldK)
	}
	e.RatTypeName = newK

	t.RatType[newK] = e
	delete(t.RatType, oldK)
	return nil
}

// GetOrCreateRatType retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) GetOrCreateRatType(RatTypeName E_NokiaTypesApplicationAssurance_MobileRatType) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType {

	key := RatTypeName

	if v, ok := t.RatType[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRatType(RatTypeName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRatType got unexpected error: %v", err))
	}
	return v
}

// GetRatType retrieves the value with the specified key from
// the RatType map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) GetRatType(RatTypeName E_NokiaTypesApplicationAssurance_MobileRatType) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType {

	if t == nil {
		return nil
	}

	key := RatTypeName

	if lm, ok := t.RatType[key]; ok {
		return lm
	}
	return nil
}

// DeleteRatType deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) DeleteRatType(RatTypeName E_NokiaTypesApplicationAssurance_MobileRatType) {
	key := RatTypeName

	delete(t.RatType, key)
}

// AppendRatType appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType struct to the
// list RatType of NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) AppendRatType(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) error {
	key := v.RatTypeName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RatType == nil {
		t.RatType = make(map[E_NokiaTypesApplicationAssurance_MobileRatType]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType)
	}

	if _, ok := t.RatType[key]; ok {
		return fmt.Errorf("duplicate key for list RatType %v", key)
	}

	t.RatType[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRttThreshold retrieves the value of the leaf RttThreshold from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RttThreshold is set, it can
// safely use t.GetRttThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RttThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) GetRttThreshold() NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RttThreshold_Union {
	if t == nil || t.RttThreshold == nil {
		return UnionUint32(173)
	}
	return t.RttThreshold
}

// GetRttThresholdTolerance retrieves the value of the leaf RttThresholdTolerance from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RttThresholdTolerance is set, it can
// safely use t.GetRttThresholdTolerance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RttThresholdTolerance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) GetRttThresholdTolerance() uint32 {
	if t == nil || t.RttThresholdTolerance == nil {
		return 50
	}
	return *t.RttThresholdTolerance
}

// GetSourceLevel retrieves the value of the leaf SourceLevel from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceLevel is set, it can
// safely use t.GetSourceLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) GetSourceLevel() E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceLevel {
	if t == nil || t.SourceLevel == 0 {
		return NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceLevel_cell
	}
	return t.SourceLevel
}

// GetSourceType retrieves the value of the leaf SourceType from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceType is set, it can
// safely use t.GetSourceType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) GetSourceType() E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceType {
	if t == nil || t.SourceType == 0 {
		return 0
	}
	return t.SourceType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RttThreshold == nil {
		t.RttThreshold = UnionUint32(173)
	}
	if t.RttThresholdTolerance == nil {
		var v uint32 = 50
		t.RttThresholdTolerance = &v
	}
	if t.SourceLevel == 0 {
		t.SourceLevel = NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_SourceLevel_cell
	}
	for _, e := range t.RatType {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"source-type": t.SourceType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType represents the /nokia-conf/configure/application-assurance/group/partition/access-network-location/source/rat-type YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType struct {
	ApplyGroups        []string                                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	RatTypeName        E_NokiaTypesApplicationAssurance_MobileRatType                                                                   `path:"rat-type-name" module:"nokia-conf"`
	RttThreshold       NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType_RttThreshold_Union `path:"rtt-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRatTypeName retrieves the value of the leaf RatTypeName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RatTypeName is set, it can
// safely use t.GetRatTypeName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RatTypeName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) GetRatTypeName() E_NokiaTypesApplicationAssurance_MobileRatType {
	if t == nil || t.RatTypeName == 0 {
		return 0
	}
	return t.RatTypeName
}

// GetRttThreshold retrieves the value of the leaf RttThreshold from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RttThreshold is set, it can
// safely use t.GetRttThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RttThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) GetRttThreshold() NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType_RttThreshold_Union {
	if t == nil || t.RttThreshold == nil {
		return nil
	}
	return t.RttThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"rat-type-name": t.RatTypeName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_AccessNetworkLocation_Source_RatType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd represents the /nokia-conf/configure/application-assurance/group/partition/cflowd YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd struct {
	ExportType map[E_NokiaTypesApplicationAssurance_CflowdExportType]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType `path:"export-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd) IsYANGGoStruct() {}

// NewExportType creates a new entry in the ExportType list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd) NewExportType(FlowExportType E_NokiaTypesApplicationAssurance_CflowdExportType) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExportType == nil {
		t.ExportType = make(map[E_NokiaTypesApplicationAssurance_CflowdExportType]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType)
	}

	key := FlowExportType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExportType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExportType", key)
	}

	t.ExportType[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType{
		FlowExportType: FlowExportType,
	}

	return t.ExportType[key], nil
}

// RenameExportType renames an entry in the list ExportType within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd) RenameExportType(oldK, newK E_NokiaTypesApplicationAssurance_CflowdExportType) error {
	if _, ok := t.ExportType[newK]; ok {
		return fmt.Errorf("key %v already exists in ExportType", newK)
	}

	e, ok := t.ExportType[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExportType", oldK)
	}
	e.FlowExportType = newK

	t.ExportType[newK] = e
	delete(t.ExportType, oldK)
	return nil
}

// GetOrCreateExportType retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd) GetOrCreateExportType(FlowExportType E_NokiaTypesApplicationAssurance_CflowdExportType) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType {

	key := FlowExportType

	if v, ok := t.ExportType[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExportType(FlowExportType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExportType got unexpected error: %v", err))
	}
	return v
}

// GetExportType retrieves the value with the specified key from
// the ExportType map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd) GetExportType(FlowExportType E_NokiaTypesApplicationAssurance_CflowdExportType) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType {

	if t == nil {
		return nil
	}

	key := FlowExportType

	if lm, ok := t.ExportType[key]; ok {
		return lm
	}
	return nil
}

// DeleteExportType deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd) DeleteExportType(FlowExportType E_NokiaTypesApplicationAssurance_CflowdExportType) {
	key := FlowExportType

	delete(t.ExportType, key)
}

// AppendExportType appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType struct to the
// list ExportType of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd) AppendExportType(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) error {
	key := v.FlowExportType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExportType == nil {
		t.ExportType = make(map[E_NokiaTypesApplicationAssurance_CflowdExportType]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType)
	}

	if _, ok := t.ExportType[key]; ok {
		return fmt.Errorf("duplicate key for list ExportType %v", key)
	}

	t.ExportType[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ExportType {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType represents the /nokia-conf/configure/application-assurance/group/partition/cflowd/export-type YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                        `path:"admin-state" module:"nokia-conf"`
	AppGroup           map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup    `path:"app-group" module:"nokia-conf"`
	Application        map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application `path:"application" module:"nokia-conf"`
	ApplyGroups        []string                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	FlowExportType     E_NokiaTypesApplicationAssurance_CflowdExportType                                                  `path:"flow-export-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) IsYANGGoStruct() {}

// NewAppGroup creates a new entry in the AppGroup list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) NewAppGroup(AppGroupName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AppGroup == nil {
		t.AppGroup = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup)
	}

	key := AppGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AppGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AppGroup", key)
	}

	t.AppGroup[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup{
		AppGroupName: &AppGroupName,
	}

	return t.AppGroup[key], nil
}

// RenameAppGroup renames an entry in the list AppGroup within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) RenameAppGroup(oldK, newK string) error {
	if _, ok := t.AppGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AppGroup", newK)
	}

	e, ok := t.AppGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AppGroup", oldK)
	}
	e.AppGroupName = &newK

	t.AppGroup[newK] = e
	delete(t.AppGroup, oldK)
	return nil
}

// GetOrCreateAppGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) GetOrCreateAppGroup(AppGroupName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup {

	key := AppGroupName

	if v, ok := t.AppGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAppGroup(AppGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAppGroup got unexpected error: %v", err))
	}
	return v
}

// GetAppGroup retrieves the value with the specified key from
// the AppGroup map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) GetAppGroup(AppGroupName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup {

	if t == nil {
		return nil
	}

	key := AppGroupName

	if lm, ok := t.AppGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAppGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) DeleteAppGroup(AppGroupName string) {
	key := AppGroupName

	delete(t.AppGroup, key)
}

// AppendAppGroup appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup struct to the
// list AppGroup of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) AppendAppGroup(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) error {
	if v.AppGroupName == nil {
		return fmt.Errorf("invalid nil key received for AppGroupName")
	}

	key := *v.AppGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AppGroup == nil {
		t.AppGroup = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup)
	}

	if _, ok := t.AppGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AppGroup %v", key)
	}

	t.AppGroup[key] = v
	return nil
}

// NewApplication creates a new entry in the Application list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) NewApplication(ApplicationName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application)
	}

	key := ApplicationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Application[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Application", key)
	}

	t.Application[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application{
		ApplicationName: &ApplicationName,
	}

	return t.Application[key], nil
}

// RenameApplication renames an entry in the list Application within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) RenameApplication(oldK, newK string) error {
	if _, ok := t.Application[newK]; ok {
		return fmt.Errorf("key %v already exists in Application", newK)
	}

	e, ok := t.Application[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Application", oldK)
	}
	e.ApplicationName = &newK

	t.Application[newK] = e
	delete(t.Application, oldK)
	return nil
}

// GetOrCreateApplication retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) GetOrCreateApplication(ApplicationName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application {

	key := ApplicationName

	if v, ok := t.Application[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewApplication(ApplicationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateApplication got unexpected error: %v", err))
	}
	return v
}

// GetApplication retrieves the value with the specified key from
// the Application map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) GetApplication(ApplicationName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application {

	if t == nil {
		return nil
	}

	key := ApplicationName

	if lm, ok := t.Application[key]; ok {
		return lm
	}
	return nil
}

// DeleteApplication deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) DeleteApplication(ApplicationName string) {
	key := ApplicationName

	delete(t.Application, key)
}

// AppendApplication appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application struct to the
// list Application of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) AppendApplication(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) error {
	if v.ApplicationName == nil {
		return fmt.Errorf("invalid nil key received for ApplicationName")
	}

	key := *v.ApplicationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application)
	}

	if _, ok := t.Application[key]; ok {
		return fmt.Errorf("duplicate key for list Application %v", key)
	}

	t.Application[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFlowExportType retrieves the value of the leaf FlowExportType from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowExportType is set, it can
// safely use t.GetFlowExportType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowExportType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) GetFlowExportType() E_NokiaTypesApplicationAssurance_CflowdExportType {
	if t == nil || t.FlowExportType == 0 {
		return 0
	}
	return t.FlowExportType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AppGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Application {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"flow-export-type": t.FlowExportType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup represents the /nokia-conf/configure/application-assurance/group/partition/cflowd/export-type/app-group YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup struct {
	AppGroupName       *string                                                                                          `path:"app-group-name" module:"nokia-conf"`
	ApplyGroups        []string                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	RateChoice         E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup_RateChoice `path:"rate-choice" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) IsYANGGoStruct() {
}

// GetAppGroupName retrieves the value of the leaf AppGroupName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppGroupName is set, it can
// safely use t.GetAppGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) GetAppGroupName() string {
	if t == nil || t.AppGroupName == nil {
		return ""
	}
	return *t.AppGroupName
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRateChoice retrieves the value of the leaf RateChoice from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateChoice is set, it can
// safely use t.GetRateChoice() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateChoice == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) GetRateChoice() E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup_RateChoice {
	if t == nil || t.RateChoice == 0 {
		return NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup_RateChoice_flow_rate
	}
	return t.RateChoice
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RateChoice == 0 {
		t.RateChoice = NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup_RateChoice_flow_rate
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AppGroupName == nil {
		return nil, fmt.Errorf("nil value for key AppGroupName")
	}

	return map[string]interface{}{
		"app-group-name": *t.AppGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_AppGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application represents the /nokia-conf/configure/application-assurance/group/partition/cflowd/export-type/application YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application struct {
	ApplicationName    *string                                                                                             `path:"application-name" module:"nokia-conf"`
	ApplyGroups        []string                                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	RateChoice         E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application_RateChoice `path:"rate-choice" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) IsYANGGoStruct() {
}

// GetApplicationName retrieves the value of the leaf ApplicationName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplicationName is set, it can
// safely use t.GetApplicationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplicationName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) GetApplicationName() string {
	if t == nil || t.ApplicationName == nil {
		return ""
	}
	return *t.ApplicationName
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRateChoice retrieves the value of the leaf RateChoice from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateChoice is set, it can
// safely use t.GetRateChoice() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateChoice == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) GetRateChoice() E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application_RateChoice {
	if t == nil || t.RateChoice == 0 {
		return NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application_RateChoice_flow_rate
	}
	return t.RateChoice
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RateChoice == 0 {
		t.RateChoice = NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application_RateChoice_flow_rate
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ApplicationName == nil {
		return nil, fmt.Errorf("nil value for key ApplicationName")
	}

	return map[string]interface{}{
		"application-name": *t.ApplicationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Cflowd_ExportType_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog represents the /nokia-conf/configure/application-assurance/group/partition/event-log YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog struct {
	AdminState         E_NokiaTypesSros_AdminState                                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	BufferType         E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_BufferType `path:"buffer-type" module:"nokia-conf"`
	EventLogName       *string                                                                        `path:"event-log-name" module:"nokia-conf"`
	MaxEntries         *uint32                                                                        `path:"max-entries" module:"nokia-conf"`
	Syslog             *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog      `path:"syslog" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog) IsYANGGoStruct() {}

// GetOrCreateSyslog retrieves the value of the Syslog field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog) GetOrCreateSyslog() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog {
	if t.Syslog != nil {
		return t.Syslog
	}
	t.Syslog = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog{}
	return t.Syslog
}

// GetSyslog returns the value of the Syslog struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog. If the receiver or the field Syslog is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog) GetSyslog() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog {
	if t != nil && t.Syslog != nil {
		return t.Syslog
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBufferType retrieves the value of the leaf BufferType from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BufferType is set, it can
// safely use t.GetBufferType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BufferType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog) GetBufferType() E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_BufferType {
	if t == nil || t.BufferType == 0 {
		return NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_BufferType_linear
	}
	return t.BufferType
}

// GetEventLogName retrieves the value of the leaf EventLogName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLogName is set, it can
// safely use t.GetEventLogName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLogName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog) GetEventLogName() string {
	if t == nil || t.EventLogName == nil {
		return ""
	}
	return *t.EventLogName
}

// GetMaxEntries retrieves the value of the leaf MaxEntries from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntries is set, it can
// safely use t.GetMaxEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog) GetMaxEntries() uint32 {
	if t == nil || t.MaxEntries == nil {
		return 500
	}
	return *t.MaxEntries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.BufferType == 0 {
		t.BufferType = NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_BufferType_linear
	}
	if t.MaxEntries == nil {
		var v uint32 = 500
		t.MaxEntries = &v
	}
	t.Syslog.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EventLogName == nil {
		return nil, fmt.Errorf("nil value for key EventLogName")
	}

	return map[string]interface{}{
		"event-log-name": *t.EventLogName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog represents the /nokia-conf/configure/application-assurance/group/partition/event-log/syslog YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog struct {
	Address     *string                                                                             `path:"address" module:"nokia-conf"`
	Description *string                                                                             `path:"description" module:"nokia-conf"`
	Facility    E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog_Facility `path:"facility" module:"nokia-conf"`
	Port        *uint16                                                                             `path:"port" module:"nokia-conf"`
	Severity    E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog_Severity `path:"severity" module:"nokia-conf"`
	VlanId      *uint32                                                                             `path:"vlan-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFacility retrieves the value of the leaf Facility from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog) GetFacility() E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog_Facility {
	if t == nil || t.Facility == 0 {
		return NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog_Facility_local7
	}
	return t.Facility
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 514
	}
	return *t.Port
}

// GetSeverity retrieves the value of the leaf Severity from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog) GetSeverity() E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog_Severity {
	if t == nil || t.Severity == 0 {
		return NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog_Severity_info
	}
	return t.Severity
}

// GetVlanId retrieves the value of the leaf VlanId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog) GetVlanId() uint32 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Facility == 0 {
		t.Facility = NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog_Facility_local7
	}
	if t.Port == nil {
		var v uint16 = 514
		t.Port = &v
	}
	if t.Severity == 0 {
		t.Severity = NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog_Severity_info
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_EventLog_Syslog) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp represents the /nokia-conf/configure/application-assurance/group/partition/gtp YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp struct {
	AdminState         E_NokiaTypesSros_AdminState                                                        `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	GtpFilter          map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter `path:"gtp-filter" module:"nokia-conf"`
	GtpcInspection     *bool                                                                              `path:"gtpc-inspection" module:"nokia-conf"`
	Log                *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Log                  `path:"log" module:"nokia-conf"`
	Mode               E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Mode                `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp) IsYANGGoStruct() {}

// NewGtpFilter creates a new entry in the GtpFilter list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp) NewGtpFilter(GtpFilterName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GtpFilter == nil {
		t.GtpFilter = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter)
	}

	key := GtpFilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GtpFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GtpFilter", key)
	}

	t.GtpFilter[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter{
		GtpFilterName: &GtpFilterName,
	}

	return t.GtpFilter[key], nil
}

// RenameGtpFilter renames an entry in the list GtpFilter within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp) RenameGtpFilter(oldK, newK string) error {
	if _, ok := t.GtpFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in GtpFilter", newK)
	}

	e, ok := t.GtpFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GtpFilter", oldK)
	}
	e.GtpFilterName = &newK

	t.GtpFilter[newK] = e
	delete(t.GtpFilter, oldK)
	return nil
}

// GetOrCreateGtpFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp) GetOrCreateGtpFilter(GtpFilterName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter {

	key := GtpFilterName

	if v, ok := t.GtpFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGtpFilter(GtpFilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGtpFilter got unexpected error: %v", err))
	}
	return v
}

// GetGtpFilter retrieves the value with the specified key from
// the GtpFilter map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp) GetGtpFilter(GtpFilterName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter {

	if t == nil {
		return nil
	}

	key := GtpFilterName

	if lm, ok := t.GtpFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteGtpFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp) DeleteGtpFilter(GtpFilterName string) {
	key := GtpFilterName

	delete(t.GtpFilter, key)
}

// AppendGtpFilter appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter struct to the
// list GtpFilter of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp) AppendGtpFilter(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) error {
	if v.GtpFilterName == nil {
		return fmt.Errorf("invalid nil key received for GtpFilterName")
	}

	key := *v.GtpFilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GtpFilter == nil {
		t.GtpFilter = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter)
	}

	if _, ok := t.GtpFilter[key]; ok {
		return fmt.Errorf("duplicate key for list GtpFilter %v", key)
	}

	t.GtpFilter[key] = v
	return nil
}

// GetOrCreateLog retrieves the value of the Log field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp) GetOrCreateLog() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Log {
	if t.Log != nil {
		return t.Log
	}
	t.Log = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Log{}
	return t.Log
}

// GetLog returns the value of the Log struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp. If the receiver or the field Log is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp) GetLog() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Log {
	if t != nil && t.Log != nil {
		return t.Log
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGtpcInspection retrieves the value of the leaf GtpcInspection from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GtpcInspection is set, it can
// safely use t.GetGtpcInspection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GtpcInspection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp) GetGtpcInspection() bool {
	if t == nil || t.GtpcInspection == nil {
		return false
	}
	return *t.GtpcInspection
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp) GetMode() E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Mode {
	if t == nil || t.Mode == 0 {
		return NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Mode_filtering
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.GtpcInspection == nil {
		var v bool = false
		t.GtpcInspection = &v
	}
	if t.Mode == 0 {
		t.Mode = NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Mode_filtering
	}
	t.Log.PopulateDefaults()
	for _, e := range t.GtpFilter {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter represents the /nokia-conf/configure/application-assurance/group/partition/gtp/gtp-filter YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter struct {
	ApplyGroups        []string                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                   `path:"description" module:"nokia-conf"`
	GtpFilterName      *string                                                                                   `path:"gtp-filter-name" module:"nokia-conf"`
	GtpInGtp           E_NokiaTypesApplicationAssurance_PermitDenyAction                                         `path:"gtp-in-gtp" module:"nokia-conf"`
	GtpTunnelDatabase  *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase `path:"gtp-tunnel-database" module:"nokia-conf"`
	ImsiApnFilter      *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter     `path:"imsi-apn-filter" module:"nokia-conf"`
	Log                *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log               `path:"log" module:"nokia-conf"`
	MaxPayloadLength   *int32                                                                                    `path:"max-payload-length" module:"nokia-conf"`
	MessageType        *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType       `path:"message-type" module:"nokia-conf"`
	MessageTypeGtpV2   *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2  `path:"message-type-gtp-v2" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) IsYANGGoStruct() {}

// GetOrCreateGtpTunnelDatabase retrieves the value of the GtpTunnelDatabase field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetOrCreateGtpTunnelDatabase() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase {
	if t.GtpTunnelDatabase != nil {
		return t.GtpTunnelDatabase
	}
	t.GtpTunnelDatabase = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase{}
	return t.GtpTunnelDatabase
}

// GetOrCreateImsiApnFilter retrieves the value of the ImsiApnFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetOrCreateImsiApnFilter() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter {
	if t.ImsiApnFilter != nil {
		return t.ImsiApnFilter
	}
	t.ImsiApnFilter = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter{}
	return t.ImsiApnFilter
}

// GetOrCreateLog retrieves the value of the Log field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetOrCreateLog() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log {
	if t.Log != nil {
		return t.Log
	}
	t.Log = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log{}
	return t.Log
}

// GetOrCreateMessageType retrieves the value of the MessageType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetOrCreateMessageType() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType {
	if t.MessageType != nil {
		return t.MessageType
	}
	t.MessageType = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType{}
	return t.MessageType
}

// GetOrCreateMessageTypeGtpV2 retrieves the value of the MessageTypeGtpV2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetOrCreateMessageTypeGtpV2() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2 {
	if t.MessageTypeGtpV2 != nil {
		return t.MessageTypeGtpV2
	}
	t.MessageTypeGtpV2 = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2{}
	return t.MessageTypeGtpV2
}

// GetGtpTunnelDatabase returns the value of the GtpTunnelDatabase struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter. If the receiver or the field GtpTunnelDatabase is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetGtpTunnelDatabase() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase {
	if t != nil && t.GtpTunnelDatabase != nil {
		return t.GtpTunnelDatabase
	}
	return nil
}

// GetImsiApnFilter returns the value of the ImsiApnFilter struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter. If the receiver or the field ImsiApnFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetImsiApnFilter() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter {
	if t != nil && t.ImsiApnFilter != nil {
		return t.ImsiApnFilter
	}
	return nil
}

// GetLog returns the value of the Log struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter. If the receiver or the field Log is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetLog() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log {
	if t != nil && t.Log != nil {
		return t.Log
	}
	return nil
}

// GetMessageType returns the value of the MessageType struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter. If the receiver or the field MessageType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetMessageType() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType {
	if t != nil && t.MessageType != nil {
		return t.MessageType
	}
	return nil
}

// GetMessageTypeGtpV2 returns the value of the MessageTypeGtpV2 struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter. If the receiver or the field MessageTypeGtpV2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetMessageTypeGtpV2() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2 {
	if t != nil && t.MessageTypeGtpV2 != nil {
		return t.MessageTypeGtpV2
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGtpFilterName retrieves the value of the leaf GtpFilterName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GtpFilterName is set, it can
// safely use t.GetGtpFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GtpFilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetGtpFilterName() string {
	if t == nil || t.GtpFilterName == nil {
		return ""
	}
	return *t.GtpFilterName
}

// GetGtpInGtp retrieves the value of the leaf GtpInGtp from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GtpInGtp is set, it can
// safely use t.GetGtpInGtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GtpInGtp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetGtpInGtp() E_NokiaTypesApplicationAssurance_PermitDenyAction {
	if t == nil || t.GtpInGtp == 0 {
		return NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	return t.GtpInGtp
}

// GetMaxPayloadLength retrieves the value of the leaf MaxPayloadLength from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPayloadLength is set, it can
// safely use t.GetMaxPayloadLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPayloadLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) GetMaxPayloadLength() int32 {
	if t == nil || t.MaxPayloadLength == nil {
		return 0
	}
	return *t.MaxPayloadLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GtpInGtp == 0 {
		t.GtpInGtp = NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	t.GtpTunnelDatabase.PopulateDefaults()
	t.ImsiApnFilter.PopulateDefaults()
	t.Log.PopulateDefaults()
	t.MessageType.PopulateDefaults()
	t.MessageTypeGtpV2.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GtpFilterName == nil {
		return nil, fmt.Errorf("nil value for key GtpFilterName")
	}

	return map[string]interface{}{
		"gtp-filter-name": *t.GtpFilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase represents the /nokia-conf/configure/application-assurance/group/partition/gtp/gtp-filter/gtp-tunnel-database YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase struct {
	DefaultTunnelEndpointLimit *uint32 `path:"default-tunnel-endpoint-limit" module:"nokia-conf"`
	ValidateGtpTunnels         *bool   `path:"validate-gtp-tunnels" module:"nokia-conf"`
	ValidateSequenceNumber     *bool   `path:"validate-sequence-number" module:"nokia-conf"`
	ValidateSourceIpAddr       *bool   `path:"validate-source-ip-addr" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase) IsYANGGoStruct() {
}

// GetDefaultTunnelEndpointLimit retrieves the value of the leaf DefaultTunnelEndpointLimit from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultTunnelEndpointLimit is set, it can
// safely use t.GetDefaultTunnelEndpointLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultTunnelEndpointLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase) GetDefaultTunnelEndpointLimit() uint32 {
	if t == nil || t.DefaultTunnelEndpointLimit == nil {
		return 4294967295
	}
	return *t.DefaultTunnelEndpointLimit
}

// GetValidateGtpTunnels retrieves the value of the leaf ValidateGtpTunnels from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidateGtpTunnels is set, it can
// safely use t.GetValidateGtpTunnels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidateGtpTunnels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase) GetValidateGtpTunnels() bool {
	if t == nil || t.ValidateGtpTunnels == nil {
		return false
	}
	return *t.ValidateGtpTunnels
}

// GetValidateSequenceNumber retrieves the value of the leaf ValidateSequenceNumber from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidateSequenceNumber is set, it can
// safely use t.GetValidateSequenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidateSequenceNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase) GetValidateSequenceNumber() bool {
	if t == nil || t.ValidateSequenceNumber == nil {
		return false
	}
	return *t.ValidateSequenceNumber
}

// GetValidateSourceIpAddr retrieves the value of the leaf ValidateSourceIpAddr from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidateSourceIpAddr is set, it can
// safely use t.GetValidateSourceIpAddr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidateSourceIpAddr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase) GetValidateSourceIpAddr() bool {
	if t == nil || t.ValidateSourceIpAddr == nil {
		return false
	}
	return *t.ValidateSourceIpAddr
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultTunnelEndpointLimit == nil {
		var v uint32 = 4294967295
		t.DefaultTunnelEndpointLimit = &v
	}
	if t.ValidateGtpTunnels == nil {
		var v bool = false
		t.ValidateGtpTunnels = &v
	}
	if t.ValidateSequenceNumber == nil {
		var v bool = false
		t.ValidateSequenceNumber = &v
	}
	if t.ValidateSourceIpAddr == nil {
		var v bool = false
		t.ValidateSourceIpAddr = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_GtpTunnelDatabase) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter represents the /nokia-conf/configure/application-assurance/group/partition/gtp/gtp-filter/imsi-apn-filter YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter struct {
	DefaultAction E_NokiaTypesApplicationAssurance_PermitDenyAction                                                      `path:"default-action" module:"nokia-conf"`
	Entry         map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) NewEntry(EntryId uint32) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) GetEntry(EntryId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry struct to the
// list Entry of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) AppendEntry(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) GetDefaultAction() E_NokiaTypesApplicationAssurance_PermitDenyAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	return t.DefaultAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry represents the /nokia-conf/configure/application-assurance/group/partition/gtp/gtp-filter/imsi-apn-filter/entry YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry struct {
	Action             E_NokiaTypesApplicationAssurance_PermitDenyAction                                                  `path:"action" module:"nokia-conf"`
	Apn                *string                                                                                            `path:"apn" module:"nokia-conf"`
	ApplyGroups        []string                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	EntryId            *uint32                                                                                            `path:"entry-id" module:"nokia-conf"`
	ImsiMccMncPrefix   *string                                                                                            `path:"imsi-mcc-mnc-prefix" module:"nokia-conf"`
	SrcGsn             *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn `path:"src-gsn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) IsYANGGoStruct() {
}

// GetOrCreateSrcGsn retrieves the value of the SrcGsn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) GetOrCreateSrcGsn() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn {
	if t.SrcGsn != nil {
		return t.SrcGsn
	}
	t.SrcGsn = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn{}
	return t.SrcGsn
}

// GetSrcGsn returns the value of the SrcGsn struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry. If the receiver or the field SrcGsn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) GetSrcGsn() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn {
	if t != nil && t.SrcGsn != nil {
		return t.SrcGsn
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) GetAction() E_NokiaTypesApplicationAssurance_PermitDenyAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	return t.Action
}

// GetApn retrieves the value of the leaf Apn from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Apn is set, it can
// safely use t.GetApn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Apn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) GetApn() string {
	if t == nil || t.Apn == nil {
		return ""
	}
	return *t.Apn
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetImsiMccMncPrefix retrieves the value of the leaf ImsiMccMncPrefix from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImsiMccMncPrefix is set, it can
// safely use t.GetImsiMccMncPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImsiMccMncPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) GetImsiMccMncPrefix() string {
	if t == nil || t.ImsiMccMncPrefix == nil {
		return ""
	}
	return *t.ImsiMccMncPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	t.SrcGsn.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn represents the /nokia-conf/configure/application-assurance/group/partition/gtp/gtp-filter/imsi-apn-filter/entry/src-gsn YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn struct {
	IpPrefix     *string `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_ImsiApnFilter_Entry_SrcGsn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log represents the /nokia-conf/configure/application-assurance/group/partition/gtp/gtp-filter/log YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log struct {
	Action   E_NokiaTypesApplicationAssurance_EventLogAction `path:"action" module:"nokia-conf"`
	EventLog *string                                         `path:"event-log" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log) IsYANGGoStruct() {}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log) GetAction() E_NokiaTypesApplicationAssurance_EventLogAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesApplicationAssurance_EventLogAction_deny
	}
	return t.Action
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesApplicationAssurance_EventLogAction_deny
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_Log) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType represents the /nokia-conf/configure/application-assurance/group/partition/gtp/gtp-filter/message-type YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType struct {
	DefaultAction E_NokiaTypesApplicationAssurance_PermitDenyAction                                                    `path:"default-action" module:"nokia-conf"`
	Entry         map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) NewEntry(EntryId uint32) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) GetEntry(EntryId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry struct to the
// list Entry of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) AppendEntry(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) GetDefaultAction() E_NokiaTypesApplicationAssurance_PermitDenyAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	return t.DefaultAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2 represents the /nokia-conf/configure/application-assurance/group/partition/gtp/gtp-filter/message-type-gtp-v2 YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2 struct {
	DefaultAction E_NokiaTypesApplicationAssurance_PermitDenyAction                                                         `path:"default-action" module:"nokia-conf"`
	Entry         map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) NewEntry(EntryId uint32) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) GetEntry(EntryId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry struct to the
// list Entry of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) AppendEntry(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) GetDefaultAction() E_NokiaTypesApplicationAssurance_PermitDenyAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	return t.DefaultAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry represents the /nokia-conf/configure/application-assurance/group/partition/gtp/gtp-filter/message-type-gtp-v2/entry YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry struct {
	Action             E_NokiaTypesApplicationAssurance_PermitDenyActionNoDefault                                                `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	EntryId            *uint32                                                                                                   `path:"entry-id" module:"nokia-conf"`
	Value              NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) IsYANGGoStruct() {
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) GetAction() E_NokiaTypesApplicationAssurance_PermitDenyActionNoDefault {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) GetValue() NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageTypeGtpV2_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry represents the /nokia-conf/configure/application-assurance/group/partition/gtp/gtp-filter/message-type/entry YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry struct {
	Action             E_NokiaTypesApplicationAssurance_PermitDenyActionNoDefault                                           `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	EntryId            *uint32                                                                                              `path:"entry-id" module:"nokia-conf"`
	Value              NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) IsYANGGoStruct() {
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) GetAction() E_NokiaTypesApplicationAssurance_PermitDenyActionNoDefault {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) GetValue() NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_GtpFilter_MessageType_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Log represents the /nokia-conf/configure/application-assurance/group/partition/gtp/log YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Log struct {
	Action   E_NokiaTypesApplicationAssurance_EventLogAction `path:"action" module:"nokia-conf"`
	EventLog *string                                         `path:"event-log" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Log implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Log) IsYANGGoStruct() {}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Log) GetAction() E_NokiaTypesApplicationAssurance_EventLogAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesApplicationAssurance_EventLogAction_deny
	}
	return t.Action
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Log) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Log
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Log) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesApplicationAssurance_EventLogAction_deny
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Log) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Log"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Log) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Log) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Log.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Gtp_Log) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList represents the /nokia-conf/configure/application-assurance/group/partition/ip-prefix-list YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList struct {
	ApplyGroups        []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                  `path:"description" module:"nokia-conf"`
	IpPrefixListName   *string                                                                                  `path:"ip-prefix-list-name" module:"nokia-conf"`
	Prefix             map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList) NewPrefix(IpPrefix string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix{
		IpPrefix: &IpPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList) GetOrCreatePrefix(IpPrefix string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix {

	key := IpPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList) GetPrefix(IpPrefix string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList) DeletePrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix struct to the
// list Prefix of NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList) AppendPrefix(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpPrefixListName retrieves the value of the leaf IpPrefixListName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixListName is set, it can
// safely use t.GetIpPrefixListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList) GetIpPrefixListName() string {
	if t == nil || t.IpPrefixListName == nil {
		return ""
	}
	return *t.IpPrefixListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefixListName == nil {
		return nil, fmt.Errorf("nil value for key IpPrefixListName")
	}

	return map[string]interface{}{
		"ip-prefix-list-name": *t.IpPrefixListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix represents the /nokia-conf/configure/application-assurance/group/partition/ip-prefix-list/prefix YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpPrefix           *string  `path:"ip-prefix" module:"nokia-conf"`
	Name               *string  `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_IpPrefixList_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy represents the /nokia-conf/configure/application-assurance/group/partition/policy YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy struct {
	AppFilter                    *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter                 `path:"app-filter" module:"nokia-conf"`
	AppGroup                     map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup       `path:"app-group" module:"nokia-conf"`
	AppProfile                   map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile     `path:"app-profile" module:"nokia-conf"`
	AppQosPolicy                 *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy              `path:"app-qos-policy" module:"nokia-conf"`
	AppServiceOptions            *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions         `path:"app-service-options" module:"nokia-conf"`
	Application                  map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application    `path:"application" module:"nokia-conf"`
	ApplyGroups                  []string                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude           []string                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	ChargingGroup                map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup  `path:"charging-group" module:"nokia-conf"`
	CustomProtocol               map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol `path:"custom-protocol" module:"nokia-conf"`
	DefaultChargingGroup         *string                                                                                    `path:"default-charging-group" module:"nokia-conf"`
	DefaultTetheredChargingGroup *string                                                                                    `path:"default-tethered-charging-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) IsYANGGoStruct() {}

// NewAppGroup creates a new entry in the AppGroup list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) NewAppGroup(ApplicationGroupName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AppGroup == nil {
		t.AppGroup = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup)
	}

	key := ApplicationGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AppGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AppGroup", key)
	}

	t.AppGroup[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup{
		ApplicationGroupName: &ApplicationGroupName,
	}

	return t.AppGroup[key], nil
}

// RenameAppGroup renames an entry in the list AppGroup within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) RenameAppGroup(oldK, newK string) error {
	if _, ok := t.AppGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AppGroup", newK)
	}

	e, ok := t.AppGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AppGroup", oldK)
	}
	e.ApplicationGroupName = &newK

	t.AppGroup[newK] = e
	delete(t.AppGroup, oldK)
	return nil
}

// GetOrCreateAppGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) GetOrCreateAppGroup(ApplicationGroupName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup {

	key := ApplicationGroupName

	if v, ok := t.AppGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAppGroup(ApplicationGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAppGroup got unexpected error: %v", err))
	}
	return v
}

// GetAppGroup retrieves the value with the specified key from
// the AppGroup map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) GetAppGroup(ApplicationGroupName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup {

	if t == nil {
		return nil
	}

	key := ApplicationGroupName

	if lm, ok := t.AppGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAppGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) DeleteAppGroup(ApplicationGroupName string) {
	key := ApplicationGroupName

	delete(t.AppGroup, key)
}

// AppendAppGroup appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup struct to the
// list AppGroup of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) AppendAppGroup(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup) error {
	if v.ApplicationGroupName == nil {
		return fmt.Errorf("invalid nil key received for ApplicationGroupName")
	}

	key := *v.ApplicationGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AppGroup == nil {
		t.AppGroup = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup)
	}

	if _, ok := t.AppGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AppGroup %v", key)
	}

	t.AppGroup[key] = v
	return nil
}

// NewAppProfile creates a new entry in the AppProfile list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) NewAppProfile(AppProfileName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AppProfile == nil {
		t.AppProfile = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile)
	}

	key := AppProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AppProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AppProfile", key)
	}

	t.AppProfile[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile{
		AppProfileName: &AppProfileName,
	}

	return t.AppProfile[key], nil
}

// RenameAppProfile renames an entry in the list AppProfile within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) RenameAppProfile(oldK, newK string) error {
	if _, ok := t.AppProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in AppProfile", newK)
	}

	e, ok := t.AppProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AppProfile", oldK)
	}
	e.AppProfileName = &newK

	t.AppProfile[newK] = e
	delete(t.AppProfile, oldK)
	return nil
}

// GetOrCreateAppProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) GetOrCreateAppProfile(AppProfileName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile {

	key := AppProfileName

	if v, ok := t.AppProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAppProfile(AppProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAppProfile got unexpected error: %v", err))
	}
	return v
}

// GetAppProfile retrieves the value with the specified key from
// the AppProfile map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) GetAppProfile(AppProfileName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile {

	if t == nil {
		return nil
	}

	key := AppProfileName

	if lm, ok := t.AppProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteAppProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) DeleteAppProfile(AppProfileName string) {
	key := AppProfileName

	delete(t.AppProfile, key)
}

// AppendAppProfile appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile struct to the
// list AppProfile of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) AppendAppProfile(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) error {
	if v.AppProfileName == nil {
		return fmt.Errorf("invalid nil key received for AppProfileName")
	}

	key := *v.AppProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AppProfile == nil {
		t.AppProfile = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile)
	}

	if _, ok := t.AppProfile[key]; ok {
		return fmt.Errorf("duplicate key for list AppProfile %v", key)
	}

	t.AppProfile[key] = v
	return nil
}

// NewApplication creates a new entry in the Application list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) NewApplication(ApplicationName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application)
	}

	key := ApplicationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Application[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Application", key)
	}

	t.Application[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application{
		ApplicationName: &ApplicationName,
	}

	return t.Application[key], nil
}

// RenameApplication renames an entry in the list Application within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) RenameApplication(oldK, newK string) error {
	if _, ok := t.Application[newK]; ok {
		return fmt.Errorf("key %v already exists in Application", newK)
	}

	e, ok := t.Application[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Application", oldK)
	}
	e.ApplicationName = &newK

	t.Application[newK] = e
	delete(t.Application, oldK)
	return nil
}

// GetOrCreateApplication retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) GetOrCreateApplication(ApplicationName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application {

	key := ApplicationName

	if v, ok := t.Application[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewApplication(ApplicationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateApplication got unexpected error: %v", err))
	}
	return v
}

// GetApplication retrieves the value with the specified key from
// the Application map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) GetApplication(ApplicationName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application {

	if t == nil {
		return nil
	}

	key := ApplicationName

	if lm, ok := t.Application[key]; ok {
		return lm
	}
	return nil
}

// DeleteApplication deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) DeleteApplication(ApplicationName string) {
	key := ApplicationName

	delete(t.Application, key)
}

// AppendApplication appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application struct to the
// list Application of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) AppendApplication(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application) error {
	if v.ApplicationName == nil {
		return fmt.Errorf("invalid nil key received for ApplicationName")
	}

	key := *v.ApplicationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application)
	}

	if _, ok := t.Application[key]; ok {
		return fmt.Errorf("duplicate key for list Application %v", key)
	}

	t.Application[key] = v
	return nil
}

// NewChargingGroup creates a new entry in the ChargingGroup list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) NewChargingGroup(ChargingGroupName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChargingGroup == nil {
		t.ChargingGroup = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup)
	}

	key := ChargingGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ChargingGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ChargingGroup", key)
	}

	t.ChargingGroup[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup{
		ChargingGroupName: &ChargingGroupName,
	}

	return t.ChargingGroup[key], nil
}

// RenameChargingGroup renames an entry in the list ChargingGroup within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) RenameChargingGroup(oldK, newK string) error {
	if _, ok := t.ChargingGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ChargingGroup", newK)
	}

	e, ok := t.ChargingGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ChargingGroup", oldK)
	}
	e.ChargingGroupName = &newK

	t.ChargingGroup[newK] = e
	delete(t.ChargingGroup, oldK)
	return nil
}

// GetOrCreateChargingGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) GetOrCreateChargingGroup(ChargingGroupName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup {

	key := ChargingGroupName

	if v, ok := t.ChargingGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChargingGroup(ChargingGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChargingGroup got unexpected error: %v", err))
	}
	return v
}

// GetChargingGroup retrieves the value with the specified key from
// the ChargingGroup map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) GetChargingGroup(ChargingGroupName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup {

	if t == nil {
		return nil
	}

	key := ChargingGroupName

	if lm, ok := t.ChargingGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteChargingGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) DeleteChargingGroup(ChargingGroupName string) {
	key := ChargingGroupName

	delete(t.ChargingGroup, key)
}

// AppendChargingGroup appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup struct to the
// list ChargingGroup of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) AppendChargingGroup(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) error {
	if v.ChargingGroupName == nil {
		return fmt.Errorf("invalid nil key received for ChargingGroupName")
	}

	key := *v.ChargingGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChargingGroup == nil {
		t.ChargingGroup = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup)
	}

	if _, ok := t.ChargingGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ChargingGroup %v", key)
	}

	t.ChargingGroup[key] = v
	return nil
}

// NewCustomProtocol creates a new entry in the CustomProtocol list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) NewCustomProtocol(CustomProtocolId string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CustomProtocol == nil {
		t.CustomProtocol = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol)
	}

	key := CustomProtocolId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CustomProtocol[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CustomProtocol", key)
	}

	t.CustomProtocol[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol{
		CustomProtocolId: &CustomProtocolId,
	}

	return t.CustomProtocol[key], nil
}

// RenameCustomProtocol renames an entry in the list CustomProtocol within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) RenameCustomProtocol(oldK, newK string) error {
	if _, ok := t.CustomProtocol[newK]; ok {
		return fmt.Errorf("key %v already exists in CustomProtocol", newK)
	}

	e, ok := t.CustomProtocol[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CustomProtocol", oldK)
	}
	e.CustomProtocolId = &newK

	t.CustomProtocol[newK] = e
	delete(t.CustomProtocol, oldK)
	return nil
}

// GetOrCreateCustomProtocol retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) GetOrCreateCustomProtocol(CustomProtocolId string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol {

	key := CustomProtocolId

	if v, ok := t.CustomProtocol[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCustomProtocol(CustomProtocolId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCustomProtocol got unexpected error: %v", err))
	}
	return v
}

// GetCustomProtocol retrieves the value with the specified key from
// the CustomProtocol map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) GetCustomProtocol(CustomProtocolId string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol {

	if t == nil {
		return nil
	}

	key := CustomProtocolId

	if lm, ok := t.CustomProtocol[key]; ok {
		return lm
	}
	return nil
}

// DeleteCustomProtocol deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) DeleteCustomProtocol(CustomProtocolId string) {
	key := CustomProtocolId

	delete(t.CustomProtocol, key)
}

// AppendCustomProtocol appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol struct to the
// list CustomProtocol of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) AppendCustomProtocol(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) error {
	if v.CustomProtocolId == nil {
		return fmt.Errorf("invalid nil key received for CustomProtocolId")
	}

	key := *v.CustomProtocolId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CustomProtocol == nil {
		t.CustomProtocol = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol)
	}

	if _, ok := t.CustomProtocol[key]; ok {
		return fmt.Errorf("duplicate key for list CustomProtocol %v", key)
	}

	t.CustomProtocol[key] = v
	return nil
}

// GetOrCreateAppFilter retrieves the value of the AppFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) GetOrCreateAppFilter() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter {
	if t.AppFilter != nil {
		return t.AppFilter
	}
	t.AppFilter = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter{}
	return t.AppFilter
}

// GetOrCreateAppQosPolicy retrieves the value of the AppQosPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) GetOrCreateAppQosPolicy() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy {
	if t.AppQosPolicy != nil {
		return t.AppQosPolicy
	}
	t.AppQosPolicy = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy{}
	return t.AppQosPolicy
}

// GetOrCreateAppServiceOptions retrieves the value of the AppServiceOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) GetOrCreateAppServiceOptions() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions {
	if t.AppServiceOptions != nil {
		return t.AppServiceOptions
	}
	t.AppServiceOptions = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions{}
	return t.AppServiceOptions
}

// GetAppFilter returns the value of the AppFilter struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If the receiver or the field AppFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) GetAppFilter() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter {
	if t != nil && t.AppFilter != nil {
		return t.AppFilter
	}
	return nil
}

// GetAppQosPolicy returns the value of the AppQosPolicy struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If the receiver or the field AppQosPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) GetAppQosPolicy() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy {
	if t != nil && t.AppQosPolicy != nil {
		return t.AppQosPolicy
	}
	return nil
}

// GetAppServiceOptions returns the value of the AppServiceOptions struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy. If the receiver or the field AppServiceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) GetAppServiceOptions() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions {
	if t != nil && t.AppServiceOptions != nil {
		return t.AppServiceOptions
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDefaultChargingGroup retrieves the value of the leaf DefaultChargingGroup from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultChargingGroup is set, it can
// safely use t.GetDefaultChargingGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultChargingGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) GetDefaultChargingGroup() string {
	if t == nil || t.DefaultChargingGroup == nil {
		return ""
	}
	return *t.DefaultChargingGroup
}

// GetDefaultTetheredChargingGroup retrieves the value of the leaf DefaultTetheredChargingGroup from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultTetheredChargingGroup is set, it can
// safely use t.GetDefaultTetheredChargingGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultTetheredChargingGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) GetDefaultTetheredChargingGroup() string {
	if t == nil || t.DefaultTetheredChargingGroup == nil {
		return ""
	}
	return *t.DefaultTetheredChargingGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AppFilter.PopulateDefaults()
	t.AppQosPolicy.PopulateDefaults()
	t.AppServiceOptions.PopulateDefaults()
	for _, e := range t.AppGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.AppProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.Application {
		e.PopulateDefaults()
	}
	for _, e := range t.ChargingGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.CustomProtocol {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride represents the /nokia-conf/configure/application-assurance/group/partition/policy-override YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride struct {
	AaSub *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub `path:"aa-sub" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride) IsYANGGoStruct() {}

// GetOrCreateAaSub retrieves the value of the AaSub field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride) GetOrCreateAaSub() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub {
	if t.AaSub != nil {
		return t.AaSub
	}
	t.AaSub = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub{}
	return t.AaSub
}

// GetAaSub returns the value of the AaSub struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride. If the receiver or the field AaSub is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride) GetAaSub() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub {
	if t != nil && t.AaSub != nil {
		return t.AaSub
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AaSub.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub represents the /nokia-conf/configure/application-assurance/group/partition/policy-override/aa-sub YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub struct {
	Sap      map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap      `path:"sap" module:"nokia-conf"`
	SpokeSdp map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
	Transit  map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit  `path:"transit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) IsYANGGoStruct() {
}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) NewSap(SapId string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) GetOrCreateSap(SapId string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) GetSap(SapId string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap struct to the
// list Sap of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) AppendSap(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) AppendSpokeSdp(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// NewTransit creates a new entry in the Transit list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) NewTransit(TransitSubName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Transit == nil {
		t.Transit = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit)
	}

	key := TransitSubName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Transit[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Transit", key)
	}

	t.Transit[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit{
		TransitSubName: &TransitSubName,
	}

	return t.Transit[key], nil
}

// RenameTransit renames an entry in the list Transit within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) RenameTransit(oldK, newK string) error {
	if _, ok := t.Transit[newK]; ok {
		return fmt.Errorf("key %v already exists in Transit", newK)
	}

	e, ok := t.Transit[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Transit", oldK)
	}
	e.TransitSubName = &newK

	t.Transit[newK] = e
	delete(t.Transit, oldK)
	return nil
}

// GetOrCreateTransit retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) GetOrCreateTransit(TransitSubName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit {

	key := TransitSubName

	if v, ok := t.Transit[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTransit(TransitSubName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTransit got unexpected error: %v", err))
	}
	return v
}

// GetTransit retrieves the value with the specified key from
// the Transit map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) GetTransit(TransitSubName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit {

	if t == nil {
		return nil
	}

	key := TransitSubName

	if lm, ok := t.Transit[key]; ok {
		return lm
	}
	return nil
}

// DeleteTransit deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) DeleteTransit(TransitSubName string) {
	key := TransitSubName

	delete(t.Transit, key)
}

// AppendTransit appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit struct to the
// list Transit of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) AppendTransit(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) error {
	if v.TransitSubName == nil {
		return fmt.Errorf("invalid nil key received for TransitSubName")
	}

	key := *v.TransitSubName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Transit == nil {
		t.Transit = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit)
	}

	if _, ok := t.Transit[key]; ok {
		return fmt.Errorf("duplicate key for list Transit %v", key)
	}

	t.Transit[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
	for _, e := range t.Transit {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap represents the /nokia-conf/configure/application-assurance/group/partition/policy-override/aa-sub/sap YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap struct {
	ApplyGroups        []string                                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Characteristic     map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic `path:"characteristic" module:"nokia-conf"`
	SapId              *string                                                                                                      `path:"sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) IsYANGGoStruct() {
}

// NewCharacteristic creates a new entry in the Characteristic list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) NewCharacteristic(CharacteristicName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic)
	}

	key := CharacteristicName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Characteristic[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Characteristic", key)
	}

	t.Characteristic[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic{
		CharacteristicName: &CharacteristicName,
	}

	return t.Characteristic[key], nil
}

// RenameCharacteristic renames an entry in the list Characteristic within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) RenameCharacteristic(oldK, newK string) error {
	if _, ok := t.Characteristic[newK]; ok {
		return fmt.Errorf("key %v already exists in Characteristic", newK)
	}

	e, ok := t.Characteristic[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Characteristic", oldK)
	}
	e.CharacteristicName = &newK

	t.Characteristic[newK] = e
	delete(t.Characteristic, oldK)
	return nil
}

// GetOrCreateCharacteristic retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) GetOrCreateCharacteristic(CharacteristicName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic {

	key := CharacteristicName

	if v, ok := t.Characteristic[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCharacteristic(CharacteristicName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCharacteristic got unexpected error: %v", err))
	}
	return v
}

// GetCharacteristic retrieves the value with the specified key from
// the Characteristic map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) GetCharacteristic(CharacteristicName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic {

	if t == nil {
		return nil
	}

	key := CharacteristicName

	if lm, ok := t.Characteristic[key]; ok {
		return lm
	}
	return nil
}

// DeleteCharacteristic deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) DeleteCharacteristic(CharacteristicName string) {
	key := CharacteristicName

	delete(t.Characteristic, key)
}

// AppendCharacteristic appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic struct to the
// list Characteristic of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) AppendCharacteristic(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) error {
	if v.CharacteristicName == nil {
		return fmt.Errorf("invalid nil key received for CharacteristicName")
	}

	key := *v.CharacteristicName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic)
	}

	if _, ok := t.Characteristic[key]; ok {
		return fmt.Errorf("duplicate key for list Characteristic %v", key)
	}

	t.Characteristic[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Characteristic {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic represents the /nokia-conf/configure/application-assurance/group/partition/policy-override/aa-sub/sap/characteristic YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CharacteristicName *string  `path:"characteristic-name" module:"nokia-conf"`
	Value              *string  `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCharacteristicName retrieves the value of the leaf CharacteristicName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CharacteristicName is set, it can
// safely use t.GetCharacteristicName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CharacteristicName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) GetCharacteristicName() string {
	if t == nil || t.CharacteristicName == nil {
		return ""
	}
	return *t.CharacteristicName
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CharacteristicName == nil {
		return nil, fmt.Errorf("nil value for key CharacteristicName")
	}

	return map[string]interface{}{
		"characteristic-name": *t.CharacteristicName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Sap_Characteristic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp represents the /nokia-conf/configure/application-assurance/group/partition/policy-override/aa-sub/spoke-sdp YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp struct {
	ApplyGroups        []string                                                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Characteristic     map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic `path:"characteristic" module:"nokia-conf"`
	SdpBindId          *string                                                                                                           `path:"sdp-bind-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) IsYANGGoStruct() {
}

// NewCharacteristic creates a new entry in the Characteristic list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) NewCharacteristic(CharacteristicName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic)
	}

	key := CharacteristicName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Characteristic[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Characteristic", key)
	}

	t.Characteristic[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic{
		CharacteristicName: &CharacteristicName,
	}

	return t.Characteristic[key], nil
}

// RenameCharacteristic renames an entry in the list Characteristic within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) RenameCharacteristic(oldK, newK string) error {
	if _, ok := t.Characteristic[newK]; ok {
		return fmt.Errorf("key %v already exists in Characteristic", newK)
	}

	e, ok := t.Characteristic[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Characteristic", oldK)
	}
	e.CharacteristicName = &newK

	t.Characteristic[newK] = e
	delete(t.Characteristic, oldK)
	return nil
}

// GetOrCreateCharacteristic retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) GetOrCreateCharacteristic(CharacteristicName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic {

	key := CharacteristicName

	if v, ok := t.Characteristic[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCharacteristic(CharacteristicName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCharacteristic got unexpected error: %v", err))
	}
	return v
}

// GetCharacteristic retrieves the value with the specified key from
// the Characteristic map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) GetCharacteristic(CharacteristicName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic {

	if t == nil {
		return nil
	}

	key := CharacteristicName

	if lm, ok := t.Characteristic[key]; ok {
		return lm
	}
	return nil
}

// DeleteCharacteristic deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) DeleteCharacteristic(CharacteristicName string) {
	key := CharacteristicName

	delete(t.Characteristic, key)
}

// AppendCharacteristic appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic struct to the
// list Characteristic of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) AppendCharacteristic(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) error {
	if v.CharacteristicName == nil {
		return fmt.Errorf("invalid nil key received for CharacteristicName")
	}

	key := *v.CharacteristicName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic)
	}

	if _, ok := t.Characteristic[key]; ok {
		return fmt.Errorf("duplicate key for list Characteristic %v", key)
	}

	t.Characteristic[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Characteristic {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic represents the /nokia-conf/configure/application-assurance/group/partition/policy-override/aa-sub/spoke-sdp/characteristic YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CharacteristicName *string  `path:"characteristic-name" module:"nokia-conf"`
	Value              *string  `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCharacteristicName retrieves the value of the leaf CharacteristicName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CharacteristicName is set, it can
// safely use t.GetCharacteristicName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CharacteristicName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) GetCharacteristicName() string {
	if t == nil || t.CharacteristicName == nil {
		return ""
	}
	return *t.CharacteristicName
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CharacteristicName == nil {
		return nil, fmt.Errorf("nil value for key CharacteristicName")
	}

	return map[string]interface{}{
		"characteristic-name": *t.CharacteristicName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_SpokeSdp_Characteristic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit represents the /nokia-conf/configure/application-assurance/group/partition/policy-override/aa-sub/transit YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit struct {
	ApplyGroups        []string                                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Characteristic     map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic `path:"characteristic" module:"nokia-conf"`
	TransitSubName     *string                                                                                                          `path:"transit-sub-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) IsYANGGoStruct() {
}

// NewCharacteristic creates a new entry in the Characteristic list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) NewCharacteristic(CharacteristicName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic)
	}

	key := CharacteristicName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Characteristic[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Characteristic", key)
	}

	t.Characteristic[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic{
		CharacteristicName: &CharacteristicName,
	}

	return t.Characteristic[key], nil
}

// RenameCharacteristic renames an entry in the list Characteristic within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) RenameCharacteristic(oldK, newK string) error {
	if _, ok := t.Characteristic[newK]; ok {
		return fmt.Errorf("key %v already exists in Characteristic", newK)
	}

	e, ok := t.Characteristic[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Characteristic", oldK)
	}
	e.CharacteristicName = &newK

	t.Characteristic[newK] = e
	delete(t.Characteristic, oldK)
	return nil
}

// GetOrCreateCharacteristic retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) GetOrCreateCharacteristic(CharacteristicName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic {

	key := CharacteristicName

	if v, ok := t.Characteristic[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCharacteristic(CharacteristicName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCharacteristic got unexpected error: %v", err))
	}
	return v
}

// GetCharacteristic retrieves the value with the specified key from
// the Characteristic map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) GetCharacteristic(CharacteristicName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic {

	if t == nil {
		return nil
	}

	key := CharacteristicName

	if lm, ok := t.Characteristic[key]; ok {
		return lm
	}
	return nil
}

// DeleteCharacteristic deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) DeleteCharacteristic(CharacteristicName string) {
	key := CharacteristicName

	delete(t.Characteristic, key)
}

// AppendCharacteristic appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic struct to the
// list Characteristic of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) AppendCharacteristic(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) error {
	if v.CharacteristicName == nil {
		return fmt.Errorf("invalid nil key received for CharacteristicName")
	}

	key := *v.CharacteristicName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic)
	}

	if _, ok := t.Characteristic[key]; ok {
		return fmt.Errorf("duplicate key for list Characteristic %v", key)
	}

	t.Characteristic[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetTransitSubName retrieves the value of the leaf TransitSubName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitSubName is set, it can
// safely use t.GetTransitSubName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitSubName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) GetTransitSubName() string {
	if t == nil || t.TransitSubName == nil {
		return ""
	}
	return *t.TransitSubName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Characteristic {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TransitSubName == nil {
		return nil, fmt.Errorf("nil value for key TransitSubName")
	}

	return map[string]interface{}{
		"transit-sub-name": *t.TransitSubName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic represents the /nokia-conf/configure/application-assurance/group/partition/policy-override/aa-sub/transit/characteristic YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CharacteristicName *string  `path:"characteristic-name" module:"nokia-conf"`
	Value              *string  `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCharacteristicName retrieves the value of the leaf CharacteristicName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CharacteristicName is set, it can
// safely use t.GetCharacteristicName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CharacteristicName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) GetCharacteristicName() string {
	if t == nil || t.CharacteristicName == nil {
		return ""
	}
	return *t.CharacteristicName
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CharacteristicName == nil {
		return nil, fmt.Errorf("nil value for key CharacteristicName")
	}

	return map[string]interface{}{
		"characteristic-name": *t.CharacteristicName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PolicyOverride_AaSub_Transit_Characteristic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter struct {
	Entry map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter) NewEntry(EntryId uint32) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter) GetEntry(EntryId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry struct to the
// list Entry of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter) AppendEntry(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry struct {
	AdminState           E_NokiaTypesSros_AdminState                                                                            `path:"admin-state" module:"nokia-conf"`
	Application          *string                                                                                                `path:"application" module:"nokia-conf"`
	ApplyGroups          []string                                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Description          *string                                                                                                `path:"description" module:"nokia-conf"`
	EntryId              *uint32                                                                                                `path:"entry-id" module:"nokia-conf"`
	Expression           map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression `path:"expression" module:"nokia-conf"`
	FlowSetupDirection   E_NokiaTypesApplicationAssurance_TrafficDirection                                                      `path:"flow-setup-direction" module:"nokia-conf"`
	HttpMatchAllRequests *bool                                                                                                  `path:"http-match-all-requests" module:"nokia-conf"`
	HttpPort             *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort              `path:"http-port" module:"nokia-conf"`
	IpProtocol           *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol            `path:"ip-protocol" module:"nokia-conf"`
	NetworkAddress       *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress        `path:"network-address" module:"nokia-conf"`
	Protocol             *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol              `path:"protocol" module:"nokia-conf"`
	ServerAddress        *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress         `path:"server-address" module:"nokia-conf"`
	ServerPort           *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort            `path:"server-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) IsYANGGoStruct() {
}

// NewExpression creates a new entry in the Expression list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) NewExpression(ExprIndex uint32) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Expression == nil {
		t.Expression = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression)
	}

	key := ExprIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Expression[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Expression", key)
	}

	t.Expression[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression{
		ExprIndex: &ExprIndex,
	}

	return t.Expression[key], nil
}

// RenameExpression renames an entry in the list Expression within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) RenameExpression(oldK, newK uint32) error {
	if _, ok := t.Expression[newK]; ok {
		return fmt.Errorf("key %v already exists in Expression", newK)
	}

	e, ok := t.Expression[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Expression", oldK)
	}
	e.ExprIndex = &newK

	t.Expression[newK] = e
	delete(t.Expression, oldK)
	return nil
}

// GetOrCreateExpression retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetOrCreateExpression(ExprIndex uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression {

	key := ExprIndex

	if v, ok := t.Expression[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExpression(ExprIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExpression got unexpected error: %v", err))
	}
	return v
}

// GetExpression retrieves the value with the specified key from
// the Expression map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetExpression(ExprIndex uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression {

	if t == nil {
		return nil
	}

	key := ExprIndex

	if lm, ok := t.Expression[key]; ok {
		return lm
	}
	return nil
}

// DeleteExpression deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) DeleteExpression(ExprIndex uint32) {
	key := ExprIndex

	delete(t.Expression, key)
}

// AppendExpression appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression struct to the
// list Expression of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) AppendExpression(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) error {
	if v.ExprIndex == nil {
		return fmt.Errorf("invalid nil key received for ExprIndex")
	}

	key := *v.ExprIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Expression == nil {
		t.Expression = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression)
	}

	if _, ok := t.Expression[key]; ok {
		return fmt.Errorf("duplicate key for list Expression %v", key)
	}

	t.Expression[key] = v
	return nil
}

// GetOrCreateHttpPort retrieves the value of the HttpPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetOrCreateHttpPort() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort {
	if t.HttpPort != nil {
		return t.HttpPort
	}
	t.HttpPort = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort{}
	return t.HttpPort
}

// GetOrCreateIpProtocol retrieves the value of the IpProtocol field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetOrCreateIpProtocol() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol {
	if t.IpProtocol != nil {
		return t.IpProtocol
	}
	t.IpProtocol = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol{}
	return t.IpProtocol
}

// GetOrCreateNetworkAddress retrieves the value of the NetworkAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetOrCreateNetworkAddress() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress {
	if t.NetworkAddress != nil {
		return t.NetworkAddress
	}
	t.NetworkAddress = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress{}
	return t.NetworkAddress
}

// GetOrCreateProtocol retrieves the value of the Protocol field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetOrCreateProtocol() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol {
	if t.Protocol != nil {
		return t.Protocol
	}
	t.Protocol = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol{}
	return t.Protocol
}

// GetOrCreateServerAddress retrieves the value of the ServerAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetOrCreateServerAddress() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress {
	if t.ServerAddress != nil {
		return t.ServerAddress
	}
	t.ServerAddress = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress{}
	return t.ServerAddress
}

// GetOrCreateServerPort retrieves the value of the ServerPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetOrCreateServerPort() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort {
	if t.ServerPort != nil {
		return t.ServerPort
	}
	t.ServerPort = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort{}
	return t.ServerPort
}

// GetHttpPort returns the value of the HttpPort struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry. If the receiver or the field HttpPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetHttpPort() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort {
	if t != nil && t.HttpPort != nil {
		return t.HttpPort
	}
	return nil
}

// GetIpProtocol returns the value of the IpProtocol struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry. If the receiver or the field IpProtocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetIpProtocol() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol {
	if t != nil && t.IpProtocol != nil {
		return t.IpProtocol
	}
	return nil
}

// GetNetworkAddress returns the value of the NetworkAddress struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry. If the receiver or the field NetworkAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetNetworkAddress() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress {
	if t != nil && t.NetworkAddress != nil {
		return t.NetworkAddress
	}
	return nil
}

// GetProtocol returns the value of the Protocol struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry. If the receiver or the field Protocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetProtocol() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol {
	if t != nil && t.Protocol != nil {
		return t.Protocol
	}
	return nil
}

// GetServerAddress returns the value of the ServerAddress struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry. If the receiver or the field ServerAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetServerAddress() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress {
	if t != nil && t.ServerAddress != nil {
		return t.ServerAddress
	}
	return nil
}

// GetServerPort returns the value of the ServerPort struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry. If the receiver or the field ServerPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetServerPort() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort {
	if t != nil && t.ServerPort != nil {
		return t.ServerPort
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplication retrieves the value of the leaf Application from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Application is set, it can
// safely use t.GetApplication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Application == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetApplication() string {
	if t == nil || t.Application == nil {
		return ""
	}
	return *t.Application
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetFlowSetupDirection retrieves the value of the leaf FlowSetupDirection from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowSetupDirection is set, it can
// safely use t.GetFlowSetupDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowSetupDirection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetFlowSetupDirection() E_NokiaTypesApplicationAssurance_TrafficDirection {
	if t == nil || t.FlowSetupDirection == 0 {
		return NokiaTypesApplicationAssurance_TrafficDirection_both
	}
	return t.FlowSetupDirection
}

// GetHttpMatchAllRequests retrieves the value of the leaf HttpMatchAllRequests from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpMatchAllRequests is set, it can
// safely use t.GetHttpMatchAllRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpMatchAllRequests == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) GetHttpMatchAllRequests() bool {
	if t == nil || t.HttpMatchAllRequests == nil {
		return false
	}
	return *t.HttpMatchAllRequests
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.FlowSetupDirection == 0 {
		t.FlowSetupDirection = NokiaTypesApplicationAssurance_TrafficDirection_both
	}
	if t.HttpMatchAllRequests == nil {
		var v bool = false
		t.HttpMatchAllRequests = &v
	}
	t.HttpPort.PopulateDefaults()
	t.IpProtocol.PopulateDefaults()
	t.NetworkAddress.PopulateDefaults()
	t.Protocol.PopulateDefaults()
	t.ServerAddress.PopulateDefaults()
	t.ServerPort.PopulateDefaults()
	for _, e := range t.Expression {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/expression YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression struct {
	ApplyGroups        []string                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Eq                 *string                                        `path:"eq" module:"nokia-conf"`
	ExprIndex          *uint32                                        `path:"expr-index" module:"nokia-conf"`
	Neq                *string                                        `path:"neq" module:"nokia-conf"`
	Type               E_NokiaTypesApplicationAssurance_ExprSubString `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetExprIndex retrieves the value of the leaf ExprIndex from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExprIndex is set, it can
// safely use t.GetExprIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExprIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) GetExprIndex() uint32 {
	if t == nil || t.ExprIndex == nil {
		return 0
	}
	return *t.ExprIndex
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) GetType() E_NokiaTypesApplicationAssurance_ExprSubString {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ExprIndex == nil {
		return nil, fmt.Errorf("nil value for key ExprIndex")
	}

	return map[string]interface{}{
		"expr-index": *t.ExprIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Expression) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/http-port YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort struct {
	Eq  *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq  `path:"eq" module:"nokia-conf"`
	Neq *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort) IsYANGGoStruct() {
}

// GetOrCreateEq retrieves the value of the Eq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort) GetOrCreateEq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq {
	if t.Eq != nil {
		return t.Eq
	}
	t.Eq = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq{}
	return t.Eq
}

// GetOrCreateNeq retrieves the value of the Neq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort) GetOrCreateNeq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq {
	if t.Neq != nil {
		return t.Neq
	}
	t.Neq = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq{}
	return t.Neq
}

// GetEq returns the value of the Eq struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort. If the receiver or the field Eq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort) GetEq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq {
	if t != nil && t.Eq != nil {
		return t.Eq
	}
	return nil
}

// GetNeq returns the value of the Neq struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort. If the receiver or the field Neq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort) GetNeq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq {
	if t != nil && t.Neq != nil {
		return t.Neq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Eq.PopulateDefaults()
	t.Neq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/http-port/eq YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq struct {
	PortList   *string `path:"port-list" module:"nokia-conf"`
	PortNumber *int32  `path:"port-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq) IsYANGGoStruct() {
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v int32 = 0
		t.PortNumber = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Eq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/http-port/neq YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq struct {
	PortList   *string `path:"port-list" module:"nokia-conf"`
	PortNumber *int32  `path:"port-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq) IsYANGGoStruct() {
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v int32 = 0
		t.PortNumber = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_HttpPort_Neq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/ip-protocol YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol struct {
	Eq  NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol_Eq_Union  `path:"eq" module:"nokia-conf"`
	Neq NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol_Neq_Union `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol) GetEq() NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol_Eq_Union {
	if t == nil || t.Eq == nil {
		return nil
	}
	return t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol) GetNeq() NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol_Neq_Union {
	if t == nil || t.Neq == nil {
		return nil
	}
	return t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_IpProtocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/network-address YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress struct {
	Eq  *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq  `path:"eq" module:"nokia-conf"`
	Neq *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress) IsYANGGoStruct() {
}

// GetOrCreateEq retrieves the value of the Eq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress) GetOrCreateEq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq {
	if t.Eq != nil {
		return t.Eq
	}
	t.Eq = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq{}
	return t.Eq
}

// GetOrCreateNeq retrieves the value of the Neq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress) GetOrCreateNeq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq {
	if t.Neq != nil {
		return t.Neq
	}
	t.Neq = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq{}
	return t.Neq
}

// GetEq returns the value of the Eq struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress. If the receiver or the field Eq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress) GetEq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq {
	if t != nil && t.Eq != nil {
		return t.Eq
	}
	return nil
}

// GetNeq returns the value of the Neq struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress. If the receiver or the field Neq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress) GetNeq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq {
	if t != nil && t.Neq != nil {
		return t.Neq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Eq.PopulateDefaults()
	t.Neq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/network-address/eq YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq struct {
	IpPrefix     *string `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Eq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/network-address/neq YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq struct {
	IpPrefix     *string `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_NetworkAddress_Neq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/protocol YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol struct {
	Eq  *string `path:"eq" module:"nokia-conf"`
	Neq *string `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_Protocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/server-address YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress struct {
	Eq  *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq  `path:"eq" module:"nokia-conf"`
	Neq *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress) IsYANGGoStruct() {
}

// GetOrCreateEq retrieves the value of the Eq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress) GetOrCreateEq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq {
	if t.Eq != nil {
		return t.Eq
	}
	t.Eq = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq{}
	return t.Eq
}

// GetOrCreateNeq retrieves the value of the Neq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress) GetOrCreateNeq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq {
	if t.Neq != nil {
		return t.Neq
	}
	t.Neq = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq{}
	return t.Neq
}

// GetEq returns the value of the Eq struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress. If the receiver or the field Eq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress) GetEq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq {
	if t != nil && t.Eq != nil {
		return t.Eq
	}
	return nil
}

// GetNeq returns the value of the Neq struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress. If the receiver or the field Neq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress) GetNeq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq {
	if t != nil && t.Neq != nil {
		return t.Neq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Eq.PopulateDefaults()
	t.Neq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/server-address/eq YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq struct {
	DnsIpCache   *string                                                                                                    `path:"dns-ip-cache" module:"nokia-conf"`
	IpPrefix     *string                                                                                                    `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string                                                                                                    `path:"ip-prefix-list" module:"nokia-conf"`
	MaskedIp     *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp `path:"masked-ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) IsYANGGoStruct() {
}

// GetOrCreateMaskedIp retrieves the value of the MaskedIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) GetOrCreateMaskedIp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp {
	if t.MaskedIp != nil {
		return t.MaskedIp
	}
	t.MaskedIp = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp{}
	return t.MaskedIp
}

// GetMaskedIp returns the value of the MaskedIp struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq. If the receiver or the field MaskedIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) GetMaskedIp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp {
	if t != nil && t.MaskedIp != nil {
		return t.MaskedIp
	}
	return nil
}

// GetDnsIpCache retrieves the value of the leaf DnsIpCache from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnsIpCache is set, it can
// safely use t.GetDnsIpCache() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnsIpCache == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) GetDnsIpCache() string {
	if t == nil || t.DnsIpCache == nil {
		return ""
	}
	return *t.DnsIpCache
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MaskedIp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/server-address/eq/masked-ip YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp struct {
	Address *string `path:"address" module:"nokia-conf"`
	Netmask *string `path:"netmask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetNetmask retrieves the value of the leaf Netmask from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Netmask is set, it can
// safely use t.GetNetmask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Netmask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp) GetNetmask() string {
	if t == nil || t.Netmask == nil {
		return ""
	}
	return *t.Netmask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Eq_MaskedIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/server-address/neq YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq struct {
	DnsIpCache   *string                                                                                                     `path:"dns-ip-cache" module:"nokia-conf"`
	IpPrefix     *string                                                                                                     `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string                                                                                                     `path:"ip-prefix-list" module:"nokia-conf"`
	MaskedIp     *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp `path:"masked-ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) IsYANGGoStruct() {
}

// GetOrCreateMaskedIp retrieves the value of the MaskedIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) GetOrCreateMaskedIp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp {
	if t.MaskedIp != nil {
		return t.MaskedIp
	}
	t.MaskedIp = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp{}
	return t.MaskedIp
}

// GetMaskedIp returns the value of the MaskedIp struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq. If the receiver or the field MaskedIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) GetMaskedIp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp {
	if t != nil && t.MaskedIp != nil {
		return t.MaskedIp
	}
	return nil
}

// GetDnsIpCache retrieves the value of the leaf DnsIpCache from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnsIpCache is set, it can
// safely use t.GetDnsIpCache() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnsIpCache == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) GetDnsIpCache() string {
	if t == nil || t.DnsIpCache == nil {
		return ""
	}
	return *t.DnsIpCache
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MaskedIp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/server-address/neq/masked-ip YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp struct {
	Address *string `path:"address" module:"nokia-conf"`
	Netmask *string `path:"netmask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetNetmask retrieves the value of the leaf Netmask from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Netmask is set, it can
// safely use t.GetNetmask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Netmask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp) GetNetmask() string {
	if t == nil || t.Netmask == nil {
		return ""
	}
	return *t.Netmask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerAddress_Neq_MaskedIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/server-port YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort struct {
	Eq  *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq  `path:"eq" module:"nokia-conf"`
	Gt  *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt  `path:"gt" module:"nokia-conf"`
	Lt  *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt  `path:"lt" module:"nokia-conf"`
	Neq *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) IsYANGGoStruct() {
}

// GetOrCreateEq retrieves the value of the Eq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) GetOrCreateEq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq {
	if t.Eq != nil {
		return t.Eq
	}
	t.Eq = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq{}
	return t.Eq
}

// GetOrCreateGt retrieves the value of the Gt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) GetOrCreateGt() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt {
	if t.Gt != nil {
		return t.Gt
	}
	t.Gt = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt{}
	return t.Gt
}

// GetOrCreateLt retrieves the value of the Lt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) GetOrCreateLt() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt {
	if t.Lt != nil {
		return t.Lt
	}
	t.Lt = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt{}
	return t.Lt
}

// GetOrCreateNeq retrieves the value of the Neq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) GetOrCreateNeq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq {
	if t.Neq != nil {
		return t.Neq
	}
	t.Neq = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq{}
	return t.Neq
}

// GetEq returns the value of the Eq struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort. If the receiver or the field Eq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) GetEq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq {
	if t != nil && t.Eq != nil {
		return t.Eq
	}
	return nil
}

// GetGt returns the value of the Gt struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort. If the receiver or the field Gt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) GetGt() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt {
	if t != nil && t.Gt != nil {
		return t.Gt
	}
	return nil
}

// GetLt returns the value of the Lt struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort. If the receiver or the field Lt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) GetLt() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt {
	if t != nil && t.Lt != nil {
		return t.Lt
	}
	return nil
}

// GetNeq returns the value of the Neq struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort. If the receiver or the field Neq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) GetNeq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq {
	if t != nil && t.Neq != nil {
		return t.Neq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Eq.PopulateDefaults()
	t.Gt.PopulateDefaults()
	t.Lt.PopulateDefaults()
	t.Neq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/server-port/eq YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq struct {
	FirstPacketPolicy E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_FirstPacketPolicy `path:"first-packet-policy" module:"nokia-conf"`
	PortList          *string                                                                                                           `path:"port-list" module:"nokia-conf"`
	PortNumber        *int32                                                                                                            `path:"port-number" module:"nokia-conf"`
	Range             *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range              `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) GetOrCreateRange() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) GetRange() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetFirstPacketPolicy retrieves the value of the leaf FirstPacketPolicy from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirstPacketPolicy is set, it can
// safely use t.GetFirstPacketPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirstPacketPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) GetFirstPacketPolicy() E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_FirstPacketPolicy {
	if t == nil || t.FirstPacketPolicy == 0 {
		return 0
	}
	return t.FirstPacketPolicy
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v int32 = 0
		t.PortNumber = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/server-port/eq/range YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 1
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v int32 = 1
		t.End = &v
	}
	if t.Start == nil {
		var v int32 = 0
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Eq_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/server-port/gt YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt struct {
	PortNumber *int32 `path:"port-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt) IsYANGGoStruct() {
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v int32 = 0
		t.PortNumber = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Gt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/server-port/lt YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt struct {
	PortNumber *int32 `path:"port-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt) IsYANGGoStruct() {
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v int32 = 0
		t.PortNumber = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Lt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/server-port/neq YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq struct {
	PortList   *string                                                                                               `path:"port-list" module:"nokia-conf"`
	PortNumber *int32                                                                                                `path:"port-number" module:"nokia-conf"`
	Range      *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq) GetOrCreateRange() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq) GetRange() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v int32 = 0
		t.PortNumber = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-filter/entry/server-port/neq/range YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 1
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v int32 = 1
		t.End = &v
	}
	if t.Start == nil {
		var v int32 = 0
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppFilter_Entry_ServerPort_Neq_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-group YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup struct {
	ApplicationGroupName *string  `path:"application-group-name" module:"nokia-conf"`
	ApplyGroups          []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string `path:"apply-groups-exclude" module:"nokia-conf"`
	ChargingGroup        *string  `path:"charging-group" module:"nokia-conf"`
	Description          *string  `path:"description" module:"nokia-conf"`
	ExportId             *uint32  `path:"export-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup) IsYANGGoStruct() {}

// GetApplicationGroupName retrieves the value of the leaf ApplicationGroupName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplicationGroupName is set, it can
// safely use t.GetApplicationGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplicationGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup) GetApplicationGroupName() string {
	if t == nil || t.ApplicationGroupName == nil {
		return ""
	}
	return *t.ApplicationGroupName
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetChargingGroup retrieves the value of the leaf ChargingGroup from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChargingGroup is set, it can
// safely use t.GetChargingGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChargingGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup) GetChargingGroup() string {
	if t == nil || t.ChargingGroup == nil {
		return ""
	}
	return *t.ChargingGroup
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportId retrieves the value of the leaf ExportId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportId is set, it can
// safely use t.GetExportId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup) GetExportId() uint32 {
	if t == nil || t.ExportId == nil {
		return 0
	}
	return *t.ExportId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ApplicationGroupName == nil {
		return nil, fmt.Errorf("nil value for key ApplicationGroupName")
	}

	return map[string]interface{}{
		"application-group-name": *t.ApplicationGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-profile YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile struct {
	AaSubSuppressible  *bool                                                                                                 `path:"aa-sub-suppressible" module:"nokia-conf"`
	AppProfileName     *string                                                                                               `path:"app-profile-name" module:"nokia-conf"`
	ApplyGroups        []string                                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	CapacityCost       *uint16                                                                                               `path:"capacity-cost" module:"nokia-conf"`
	Characteristic     map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic `path:"characteristic" module:"nokia-conf"`
	Description        *string                                                                                               `path:"description" module:"nokia-conf"`
	Divert             *bool                                                                                                 `path:"divert" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) IsYANGGoStruct() {}

// NewCharacteristic creates a new entry in the Characteristic list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) NewCharacteristic(CharacteristicName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic)
	}

	key := CharacteristicName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Characteristic[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Characteristic", key)
	}

	t.Characteristic[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic{
		CharacteristicName: &CharacteristicName,
	}

	return t.Characteristic[key], nil
}

// RenameCharacteristic renames an entry in the list Characteristic within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) RenameCharacteristic(oldK, newK string) error {
	if _, ok := t.Characteristic[newK]; ok {
		return fmt.Errorf("key %v already exists in Characteristic", newK)
	}

	e, ok := t.Characteristic[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Characteristic", oldK)
	}
	e.CharacteristicName = &newK

	t.Characteristic[newK] = e
	delete(t.Characteristic, oldK)
	return nil
}

// GetOrCreateCharacteristic retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) GetOrCreateCharacteristic(CharacteristicName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic {

	key := CharacteristicName

	if v, ok := t.Characteristic[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCharacteristic(CharacteristicName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCharacteristic got unexpected error: %v", err))
	}
	return v
}

// GetCharacteristic retrieves the value with the specified key from
// the Characteristic map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) GetCharacteristic(CharacteristicName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic {

	if t == nil {
		return nil
	}

	key := CharacteristicName

	if lm, ok := t.Characteristic[key]; ok {
		return lm
	}
	return nil
}

// DeleteCharacteristic deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) DeleteCharacteristic(CharacteristicName string) {
	key := CharacteristicName

	delete(t.Characteristic, key)
}

// AppendCharacteristic appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic struct to the
// list Characteristic of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) AppendCharacteristic(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) error {
	if v.CharacteristicName == nil {
		return fmt.Errorf("invalid nil key received for CharacteristicName")
	}

	key := *v.CharacteristicName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic)
	}

	if _, ok := t.Characteristic[key]; ok {
		return fmt.Errorf("duplicate key for list Characteristic %v", key)
	}

	t.Characteristic[key] = v
	return nil
}

// GetAaSubSuppressible retrieves the value of the leaf AaSubSuppressible from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AaSubSuppressible is set, it can
// safely use t.GetAaSubSuppressible() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AaSubSuppressible == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) GetAaSubSuppressible() bool {
	if t == nil || t.AaSubSuppressible == nil {
		return false
	}
	return *t.AaSubSuppressible
}

// GetAppProfileName retrieves the value of the leaf AppProfileName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfileName is set, it can
// safely use t.GetAppProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) GetAppProfileName() string {
	if t == nil || t.AppProfileName == nil {
		return ""
	}
	return *t.AppProfileName
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCapacityCost retrieves the value of the leaf CapacityCost from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CapacityCost is set, it can
// safely use t.GetCapacityCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CapacityCost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) GetCapacityCost() uint16 {
	if t == nil || t.CapacityCost == nil {
		return 1
	}
	return *t.CapacityCost
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDivert retrieves the value of the leaf Divert from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Divert is set, it can
// safely use t.GetDivert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Divert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) GetDivert() bool {
	if t == nil || t.Divert == nil {
		return false
	}
	return *t.Divert
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AaSubSuppressible == nil {
		var v bool = false
		t.AaSubSuppressible = &v
	}
	if t.CapacityCost == nil {
		var v uint16 = 1
		t.CapacityCost = &v
	}
	if t.Divert == nil {
		var v bool = false
		t.Divert = &v
	}
	for _, e := range t.Characteristic {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AppProfileName == nil {
		return nil, fmt.Errorf("nil value for key AppProfileName")
	}

	return map[string]interface{}{
		"app-profile-name": *t.AppProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-profile/characteristic YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CharacteristicName *string  `path:"characteristic-name" module:"nokia-conf"`
	Value              *string  `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCharacteristicName retrieves the value of the leaf CharacteristicName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CharacteristicName is set, it can
// safely use t.GetCharacteristicName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CharacteristicName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) GetCharacteristicName() string {
	if t == nil || t.CharacteristicName == nil {
		return ""
	}
	return *t.CharacteristicName
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CharacteristicName == nil {
		return nil, fmt.Errorf("nil value for key CharacteristicName")
	}

	return map[string]interface{}{
		"characteristic-name": *t.CharacteristicName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppProfile_Characteristic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy struct {
	Entry map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) NewEntry(EntryId uint32) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) GetEntry(EntryId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry struct to the
// list Entry of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) AppendEntry(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry struct {
	Action             *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action `path:"action" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                    `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                                                                    `path:"entry-id" module:"nokia-conf"`
	Match              *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match  `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) IsYANGGoStruct() {
}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) GetOrCreateAction() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) GetOrCreateMatch() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) GetAction() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) GetMatch() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/action YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action struct {
	AbandonTcpOptimization *bool                                                                                                            `path:"abandon-tcp-optimization" module:"nokia-conf"`
	ApplyGroups            []string                                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	BandwidthPolicer       *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer      `path:"bandwidth-policer" module:"nokia-conf"`
	DnsIpCache             *string                                                                                                          `path:"dns-ip-cache" module:"nokia-conf"`
	Drop                   *bool                                                                                                            `path:"drop" module:"nokia-conf"`
	ErrorDrop              *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop             `path:"error-drop" module:"nokia-conf" yangPresence:"true"`
	FlowCountLimitPolicer  *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer `path:"flow-count-limit-policer" module:"nokia-conf"`
	FlowSetupRatePolicer   *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer  `path:"flow-setup-rate-policer" module:"nokia-conf"`
	FragmentDrop           *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop          `path:"fragment-drop" module:"nokia-conf"`
	GtpFilter              *string                                                                                                          `path:"gtp-filter" module:"nokia-conf"`
	HttpEnrich             *string                                                                                                          `path:"http-enrich" module:"nokia-conf"`
	HttpErrorRedirect      *string                                                                                                          `path:"http-error-redirect" module:"nokia-conf"`
	HttpNotification       *string                                                                                                          `path:"http-notification" module:"nokia-conf"`
	HttpRedirect           *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect          `path:"http-redirect" module:"nokia-conf"`
	MirrorSource           *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource          `path:"mirror-source" module:"nokia-conf"`
	OverloadDrop           *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop          `path:"overload-drop" module:"nokia-conf" yangPresence:"true"`
	Remark                 *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark                `path:"remark" module:"nokia-conf"`
	SctpFilter             *string                                                                                                          `path:"sctp-filter" module:"nokia-conf"`
	SessionFilter          *string                                                                                                          `path:"session-filter" module:"nokia-conf"`
	TcpMssAdjust           *int32                                                                                                           `path:"tcp-mss-adjust" module:"nokia-conf"`
	TcpValidate            *string                                                                                                          `path:"tcp-validate" module:"nokia-conf"`
	TlsEnrich              *string                                                                                                          `path:"tls-enrich" module:"nokia-conf"`
	UrlFilter              *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter             `path:"url-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) IsYANGGoStruct() {
}

// GetOrCreateBandwidthPolicer retrieves the value of the BandwidthPolicer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOrCreateBandwidthPolicer() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer {
	if t.BandwidthPolicer != nil {
		return t.BandwidthPolicer
	}
	t.BandwidthPolicer = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer{}
	return t.BandwidthPolicer
}

// GetOrCreateErrorDrop retrieves the value of the ErrorDrop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOrCreateErrorDrop() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop {
	if t.ErrorDrop != nil {
		return t.ErrorDrop
	}
	t.ErrorDrop = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop{}
	return t.ErrorDrop
}

// GetOrCreateFlowCountLimitPolicer retrieves the value of the FlowCountLimitPolicer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOrCreateFlowCountLimitPolicer() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer {
	if t.FlowCountLimitPolicer != nil {
		return t.FlowCountLimitPolicer
	}
	t.FlowCountLimitPolicer = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer{}
	return t.FlowCountLimitPolicer
}

// GetOrCreateFlowSetupRatePolicer retrieves the value of the FlowSetupRatePolicer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOrCreateFlowSetupRatePolicer() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer {
	if t.FlowSetupRatePolicer != nil {
		return t.FlowSetupRatePolicer
	}
	t.FlowSetupRatePolicer = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer{}
	return t.FlowSetupRatePolicer
}

// GetOrCreateFragmentDrop retrieves the value of the FragmentDrop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOrCreateFragmentDrop() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop {
	if t.FragmentDrop != nil {
		return t.FragmentDrop
	}
	t.FragmentDrop = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop{}
	return t.FragmentDrop
}

// GetOrCreateHttpRedirect retrieves the value of the HttpRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOrCreateHttpRedirect() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect {
	if t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	t.HttpRedirect = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect{}
	return t.HttpRedirect
}

// GetOrCreateMirrorSource retrieves the value of the MirrorSource field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOrCreateMirrorSource() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource {
	if t.MirrorSource != nil {
		return t.MirrorSource
	}
	t.MirrorSource = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource{}
	return t.MirrorSource
}

// GetOrCreateOverloadDrop retrieves the value of the OverloadDrop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOrCreateOverloadDrop() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop {
	if t.OverloadDrop != nil {
		return t.OverloadDrop
	}
	t.OverloadDrop = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop{}
	return t.OverloadDrop
}

// GetOrCreateRemark retrieves the value of the Remark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOrCreateRemark() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark {
	if t.Remark != nil {
		return t.Remark
	}
	t.Remark = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark{}
	return t.Remark
}

// GetOrCreateUrlFilter retrieves the value of the UrlFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOrCreateUrlFilter() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter {
	if t.UrlFilter != nil {
		return t.UrlFilter
	}
	t.UrlFilter = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter{}
	return t.UrlFilter
}

// GetBandwidthPolicer returns the value of the BandwidthPolicer struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action. If the receiver or the field BandwidthPolicer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetBandwidthPolicer() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer {
	if t != nil && t.BandwidthPolicer != nil {
		return t.BandwidthPolicer
	}
	return nil
}

// GetErrorDrop returns the value of the ErrorDrop struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action. If the receiver or the field ErrorDrop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetErrorDrop() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop {
	if t != nil && t.ErrorDrop != nil {
		return t.ErrorDrop
	}
	return nil
}

// GetFlowCountLimitPolicer returns the value of the FlowCountLimitPolicer struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action. If the receiver or the field FlowCountLimitPolicer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetFlowCountLimitPolicer() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer {
	if t != nil && t.FlowCountLimitPolicer != nil {
		return t.FlowCountLimitPolicer
	}
	return nil
}

// GetFlowSetupRatePolicer returns the value of the FlowSetupRatePolicer struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action. If the receiver or the field FlowSetupRatePolicer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetFlowSetupRatePolicer() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer {
	if t != nil && t.FlowSetupRatePolicer != nil {
		return t.FlowSetupRatePolicer
	}
	return nil
}

// GetFragmentDrop returns the value of the FragmentDrop struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action. If the receiver or the field FragmentDrop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetFragmentDrop() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop {
	if t != nil && t.FragmentDrop != nil {
		return t.FragmentDrop
	}
	return nil
}

// GetHttpRedirect returns the value of the HttpRedirect struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action. If the receiver or the field HttpRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetHttpRedirect() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect {
	if t != nil && t.HttpRedirect != nil {
		return t.HttpRedirect
	}
	return nil
}

// GetMirrorSource returns the value of the MirrorSource struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action. If the receiver or the field MirrorSource is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetMirrorSource() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource {
	if t != nil && t.MirrorSource != nil {
		return t.MirrorSource
	}
	return nil
}

// GetOverloadDrop returns the value of the OverloadDrop struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action. If the receiver or the field OverloadDrop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetOverloadDrop() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop {
	if t != nil && t.OverloadDrop != nil {
		return t.OverloadDrop
	}
	return nil
}

// GetRemark returns the value of the Remark struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action. If the receiver or the field Remark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetRemark() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark {
	if t != nil && t.Remark != nil {
		return t.Remark
	}
	return nil
}

// GetUrlFilter returns the value of the UrlFilter struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action. If the receiver or the field UrlFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetUrlFilter() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter {
	if t != nil && t.UrlFilter != nil {
		return t.UrlFilter
	}
	return nil
}

// GetAbandonTcpOptimization retrieves the value of the leaf AbandonTcpOptimization from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AbandonTcpOptimization is set, it can
// safely use t.GetAbandonTcpOptimization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AbandonTcpOptimization == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetAbandonTcpOptimization() bool {
	if t == nil || t.AbandonTcpOptimization == nil {
		return false
	}
	return *t.AbandonTcpOptimization
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDnsIpCache retrieves the value of the leaf DnsIpCache from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnsIpCache is set, it can
// safely use t.GetDnsIpCache() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnsIpCache == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetDnsIpCache() string {
	if t == nil || t.DnsIpCache == nil {
		return ""
	}
	return *t.DnsIpCache
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetDrop() bool {
	if t == nil || t.Drop == nil {
		return false
	}
	return *t.Drop
}

// GetGtpFilter retrieves the value of the leaf GtpFilter from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GtpFilter is set, it can
// safely use t.GetGtpFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GtpFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetGtpFilter() string {
	if t == nil || t.GtpFilter == nil {
		return ""
	}
	return *t.GtpFilter
}

// GetHttpEnrich retrieves the value of the leaf HttpEnrich from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpEnrich is set, it can
// safely use t.GetHttpEnrich() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpEnrich == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetHttpEnrich() string {
	if t == nil || t.HttpEnrich == nil {
		return ""
	}
	return *t.HttpEnrich
}

// GetHttpErrorRedirect retrieves the value of the leaf HttpErrorRedirect from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpErrorRedirect is set, it can
// safely use t.GetHttpErrorRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpErrorRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetHttpErrorRedirect() string {
	if t == nil || t.HttpErrorRedirect == nil {
		return ""
	}
	return *t.HttpErrorRedirect
}

// GetHttpNotification retrieves the value of the leaf HttpNotification from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpNotification is set, it can
// safely use t.GetHttpNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetHttpNotification() string {
	if t == nil || t.HttpNotification == nil {
		return ""
	}
	return *t.HttpNotification
}

// GetSctpFilter retrieves the value of the leaf SctpFilter from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SctpFilter is set, it can
// safely use t.GetSctpFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SctpFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetSctpFilter() string {
	if t == nil || t.SctpFilter == nil {
		return ""
	}
	return *t.SctpFilter
}

// GetSessionFilter retrieves the value of the leaf SessionFilter from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionFilter is set, it can
// safely use t.GetSessionFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetSessionFilter() string {
	if t == nil || t.SessionFilter == nil {
		return ""
	}
	return *t.SessionFilter
}

// GetTcpMssAdjust retrieves the value of the leaf TcpMssAdjust from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMssAdjust is set, it can
// safely use t.GetTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetTcpMssAdjust() int32 {
	if t == nil || t.TcpMssAdjust == nil {
		return 0
	}
	return *t.TcpMssAdjust
}

// GetTcpValidate retrieves the value of the leaf TcpValidate from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpValidate is set, it can
// safely use t.GetTcpValidate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpValidate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetTcpValidate() string {
	if t == nil || t.TcpValidate == nil {
		return ""
	}
	return *t.TcpValidate
}

// GetTlsEnrich retrieves the value of the leaf TlsEnrich from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsEnrich is set, it can
// safely use t.GetTlsEnrich() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsEnrich == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) GetTlsEnrich() string {
	if t == nil || t.TlsEnrich == nil {
		return ""
	}
	return *t.TlsEnrich
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AbandonTcpOptimization == nil {
		var v bool = false
		t.AbandonTcpOptimization = &v
	}
	if t.Drop == nil {
		var v bool = false
		t.Drop = &v
	}
	t.BandwidthPolicer.PopulateDefaults()
	t.ErrorDrop.PopulateDefaults()
	t.FlowCountLimitPolicer.PopulateDefaults()
	t.FlowSetupRatePolicer.PopulateDefaults()
	t.FragmentDrop.PopulateDefaults()
	t.HttpRedirect.PopulateDefaults()
	t.MirrorSource.PopulateDefaults()
	t.OverloadDrop.PopulateDefaults()
	t.Remark.PopulateDefaults()
	t.UrlFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/action/bandwidth-policer YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer struct {
	Anl          *string `path:"anl" module:"nokia-conf"`
	DualBucket   *string `path:"dual-bucket" module:"nokia-conf"`
	SingleBucket *string `path:"single-bucket" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer) IsYANGGoStruct() {
}

// GetAnl retrieves the value of the leaf Anl from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Anl is set, it can
// safely use t.GetAnl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Anl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer) GetAnl() string {
	if t == nil || t.Anl == nil {
		return ""
	}
	return *t.Anl
}

// GetDualBucket retrieves the value of the leaf DualBucket from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DualBucket is set, it can
// safely use t.GetDualBucket() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DualBucket == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer) GetDualBucket() string {
	if t == nil || t.DualBucket == nil {
		return ""
	}
	return *t.DualBucket
}

// GetSingleBucket retrieves the value of the leaf SingleBucket from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SingleBucket is set, it can
// safely use t.GetSingleBucket() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SingleBucket == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer) GetSingleBucket() string {
	if t == nil || t.SingleBucket == nil {
		return ""
	}
	return *t.SingleBucket
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_BandwidthPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/action/error-drop YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop struct {
	EventLog *string `path:"event-log" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop) IsYANGGoStruct() {
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_ErrorDrop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/action/flow-count-limit-policer YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer struct {
	EventLog    *string `path:"event-log" module:"nokia-conf"`
	PolicerName *string `path:"policer-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer) IsYANGGoStruct() {
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowCountLimitPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/action/flow-setup-rate-policer YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer struct {
	EventLog    *string `path:"event-log" module:"nokia-conf"`
	PolicerName *string `path:"policer-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer) IsYANGGoStruct() {
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FlowSetupRatePolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/action/fragment-drop YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop struct {
	DropScope E_NokiaTypesApplicationAssurance_FragmentDropScope `path:"drop-scope" module:"nokia-conf"`
	EventLog  *string                                            `path:"event-log" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop) IsYANGGoStruct() {
}

// GetDropScope retrieves the value of the leaf DropScope from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropScope is set, it can
// safely use t.GetDropScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropScope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop) GetDropScope() E_NokiaTypesApplicationAssurance_FragmentDropScope {
	if t == nil || t.DropScope == 0 {
		return 0
	}
	return t.DropScope
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_FragmentDrop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/action/http-redirect YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect struct {
	FlowType E_NokiaTypesApplicationAssurance_HttpRedirFlowType `path:"flow-type" module:"nokia-conf"`
	Name     *string                                            `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect) IsYANGGoStruct() {
}

// GetFlowType retrieves the value of the leaf FlowType from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowType is set, it can
// safely use t.GetFlowType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect) GetFlowType() E_NokiaTypesApplicationAssurance_HttpRedirFlowType {
	if t == nil || t.FlowType == 0 {
		return 0
	}
	return t.FlowType
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_HttpRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/action/mirror-source YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource struct {
	AllInclusive  *bool   `path:"all-inclusive" module:"nokia-conf"`
	MirrorService *string `path:"mirror-service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource) IsYANGGoStruct() {
}

// GetAllInclusive retrieves the value of the leaf AllInclusive from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllInclusive is set, it can
// safely use t.GetAllInclusive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllInclusive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource) GetAllInclusive() bool {
	if t == nil || t.AllInclusive == nil {
		return false
	}
	return *t.AllInclusive
}

// GetMirrorService retrieves the value of the leaf MirrorService from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MirrorService is set, it can
// safely use t.GetMirrorService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MirrorService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource) GetMirrorService() string {
	if t == nil || t.MirrorService == nil {
		return ""
	}
	return *t.MirrorService
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllInclusive == nil {
		var v bool = false
		t.AllInclusive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_MirrorSource) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/action/overload-drop YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop struct {
	EventLog *string `path:"event-log" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop) IsYANGGoStruct() {
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_OverloadDrop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/action/remark YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark struct {
	Dscp     *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp `path:"dscp" module:"nokia-conf"`
	Fc       E_NokiaTypesSros_FcName                                                                                `path:"fc" module:"nokia-conf"`
	Priority E_NokiaTypesQos_Priority                                                                               `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark) IsYANGGoStruct() {
}

// GetOrCreateDscp retrieves the value of the Dscp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark) GetOrCreateDscp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp {
	if t.Dscp != nil {
		return t.Dscp
	}
	t.Dscp = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp{}
	return t.Dscp
}

// GetDscp returns the value of the Dscp struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark. If the receiver or the field Dscp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark) GetDscp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp {
	if t != nil && t.Dscp != nil {
		return t.Dscp
	}
	return nil
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark) GetPriority() E_NokiaTypesQos_Priority {
	if t == nil || t.Priority == 0 {
		return NokiaTypesQos_Priority_auto
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == 0 {
		t.Priority = NokiaTypesQos_Priority_auto
	}
	t.Dscp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/action/remark/dscp YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp struct {
	InProfile  E_NokiaTypesQos_DscpName `path:"in-profile" module:"nokia-conf"`
	OutProfile E_NokiaTypesQos_DscpName `path:"out-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp) IsYANGGoStruct() {
}

// GetInProfile retrieves the value of the leaf InProfile from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfile is set, it can
// safely use t.GetInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp) GetInProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.InProfile == 0 {
		return 0
	}
	return t.InProfile
}

// GetOutProfile retrieves the value of the leaf OutProfile from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfile is set, it can
// safely use t.GetOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp) GetOutProfile() E_NokiaTypesQos_DscpName {
	if t == nil || t.OutProfile == 0 {
		return 0
	}
	return t.OutProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_Remark_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/action/url-filter YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter struct {
	Characteristic *string `path:"characteristic" module:"nokia-conf"`
	Name           *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter) IsYANGGoStruct() {
}

// GetCharacteristic retrieves the value of the leaf Characteristic from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Characteristic is set, it can
// safely use t.GetCharacteristic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Characteristic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter) GetCharacteristic() string {
	if t == nil || t.Characteristic == nil {
		return ""
	}
	return *t.Characteristic
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Action_UrlFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match struct {
	AaSub              *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub                     `path:"aa-sub" module:"nokia-conf"`
	AaSubTethering     E_NokiaTypesApplicationAssurance_SubTetherState                                                                     `path:"aa-sub-tethering" module:"nokia-conf"`
	AppGroup           *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup                  `path:"app-group" module:"nokia-conf"`
	Application        *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application               `path:"application" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Characteristic     map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic `path:"characteristic" module:"nokia-conf"`
	ChargingGroup      *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup             `path:"charging-group" module:"nokia-conf"`
	Dscp               *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp                      `path:"dscp" module:"nokia-conf"`
	DstIp              *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp                     `path:"dst-ip" module:"nokia-conf"`
	DstPort            *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort                   `path:"dst-port" module:"nokia-conf"`
	FlowAttribute      map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute  `path:"flow-attribute" module:"nokia-conf"`
	IpProtocol         *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol                `path:"ip-protocol" module:"nokia-conf"`
	SrcIp              *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp                     `path:"src-ip" module:"nokia-conf"`
	SrcPort            *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort                   `path:"src-port" module:"nokia-conf"`
	TrafficDirection   E_NokiaTypesApplicationAssurance_TrafficDirection                                                                   `path:"traffic-direction" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) IsYANGGoStruct() {
}

// NewCharacteristic creates a new entry in the Characteristic list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) NewCharacteristic(CharacteristicName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic)
	}

	key := CharacteristicName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Characteristic[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Characteristic", key)
	}

	t.Characteristic[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic{
		CharacteristicName: &CharacteristicName,
	}

	return t.Characteristic[key], nil
}

// RenameCharacteristic renames an entry in the list Characteristic within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) RenameCharacteristic(oldK, newK string) error {
	if _, ok := t.Characteristic[newK]; ok {
		return fmt.Errorf("key %v already exists in Characteristic", newK)
	}

	e, ok := t.Characteristic[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Characteristic", oldK)
	}
	e.CharacteristicName = &newK

	t.Characteristic[newK] = e
	delete(t.Characteristic, oldK)
	return nil
}

// GetOrCreateCharacteristic retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateCharacteristic(CharacteristicName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic {

	key := CharacteristicName

	if v, ok := t.Characteristic[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCharacteristic(CharacteristicName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCharacteristic got unexpected error: %v", err))
	}
	return v
}

// GetCharacteristic retrieves the value with the specified key from
// the Characteristic map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetCharacteristic(CharacteristicName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic {

	if t == nil {
		return nil
	}

	key := CharacteristicName

	if lm, ok := t.Characteristic[key]; ok {
		return lm
	}
	return nil
}

// DeleteCharacteristic deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) DeleteCharacteristic(CharacteristicName string) {
	key := CharacteristicName

	delete(t.Characteristic, key)
}

// AppendCharacteristic appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic struct to the
// list Characteristic of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) AppendCharacteristic(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) error {
	if v.CharacteristicName == nil {
		return fmt.Errorf("invalid nil key received for CharacteristicName")
	}

	key := *v.CharacteristicName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic)
	}

	if _, ok := t.Characteristic[key]; ok {
		return fmt.Errorf("duplicate key for list Characteristic %v", key)
	}

	t.Characteristic[key] = v
	return nil
}

// NewFlowAttribute creates a new entry in the FlowAttribute list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) NewFlowAttribute(FlowAttributeName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlowAttribute == nil {
		t.FlowAttribute = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute)
	}

	key := FlowAttributeName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FlowAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FlowAttribute", key)
	}

	t.FlowAttribute[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute{
		FlowAttributeName: &FlowAttributeName,
	}

	return t.FlowAttribute[key], nil
}

// RenameFlowAttribute renames an entry in the list FlowAttribute within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) RenameFlowAttribute(oldK, newK string) error {
	if _, ok := t.FlowAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in FlowAttribute", newK)
	}

	e, ok := t.FlowAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FlowAttribute", oldK)
	}
	e.FlowAttributeName = &newK

	t.FlowAttribute[newK] = e
	delete(t.FlowAttribute, oldK)
	return nil
}

// GetOrCreateFlowAttribute retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateFlowAttribute(FlowAttributeName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute {

	key := FlowAttributeName

	if v, ok := t.FlowAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlowAttribute(FlowAttributeName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlowAttribute got unexpected error: %v", err))
	}
	return v
}

// GetFlowAttribute retrieves the value with the specified key from
// the FlowAttribute map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetFlowAttribute(FlowAttributeName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute {

	if t == nil {
		return nil
	}

	key := FlowAttributeName

	if lm, ok := t.FlowAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlowAttribute deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) DeleteFlowAttribute(FlowAttributeName string) {
	key := FlowAttributeName

	delete(t.FlowAttribute, key)
}

// AppendFlowAttribute appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute struct to the
// list FlowAttribute of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) AppendFlowAttribute(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) error {
	if v.FlowAttributeName == nil {
		return fmt.Errorf("invalid nil key received for FlowAttributeName")
	}

	key := *v.FlowAttributeName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlowAttribute == nil {
		t.FlowAttribute = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute)
	}

	if _, ok := t.FlowAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list FlowAttribute %v", key)
	}

	t.FlowAttribute[key] = v
	return nil
}

// GetOrCreateAaSub retrieves the value of the AaSub field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateAaSub() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub {
	if t.AaSub != nil {
		return t.AaSub
	}
	t.AaSub = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub{}
	return t.AaSub
}

// GetOrCreateAppGroup retrieves the value of the AppGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateAppGroup() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup {
	if t.AppGroup != nil {
		return t.AppGroup
	}
	t.AppGroup = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup{}
	return t.AppGroup
}

// GetOrCreateApplication retrieves the value of the Application field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateApplication() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application {
	if t.Application != nil {
		return t.Application
	}
	t.Application = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application{}
	return t.Application
}

// GetOrCreateChargingGroup retrieves the value of the ChargingGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateChargingGroup() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup {
	if t.ChargingGroup != nil {
		return t.ChargingGroup
	}
	t.ChargingGroup = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup{}
	return t.ChargingGroup
}

// GetOrCreateDscp retrieves the value of the Dscp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateDscp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp {
	if t.Dscp != nil {
		return t.Dscp
	}
	t.Dscp = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp{}
	return t.Dscp
}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateIpProtocol retrieves the value of the IpProtocol field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateIpProtocol() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol {
	if t.IpProtocol != nil {
		return t.IpProtocol
	}
	t.IpProtocol = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol{}
	return t.IpProtocol
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetAaSub returns the value of the AaSub struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver or the field AaSub is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetAaSub() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub {
	if t != nil && t.AaSub != nil {
		return t.AaSub
	}
	return nil
}

// GetAppGroup returns the value of the AppGroup struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver or the field AppGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetAppGroup() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup {
	if t != nil && t.AppGroup != nil {
		return t.AppGroup
	}
	return nil
}

// GetApplication returns the value of the Application struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver or the field Application is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetApplication() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application {
	if t != nil && t.Application != nil {
		return t.Application
	}
	return nil
}

// GetChargingGroup returns the value of the ChargingGroup struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver or the field ChargingGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetChargingGroup() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup {
	if t != nil && t.ChargingGroup != nil {
		return t.ChargingGroup
	}
	return nil
}

// GetDscp returns the value of the Dscp struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver or the field Dscp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetDscp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp {
	if t != nil && t.Dscp != nil {
		return t.Dscp
	}
	return nil
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetDstIp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetDstPort() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetIpProtocol returns the value of the IpProtocol struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver or the field IpProtocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetIpProtocol() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol {
	if t != nil && t.IpProtocol != nil {
		return t.IpProtocol
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetSrcIp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetSrcPort() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetAaSubTethering retrieves the value of the leaf AaSubTethering from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AaSubTethering is set, it can
// safely use t.GetAaSubTethering() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AaSubTethering == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetAaSubTethering() E_NokiaTypesApplicationAssurance_SubTetherState {
	if t == nil || t.AaSubTethering == 0 {
		return NokiaTypesApplicationAssurance_SubTetherState_not_applicable
	}
	return t.AaSubTethering
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetTrafficDirection retrieves the value of the leaf TrafficDirection from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrafficDirection is set, it can
// safely use t.GetTrafficDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrafficDirection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) GetTrafficDirection() E_NokiaTypesApplicationAssurance_TrafficDirection {
	if t == nil || t.TrafficDirection == 0 {
		return NokiaTypesApplicationAssurance_TrafficDirection_both
	}
	return t.TrafficDirection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AaSubTethering == 0 {
		t.AaSubTethering = NokiaTypesApplicationAssurance_SubTetherState_not_applicable
	}
	if t.TrafficDirection == 0 {
		t.TrafficDirection = NokiaTypesApplicationAssurance_TrafficDirection_both
	}
	t.AaSub.PopulateDefaults()
	t.AppGroup.PopulateDefaults()
	t.Application.PopulateDefaults()
	t.ChargingGroup.PopulateDefaults()
	t.Dscp.PopulateDefaults()
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.IpProtocol.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
	for _, e := range t.Characteristic {
		e.PopulateDefaults()
	}
	for _, e := range t.FlowAttribute {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/aa-sub YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub struct {
	Esm      *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm      `path:"esm" module:"nokia-conf"`
	EsmMac   *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac   `path:"esm-mac" module:"nokia-conf"`
	Sap      *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap      `path:"sap" module:"nokia-conf"`
	SpokeSdp *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
	Transit  *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit  `path:"transit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) IsYANGGoStruct() {
}

// GetOrCreateEsm retrieves the value of the Esm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) GetOrCreateEsm() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm {
	if t.Esm != nil {
		return t.Esm
	}
	t.Esm = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm{}
	return t.Esm
}

// GetOrCreateEsmMac retrieves the value of the EsmMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) GetOrCreateEsmMac() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac {
	if t.EsmMac != nil {
		return t.EsmMac
	}
	t.EsmMac = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac{}
	return t.EsmMac
}

// GetOrCreateSap retrieves the value of the Sap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) GetOrCreateSap() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap {
	if t.Sap != nil {
		return t.Sap
	}
	t.Sap = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap{}
	return t.Sap
}

// GetOrCreateSpokeSdp retrieves the value of the SpokeSdp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) GetOrCreateSpokeSdp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp {
	if t.SpokeSdp != nil {
		return t.SpokeSdp
	}
	t.SpokeSdp = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp{}
	return t.SpokeSdp
}

// GetOrCreateTransit retrieves the value of the Transit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) GetOrCreateTransit() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit {
	if t.Transit != nil {
		return t.Transit
	}
	t.Transit = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit{}
	return t.Transit
}

// GetEsm returns the value of the Esm struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub. If the receiver or the field Esm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) GetEsm() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm {
	if t != nil && t.Esm != nil {
		return t.Esm
	}
	return nil
}

// GetEsmMac returns the value of the EsmMac struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub. If the receiver or the field EsmMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) GetEsmMac() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac {
	if t != nil && t.EsmMac != nil {
		return t.EsmMac
	}
	return nil
}

// GetSap returns the value of the Sap struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub. If the receiver or the field Sap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) GetSap() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap {
	if t != nil && t.Sap != nil {
		return t.Sap
	}
	return nil
}

// GetSpokeSdp returns the value of the SpokeSdp struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub. If the receiver or the field SpokeSdp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) GetSpokeSdp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp {
	if t != nil && t.SpokeSdp != nil {
		return t.SpokeSdp
	}
	return nil
}

// GetTransit returns the value of the Transit struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub. If the receiver or the field Transit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) GetTransit() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit {
	if t != nil && t.Transit != nil {
		return t.Transit
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Esm.PopulateDefaults()
	t.EsmMac.PopulateDefaults()
	t.Sap.PopulateDefaults()
	t.SpokeSdp.PopulateDefaults()
	t.Transit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/aa-sub/esm YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm struct {
	Eq  *string `path:"eq" module:"nokia-conf"`
	Neq *string `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Esm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/aa-sub/esm-mac YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac struct {
	Eq  *string `path:"eq" module:"nokia-conf"`
	Neq *string `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_EsmMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/aa-sub/sap YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap struct {
	Eq  *string `path:"eq" module:"nokia-conf"`
	Neq *string `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/aa-sub/spoke-sdp YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp struct {
	Eq  *string `path:"eq" module:"nokia-conf"`
	Neq *string `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/aa-sub/transit YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit struct {
	Eq  *string `path:"eq" module:"nokia-conf"`
	Neq *string `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AaSub_Transit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/app-group YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup struct {
	Eq  *string `path:"eq" module:"nokia-conf"`
	Neq *string `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_AppGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/application YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application struct {
	Eq  *string `path:"eq" module:"nokia-conf"`
	Neq *string `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/characteristic YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CharacteristicName *string  `path:"characteristic-name" module:"nokia-conf"`
	Eq                 *string  `path:"eq" module:"nokia-conf"`
	Neq                *string  `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCharacteristicName retrieves the value of the leaf CharacteristicName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CharacteristicName is set, it can
// safely use t.GetCharacteristicName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CharacteristicName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) GetCharacteristicName() string {
	if t == nil || t.CharacteristicName == nil {
		return ""
	}
	return *t.CharacteristicName
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CharacteristicName == nil {
		return nil, fmt.Errorf("nil value for key CharacteristicName")
	}

	return map[string]interface{}{
		"characteristic-name": *t.CharacteristicName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Characteristic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/charging-group YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup struct {
	Eq  *string `path:"eq" module:"nokia-conf"`
	Neq *string `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup) GetNeq() string {
	if t == nil || t.Neq == nil {
		return ""
	}
	return *t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_ChargingGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/dscp YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp struct {
	Eq  E_NokiaTypesQos_DscpName `path:"eq" module:"nokia-conf"`
	Neq E_NokiaTypesQos_DscpName `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp) GetEq() E_NokiaTypesQos_DscpName {
	if t == nil || t.Eq == 0 {
		return 0
	}
	return t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp) GetNeq() E_NokiaTypesQos_DscpName {
	if t == nil || t.Neq == 0 {
		return 0
	}
	return t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp struct {
	Eq  *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq  `path:"eq" module:"nokia-conf"`
	Neq *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp) IsYANGGoStruct() {
}

// GetOrCreateEq retrieves the value of the Eq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp) GetOrCreateEq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq {
	if t.Eq != nil {
		return t.Eq
	}
	t.Eq = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq{}
	return t.Eq
}

// GetOrCreateNeq retrieves the value of the Neq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp) GetOrCreateNeq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq {
	if t.Neq != nil {
		return t.Neq
	}
	t.Neq = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq{}
	return t.Neq
}

// GetEq returns the value of the Eq struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp. If the receiver or the field Eq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp) GetEq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq {
	if t != nil && t.Eq != nil {
		return t.Eq
	}
	return nil
}

// GetNeq returns the value of the Neq struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp. If the receiver or the field Neq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp) GetNeq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq {
	if t != nil && t.Neq != nil {
		return t.Neq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Eq.PopulateDefaults()
	t.Neq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/dst-ip/eq YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq struct {
	IpPrefix     *string `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Eq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/dst-ip/neq YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq struct {
	IpPrefix     *string `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstIp_Neq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort struct {
	Eq  *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq  `path:"eq" module:"nokia-conf"`
	Neq *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetOrCreateEq retrieves the value of the Eq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort) GetOrCreateEq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq {
	if t.Eq != nil {
		return t.Eq
	}
	t.Eq = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq{}
	return t.Eq
}

// GetOrCreateNeq retrieves the value of the Neq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort) GetOrCreateNeq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq {
	if t.Neq != nil {
		return t.Neq
	}
	t.Neq = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq{}
	return t.Neq
}

// GetEq returns the value of the Eq struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort. If the receiver or the field Eq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort) GetEq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq {
	if t != nil && t.Eq != nil {
		return t.Eq
	}
	return nil
}

// GetNeq returns the value of the Neq struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort. If the receiver or the field Neq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort) GetNeq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq {
	if t != nil && t.Neq != nil {
		return t.Neq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Eq.PopulateDefaults()
	t.Neq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/dst-port/eq YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq struct {
	PortList   *string                                                                                                    `path:"port-list" module:"nokia-conf"`
	PortNumber *int32                                                                                                     `path:"port-number" module:"nokia-conf"`
	Range      *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq) GetOrCreateRange() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq) GetRange() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v int32 = 0
		t.PortNumber = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/dst-port/eq/range YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 1
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v int32 = 1
		t.End = &v
	}
	if t.Start == nil {
		var v int32 = 0
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Eq_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/dst-port/neq YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq struct {
	PortList   *string                                                                                                     `path:"port-list" module:"nokia-conf"`
	PortNumber *int32                                                                                                      `path:"port-number" module:"nokia-conf"`
	Range      *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq) GetOrCreateRange() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq) GetRange() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v int32 = 0
		t.PortNumber = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/dst-port/neq/range YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 1
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v int32 = 1
		t.End = &v
	}
	if t.Start == nil {
		var v int32 = 0
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_DstPort_Neq_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/flow-attribute YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute struct {
	ApplyGroups        []string                                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Confidence         *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence `path:"confidence" module:"nokia-conf"`
	FlowAttributeName  *string                                                                                                            `path:"flow-attribute-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) IsYANGGoStruct() {
}

// GetOrCreateConfidence retrieves the value of the Confidence field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) GetOrCreateConfidence() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence {
	if t.Confidence != nil {
		return t.Confidence
	}
	t.Confidence = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence{}
	return t.Confidence
}

// GetConfidence returns the value of the Confidence struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute. If the receiver or the field Confidence is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) GetConfidence() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence {
	if t != nil && t.Confidence != nil {
		return t.Confidence
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFlowAttributeName retrieves the value of the leaf FlowAttributeName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowAttributeName is set, it can
// safely use t.GetFlowAttributeName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowAttributeName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) GetFlowAttributeName() string {
	if t == nil || t.FlowAttributeName == nil {
		return ""
	}
	return *t.FlowAttributeName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Confidence.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FlowAttributeName == nil {
		return nil, fmt.Errorf("nil value for key FlowAttributeName")
	}

	return map[string]interface{}{
		"flow-attribute-name": *t.FlowAttributeName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/flow-attribute/confidence YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence struct {
	Eq  *uint32 `path:"eq" module:"nokia-conf"`
	Gte *uint32 `path:"gte" module:"nokia-conf"`
	Lt  *uint32 `path:"lt" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence) GetEq() uint32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGte retrieves the value of the leaf Gte from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gte is set, it can
// safely use t.GetGte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence) GetGte() uint32 {
	if t == nil || t.Gte == nil {
		return 0
	}
	return *t.Gte
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence) GetLt() uint32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_FlowAttribute_Confidence) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/ip-protocol YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol struct {
	Eq  NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol_Eq_Union  `path:"eq" module:"nokia-conf"`
	Neq NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol_Neq_Union `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol) IsYANGGoStruct() {
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol) GetEq() NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol_Eq_Union {
	if t == nil || t.Eq == nil {
		return nil
	}
	return t.Eq
}

// GetNeq retrieves the value of the leaf Neq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neq is set, it can
// safely use t.GetNeq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol) GetNeq() NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol_Neq_Union {
	if t == nil || t.Neq == nil {
		return nil
	}
	return t.Neq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_IpProtocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp struct {
	Eq  *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq  `path:"eq" module:"nokia-conf"`
	Neq *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp) IsYANGGoStruct() {
}

// GetOrCreateEq retrieves the value of the Eq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp) GetOrCreateEq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq {
	if t.Eq != nil {
		return t.Eq
	}
	t.Eq = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq{}
	return t.Eq
}

// GetOrCreateNeq retrieves the value of the Neq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp) GetOrCreateNeq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq {
	if t.Neq != nil {
		return t.Neq
	}
	t.Neq = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq{}
	return t.Neq
}

// GetEq returns the value of the Eq struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp. If the receiver or the field Eq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp) GetEq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq {
	if t != nil && t.Eq != nil {
		return t.Eq
	}
	return nil
}

// GetNeq returns the value of the Neq struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp. If the receiver or the field Neq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp) GetNeq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq {
	if t != nil && t.Neq != nil {
		return t.Neq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Eq.PopulateDefaults()
	t.Neq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/src-ip/eq YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq struct {
	IpPrefix     *string `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Eq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/src-ip/neq YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq struct {
	IpPrefix     *string `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcIp_Neq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/src-port YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort struct {
	Eq  *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq  `path:"eq" module:"nokia-conf"`
	Neq *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq `path:"neq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetOrCreateEq retrieves the value of the Eq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort) GetOrCreateEq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq {
	if t.Eq != nil {
		return t.Eq
	}
	t.Eq = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq{}
	return t.Eq
}

// GetOrCreateNeq retrieves the value of the Neq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort) GetOrCreateNeq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq {
	if t.Neq != nil {
		return t.Neq
	}
	t.Neq = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq{}
	return t.Neq
}

// GetEq returns the value of the Eq struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort. If the receiver or the field Eq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort) GetEq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq {
	if t != nil && t.Eq != nil {
		return t.Eq
	}
	return nil
}

// GetNeq returns the value of the Neq struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort. If the receiver or the field Neq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort) GetNeq() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq {
	if t != nil && t.Neq != nil {
		return t.Neq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Eq.PopulateDefaults()
	t.Neq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/src-port/eq YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq struct {
	PortList   *string                                                                                                    `path:"port-list" module:"nokia-conf"`
	PortNumber *int32                                                                                                     `path:"port-number" module:"nokia-conf"`
	Range      *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq) GetOrCreateRange() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq) GetRange() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v int32 = 0
		t.PortNumber = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/src-port/eq/range YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 1
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v int32 = 1
		t.End = &v
	}
	if t.Start == nil {
		var v int32 = 0
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Eq_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/src-port/neq YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq struct {
	PortList   *string                                                                                                     `path:"port-list" module:"nokia-conf"`
	PortNumber *int32                                                                                                      `path:"port-number" module:"nokia-conf"`
	Range      *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq) GetOrCreateRange() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq) GetRange() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortNumber == nil {
		var v int32 = 0
		t.PortNumber = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-qos-policy/entry/match/src-port/neq/range YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 1
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v int32 = 1
		t.End = &v
	}
	if t.Start == nil {
		var v int32 = 0
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppQosPolicy_Entry_Match_SrcPort_Neq_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-service-options YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions struct {
	Characteristic map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic `path:"characteristic" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) IsYANGGoStruct() {
}

// NewCharacteristic creates a new entry in the Characteristic list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) NewCharacteristic(CharacteristicName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic)
	}

	key := CharacteristicName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Characteristic[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Characteristic", key)
	}

	t.Characteristic[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic{
		CharacteristicName: &CharacteristicName,
	}

	return t.Characteristic[key], nil
}

// RenameCharacteristic renames an entry in the list Characteristic within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) RenameCharacteristic(oldK, newK string) error {
	if _, ok := t.Characteristic[newK]; ok {
		return fmt.Errorf("key %v already exists in Characteristic", newK)
	}

	e, ok := t.Characteristic[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Characteristic", oldK)
	}
	e.CharacteristicName = &newK

	t.Characteristic[newK] = e
	delete(t.Characteristic, oldK)
	return nil
}

// GetOrCreateCharacteristic retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) GetOrCreateCharacteristic(CharacteristicName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic {

	key := CharacteristicName

	if v, ok := t.Characteristic[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCharacteristic(CharacteristicName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCharacteristic got unexpected error: %v", err))
	}
	return v
}

// GetCharacteristic retrieves the value with the specified key from
// the Characteristic map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) GetCharacteristic(CharacteristicName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic {

	if t == nil {
		return nil
	}

	key := CharacteristicName

	if lm, ok := t.Characteristic[key]; ok {
		return lm
	}
	return nil
}

// DeleteCharacteristic deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) DeleteCharacteristic(CharacteristicName string) {
	key := CharacteristicName

	delete(t.Characteristic, key)
}

// AppendCharacteristic appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic struct to the
// list Characteristic of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) AppendCharacteristic(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) error {
	if v.CharacteristicName == nil {
		return fmt.Errorf("invalid nil key received for CharacteristicName")
	}

	key := *v.CharacteristicName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Characteristic == nil {
		t.Characteristic = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic)
	}

	if _, ok := t.Characteristic[key]; ok {
		return fmt.Errorf("duplicate key for list Characteristic %v", key)
	}

	t.Characteristic[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Characteristic {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-service-options/characteristic YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic struct {
	ApplyGroups        []string                                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	CharacteristicName *string                                                                                                            `path:"characteristic-name" module:"nokia-conf"`
	DefaultValue       *string                                                                                                            `path:"default-value" module:"nokia-conf"`
	Value              map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) IsYANGGoStruct() {
}

// NewValue creates a new entry in the Value list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) NewValue(ValueName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Value == nil {
		t.Value = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value)
	}

	key := ValueName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Value[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Value", key)
	}

	t.Value[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value{
		ValueName: &ValueName,
	}

	return t.Value[key], nil
}

// RenameValue renames an entry in the list Value within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) RenameValue(oldK, newK string) error {
	if _, ok := t.Value[newK]; ok {
		return fmt.Errorf("key %v already exists in Value", newK)
	}

	e, ok := t.Value[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Value", oldK)
	}
	e.ValueName = &newK

	t.Value[newK] = e
	delete(t.Value, oldK)
	return nil
}

// GetOrCreateValue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) GetOrCreateValue(ValueName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value {

	key := ValueName

	if v, ok := t.Value[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewValue(ValueName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateValue got unexpected error: %v", err))
	}
	return v
}

// GetValue retrieves the value with the specified key from
// the Value map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) GetValue(ValueName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value {

	if t == nil {
		return nil
	}

	key := ValueName

	if lm, ok := t.Value[key]; ok {
		return lm
	}
	return nil
}

// DeleteValue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) DeleteValue(ValueName string) {
	key := ValueName

	delete(t.Value, key)
}

// AppendValue appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value struct to the
// list Value of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) AppendValue(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value) error {
	if v.ValueName == nil {
		return fmt.Errorf("invalid nil key received for ValueName")
	}

	key := *v.ValueName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Value == nil {
		t.Value = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value)
	}

	if _, ok := t.Value[key]; ok {
		return fmt.Errorf("duplicate key for list Value %v", key)
	}

	t.Value[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCharacteristicName retrieves the value of the leaf CharacteristicName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CharacteristicName is set, it can
// safely use t.GetCharacteristicName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CharacteristicName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) GetCharacteristicName() string {
	if t == nil || t.CharacteristicName == nil {
		return ""
	}
	return *t.CharacteristicName
}

// GetDefaultValue retrieves the value of the leaf DefaultValue from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultValue is set, it can
// safely use t.GetDefaultValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) GetDefaultValue() string {
	if t == nil || t.DefaultValue == nil {
		return ""
	}
	return *t.DefaultValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Value {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CharacteristicName == nil {
		return nil, fmt.Errorf("nil value for key CharacteristicName")
	}

	return map[string]interface{}{
		"characteristic-name": *t.CharacteristicName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value represents the /nokia-conf/configure/application-assurance/group/partition/policy/app-service-options/characteristic/value YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value struct {
	ValueName *string `path:"value-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value) IsYANGGoStruct() {
}

// GetValueName retrieves the value of the leaf ValueName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValueName is set, it can
// safely use t.GetValueName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValueName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value) GetValueName() string {
	if t == nil || t.ValueName == nil {
		return ""
	}
	return *t.ValueName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ValueName == nil {
		return nil, fmt.Errorf("nil value for key ValueName")
	}

	return map[string]interface{}{
		"value-name": *t.ValueName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_AppServiceOptions_Characteristic_Value) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application represents the /nokia-conf/configure/application-assurance/group/partition/policy/application YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application struct {
	AppGroup           *string  `path:"app-group" module:"nokia-conf"`
	ApplicationName    *string  `path:"application-name" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	ChargingGroup      *string  `path:"charging-group" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	ExportId           *uint32  `path:"export-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application) IsYANGGoStruct() {
}

// GetAppGroup retrieves the value of the leaf AppGroup from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppGroup is set, it can
// safely use t.GetAppGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application) GetAppGroup() string {
	if t == nil || t.AppGroup == nil {
		return ""
	}
	return *t.AppGroup
}

// GetApplicationName retrieves the value of the leaf ApplicationName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplicationName is set, it can
// safely use t.GetApplicationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplicationName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application) GetApplicationName() string {
	if t == nil || t.ApplicationName == nil {
		return ""
	}
	return *t.ApplicationName
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetChargingGroup retrieves the value of the leaf ChargingGroup from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChargingGroup is set, it can
// safely use t.GetChargingGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChargingGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application) GetChargingGroup() string {
	if t == nil || t.ChargingGroup == nil {
		return ""
	}
	return *t.ChargingGroup
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportId retrieves the value of the leaf ExportId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportId is set, it can
// safely use t.GetExportId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application) GetExportId() uint32 {
	if t == nil || t.ExportId == nil {
		return 0
	}
	return *t.ExportId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ApplicationName == nil {
		return nil, fmt.Errorf("nil value for key ApplicationName")
	}

	return map[string]interface{}{
		"application-name": *t.ApplicationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup represents the /nokia-conf/configure/application-assurance/group/partition/policy/charging-group YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup struct {
	ApplyGroups        []string                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	ChargingGroupName  *string                                              `path:"charging-group-name" module:"nokia-conf"`
	Description        *string                                              `path:"description" module:"nokia-conf"`
	ExportId           *uint32                                              `path:"export-id" module:"nokia-conf"`
	NotifyStartStop    E_NokiaTypesApplicationAssurance_NotifyStartStopType `path:"notify-start-stop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetChargingGroupName retrieves the value of the leaf ChargingGroupName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChargingGroupName is set, it can
// safely use t.GetChargingGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChargingGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) GetChargingGroupName() string {
	if t == nil || t.ChargingGroupName == nil {
		return ""
	}
	return *t.ChargingGroupName
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportId retrieves the value of the leaf ExportId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportId is set, it can
// safely use t.GetExportId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) GetExportId() uint32 {
	if t == nil || t.ExportId == nil {
		return 0
	}
	return *t.ExportId
}

// GetNotifyStartStop retrieves the value of the leaf NotifyStartStop from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NotifyStartStop is set, it can
// safely use t.GetNotifyStartStop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NotifyStartStop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) GetNotifyStartStop() E_NokiaTypesApplicationAssurance_NotifyStartStopType {
	if t == nil || t.NotifyStartStop == 0 {
		return NokiaTypesApplicationAssurance_NotifyStartStopType_none
	}
	return t.NotifyStartStop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NotifyStartStop == 0 {
		t.NotifyStartStop = NokiaTypesApplicationAssurance_NotifyStartStopType_none
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ChargingGroupName == nil {
		return nil, fmt.Errorf("nil value for key ChargingGroupName")
	}

	return map[string]interface{}{
		"charging-group-name": *t.ChargingGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_ChargingGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol represents the /nokia-conf/configure/application-assurance/group/partition/policy/custom-protocol YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                           `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	CustomProtocolId   *string                                                                                               `path:"custom-protocol-id" module:"nokia-conf"`
	Description        *string                                                                                               `path:"description" module:"nokia-conf"`
	Expression         map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression `path:"expression" module:"nokia-conf"`
	IpProtocol         E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_IpProtocol           `path:"ip-protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) IsYANGGoStruct() {
}

// NewExpression creates a new entry in the Expression list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) NewExpression(ExprIndex uint32) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Expression == nil {
		t.Expression = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression)
	}

	key := ExprIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Expression[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Expression", key)
	}

	t.Expression[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression{
		ExprIndex: &ExprIndex,
	}

	return t.Expression[key], nil
}

// RenameExpression renames an entry in the list Expression within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) RenameExpression(oldK, newK uint32) error {
	if _, ok := t.Expression[newK]; ok {
		return fmt.Errorf("key %v already exists in Expression", newK)
	}

	e, ok := t.Expression[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Expression", oldK)
	}
	e.ExprIndex = &newK

	t.Expression[newK] = e
	delete(t.Expression, oldK)
	return nil
}

// GetOrCreateExpression retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) GetOrCreateExpression(ExprIndex uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression {

	key := ExprIndex

	if v, ok := t.Expression[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExpression(ExprIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExpression got unexpected error: %v", err))
	}
	return v
}

// GetExpression retrieves the value with the specified key from
// the Expression map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) GetExpression(ExprIndex uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression {

	if t == nil {
		return nil
	}

	key := ExprIndex

	if lm, ok := t.Expression[key]; ok {
		return lm
	}
	return nil
}

// DeleteExpression deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) DeleteExpression(ExprIndex uint32) {
	key := ExprIndex

	delete(t.Expression, key)
}

// AppendExpression appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression struct to the
// list Expression of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) AppendExpression(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) error {
	if v.ExprIndex == nil {
		return fmt.Errorf("invalid nil key received for ExprIndex")
	}

	key := *v.ExprIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Expression == nil {
		t.Expression = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression)
	}

	if _, ok := t.Expression[key]; ok {
		return fmt.Errorf("duplicate key for list Expression %v", key)
	}

	t.Expression[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCustomProtocolId retrieves the value of the leaf CustomProtocolId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CustomProtocolId is set, it can
// safely use t.GetCustomProtocolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CustomProtocolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) GetCustomProtocolId() string {
	if t == nil || t.CustomProtocolId == nil {
		return ""
	}
	return *t.CustomProtocolId
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpProtocol retrieves the value of the leaf IpProtocol from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpProtocol is set, it can
// safely use t.GetIpProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpProtocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) GetIpProtocol() E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_IpProtocol {
	if t == nil || t.IpProtocol == 0 {
		return 0
	}
	return t.IpProtocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Expression {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CustomProtocolId == nil {
		return nil, fmt.Errorf("nil value for key CustomProtocolId")
	}

	return map[string]interface{}{
		"custom-protocol-id": *t.CustomProtocolId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression represents the /nokia-conf/configure/application-assurance/group/partition/policy/custom-protocol/expression YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression struct {
	ApplyGroups        []string                                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression_Direction `path:"direction" module:"nokia-conf"`
	Eq                 *string                                                                                               `path:"eq" module:"nokia-conf"`
	ExprIndex          *uint32                                                                                               `path:"expr-index" module:"nokia-conf"`
	Offset             *uint32                                                                                               `path:"offset" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) GetDirection() E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) GetEq() string {
	if t == nil || t.Eq == nil {
		return ""
	}
	return *t.Eq
}

// GetExprIndex retrieves the value of the leaf ExprIndex from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExprIndex is set, it can
// safely use t.GetExprIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExprIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) GetExprIndex() uint32 {
	if t == nil || t.ExprIndex == nil {
		return 0
	}
	return *t.ExprIndex
}

// GetOffset retrieves the value of the leaf Offset from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Offset is set, it can
// safely use t.GetOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Offset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) GetOffset() uint32 {
	if t == nil || t.Offset == nil {
		return 0
	}
	return *t.Offset
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Offset == nil {
		var v uint32 = 0
		t.Offset = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ExprIndex == nil {
		return nil, fmt.Errorf("nil value for key ExprIndex")
	}

	return map[string]interface{}{
		"expr-index": *t.ExprIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Policy_CustomProtocol_Expression) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList represents the /nokia-conf/configure/application-assurance/group/partition/port-list YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList struct {
	ApplyGroups        []string                                                                                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                                                                                  `path:"description" module:"nokia-conf"`
	Port               map[int32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port                                                                        `path:"port" module:"nokia-conf"`
	PortListName       *string                                                                                                                                                  `path:"port-list-name" module:"nokia-conf"`
	Range              map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) IsYANGGoStruct() {}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range_Key represents the key for list Range of element /nokia-conf/configure/application-assurance/group/partition/port-list.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range_Key struct {
	Start int32 `path:"start"`
	End   int32 `path:"end"`
}

// NewPort creates a new entry in the Port list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) NewPort(PortNumber int32) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[int32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port)
	}

	key := PortNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port{
		PortNumber: &PortNumber,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) RenamePort(oldK, newK int32) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.PortNumber = &newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) GetOrCreatePort(PortNumber int32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port {

	key := PortNumber

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(PortNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) GetPort(PortNumber int32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port {

	if t == nil {
		return nil
	}

	key := PortNumber

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) DeletePort(PortNumber int32) {
	key := PortNumber

	delete(t.Port, key)
}

// AppendPort appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port struct to the
// list Port of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) AppendPort(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port) error {
	if v.PortNumber == nil {
		return fmt.Errorf("invalid nil key received for PortNumber")
	}

	key := *v.PortNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[int32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) NewRange(Start int32, End int32) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range)
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range{
		Start: &Start,
		End:   &End,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) RenameRange(oldK, newK NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range_Key) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) GetOrCreateRange(Start int32, End int32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range {

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) GetRange(Start int32, End int32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) DeleteRange(Start int32, End int32) {
	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range struct to the
// list Range of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) AppendRange(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPortListName retrieves the value of the leaf PortListName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortListName is set, it can
// safely use t.GetPortListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) GetPortListName() string {
	if t == nil || t.PortListName == nil {
		return ""
	}
	return *t.PortListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortListName == nil {
		return nil, fmt.Errorf("nil value for key PortListName")
	}

	return map[string]interface{}{
		"port-list-name": *t.PortListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port represents the /nokia-conf/configure/application-assurance/group/partition/port-list/port YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port struct {
	PortNumber *int32 `path:"port-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port) IsYANGGoStruct() {}

// GetPortNumber retrieves the value of the leaf PortNumber from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port) GetPortNumber() int32 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortNumber == nil {
		return nil, fmt.Errorf("nil value for key PortNumber")
	}

	return map[string]interface{}{
		"port-number": *t.PortNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range represents the /nokia-conf/configure/application-assurance/group/partition/port-list/range YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_PortList_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter represents the /nokia-conf/configure/application-assurance/group/partition/sctp-filter YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter struct {
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                        `path:"description" module:"nokia-conf"`
	EventLog           *string                                                                        `path:"event-log" module:"nokia-conf"`
	Ppid               *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid      `path:"ppid" module:"nokia-conf"`
	PpidRange          *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange `path:"ppid-range" module:"nokia-conf"`
	SctpFilterName     *string                                                                        `path:"sctp-filter-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter) IsYANGGoStruct() {}

// GetOrCreatePpid retrieves the value of the Ppid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter) GetOrCreatePpid() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid {
	if t.Ppid != nil {
		return t.Ppid
	}
	t.Ppid = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid{}
	return t.Ppid
}

// GetOrCreatePpidRange retrieves the value of the PpidRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter) GetOrCreatePpidRange() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange {
	if t.PpidRange != nil {
		return t.PpidRange
	}
	t.PpidRange = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange{}
	return t.PpidRange
}

// GetPpid returns the value of the Ppid struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter. If the receiver or the field Ppid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter) GetPpid() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid {
	if t != nil && t.Ppid != nil {
		return t.Ppid
	}
	return nil
}

// GetPpidRange returns the value of the PpidRange struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter. If the receiver or the field PpidRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter) GetPpidRange() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange {
	if t != nil && t.PpidRange != nil {
		return t.PpidRange
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// GetSctpFilterName retrieves the value of the leaf SctpFilterName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SctpFilterName is set, it can
// safely use t.GetSctpFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SctpFilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter) GetSctpFilterName() string {
	if t == nil || t.SctpFilterName == nil {
		return ""
	}
	return *t.SctpFilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ppid.PopulateDefaults()
	t.PpidRange.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SctpFilterName == nil {
		return nil, fmt.Errorf("nil value for key SctpFilterName")
	}

	return map[string]interface{}{
		"sctp-filter-name": *t.SctpFilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid represents the /nokia-conf/configure/application-assurance/group/partition/sctp-filter/ppid YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid struct {
	DefaultAction E_NokiaTypesApplicationAssurance_PermitDenyAction                                          `path:"default-action" module:"nokia-conf"`
	Entry         map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) NewEntry(EntryId uint32) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) GetEntry(EntryId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry struct to the
// list Entry of NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) AppendEntry(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) GetDefaultAction() E_NokiaTypesApplicationAssurance_PermitDenyAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	return t.DefaultAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesApplicationAssurance_PermitDenyAction_permit
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange represents the /nokia-conf/configure/application-assurance/group/partition/sctp-filter/ppid-range YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange struct {
	Max *uint32 `path:"max" module:"nokia-conf"`
	Min *uint32 `path:"min" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange) IsYANGGoStruct() {
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 4294967295
	}
	return *t.Max
}

// GetMin retrieves the value of the leaf Min from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange) GetMin() uint32 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Max == nil {
		var v uint32 = 4294967295
		t.Max = &v
	}
	if t.Min == nil {
		var v uint32 = 0
		t.Min = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_PpidRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry represents the /nokia-conf/configure/application-assurance/group/partition/sctp-filter/ppid/entry YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry struct {
	Action             E_NokiaTypesApplicationAssurance_PermitDenyActionNoDefault                                 `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	EntryId            *uint32                                                                                    `path:"entry-id" module:"nokia-conf"`
	Value              NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) IsYANGGoStruct() {
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) GetAction() E_NokiaTypesApplicationAssurance_PermitDenyActionNoDefault {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) GetValue() NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SctpFilter_Ppid_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter represents the /nokia-conf/configure/application-assurance/group/partition/session-filter YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter struct {
	ApplyGroups        []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultAction      *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction    `path:"default-action" module:"nokia-conf"`
	Description        *string                                                                                  `path:"description" module:"nokia-conf"`
	Entry              map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry `path:"entry" module:"nokia-conf"`
	SessionFilterName  *string                                                                                  `path:"session-filter-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter) NewEntry(EntryId uint32) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter) GetEntry(EntryId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry struct to the
// list Entry of NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter) AppendEntry(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter) GetOrCreateDefaultAction() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction{}
	return t.DefaultAction
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter) GetDefaultAction() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSessionFilterName retrieves the value of the leaf SessionFilterName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionFilterName is set, it can
// safely use t.GetSessionFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionFilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter) GetSessionFilterName() string {
	if t == nil || t.SessionFilterName == nil {
		return ""
	}
	return *t.SessionFilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefaultAction.PopulateDefaults()
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SessionFilterName == nil {
		return nil, fmt.Errorf("nil value for key SessionFilterName")
	}

	return map[string]interface{}{
		"session-filter-name": *t.SessionFilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction represents the /nokia-conf/configure/application-assurance/group/partition/session-filter/default-action YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction struct {
	Action   E_NokiaTypesApplicationAssurance_PermitDenyAction `path:"action" module:"nokia-conf"`
	EventLog *string                                           `path:"event-log" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction) IsYANGGoStruct() {
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction) GetAction() E_NokiaTypesApplicationAssurance_PermitDenyAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesApplicationAssurance_PermitDenyAction_deny
	}
	return t.Action
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesApplicationAssurance_PermitDenyAction_deny
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry represents the /nokia-conf/configure/application-assurance/group/partition/session-filter/entry YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry struct {
	Action             *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                              `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                                                              `path:"entry-id" module:"nokia-conf"`
	Match              *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match  `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry) IsYANGGoStruct() {
}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry) GetOrCreateAction() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry) GetOrCreateMatch() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry) GetAction() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry) GetMatch() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action represents the /nokia-conf/configure/application-assurance/group/partition/session-filter/entry/action YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action struct {
	Deny         YANGEmpty `path:"deny" module:"nokia-conf"`
	EventLog     *string   `path:"event-log" module:"nokia-conf"`
	HttpRedirect *string   `path:"http-redirect" module:"nokia-conf"`
	Permit       YANGEmpty `path:"permit" module:"nokia-conf"`
	TcpOptimizer *string   `path:"tcp-optimizer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) IsYANGGoStruct() {
}

// GetDeny retrieves the value of the leaf Deny from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Deny is set, it can
// safely use t.GetDeny() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Deny == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) GetDeny() YANGEmpty {
	if t == nil || t.Deny == false {
		return false
	}
	return t.Deny
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// GetHttpRedirect retrieves the value of the leaf HttpRedirect from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpRedirect is set, it can
// safely use t.GetHttpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) GetHttpRedirect() string {
	if t == nil || t.HttpRedirect == nil {
		return ""
	}
	return *t.HttpRedirect
}

// GetPermit retrieves the value of the leaf Permit from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Permit is set, it can
// safely use t.GetPermit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Permit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) GetPermit() YANGEmpty {
	if t == nil || t.Permit == false {
		return false
	}
	return t.Permit
}

// GetTcpOptimizer retrieves the value of the leaf TcpOptimizer from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpOptimizer is set, it can
// safely use t.GetTcpOptimizer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpOptimizer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) GetTcpOptimizer() string {
	if t == nil || t.TcpOptimizer == nil {
		return ""
	}
	return *t.TcpOptimizer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match represents the /nokia-conf/configure/application-assurance/group/partition/session-filter/entry/match YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match struct {
	DstIp      *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp           `path:"dst-ip" module:"nokia-conf"`
	DstPort    *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort         `path:"dst-port" module:"nokia-conf"`
	IpProtocol NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_IpProtocol_Union `path:"ip-protocol" module:"nokia-conf"`
	SrcIp      *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp           `path:"src-ip" module:"nokia-conf"`
	SrcPort    *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort         `path:"src-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) IsYANGGoStruct() {
}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) GetDstIp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) GetDstPort() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) GetSrcIp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) GetSrcPort() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetIpProtocol retrieves the value of the leaf IpProtocol from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpProtocol is set, it can
// safely use t.GetIpProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpProtocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) GetIpProtocol() NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_IpProtocol_Union {
	if t == nil || t.IpProtocol == nil {
		return nil
	}
	return t.IpProtocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp represents the /nokia-conf/configure/application-assurance/group/partition/session-filter/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp struct {
	DnsIpCache   *string `path:"dns-ip-cache" module:"nokia-conf"`
	IpPrefix     *string `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp) IsYANGGoStruct() {
}

// GetDnsIpCache retrieves the value of the leaf DnsIpCache from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnsIpCache is set, it can
// safely use t.GetDnsIpCache() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnsIpCache == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp) GetDnsIpCache() string {
	if t == nil || t.DnsIpCache == nil {
		return ""
	}
	return *t.DnsIpCache
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort represents the /nokia-conf/configure/application-assurance/group/partition/session-filter/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort struct {
	Eq       *int32                                                                                            `path:"eq" module:"nokia-conf"`
	Gt       *int32                                                                                            `path:"gt" module:"nokia-conf"`
	Lt       *int32                                                                                            `path:"lt" module:"nokia-conf"`
	PortList *string                                                                                           `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Eq == nil {
		var v int32 = 0
		t.Eq = &v
	}
	if t.Gt == nil {
		var v int32 = 0
		t.Gt = &v
	}
	if t.Lt == nil {
		var v int32 = 0
		t.Lt = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range represents the /nokia-conf/configure/application-assurance/group/partition/session-filter/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 1
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v int32 = 1
		t.End = &v
	}
	if t.Start == nil {
		var v int32 = 0
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp represents the /nokia-conf/configure/application-assurance/group/partition/session-filter/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp struct {
	IpPrefix     *string `path:"ip-prefix" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort represents the /nokia-conf/configure/application-assurance/group/partition/session-filter/entry/match/src-port YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort struct {
	Eq       *int32                                                                                            `path:"eq" module:"nokia-conf"`
	Gt       *int32                                                                                            `path:"gt" module:"nokia-conf"`
	Lt       *int32                                                                                            `path:"lt" module:"nokia-conf"`
	PortList *string                                                                                           `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) GetEq() int32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) GetGt() int32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) GetLt() int32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Eq == nil {
		var v int32 = 0
		t.Eq = &v
	}
	if t.Gt == nil {
		var v int32 = 0
		t.Gt = &v
	}
	if t.Lt == nil {
		var v int32 = 0
		t.Lt = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/application-assurance/group/partition/session-filter/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 1
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v int32 = 1
		t.End = &v
	}
	if t.Start == nil {
		var v int32 = 0
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_SessionFilter_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics represents the /nokia-conf/configure/application-assurance/group/partition/statistics YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics struct {
	AaAdmitDeny   *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny                                                    `path:"aa-admit-deny" module:"nokia-conf"`
	AaAppGroup    *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup                                                     `path:"aa-app-group" module:"nokia-conf"`
	AaApplication *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication                                                  `path:"aa-application" module:"nokia-conf"`
	AaPartition   *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition                                                    `path:"aa-partition" module:"nokia-conf"`
	AaProtocol    *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol                                                     `path:"aa-protocol" module:"nokia-conf"`
	AaSub         *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub                                                          `path:"aa-sub" module:"nokia-conf"`
	AaSubStudy    map[E_NokiaTypesApplicationAssurance_StudyStatsType]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy `path:"aa-sub-study" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) IsYANGGoStruct() {}

// NewAaSubStudy creates a new entry in the AaSubStudy list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) NewAaSubStudy(StudyType E_NokiaTypesApplicationAssurance_StudyStatsType) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AaSubStudy == nil {
		t.AaSubStudy = make(map[E_NokiaTypesApplicationAssurance_StudyStatsType]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy)
	}

	key := StudyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AaSubStudy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AaSubStudy", key)
	}

	t.AaSubStudy[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy{
		StudyType: StudyType,
	}

	return t.AaSubStudy[key], nil
}

// RenameAaSubStudy renames an entry in the list AaSubStudy within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) RenameAaSubStudy(oldK, newK E_NokiaTypesApplicationAssurance_StudyStatsType) error {
	if _, ok := t.AaSubStudy[newK]; ok {
		return fmt.Errorf("key %v already exists in AaSubStudy", newK)
	}

	e, ok := t.AaSubStudy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AaSubStudy", oldK)
	}
	e.StudyType = newK

	t.AaSubStudy[newK] = e
	delete(t.AaSubStudy, oldK)
	return nil
}

// GetOrCreateAaSubStudy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) GetOrCreateAaSubStudy(StudyType E_NokiaTypesApplicationAssurance_StudyStatsType) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy {

	key := StudyType

	if v, ok := t.AaSubStudy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAaSubStudy(StudyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAaSubStudy got unexpected error: %v", err))
	}
	return v
}

// GetAaSubStudy retrieves the value with the specified key from
// the AaSubStudy map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) GetAaSubStudy(StudyType E_NokiaTypesApplicationAssurance_StudyStatsType) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy {

	if t == nil {
		return nil
	}

	key := StudyType

	if lm, ok := t.AaSubStudy[key]; ok {
		return lm
	}
	return nil
}

// DeleteAaSubStudy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) DeleteAaSubStudy(StudyType E_NokiaTypesApplicationAssurance_StudyStatsType) {
	key := StudyType

	delete(t.AaSubStudy, key)
}

// AppendAaSubStudy appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy struct to the
// list AaSubStudy of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) AppendAaSubStudy(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) error {
	key := v.StudyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AaSubStudy == nil {
		t.AaSubStudy = make(map[E_NokiaTypesApplicationAssurance_StudyStatsType]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy)
	}

	if _, ok := t.AaSubStudy[key]; ok {
		return fmt.Errorf("duplicate key for list AaSubStudy %v", key)
	}

	t.AaSubStudy[key] = v
	return nil
}

// GetOrCreateAaAdmitDeny retrieves the value of the AaAdmitDeny field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) GetOrCreateAaAdmitDeny() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny {
	if t.AaAdmitDeny != nil {
		return t.AaAdmitDeny
	}
	t.AaAdmitDeny = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny{}
	return t.AaAdmitDeny
}

// GetOrCreateAaAppGroup retrieves the value of the AaAppGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) GetOrCreateAaAppGroup() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup {
	if t.AaAppGroup != nil {
		return t.AaAppGroup
	}
	t.AaAppGroup = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup{}
	return t.AaAppGroup
}

// GetOrCreateAaApplication retrieves the value of the AaApplication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) GetOrCreateAaApplication() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication {
	if t.AaApplication != nil {
		return t.AaApplication
	}
	t.AaApplication = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication{}
	return t.AaApplication
}

// GetOrCreateAaPartition retrieves the value of the AaPartition field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) GetOrCreateAaPartition() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition {
	if t.AaPartition != nil {
		return t.AaPartition
	}
	t.AaPartition = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition{}
	return t.AaPartition
}

// GetOrCreateAaProtocol retrieves the value of the AaProtocol field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) GetOrCreateAaProtocol() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol {
	if t.AaProtocol != nil {
		return t.AaProtocol
	}
	t.AaProtocol = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol{}
	return t.AaProtocol
}

// GetOrCreateAaSub retrieves the value of the AaSub field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) GetOrCreateAaSub() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub {
	if t.AaSub != nil {
		return t.AaSub
	}
	t.AaSub = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub{}
	return t.AaSub
}

// GetAaAdmitDeny returns the value of the AaAdmitDeny struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics. If the receiver or the field AaAdmitDeny is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) GetAaAdmitDeny() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny {
	if t != nil && t.AaAdmitDeny != nil {
		return t.AaAdmitDeny
	}
	return nil
}

// GetAaAppGroup returns the value of the AaAppGroup struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics. If the receiver or the field AaAppGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) GetAaAppGroup() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup {
	if t != nil && t.AaAppGroup != nil {
		return t.AaAppGroup
	}
	return nil
}

// GetAaApplication returns the value of the AaApplication struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics. If the receiver or the field AaApplication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) GetAaApplication() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication {
	if t != nil && t.AaApplication != nil {
		return t.AaApplication
	}
	return nil
}

// GetAaPartition returns the value of the AaPartition struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics. If the receiver or the field AaPartition is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) GetAaPartition() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition {
	if t != nil && t.AaPartition != nil {
		return t.AaPartition
	}
	return nil
}

// GetAaProtocol returns the value of the AaProtocol struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics. If the receiver or the field AaProtocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) GetAaProtocol() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol {
	if t != nil && t.AaProtocol != nil {
		return t.AaProtocol
	}
	return nil
}

// GetAaSub returns the value of the AaSub struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics. If the receiver or the field AaSub is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) GetAaSub() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub {
	if t != nil && t.AaSub != nil {
		return t.AaSub
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AaAdmitDeny.PopulateDefaults()
	t.AaAppGroup.PopulateDefaults()
	t.AaApplication.PopulateDefaults()
	t.AaPartition.PopulateDefaults()
	t.AaProtocol.PopulateDefaults()
	t.AaSub.PopulateDefaults()
	for _, e := range t.AaSubStudy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny represents the /nokia-conf/configure/application-assurance/group/partition/statistics/aa-admit-deny YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny struct {
	AccountingPolicy      *uint32  `path:"accounting-policy" module:"nokia-conf"`
	ApplyGroups           []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats          *bool    `path:"collect-stats" module:"nokia-conf"`
	GtpFilterStats        *bool    `path:"gtp-filter-stats" module:"nokia-conf"`
	PolicerStats          *bool    `path:"policer-stats" module:"nokia-conf"`
	PolicerStatsResources *bool    `path:"policer-stats-resources" module:"nokia-conf"`
	SctpFilterStats       *bool    `path:"sctp-filter-stats" module:"nokia-conf"`
	SessionFilterStats    *bool    `path:"session-filter-stats" module:"nokia-conf"`
	TcpValidateStats      *bool    `path:"tcp-validate-stats" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) IsYANGGoStruct() {
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetGtpFilterStats retrieves the value of the leaf GtpFilterStats from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GtpFilterStats is set, it can
// safely use t.GetGtpFilterStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GtpFilterStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) GetGtpFilterStats() bool {
	if t == nil || t.GtpFilterStats == nil {
		return false
	}
	return *t.GtpFilterStats
}

// GetPolicerStats retrieves the value of the leaf PolicerStats from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerStats is set, it can
// safely use t.GetPolicerStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) GetPolicerStats() bool {
	if t == nil || t.PolicerStats == nil {
		return false
	}
	return *t.PolicerStats
}

// GetPolicerStatsResources retrieves the value of the leaf PolicerStatsResources from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerStatsResources is set, it can
// safely use t.GetPolicerStatsResources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerStatsResources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) GetPolicerStatsResources() bool {
	if t == nil || t.PolicerStatsResources == nil {
		return false
	}
	return *t.PolicerStatsResources
}

// GetSctpFilterStats retrieves the value of the leaf SctpFilterStats from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SctpFilterStats is set, it can
// safely use t.GetSctpFilterStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SctpFilterStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) GetSctpFilterStats() bool {
	if t == nil || t.SctpFilterStats == nil {
		return false
	}
	return *t.SctpFilterStats
}

// GetSessionFilterStats retrieves the value of the leaf SessionFilterStats from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionFilterStats is set, it can
// safely use t.GetSessionFilterStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionFilterStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) GetSessionFilterStats() bool {
	if t == nil || t.SessionFilterStats == nil {
		return false
	}
	return *t.SessionFilterStats
}

// GetTcpValidateStats retrieves the value of the leaf TcpValidateStats from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpValidateStats is set, it can
// safely use t.GetTcpValidateStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpValidateStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) GetTcpValidateStats() bool {
	if t == nil || t.TcpValidateStats == nil {
		return false
	}
	return *t.TcpValidateStats
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.GtpFilterStats == nil {
		var v bool = false
		t.GtpFilterStats = &v
	}
	if t.PolicerStats == nil {
		var v bool = false
		t.PolicerStats = &v
	}
	if t.PolicerStatsResources == nil {
		var v bool = false
		t.PolicerStatsResources = &v
	}
	if t.SctpFilterStats == nil {
		var v bool = false
		t.SctpFilterStats = &v
	}
	if t.SessionFilterStats == nil {
		var v bool = false
		t.SessionFilterStats = &v
	}
	if t.TcpValidateStats == nil {
		var v bool = false
		t.TcpValidateStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAdmitDeny) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup represents the /nokia-conf/configure/application-assurance/group/partition/statistics/aa-app-group YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup struct {
	AccountingPolicy   *uint32  `path:"accounting-policy" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats       *bool    `path:"collect-stats" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup) IsYANGGoStruct() {
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaAppGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication represents the /nokia-conf/configure/application-assurance/group/partition/statistics/aa-application YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication struct {
	AccountingPolicy   *uint32  `path:"accounting-policy" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats       *bool    `path:"collect-stats" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication) IsYANGGoStruct() {
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaApplication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition represents the /nokia-conf/configure/application-assurance/group/partition/statistics/aa-partition YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition struct {
	AccountingPolicy   *uint32  `path:"accounting-policy" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats       *bool    `path:"collect-stats" module:"nokia-conf"`
	TetheringStats     *bool    `path:"tethering-stats" module:"nokia-conf"`
	TrafficTypeStats   *bool    `path:"traffic-type-stats" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition) IsYANGGoStruct() {
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetTetheringStats retrieves the value of the leaf TetheringStats from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TetheringStats is set, it can
// safely use t.GetTetheringStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TetheringStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition) GetTetheringStats() bool {
	if t == nil || t.TetheringStats == nil {
		return false
	}
	return *t.TetheringStats
}

// GetTrafficTypeStats retrieves the value of the leaf TrafficTypeStats from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrafficTypeStats is set, it can
// safely use t.GetTrafficTypeStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrafficTypeStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition) GetTrafficTypeStats() bool {
	if t == nil || t.TrafficTypeStats == nil {
		return false
	}
	return *t.TrafficTypeStats
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.TetheringStats == nil {
		var v bool = false
		t.TetheringStats = &v
	}
	if t.TrafficTypeStats == nil {
		var v bool = false
		t.TrafficTypeStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaPartition) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol represents the /nokia-conf/configure/application-assurance/group/partition/statistics/aa-protocol YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol struct {
	AccountingPolicy   *uint32                     `path:"accounting-policy" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats       *bool                       `path:"collect-stats" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol) IsYANGGoStruct() {
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaProtocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub represents the /nokia-conf/configure/application-assurance/group/partition/statistics/aa-sub YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub struct {
	AccountingPolicy          *uint32                                                                                                 `path:"accounting-policy" module:"nokia-conf"`
	AggregateStatsExportUsing []E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AggregateStatsExportUsing `path:"aggregate-stats-export-using" module:"nokia-conf"`
	AppGroup                  map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup          `path:"app-group" module:"nokia-conf"`
	Application               map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application       `path:"application" module:"nokia-conf"`
	ApplyGroups               []string                                                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	ChargingGroup             map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup     `path:"charging-group" module:"nokia-conf"`
	CollectStats              *bool                                                                                                   `path:"collect-stats" module:"nokia-conf"`
	ExcludeTcpRetrans         *bool                                                                                                   `path:"exclude-tcp-retrans" module:"nokia-conf"`
	MaxThroughputStats        *bool                                                                                                   `path:"max-throughput-stats" module:"nokia-conf"`
	Protocol                  map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol          `path:"protocol" module:"nokia-conf"`
	RadiusAccountingPolicy    *string                                                                                                 `path:"radius-accounting-policy" module:"nokia-conf"`
	UsageMonitoring           *bool                                                                                                   `path:"usage-monitoring" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) IsYANGGoStruct() {}

// NewAppGroup creates a new entry in the AppGroup list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) NewAppGroup(AppGroupName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AppGroup == nil {
		t.AppGroup = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup)
	}

	key := AppGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AppGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AppGroup", key)
	}

	t.AppGroup[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup{
		AppGroupName: &AppGroupName,
	}

	return t.AppGroup[key], nil
}

// RenameAppGroup renames an entry in the list AppGroup within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) RenameAppGroup(oldK, newK string) error {
	if _, ok := t.AppGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AppGroup", newK)
	}

	e, ok := t.AppGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AppGroup", oldK)
	}
	e.AppGroupName = &newK

	t.AppGroup[newK] = e
	delete(t.AppGroup, oldK)
	return nil
}

// GetOrCreateAppGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetOrCreateAppGroup(AppGroupName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup {

	key := AppGroupName

	if v, ok := t.AppGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAppGroup(AppGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAppGroup got unexpected error: %v", err))
	}
	return v
}

// GetAppGroup retrieves the value with the specified key from
// the AppGroup map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetAppGroup(AppGroupName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup {

	if t == nil {
		return nil
	}

	key := AppGroupName

	if lm, ok := t.AppGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAppGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) DeleteAppGroup(AppGroupName string) {
	key := AppGroupName

	delete(t.AppGroup, key)
}

// AppendAppGroup appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup struct to the
// list AppGroup of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) AppendAppGroup(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) error {
	if v.AppGroupName == nil {
		return fmt.Errorf("invalid nil key received for AppGroupName")
	}

	key := *v.AppGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AppGroup == nil {
		t.AppGroup = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup)
	}

	if _, ok := t.AppGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AppGroup %v", key)
	}

	t.AppGroup[key] = v
	return nil
}

// NewApplication creates a new entry in the Application list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) NewApplication(ApplicationName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application)
	}

	key := ApplicationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Application[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Application", key)
	}

	t.Application[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application{
		ApplicationName: &ApplicationName,
	}

	return t.Application[key], nil
}

// RenameApplication renames an entry in the list Application within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) RenameApplication(oldK, newK string) error {
	if _, ok := t.Application[newK]; ok {
		return fmt.Errorf("key %v already exists in Application", newK)
	}

	e, ok := t.Application[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Application", oldK)
	}
	e.ApplicationName = &newK

	t.Application[newK] = e
	delete(t.Application, oldK)
	return nil
}

// GetOrCreateApplication retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetOrCreateApplication(ApplicationName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application {

	key := ApplicationName

	if v, ok := t.Application[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewApplication(ApplicationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateApplication got unexpected error: %v", err))
	}
	return v
}

// GetApplication retrieves the value with the specified key from
// the Application map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetApplication(ApplicationName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application {

	if t == nil {
		return nil
	}

	key := ApplicationName

	if lm, ok := t.Application[key]; ok {
		return lm
	}
	return nil
}

// DeleteApplication deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) DeleteApplication(ApplicationName string) {
	key := ApplicationName

	delete(t.Application, key)
}

// AppendApplication appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application struct to the
// list Application of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) AppendApplication(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) error {
	if v.ApplicationName == nil {
		return fmt.Errorf("invalid nil key received for ApplicationName")
	}

	key := *v.ApplicationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application)
	}

	if _, ok := t.Application[key]; ok {
		return fmt.Errorf("duplicate key for list Application %v", key)
	}

	t.Application[key] = v
	return nil
}

// NewChargingGroup creates a new entry in the ChargingGroup list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) NewChargingGroup(ChargingGroupName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChargingGroup == nil {
		t.ChargingGroup = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup)
	}

	key := ChargingGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ChargingGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ChargingGroup", key)
	}

	t.ChargingGroup[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup{
		ChargingGroupName: &ChargingGroupName,
	}

	return t.ChargingGroup[key], nil
}

// RenameChargingGroup renames an entry in the list ChargingGroup within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) RenameChargingGroup(oldK, newK string) error {
	if _, ok := t.ChargingGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ChargingGroup", newK)
	}

	e, ok := t.ChargingGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ChargingGroup", oldK)
	}
	e.ChargingGroupName = &newK

	t.ChargingGroup[newK] = e
	delete(t.ChargingGroup, oldK)
	return nil
}

// GetOrCreateChargingGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetOrCreateChargingGroup(ChargingGroupName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup {

	key := ChargingGroupName

	if v, ok := t.ChargingGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChargingGroup(ChargingGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChargingGroup got unexpected error: %v", err))
	}
	return v
}

// GetChargingGroup retrieves the value with the specified key from
// the ChargingGroup map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetChargingGroup(ChargingGroupName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup {

	if t == nil {
		return nil
	}

	key := ChargingGroupName

	if lm, ok := t.ChargingGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteChargingGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) DeleteChargingGroup(ChargingGroupName string) {
	key := ChargingGroupName

	delete(t.ChargingGroup, key)
}

// AppendChargingGroup appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup struct to the
// list ChargingGroup of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) AppendChargingGroup(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) error {
	if v.ChargingGroupName == nil {
		return fmt.Errorf("invalid nil key received for ChargingGroupName")
	}

	key := *v.ChargingGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChargingGroup == nil {
		t.ChargingGroup = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup)
	}

	if _, ok := t.ChargingGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ChargingGroup %v", key)
	}

	t.ChargingGroup[key] = v
	return nil
}

// NewProtocol creates a new entry in the Protocol list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) NewProtocol(ProtocolName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Protocol == nil {
		t.Protocol = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol)
	}

	key := ProtocolName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Protocol[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Protocol", key)
	}

	t.Protocol[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol{
		ProtocolName: &ProtocolName,
	}

	return t.Protocol[key], nil
}

// RenameProtocol renames an entry in the list Protocol within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) RenameProtocol(oldK, newK string) error {
	if _, ok := t.Protocol[newK]; ok {
		return fmt.Errorf("key %v already exists in Protocol", newK)
	}

	e, ok := t.Protocol[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Protocol", oldK)
	}
	e.ProtocolName = &newK

	t.Protocol[newK] = e
	delete(t.Protocol, oldK)
	return nil
}

// GetOrCreateProtocol retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetOrCreateProtocol(ProtocolName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol {

	key := ProtocolName

	if v, ok := t.Protocol[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProtocol(ProtocolName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProtocol got unexpected error: %v", err))
	}
	return v
}

// GetProtocol retrieves the value with the specified key from
// the Protocol map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetProtocol(ProtocolName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol {

	if t == nil {
		return nil
	}

	key := ProtocolName

	if lm, ok := t.Protocol[key]; ok {
		return lm
	}
	return nil
}

// DeleteProtocol deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) DeleteProtocol(ProtocolName string) {
	key := ProtocolName

	delete(t.Protocol, key)
}

// AppendProtocol appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol struct to the
// list Protocol of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) AppendProtocol(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) error {
	if v.ProtocolName == nil {
		return fmt.Errorf("invalid nil key received for ProtocolName")
	}

	key := *v.ProtocolName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Protocol == nil {
		t.Protocol = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol)
	}

	if _, ok := t.Protocol[key]; ok {
		return fmt.Errorf("duplicate key for list Protocol %v", key)
	}

	t.Protocol[key] = v
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAggregateStatsExportUsing retrieves the value of the leaf AggregateStatsExportUsing from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregateStatsExportUsing is set, it can
// safely use t.GetAggregateStatsExportUsing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregateStatsExportUsing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetAggregateStatsExportUsing() []E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AggregateStatsExportUsing {
	if t == nil || t.AggregateStatsExportUsing == nil {
		return nil
	}
	return t.AggregateStatsExportUsing
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetExcludeTcpRetrans retrieves the value of the leaf ExcludeTcpRetrans from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExcludeTcpRetrans is set, it can
// safely use t.GetExcludeTcpRetrans() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExcludeTcpRetrans == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetExcludeTcpRetrans() bool {
	if t == nil || t.ExcludeTcpRetrans == nil {
		return false
	}
	return *t.ExcludeTcpRetrans
}

// GetMaxThroughputStats retrieves the value of the leaf MaxThroughputStats from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxThroughputStats is set, it can
// safely use t.GetMaxThroughputStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxThroughputStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetMaxThroughputStats() bool {
	if t == nil || t.MaxThroughputStats == nil {
		return false
	}
	return *t.MaxThroughputStats
}

// GetRadiusAccountingPolicy retrieves the value of the leaf RadiusAccountingPolicy from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAccountingPolicy is set, it can
// safely use t.GetRadiusAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetRadiusAccountingPolicy() string {
	if t == nil || t.RadiusAccountingPolicy == nil {
		return ""
	}
	return *t.RadiusAccountingPolicy
}

// GetUsageMonitoring retrieves the value of the leaf UsageMonitoring from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsageMonitoring is set, it can
// safely use t.GetUsageMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsageMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) GetUsageMonitoring() bool {
	if t == nil || t.UsageMonitoring == nil {
		return false
	}
	return *t.UsageMonitoring
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.ExcludeTcpRetrans == nil {
		var v bool = false
		t.ExcludeTcpRetrans = &v
	}
	if t.MaxThroughputStats == nil {
		var v bool = false
		t.MaxThroughputStats = &v
	}
	if t.UsageMonitoring == nil {
		var v bool = false
		t.UsageMonitoring = &v
	}
	for _, e := range t.AppGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Application {
		e.PopulateDefaults()
	}
	for _, e := range t.ChargingGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Protocol {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy represents the /nokia-conf/configure/application-assurance/group/partition/statistics/aa-sub-study YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy struct {
	AaSub              *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub `path:"aa-sub" module:"nokia-conf"`
	AccountingPolicy   *uint32                                                                               `path:"accounting-policy" module:"nokia-conf"`
	ApplyGroups        []string                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats       *bool                                                                                 `path:"collect-stats" module:"nokia-conf"`
	StudyType          E_NokiaTypesApplicationAssurance_StudyStatsType                                       `path:"study-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) IsYANGGoStruct() {
}

// GetOrCreateAaSub retrieves the value of the AaSub field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) GetOrCreateAaSub() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub {
	if t.AaSub != nil {
		return t.AaSub
	}
	t.AaSub = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub{}
	return t.AaSub
}

// GetAaSub returns the value of the AaSub struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy. If the receiver or the field AaSub is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) GetAaSub() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub {
	if t != nil && t.AaSub != nil {
		return t.AaSub
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetStudyType retrieves the value of the leaf StudyType from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StudyType is set, it can
// safely use t.GetStudyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StudyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) GetStudyType() E_NokiaTypesApplicationAssurance_StudyStatsType {
	if t == nil || t.StudyType == 0 {
		return 0
	}
	return t.StudyType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	t.AaSub.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"study-type": t.StudyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub represents the /nokia-conf/configure/application-assurance/group/partition/statistics/aa-sub-study/aa-sub YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct {
	Esm      map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm      `path:"esm" module:"nokia-conf"`
	EsmMac   map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac   `path:"esm-mac" module:"nokia-conf"`
	Sap      map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap      `path:"sap" module:"nokia-conf"`
	SpokeSdp map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
	Transit  map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit  `path:"transit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) IsYANGGoStruct() {
}

// NewEsm creates a new entry in the Esm list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) NewEsm(EsmSubName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Esm == nil {
		t.Esm = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm)
	}

	key := EsmSubName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Esm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Esm", key)
	}

	t.Esm[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm{
		EsmSubName: &EsmSubName,
	}

	return t.Esm[key], nil
}

// RenameEsm renames an entry in the list Esm within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) RenameEsm(oldK, newK string) error {
	if _, ok := t.Esm[newK]; ok {
		return fmt.Errorf("key %v already exists in Esm", newK)
	}

	e, ok := t.Esm[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Esm", oldK)
	}
	e.EsmSubName = &newK

	t.Esm[newK] = e
	delete(t.Esm, oldK)
	return nil
}

// GetOrCreateEsm retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) GetOrCreateEsm(EsmSubName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm {

	key := EsmSubName

	if v, ok := t.Esm[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEsm(EsmSubName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEsm got unexpected error: %v", err))
	}
	return v
}

// GetEsm retrieves the value with the specified key from
// the Esm map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) GetEsm(EsmSubName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm {

	if t == nil {
		return nil
	}

	key := EsmSubName

	if lm, ok := t.Esm[key]; ok {
		return lm
	}
	return nil
}

// DeleteEsm deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) DeleteEsm(EsmSubName string) {
	key := EsmSubName

	delete(t.Esm, key)
}

// AppendEsm appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm struct to the
// list Esm of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) AppendEsm(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm) error {
	if v.EsmSubName == nil {
		return fmt.Errorf("invalid nil key received for EsmSubName")
	}

	key := *v.EsmSubName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Esm == nil {
		t.Esm = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm)
	}

	if _, ok := t.Esm[key]; ok {
		return fmt.Errorf("duplicate key for list Esm %v", key)
	}

	t.Esm[key] = v
	return nil
}

// NewEsmMac creates a new entry in the EsmMac list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) NewEsmMac(EsmMacSubName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EsmMac == nil {
		t.EsmMac = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac)
	}

	key := EsmMacSubName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EsmMac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EsmMac", key)
	}

	t.EsmMac[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac{
		EsmMacSubName: &EsmMacSubName,
	}

	return t.EsmMac[key], nil
}

// RenameEsmMac renames an entry in the list EsmMac within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) RenameEsmMac(oldK, newK string) error {
	if _, ok := t.EsmMac[newK]; ok {
		return fmt.Errorf("key %v already exists in EsmMac", newK)
	}

	e, ok := t.EsmMac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EsmMac", oldK)
	}
	e.EsmMacSubName = &newK

	t.EsmMac[newK] = e
	delete(t.EsmMac, oldK)
	return nil
}

// GetOrCreateEsmMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) GetOrCreateEsmMac(EsmMacSubName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac {

	key := EsmMacSubName

	if v, ok := t.EsmMac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEsmMac(EsmMacSubName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEsmMac got unexpected error: %v", err))
	}
	return v
}

// GetEsmMac retrieves the value with the specified key from
// the EsmMac map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) GetEsmMac(EsmMacSubName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac {

	if t == nil {
		return nil
	}

	key := EsmMacSubName

	if lm, ok := t.EsmMac[key]; ok {
		return lm
	}
	return nil
}

// DeleteEsmMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) DeleteEsmMac(EsmMacSubName string) {
	key := EsmMacSubName

	delete(t.EsmMac, key)
}

// AppendEsmMac appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac struct to the
// list EsmMac of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) AppendEsmMac(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac) error {
	if v.EsmMacSubName == nil {
		return fmt.Errorf("invalid nil key received for EsmMacSubName")
	}

	key := *v.EsmMacSubName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EsmMac == nil {
		t.EsmMac = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac)
	}

	if _, ok := t.EsmMac[key]; ok {
		return fmt.Errorf("duplicate key for list EsmMac %v", key)
	}

	t.EsmMac[key] = v
	return nil
}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) NewSap(SapId string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) GetOrCreateSap(SapId string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) GetSap(SapId string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap struct to the
// list Sap of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) AppendSap(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) AppendSpokeSdp(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// NewTransit creates a new entry in the Transit list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) NewTransit(TransitSubName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Transit == nil {
		t.Transit = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit)
	}

	key := TransitSubName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Transit[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Transit", key)
	}

	t.Transit[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit{
		TransitSubName: &TransitSubName,
	}

	return t.Transit[key], nil
}

// RenameTransit renames an entry in the list Transit within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) RenameTransit(oldK, newK string) error {
	if _, ok := t.Transit[newK]; ok {
		return fmt.Errorf("key %v already exists in Transit", newK)
	}

	e, ok := t.Transit[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Transit", oldK)
	}
	e.TransitSubName = &newK

	t.Transit[newK] = e
	delete(t.Transit, oldK)
	return nil
}

// GetOrCreateTransit retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) GetOrCreateTransit(TransitSubName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit {

	key := TransitSubName

	if v, ok := t.Transit[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTransit(TransitSubName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTransit got unexpected error: %v", err))
	}
	return v
}

// GetTransit retrieves the value with the specified key from
// the Transit map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) GetTransit(TransitSubName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit {

	if t == nil {
		return nil
	}

	key := TransitSubName

	if lm, ok := t.Transit[key]; ok {
		return lm
	}
	return nil
}

// DeleteTransit deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) DeleteTransit(TransitSubName string) {
	key := TransitSubName

	delete(t.Transit, key)
}

// AppendTransit appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit struct to the
// list Transit of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) AppendTransit(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit) error {
	if v.TransitSubName == nil {
		return fmt.Errorf("invalid nil key received for TransitSubName")
	}

	key := *v.TransitSubName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Transit == nil {
		t.Transit = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit)
	}

	if _, ok := t.Transit[key]; ok {
		return fmt.Errorf("duplicate key for list Transit %v", key)
	}

	t.Transit[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Esm {
		e.PopulateDefaults()
	}
	for _, e := range t.EsmMac {
		e.PopulateDefaults()
	}
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
	for _, e := range t.Transit {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm represents the /nokia-conf/configure/application-assurance/group/partition/statistics/aa-sub-study/aa-sub/esm YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm struct {
	EsmSubName *string `path:"esm-sub-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm) IsYANGGoStruct() {
}

// GetEsmSubName retrieves the value of the leaf EsmSubName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsmSubName is set, it can
// safely use t.GetEsmSubName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsmSubName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm) GetEsmSubName() string {
	if t == nil || t.EsmSubName == nil {
		return ""
	}
	return *t.EsmSubName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EsmSubName == nil {
		return nil, fmt.Errorf("nil value for key EsmSubName")
	}

	return map[string]interface{}{
		"esm-sub-name": *t.EsmSubName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Esm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac represents the /nokia-conf/configure/application-assurance/group/partition/statistics/aa-sub-study/aa-sub/esm-mac YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac struct {
	EsmMacSubName *string `path:"esm-mac-sub-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac) IsYANGGoStruct() {
}

// GetEsmMacSubName retrieves the value of the leaf EsmMacSubName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsmMacSubName is set, it can
// safely use t.GetEsmMacSubName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsmMacSubName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac) GetEsmMacSubName() string {
	if t == nil || t.EsmMacSubName == nil {
		return ""
	}
	return *t.EsmMacSubName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EsmMacSubName == nil {
		return nil, fmt.Errorf("nil value for key EsmMacSubName")
	}

	return map[string]interface{}{
		"esm-mac-sub-name": *t.EsmMacSubName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_EsmMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap represents the /nokia-conf/configure/application-assurance/group/partition/statistics/aa-sub-study/aa-sub/sap YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap struct {
	SapId *string `path:"sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap) IsYANGGoStruct() {
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp represents the /nokia-conf/configure/application-assurance/group/partition/statistics/aa-sub-study/aa-sub/spoke-sdp YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp struct {
	SdpBindId *string `path:"sdp-bind-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp) IsYANGGoStruct() {
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit represents the /nokia-conf/configure/application-assurance/group/partition/statistics/aa-sub-study/aa-sub/transit YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit struct {
	TransitSubName *string `path:"transit-sub-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit) IsYANGGoStruct() {
}

// GetTransitSubName retrieves the value of the leaf TransitSubName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitSubName is set, it can
// safely use t.GetTransitSubName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitSubName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit) GetTransitSubName() string {
	if t == nil || t.TransitSubName == nil {
		return ""
	}
	return *t.TransitSubName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TransitSubName == nil {
		return nil, fmt.Errorf("nil value for key TransitSubName")
	}

	return map[string]interface{}{
		"transit-sub-name": *t.TransitSubName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSubStudy_AaSub_Transit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup represents the /nokia-conf/configure/application-assurance/group/partition/statistics/aa-sub/app-group YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup struct {
	AppGroupName       *string                                                                                            `path:"app-group-name" module:"nokia-conf"`
	ApplyGroups        []string                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	ExportUsing        []E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup_ExportUsing `path:"export-using" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) IsYANGGoStruct() {
}

// GetAppGroupName retrieves the value of the leaf AppGroupName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppGroupName is set, it can
// safely use t.GetAppGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) GetAppGroupName() string {
	if t == nil || t.AppGroupName == nil {
		return ""
	}
	return *t.AppGroupName
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetExportUsing retrieves the value of the leaf ExportUsing from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportUsing is set, it can
// safely use t.GetExportUsing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportUsing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) GetExportUsing() []E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup_ExportUsing {
	if t == nil || t.ExportUsing == nil {
		return nil
	}
	return t.ExportUsing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AppGroupName == nil {
		return nil, fmt.Errorf("nil value for key AppGroupName")
	}

	return map[string]interface{}{
		"app-group-name": *t.AppGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_AppGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application represents the /nokia-conf/configure/application-assurance/group/partition/statistics/aa-sub/application YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application struct {
	ApplicationName    *string                                                                                               `path:"application-name" module:"nokia-conf"`
	ApplyGroups        []string                                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	ExportUsing        []E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application_ExportUsing `path:"export-using" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) IsYANGGoStruct() {
}

// GetApplicationName retrieves the value of the leaf ApplicationName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplicationName is set, it can
// safely use t.GetApplicationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplicationName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) GetApplicationName() string {
	if t == nil || t.ApplicationName == nil {
		return ""
	}
	return *t.ApplicationName
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetExportUsing retrieves the value of the leaf ExportUsing from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportUsing is set, it can
// safely use t.GetExportUsing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportUsing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) GetExportUsing() []E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application_ExportUsing {
	if t == nil || t.ExportUsing == nil {
		return nil
	}
	return t.ExportUsing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ApplicationName == nil {
		return nil, fmt.Errorf("nil value for key ApplicationName")
	}

	return map[string]interface{}{
		"application-name": *t.ApplicationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup represents the /nokia-conf/configure/application-assurance/group/partition/statistics/aa-sub/charging-group YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup struct {
	ApplyGroups        []string                                                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	ChargingGroupName  *string                                                                                                 `path:"charging-group-name" module:"nokia-conf"`
	ExportUsing        []E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup_ExportUsing `path:"export-using" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetChargingGroupName retrieves the value of the leaf ChargingGroupName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChargingGroupName is set, it can
// safely use t.GetChargingGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChargingGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) GetChargingGroupName() string {
	if t == nil || t.ChargingGroupName == nil {
		return ""
	}
	return *t.ChargingGroupName
}

// GetExportUsing retrieves the value of the leaf ExportUsing from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportUsing is set, it can
// safely use t.GetExportUsing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportUsing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) GetExportUsing() []E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup_ExportUsing {
	if t == nil || t.ExportUsing == nil {
		return nil
	}
	return t.ExportUsing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ChargingGroupName == nil {
		return nil, fmt.Errorf("nil value for key ChargingGroupName")
	}

	return map[string]interface{}{
		"charging-group-name": *t.ChargingGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_ChargingGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol represents the /nokia-conf/configure/application-assurance/group/partition/statistics/aa-sub/protocol YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol struct {
	ApplyGroups        []string                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	ExportUsing        []E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol_ExportUsing `path:"export-using" module:"nokia-conf"`
	ProtocolName       *string                                                                                            `path:"protocol-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetExportUsing retrieves the value of the leaf ExportUsing from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportUsing is set, it can
// safely use t.GetExportUsing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportUsing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) GetExportUsing() []E_NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol_ExportUsing {
	if t == nil || t.ExportUsing == nil {
		return nil
	}
	return t.ExportUsing
}

// GetProtocolName retrieves the value of the leaf ProtocolName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolName is set, it can
// safely use t.GetProtocolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) GetProtocolName() string {
	if t == nil || t.ProtocolName == nil {
		return ""
	}
	return *t.ProtocolName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ProtocolName == nil {
		return nil, fmt.Errorf("nil value for key ProtocolName")
	}

	return map[string]interface{}{
		"protocol-name": *t.ProtocolName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Statistics_AaSub_Protocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate represents the /nokia-conf/configure/application-assurance/group/partition/tcp-validate YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate struct {
	ApplyGroups        []string                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                   `path:"description" module:"nokia-conf"`
	Log                *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate_Log `path:"log" module:"nokia-conf"`
	Strict             *bool                                                                     `path:"strict" module:"nokia-conf"`
	TcpValidateName    *string                                                                   `path:"tcp-validate-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate) IsYANGGoStruct() {}

// GetOrCreateLog retrieves the value of the Log field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate) GetOrCreateLog() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate_Log {
	if t.Log != nil {
		return t.Log
	}
	t.Log = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate_Log{}
	return t.Log
}

// GetLog returns the value of the Log struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate. If the receiver or the field Log is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate) GetLog() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate_Log {
	if t != nil && t.Log != nil {
		return t.Log
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetStrict retrieves the value of the leaf Strict from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Strict is set, it can
// safely use t.GetStrict() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Strict == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate) GetStrict() bool {
	if t == nil || t.Strict == nil {
		return false
	}
	return *t.Strict
}

// GetTcpValidateName retrieves the value of the leaf TcpValidateName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpValidateName is set, it can
// safely use t.GetTcpValidateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpValidateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate) GetTcpValidateName() string {
	if t == nil || t.TcpValidateName == nil {
		return ""
	}
	return *t.TcpValidateName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Strict == nil {
		var v bool = false
		t.Strict = &v
	}
	t.Log.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TcpValidateName == nil {
		return nil, fmt.Errorf("nil value for key TcpValidateName")
	}

	return map[string]interface{}{
		"tcp-validate-name": *t.TcpValidateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate_Log represents the /nokia-conf/configure/application-assurance/group/partition/tcp-validate/log YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate_Log struct {
	All      *bool   `path:"all" module:"nokia-conf"`
	EventLog *string `path:"event-log" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate_Log implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate_Log) IsYANGGoStruct() {}

// GetAll retrieves the value of the leaf All from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if All is set, it can
// safely use t.GetAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.All == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate_Log) GetAll() bool {
	if t == nil || t.All == nil {
		return false
	}
	return *t.All
}

// GetEventLog retrieves the value of the leaf EventLog from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventLog is set, it can
// safely use t.GetEventLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventLog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate_Log) GetEventLog() string {
	if t == nil || t.EventLog == nil {
		return ""
	}
	return *t.EventLog
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate_Log
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate_Log) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.All == nil {
		var v bool = false
		t.All = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate_Log) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate_Log"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate_Log) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate_Log) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate_Log.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TcpValidate_Log) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection represents the /nokia-conf/configure/application-assurance/group/partition/tethering-detection YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection struct {
	AdminState         E_NokiaTypesSros_AdminState                                                               `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	SingleDevice       *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice `path:"single-device" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection) IsYANGGoStruct() {
}

// GetOrCreateSingleDevice retrieves the value of the SingleDevice field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection) GetOrCreateSingleDevice() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice {
	if t.SingleDevice != nil {
		return t.SingleDevice
	}
	t.SingleDevice = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice{}
	return t.SingleDevice
}

// GetSingleDevice returns the value of the SingleDevice struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection. If the receiver or the field SingleDevice is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection) GetSingleDevice() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice {
	if t != nil && t.SingleDevice != nil {
		return t.SingleDevice
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.SingleDevice.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice represents the /nokia-conf/configure/application-assurance/group/partition/tethering-detection/single-device YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice struct {
	ExpectedTtl map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl `path:"expected-ttl" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) IsYANGGoStruct() {
}

// NewExpectedTtl creates a new entry in the ExpectedTtl list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) NewExpectedTtl(Ttl uint32) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExpectedTtl == nil {
		t.ExpectedTtl = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl)
	}

	key := Ttl

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExpectedTtl[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExpectedTtl", key)
	}

	t.ExpectedTtl[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl{
		Ttl: &Ttl,
	}

	return t.ExpectedTtl[key], nil
}

// RenameExpectedTtl renames an entry in the list ExpectedTtl within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) RenameExpectedTtl(oldK, newK uint32) error {
	if _, ok := t.ExpectedTtl[newK]; ok {
		return fmt.Errorf("key %v already exists in ExpectedTtl", newK)
	}

	e, ok := t.ExpectedTtl[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExpectedTtl", oldK)
	}
	e.Ttl = &newK

	t.ExpectedTtl[newK] = e
	delete(t.ExpectedTtl, oldK)
	return nil
}

// GetOrCreateExpectedTtl retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) GetOrCreateExpectedTtl(Ttl uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl {

	key := Ttl

	if v, ok := t.ExpectedTtl[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExpectedTtl(Ttl)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExpectedTtl got unexpected error: %v", err))
	}
	return v
}

// GetExpectedTtl retrieves the value with the specified key from
// the ExpectedTtl map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) GetExpectedTtl(Ttl uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl {

	if t == nil {
		return nil
	}

	key := Ttl

	if lm, ok := t.ExpectedTtl[key]; ok {
		return lm
	}
	return nil
}

// DeleteExpectedTtl deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) DeleteExpectedTtl(Ttl uint32) {
	key := Ttl

	delete(t.ExpectedTtl, key)
}

// AppendExpectedTtl appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl struct to the
// list ExpectedTtl of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) AppendExpectedTtl(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl) error {
	if v.Ttl == nil {
		return fmt.Errorf("invalid nil key received for Ttl")
	}

	key := *v.Ttl

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExpectedTtl == nil {
		t.ExpectedTtl = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl)
	}

	if _, ok := t.ExpectedTtl[key]; ok {
		return fmt.Errorf("duplicate key for list ExpectedTtl %v", key)
	}

	t.ExpectedTtl[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ExpectedTtl {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl represents the /nokia-conf/configure/application-assurance/group/partition/tethering-detection/single-device/expected-ttl YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl struct {
	Ttl *uint32 `path:"ttl" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl) IsYANGGoStruct() {
}

// GetTtl retrieves the value of the leaf Ttl from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ttl is set, it can
// safely use t.GetTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ttl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl) GetTtl() uint32 {
	if t == nil || t.Ttl == nil {
		return 0
	}
	return *t.Ttl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ttl == nil {
		return nil, fmt.Errorf("nil value for key Ttl")
	}

	return map[string]interface{}{
		"ttl": *t.Ttl,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TetheringDetection_SingleDevice_ExpectedTtl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert represents the /nokia-conf/configure/application-assurance/group/partition/threshold-crossing-alert YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct {
	Criteria           map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria                     `path:"criteria" module:"nokia-conf"`
	GtpFilter          map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter                   `path:"gtp-filter" module:"nokia-conf"`
	GtpFilterEntry     map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry         `path:"gtp-filter-entry" module:"nokia-conf"`
	Policer            map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer                       `path:"policer" module:"nokia-conf"`
	SctpFilter         map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter                 `path:"sctp-filter" module:"nokia-conf"`
	SctpFilterEntry    map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry       `path:"sctp-filter-entry" module:"nokia-conf"`
	SessionFilter      map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter           `path:"session-filter" module:"nokia-conf"`
	SessionFilterEntry map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry `path:"session-filter-entry" module:"nokia-conf"`
	TcpValidate        map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate               `path:"tcp-validate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) IsYANGGoStruct() {
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key represents the key for list Criteria of element /nokia-conf/configure/application-assurance/group/partition/threshold-crossing-alert.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key struct {
	CriteriaId E_NokiaTypesApplicationAssurance_TcaCriteria  `path:"criteria-id"`
	Direction  E_NokiaTypesApplicationAssurance_TcaDirection `path:"direction"`
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key represents the key for list GtpFilter of element /nokia-conf/configure/application-assurance/group/partition/threshold-crossing-alert.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key struct {
	GtpFilterName string                                          `path:"gtp-filter-name"`
	Criteria      E_NokiaTypesApplicationAssurance_TcaGtpCriteria `path:"criteria"`
	Direction     E_NokiaTypesApplicationAssurance_TcaDirection   `path:"direction"`
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key represents the key for list GtpFilterEntry of element /nokia-conf/configure/application-assurance/group/partition/threshold-crossing-alert.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key struct {
	GtpFilterName string                                        `path:"gtp-filter-name"`
	EntryId       uint32                                        `path:"entry-id"`
	Direction     E_NokiaTypesApplicationAssurance_TcaDirection `path:"direction"`
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key represents the key for list Policer of element /nokia-conf/configure/application-assurance/group/partition/threshold-crossing-alert.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key struct {
	PolicerName string                                        `path:"policer-name"`
	Direction   E_NokiaTypesApplicationAssurance_TcaDirection `path:"direction"`
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key represents the key for list SctpFilter of element /nokia-conf/configure/application-assurance/group/partition/threshold-crossing-alert.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key struct {
	SctpFilterName string                                           `path:"sctp-filter-name"`
	Criteria       E_NokiaTypesApplicationAssurance_TcaSctpCriteria `path:"criteria"`
	Direction      E_NokiaTypesApplicationAssurance_TcaDirection    `path:"direction"`
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key represents the key for list SctpFilterEntry of element /nokia-conf/configure/application-assurance/group/partition/threshold-crossing-alert.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key struct {
	SctpFilterName string                                        `path:"sctp-filter-name"`
	EntryId        uint32                                        `path:"entry-id"`
	Direction      E_NokiaTypesApplicationAssurance_TcaDirection `path:"direction"`
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key represents the key for list SessionFilter of element /nokia-conf/configure/application-assurance/group/partition/threshold-crossing-alert.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key struct {
	SessionFilterName string                                              `path:"session-filter-name"`
	Criteria          E_NokiaTypesApplicationAssurance_TcaSessionCriteria `path:"criteria"`
	Direction         E_NokiaTypesApplicationAssurance_TcaDirection       `path:"direction"`
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key represents the key for list SessionFilterEntry of element /nokia-conf/configure/application-assurance/group/partition/threshold-crossing-alert.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key struct {
	SessionFilterName string                                        `path:"session-filter-name"`
	EntryId           uint32                                        `path:"entry-id"`
	Direction         E_NokiaTypesApplicationAssurance_TcaDirection `path:"direction"`
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key represents the key for list TcpValidate of element /nokia-conf/configure/application-assurance/group/partition/threshold-crossing-alert.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key struct {
	TcpValidateName string                                        `path:"tcp-validate-name"`
	Direction       E_NokiaTypesApplicationAssurance_TcaDirection `path:"direction"`
}

// NewCriteria creates a new entry in the Criteria list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) NewCriteria(CriteriaId E_NokiaTypesApplicationAssurance_TcaCriteria, Direction E_NokiaTypesApplicationAssurance_TcaDirection) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Criteria == nil {
		t.Criteria = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria)
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key{
		CriteriaId: CriteriaId,
		Direction:  Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Criteria[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Criteria", key)
	}

	t.Criteria[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria{
		CriteriaId: CriteriaId,
		Direction:  Direction,
	}

	return t.Criteria[key], nil
}

// RenameCriteria renames an entry in the list Criteria within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) RenameCriteria(oldK, newK NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key) error {
	if _, ok := t.Criteria[newK]; ok {
		return fmt.Errorf("key %v already exists in Criteria", newK)
	}

	e, ok := t.Criteria[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Criteria", oldK)
	}
	e.CriteriaId = newK.CriteriaId
	e.Direction = newK.Direction

	t.Criteria[newK] = e
	delete(t.Criteria, oldK)
	return nil
}

// GetOrCreateCriteria retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetOrCreateCriteria(CriteriaId E_NokiaTypesApplicationAssurance_TcaCriteria, Direction E_NokiaTypesApplicationAssurance_TcaDirection) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria {

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key{
		CriteriaId: CriteriaId,
		Direction:  Direction,
	}

	if v, ok := t.Criteria[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCriteria(CriteriaId, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCriteria got unexpected error: %v", err))
	}
	return v
}

// GetCriteria retrieves the value with the specified key from
// the Criteria map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetCriteria(CriteriaId E_NokiaTypesApplicationAssurance_TcaCriteria, Direction E_NokiaTypesApplicationAssurance_TcaDirection) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key{
		CriteriaId: CriteriaId,
		Direction:  Direction,
	}

	if lm, ok := t.Criteria[key]; ok {
		return lm
	}
	return nil
}

// DeleteCriteria deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) DeleteCriteria(CriteriaId E_NokiaTypesApplicationAssurance_TcaCriteria, Direction E_NokiaTypesApplicationAssurance_TcaDirection) {
	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key{
		CriteriaId: CriteriaId,
		Direction:  Direction,
	}

	delete(t.Criteria, key)
}

// AppendCriteria appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria struct to the
// list Criteria of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) AppendCriteria(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) error {
	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key{
		CriteriaId: v.CriteriaId,
		Direction:  v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Criteria == nil {
		t.Criteria = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria)
	}

	if _, ok := t.Criteria[key]; ok {
		return fmt.Errorf("duplicate key for list Criteria %v", key)
	}

	t.Criteria[key] = v
	return nil
}

// NewGtpFilter creates a new entry in the GtpFilter list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) NewGtpFilter(GtpFilterName string, Criteria E_NokiaTypesApplicationAssurance_TcaGtpCriteria, Direction E_NokiaTypesApplicationAssurance_TcaDirection) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GtpFilter == nil {
		t.GtpFilter = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter)
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key{
		GtpFilterName: GtpFilterName,
		Criteria:      Criteria,
		Direction:     Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GtpFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GtpFilter", key)
	}

	t.GtpFilter[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter{
		GtpFilterName: &GtpFilterName,
		Criteria:      Criteria,
		Direction:     Direction,
	}

	return t.GtpFilter[key], nil
}

// RenameGtpFilter renames an entry in the list GtpFilter within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) RenameGtpFilter(oldK, newK NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key) error {
	if _, ok := t.GtpFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in GtpFilter", newK)
	}

	e, ok := t.GtpFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GtpFilter", oldK)
	}
	e.GtpFilterName = &newK.GtpFilterName
	e.Criteria = newK.Criteria
	e.Direction = newK.Direction

	t.GtpFilter[newK] = e
	delete(t.GtpFilter, oldK)
	return nil
}

// GetOrCreateGtpFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetOrCreateGtpFilter(GtpFilterName string, Criteria E_NokiaTypesApplicationAssurance_TcaGtpCriteria, Direction E_NokiaTypesApplicationAssurance_TcaDirection) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter {

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key{
		GtpFilterName: GtpFilterName,
		Criteria:      Criteria,
		Direction:     Direction,
	}

	if v, ok := t.GtpFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGtpFilter(GtpFilterName, Criteria, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGtpFilter got unexpected error: %v", err))
	}
	return v
}

// GetGtpFilter retrieves the value with the specified key from
// the GtpFilter map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetGtpFilter(GtpFilterName string, Criteria E_NokiaTypesApplicationAssurance_TcaGtpCriteria, Direction E_NokiaTypesApplicationAssurance_TcaDirection) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key{
		GtpFilterName: GtpFilterName,
		Criteria:      Criteria,
		Direction:     Direction,
	}

	if lm, ok := t.GtpFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteGtpFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) DeleteGtpFilter(GtpFilterName string, Criteria E_NokiaTypesApplicationAssurance_TcaGtpCriteria, Direction E_NokiaTypesApplicationAssurance_TcaDirection) {
	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key{
		GtpFilterName: GtpFilterName,
		Criteria:      Criteria,
		Direction:     Direction,
	}

	delete(t.GtpFilter, key)
}

// AppendGtpFilter appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter struct to the
// list GtpFilter of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) AppendGtpFilter(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) error {
	if v.GtpFilterName == nil {
		return fmt.Errorf("invalid nil key for GtpFilterName")
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key{
		GtpFilterName: *v.GtpFilterName,
		Criteria:      v.Criteria,
		Direction:     v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GtpFilter == nil {
		t.GtpFilter = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter)
	}

	if _, ok := t.GtpFilter[key]; ok {
		return fmt.Errorf("duplicate key for list GtpFilter %v", key)
	}

	t.GtpFilter[key] = v
	return nil
}

// NewGtpFilterEntry creates a new entry in the GtpFilterEntry list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) NewGtpFilterEntry(GtpFilterName string, EntryId uint32, Direction E_NokiaTypesApplicationAssurance_TcaDirection) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GtpFilterEntry == nil {
		t.GtpFilterEntry = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry)
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key{
		GtpFilterName: GtpFilterName,
		EntryId:       EntryId,
		Direction:     Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GtpFilterEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GtpFilterEntry", key)
	}

	t.GtpFilterEntry[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry{
		GtpFilterName: &GtpFilterName,
		EntryId:       &EntryId,
		Direction:     Direction,
	}

	return t.GtpFilterEntry[key], nil
}

// RenameGtpFilterEntry renames an entry in the list GtpFilterEntry within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) RenameGtpFilterEntry(oldK, newK NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key) error {
	if _, ok := t.GtpFilterEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in GtpFilterEntry", newK)
	}

	e, ok := t.GtpFilterEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GtpFilterEntry", oldK)
	}
	e.GtpFilterName = &newK.GtpFilterName
	e.EntryId = &newK.EntryId
	e.Direction = newK.Direction

	t.GtpFilterEntry[newK] = e
	delete(t.GtpFilterEntry, oldK)
	return nil
}

// GetOrCreateGtpFilterEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetOrCreateGtpFilterEntry(GtpFilterName string, EntryId uint32, Direction E_NokiaTypesApplicationAssurance_TcaDirection) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry {

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key{
		GtpFilterName: GtpFilterName,
		EntryId:       EntryId,
		Direction:     Direction,
	}

	if v, ok := t.GtpFilterEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGtpFilterEntry(GtpFilterName, EntryId, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGtpFilterEntry got unexpected error: %v", err))
	}
	return v
}

// GetGtpFilterEntry retrieves the value with the specified key from
// the GtpFilterEntry map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetGtpFilterEntry(GtpFilterName string, EntryId uint32, Direction E_NokiaTypesApplicationAssurance_TcaDirection) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key{
		GtpFilterName: GtpFilterName,
		EntryId:       EntryId,
		Direction:     Direction,
	}

	if lm, ok := t.GtpFilterEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteGtpFilterEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) DeleteGtpFilterEntry(GtpFilterName string, EntryId uint32, Direction E_NokiaTypesApplicationAssurance_TcaDirection) {
	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key{
		GtpFilterName: GtpFilterName,
		EntryId:       EntryId,
		Direction:     Direction,
	}

	delete(t.GtpFilterEntry, key)
}

// AppendGtpFilterEntry appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry struct to the
// list GtpFilterEntry of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) AppendGtpFilterEntry(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) error {
	if v.GtpFilterName == nil {
		return fmt.Errorf("invalid nil key for GtpFilterName")
	}

	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key for EntryId")
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key{
		GtpFilterName: *v.GtpFilterName,
		EntryId:       *v.EntryId,
		Direction:     v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GtpFilterEntry == nil {
		t.GtpFilterEntry = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry)
	}

	if _, ok := t.GtpFilterEntry[key]; ok {
		return fmt.Errorf("duplicate key for list GtpFilterEntry %v", key)
	}

	t.GtpFilterEntry[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) NewPolicer(PolicerName string, Direction E_NokiaTypesApplicationAssurance_TcaDirection) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer)
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key{
		PolicerName: PolicerName,
		Direction:   Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer{
		PolicerName: &PolicerName,
		Direction:   Direction,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) RenamePolicer(oldK, newK NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerName = &newK.PolicerName
	e.Direction = newK.Direction

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetOrCreatePolicer(PolicerName string, Direction E_NokiaTypesApplicationAssurance_TcaDirection) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer {

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key{
		PolicerName: PolicerName,
		Direction:   Direction,
	}

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerName, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetPolicer(PolicerName string, Direction E_NokiaTypesApplicationAssurance_TcaDirection) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key{
		PolicerName: PolicerName,
		Direction:   Direction,
	}

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) DeletePolicer(PolicerName string, Direction E_NokiaTypesApplicationAssurance_TcaDirection) {
	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key{
		PolicerName: PolicerName,
		Direction:   Direction,
	}

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer struct to the
// list Policer of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) AppendPolicer(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) error {
	if v.PolicerName == nil {
		return fmt.Errorf("invalid nil key for PolicerName")
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key{
		PolicerName: *v.PolicerName,
		Direction:   v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewSctpFilter creates a new entry in the SctpFilter list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) NewSctpFilter(SctpFilterName string, Criteria E_NokiaTypesApplicationAssurance_TcaSctpCriteria, Direction E_NokiaTypesApplicationAssurance_TcaDirection) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SctpFilter == nil {
		t.SctpFilter = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter)
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key{
		SctpFilterName: SctpFilterName,
		Criteria:       Criteria,
		Direction:      Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SctpFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SctpFilter", key)
	}

	t.SctpFilter[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter{
		SctpFilterName: &SctpFilterName,
		Criteria:       Criteria,
		Direction:      Direction,
	}

	return t.SctpFilter[key], nil
}

// RenameSctpFilter renames an entry in the list SctpFilter within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) RenameSctpFilter(oldK, newK NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key) error {
	if _, ok := t.SctpFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in SctpFilter", newK)
	}

	e, ok := t.SctpFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SctpFilter", oldK)
	}
	e.SctpFilterName = &newK.SctpFilterName
	e.Criteria = newK.Criteria
	e.Direction = newK.Direction

	t.SctpFilter[newK] = e
	delete(t.SctpFilter, oldK)
	return nil
}

// GetOrCreateSctpFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetOrCreateSctpFilter(SctpFilterName string, Criteria E_NokiaTypesApplicationAssurance_TcaSctpCriteria, Direction E_NokiaTypesApplicationAssurance_TcaDirection) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter {

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key{
		SctpFilterName: SctpFilterName,
		Criteria:       Criteria,
		Direction:      Direction,
	}

	if v, ok := t.SctpFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSctpFilter(SctpFilterName, Criteria, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSctpFilter got unexpected error: %v", err))
	}
	return v
}

// GetSctpFilter retrieves the value with the specified key from
// the SctpFilter map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetSctpFilter(SctpFilterName string, Criteria E_NokiaTypesApplicationAssurance_TcaSctpCriteria, Direction E_NokiaTypesApplicationAssurance_TcaDirection) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key{
		SctpFilterName: SctpFilterName,
		Criteria:       Criteria,
		Direction:      Direction,
	}

	if lm, ok := t.SctpFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteSctpFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) DeleteSctpFilter(SctpFilterName string, Criteria E_NokiaTypesApplicationAssurance_TcaSctpCriteria, Direction E_NokiaTypesApplicationAssurance_TcaDirection) {
	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key{
		SctpFilterName: SctpFilterName,
		Criteria:       Criteria,
		Direction:      Direction,
	}

	delete(t.SctpFilter, key)
}

// AppendSctpFilter appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter struct to the
// list SctpFilter of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) AppendSctpFilter(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) error {
	if v.SctpFilterName == nil {
		return fmt.Errorf("invalid nil key for SctpFilterName")
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key{
		SctpFilterName: *v.SctpFilterName,
		Criteria:       v.Criteria,
		Direction:      v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SctpFilter == nil {
		t.SctpFilter = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter)
	}

	if _, ok := t.SctpFilter[key]; ok {
		return fmt.Errorf("duplicate key for list SctpFilter %v", key)
	}

	t.SctpFilter[key] = v
	return nil
}

// NewSctpFilterEntry creates a new entry in the SctpFilterEntry list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) NewSctpFilterEntry(SctpFilterName string, EntryId uint32, Direction E_NokiaTypesApplicationAssurance_TcaDirection) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SctpFilterEntry == nil {
		t.SctpFilterEntry = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry)
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key{
		SctpFilterName: SctpFilterName,
		EntryId:        EntryId,
		Direction:      Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SctpFilterEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SctpFilterEntry", key)
	}

	t.SctpFilterEntry[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry{
		SctpFilterName: &SctpFilterName,
		EntryId:        &EntryId,
		Direction:      Direction,
	}

	return t.SctpFilterEntry[key], nil
}

// RenameSctpFilterEntry renames an entry in the list SctpFilterEntry within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) RenameSctpFilterEntry(oldK, newK NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key) error {
	if _, ok := t.SctpFilterEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in SctpFilterEntry", newK)
	}

	e, ok := t.SctpFilterEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SctpFilterEntry", oldK)
	}
	e.SctpFilterName = &newK.SctpFilterName
	e.EntryId = &newK.EntryId
	e.Direction = newK.Direction

	t.SctpFilterEntry[newK] = e
	delete(t.SctpFilterEntry, oldK)
	return nil
}

// GetOrCreateSctpFilterEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetOrCreateSctpFilterEntry(SctpFilterName string, EntryId uint32, Direction E_NokiaTypesApplicationAssurance_TcaDirection) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry {

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key{
		SctpFilterName: SctpFilterName,
		EntryId:        EntryId,
		Direction:      Direction,
	}

	if v, ok := t.SctpFilterEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSctpFilterEntry(SctpFilterName, EntryId, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSctpFilterEntry got unexpected error: %v", err))
	}
	return v
}

// GetSctpFilterEntry retrieves the value with the specified key from
// the SctpFilterEntry map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetSctpFilterEntry(SctpFilterName string, EntryId uint32, Direction E_NokiaTypesApplicationAssurance_TcaDirection) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key{
		SctpFilterName: SctpFilterName,
		EntryId:        EntryId,
		Direction:      Direction,
	}

	if lm, ok := t.SctpFilterEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteSctpFilterEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) DeleteSctpFilterEntry(SctpFilterName string, EntryId uint32, Direction E_NokiaTypesApplicationAssurance_TcaDirection) {
	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key{
		SctpFilterName: SctpFilterName,
		EntryId:        EntryId,
		Direction:      Direction,
	}

	delete(t.SctpFilterEntry, key)
}

// AppendSctpFilterEntry appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry struct to the
// list SctpFilterEntry of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) AppendSctpFilterEntry(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) error {
	if v.SctpFilterName == nil {
		return fmt.Errorf("invalid nil key for SctpFilterName")
	}

	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key for EntryId")
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key{
		SctpFilterName: *v.SctpFilterName,
		EntryId:        *v.EntryId,
		Direction:      v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SctpFilterEntry == nil {
		t.SctpFilterEntry = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry)
	}

	if _, ok := t.SctpFilterEntry[key]; ok {
		return fmt.Errorf("duplicate key for list SctpFilterEntry %v", key)
	}

	t.SctpFilterEntry[key] = v
	return nil
}

// NewSessionFilter creates a new entry in the SessionFilter list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) NewSessionFilter(SessionFilterName string, Criteria E_NokiaTypesApplicationAssurance_TcaSessionCriteria, Direction E_NokiaTypesApplicationAssurance_TcaDirection) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SessionFilter == nil {
		t.SessionFilter = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter)
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key{
		SessionFilterName: SessionFilterName,
		Criteria:          Criteria,
		Direction:         Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SessionFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SessionFilter", key)
	}

	t.SessionFilter[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter{
		SessionFilterName: &SessionFilterName,
		Criteria:          Criteria,
		Direction:         Direction,
	}

	return t.SessionFilter[key], nil
}

// RenameSessionFilter renames an entry in the list SessionFilter within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) RenameSessionFilter(oldK, newK NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key) error {
	if _, ok := t.SessionFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in SessionFilter", newK)
	}

	e, ok := t.SessionFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SessionFilter", oldK)
	}
	e.SessionFilterName = &newK.SessionFilterName
	e.Criteria = newK.Criteria
	e.Direction = newK.Direction

	t.SessionFilter[newK] = e
	delete(t.SessionFilter, oldK)
	return nil
}

// GetOrCreateSessionFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetOrCreateSessionFilter(SessionFilterName string, Criteria E_NokiaTypesApplicationAssurance_TcaSessionCriteria, Direction E_NokiaTypesApplicationAssurance_TcaDirection) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter {

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key{
		SessionFilterName: SessionFilterName,
		Criteria:          Criteria,
		Direction:         Direction,
	}

	if v, ok := t.SessionFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSessionFilter(SessionFilterName, Criteria, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSessionFilter got unexpected error: %v", err))
	}
	return v
}

// GetSessionFilter retrieves the value with the specified key from
// the SessionFilter map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetSessionFilter(SessionFilterName string, Criteria E_NokiaTypesApplicationAssurance_TcaSessionCriteria, Direction E_NokiaTypesApplicationAssurance_TcaDirection) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key{
		SessionFilterName: SessionFilterName,
		Criteria:          Criteria,
		Direction:         Direction,
	}

	if lm, ok := t.SessionFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteSessionFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) DeleteSessionFilter(SessionFilterName string, Criteria E_NokiaTypesApplicationAssurance_TcaSessionCriteria, Direction E_NokiaTypesApplicationAssurance_TcaDirection) {
	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key{
		SessionFilterName: SessionFilterName,
		Criteria:          Criteria,
		Direction:         Direction,
	}

	delete(t.SessionFilter, key)
}

// AppendSessionFilter appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter struct to the
// list SessionFilter of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) AppendSessionFilter(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) error {
	if v.SessionFilterName == nil {
		return fmt.Errorf("invalid nil key for SessionFilterName")
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key{
		SessionFilterName: *v.SessionFilterName,
		Criteria:          v.Criteria,
		Direction:         v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SessionFilter == nil {
		t.SessionFilter = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter)
	}

	if _, ok := t.SessionFilter[key]; ok {
		return fmt.Errorf("duplicate key for list SessionFilter %v", key)
	}

	t.SessionFilter[key] = v
	return nil
}

// NewSessionFilterEntry creates a new entry in the SessionFilterEntry list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) NewSessionFilterEntry(SessionFilterName string, EntryId uint32, Direction E_NokiaTypesApplicationAssurance_TcaDirection) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SessionFilterEntry == nil {
		t.SessionFilterEntry = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry)
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key{
		SessionFilterName: SessionFilterName,
		EntryId:           EntryId,
		Direction:         Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SessionFilterEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SessionFilterEntry", key)
	}

	t.SessionFilterEntry[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry{
		SessionFilterName: &SessionFilterName,
		EntryId:           &EntryId,
		Direction:         Direction,
	}

	return t.SessionFilterEntry[key], nil
}

// RenameSessionFilterEntry renames an entry in the list SessionFilterEntry within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) RenameSessionFilterEntry(oldK, newK NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key) error {
	if _, ok := t.SessionFilterEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in SessionFilterEntry", newK)
	}

	e, ok := t.SessionFilterEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SessionFilterEntry", oldK)
	}
	e.SessionFilterName = &newK.SessionFilterName
	e.EntryId = &newK.EntryId
	e.Direction = newK.Direction

	t.SessionFilterEntry[newK] = e
	delete(t.SessionFilterEntry, oldK)
	return nil
}

// GetOrCreateSessionFilterEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetOrCreateSessionFilterEntry(SessionFilterName string, EntryId uint32, Direction E_NokiaTypesApplicationAssurance_TcaDirection) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry {

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key{
		SessionFilterName: SessionFilterName,
		EntryId:           EntryId,
		Direction:         Direction,
	}

	if v, ok := t.SessionFilterEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSessionFilterEntry(SessionFilterName, EntryId, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSessionFilterEntry got unexpected error: %v", err))
	}
	return v
}

// GetSessionFilterEntry retrieves the value with the specified key from
// the SessionFilterEntry map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetSessionFilterEntry(SessionFilterName string, EntryId uint32, Direction E_NokiaTypesApplicationAssurance_TcaDirection) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key{
		SessionFilterName: SessionFilterName,
		EntryId:           EntryId,
		Direction:         Direction,
	}

	if lm, ok := t.SessionFilterEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteSessionFilterEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) DeleteSessionFilterEntry(SessionFilterName string, EntryId uint32, Direction E_NokiaTypesApplicationAssurance_TcaDirection) {
	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key{
		SessionFilterName: SessionFilterName,
		EntryId:           EntryId,
		Direction:         Direction,
	}

	delete(t.SessionFilterEntry, key)
}

// AppendSessionFilterEntry appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry struct to the
// list SessionFilterEntry of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) AppendSessionFilterEntry(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) error {
	if v.SessionFilterName == nil {
		return fmt.Errorf("invalid nil key for SessionFilterName")
	}

	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key for EntryId")
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key{
		SessionFilterName: *v.SessionFilterName,
		EntryId:           *v.EntryId,
		Direction:         v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SessionFilterEntry == nil {
		t.SessionFilterEntry = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry)
	}

	if _, ok := t.SessionFilterEntry[key]; ok {
		return fmt.Errorf("duplicate key for list SessionFilterEntry %v", key)
	}

	t.SessionFilterEntry[key] = v
	return nil
}

// NewTcpValidate creates a new entry in the TcpValidate list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) NewTcpValidate(TcpValidateName string, Direction E_NokiaTypesApplicationAssurance_TcaDirection) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TcpValidate == nil {
		t.TcpValidate = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate)
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key{
		TcpValidateName: TcpValidateName,
		Direction:       Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TcpValidate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TcpValidate", key)
	}

	t.TcpValidate[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate{
		TcpValidateName: &TcpValidateName,
		Direction:       Direction,
	}

	return t.TcpValidate[key], nil
}

// RenameTcpValidate renames an entry in the list TcpValidate within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) RenameTcpValidate(oldK, newK NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key) error {
	if _, ok := t.TcpValidate[newK]; ok {
		return fmt.Errorf("key %v already exists in TcpValidate", newK)
	}

	e, ok := t.TcpValidate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TcpValidate", oldK)
	}
	e.TcpValidateName = &newK.TcpValidateName
	e.Direction = newK.Direction

	t.TcpValidate[newK] = e
	delete(t.TcpValidate, oldK)
	return nil
}

// GetOrCreateTcpValidate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetOrCreateTcpValidate(TcpValidateName string, Direction E_NokiaTypesApplicationAssurance_TcaDirection) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate {

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key{
		TcpValidateName: TcpValidateName,
		Direction:       Direction,
	}

	if v, ok := t.TcpValidate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTcpValidate(TcpValidateName, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTcpValidate got unexpected error: %v", err))
	}
	return v
}

// GetTcpValidate retrieves the value with the specified key from
// the TcpValidate map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) GetTcpValidate(TcpValidateName string, Direction E_NokiaTypesApplicationAssurance_TcaDirection) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key{
		TcpValidateName: TcpValidateName,
		Direction:       Direction,
	}

	if lm, ok := t.TcpValidate[key]; ok {
		return lm
	}
	return nil
}

// DeleteTcpValidate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) DeleteTcpValidate(TcpValidateName string, Direction E_NokiaTypesApplicationAssurance_TcaDirection) {
	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key{
		TcpValidateName: TcpValidateName,
		Direction:       Direction,
	}

	delete(t.TcpValidate, key)
}

// AppendTcpValidate appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate struct to the
// list TcpValidate of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) AppendTcpValidate(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) error {
	if v.TcpValidateName == nil {
		return fmt.Errorf("invalid nil key for TcpValidateName")
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key{
		TcpValidateName: *v.TcpValidateName,
		Direction:       v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TcpValidate == nil {
		t.TcpValidate = make(map[NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate_Key]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate)
	}

	if _, ok := t.TcpValidate[key]; ok {
		return fmt.Errorf("duplicate key for list TcpValidate %v", key)
	}

	t.TcpValidate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Criteria {
		e.PopulateDefaults()
	}
	for _, e := range t.GtpFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.GtpFilterEntry {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.SctpFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.SctpFilterEntry {
		e.PopulateDefaults()
	}
	for _, e := range t.SessionFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.SessionFilterEntry {
		e.PopulateDefaults()
	}
	for _, e := range t.TcpValidate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria represents the /nokia-conf/configure/application-assurance/group/partition/threshold-crossing-alert/criteria YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria struct {
	ApplyGroups        []string                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	CriteriaId         E_NokiaTypesApplicationAssurance_TcaCriteria  `path:"criteria-id" module:"nokia-conf"`
	Direction          E_NokiaTypesApplicationAssurance_TcaDirection `path:"direction" module:"nokia-conf"`
	HighWatermark      *uint32                                       `path:"high-watermark" module:"nokia-conf"`
	LowWatermark       *uint32                                       `path:"low-watermark" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCriteriaId retrieves the value of the leaf CriteriaId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CriteriaId is set, it can
// safely use t.GetCriteriaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CriteriaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) GetCriteriaId() E_NokiaTypesApplicationAssurance_TcaCriteria {
	if t == nil || t.CriteriaId == 0 {
		return 0
	}
	return t.CriteriaId
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) GetDirection() E_NokiaTypesApplicationAssurance_TcaDirection {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) GetHighWatermark() uint32 {
	if t == nil || t.HighWatermark == nil {
		return 4294967295
	}
	return *t.HighWatermark
}

// GetLowWatermark retrieves the value of the leaf LowWatermark from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWatermark is set, it can
// safely use t.GetLowWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) GetLowWatermark() uint32 {
	if t == nil || t.LowWatermark == nil {
		return 0
	}
	return *t.LowWatermark
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWatermark == nil {
		var v uint32 = 4294967295
		t.HighWatermark = &v
	}
	if t.LowWatermark == nil {
		var v uint32 = 0
		t.LowWatermark = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"criteria-id": t.CriteriaId,
		"direction":   t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Criteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter represents the /nokia-conf/configure/application-assurance/group/partition/threshold-crossing-alert/gtp-filter YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter struct {
	ApplyGroups        []string                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Criteria           E_NokiaTypesApplicationAssurance_TcaGtpCriteria `path:"criteria" module:"nokia-conf"`
	Direction          E_NokiaTypesApplicationAssurance_TcaDirection   `path:"direction" module:"nokia-conf"`
	GtpFilterName      *string                                         `path:"gtp-filter-name" module:"nokia-conf"`
	HighWatermark      *uint32                                         `path:"high-watermark" module:"nokia-conf"`
	LowWatermark       *uint32                                         `path:"low-watermark" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCriteria retrieves the value of the leaf Criteria from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Criteria is set, it can
// safely use t.GetCriteria() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Criteria == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) GetCriteria() E_NokiaTypesApplicationAssurance_TcaGtpCriteria {
	if t == nil || t.Criteria == 0 {
		return 0
	}
	return t.Criteria
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) GetDirection() E_NokiaTypesApplicationAssurance_TcaDirection {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetGtpFilterName retrieves the value of the leaf GtpFilterName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GtpFilterName is set, it can
// safely use t.GetGtpFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GtpFilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) GetGtpFilterName() string {
	if t == nil || t.GtpFilterName == nil {
		return ""
	}
	return *t.GtpFilterName
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) GetHighWatermark() uint32 {
	if t == nil || t.HighWatermark == nil {
		return 4294967295
	}
	return *t.HighWatermark
}

// GetLowWatermark retrieves the value of the leaf LowWatermark from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWatermark is set, it can
// safely use t.GetLowWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) GetLowWatermark() uint32 {
	if t == nil || t.LowWatermark == nil {
		return 0
	}
	return *t.LowWatermark
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWatermark == nil {
		var v uint32 = 4294967295
		t.HighWatermark = &v
	}
	if t.LowWatermark == nil {
		var v uint32 = 0
		t.LowWatermark = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) ΛListKeyMap() (map[string]interface{}, error) {

	if t.GtpFilterName == nil {
		return nil, fmt.Errorf("nil value for key GtpFilterName")
	}

	return map[string]interface{}{
		"criteria":        t.Criteria,
		"direction":       t.Direction,
		"gtp-filter-name": *t.GtpFilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry represents the /nokia-conf/configure/application-assurance/group/partition/threshold-crossing-alert/gtp-filter-entry YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry struct {
	ApplyGroups        []string                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaTypesApplicationAssurance_TcaDirection `path:"direction" module:"nokia-conf"`
	EntryId            *uint32                                       `path:"entry-id" module:"nokia-conf"`
	GtpFilterName      *string                                       `path:"gtp-filter-name" module:"nokia-conf"`
	HighWatermark      *uint32                                       `path:"high-watermark" module:"nokia-conf"`
	LowWatermark       *uint32                                       `path:"low-watermark" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) GetDirection() E_NokiaTypesApplicationAssurance_TcaDirection {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetGtpFilterName retrieves the value of the leaf GtpFilterName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GtpFilterName is set, it can
// safely use t.GetGtpFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GtpFilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) GetGtpFilterName() string {
	if t == nil || t.GtpFilterName == nil {
		return ""
	}
	return *t.GtpFilterName
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) GetHighWatermark() uint32 {
	if t == nil || t.HighWatermark == nil {
		return 4294967295
	}
	return *t.HighWatermark
}

// GetLowWatermark retrieves the value of the leaf LowWatermark from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWatermark is set, it can
// safely use t.GetLowWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) GetLowWatermark() uint32 {
	if t == nil || t.LowWatermark == nil {
		return 0
	}
	return *t.LowWatermark
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWatermark == nil {
		var v uint32 = 4294967295
		t.HighWatermark = &v
	}
	if t.LowWatermark == nil {
		var v uint32 = 0
		t.LowWatermark = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) ΛListKeyMap() (map[string]interface{}, error) {

	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	if t.GtpFilterName == nil {
		return nil, fmt.Errorf("nil value for key GtpFilterName")
	}

	return map[string]interface{}{
		"direction":       t.Direction,
		"entry-id":        *t.EntryId,
		"gtp-filter-name": *t.GtpFilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_GtpFilterEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer represents the /nokia-conf/configure/application-assurance/group/partition/threshold-crossing-alert/policer YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer struct {
	ApplyGroups        []string                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaTypesApplicationAssurance_TcaDirection `path:"direction" module:"nokia-conf"`
	HighWatermark      *uint32                                       `path:"high-watermark" module:"nokia-conf"`
	LowWatermark       *uint32                                       `path:"low-watermark" module:"nokia-conf"`
	PolicerName        *string                                       `path:"policer-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) GetDirection() E_NokiaTypesApplicationAssurance_TcaDirection {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) GetHighWatermark() uint32 {
	if t == nil || t.HighWatermark == nil {
		return 4294967295
	}
	return *t.HighWatermark
}

// GetLowWatermark retrieves the value of the leaf LowWatermark from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWatermark is set, it can
// safely use t.GetLowWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) GetLowWatermark() uint32 {
	if t == nil || t.LowWatermark == nil {
		return 0
	}
	return *t.LowWatermark
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWatermark == nil {
		var v uint32 = 4294967295
		t.HighWatermark = &v
	}
	if t.LowWatermark == nil {
		var v uint32 = 0
		t.LowWatermark = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	if t.PolicerName == nil {
		return nil, fmt.Errorf("nil value for key PolicerName")
	}

	return map[string]interface{}{
		"direction":    t.Direction,
		"policer-name": *t.PolicerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter represents the /nokia-conf/configure/application-assurance/group/partition/threshold-crossing-alert/sctp-filter YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter struct {
	ApplyGroups        []string                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Criteria           E_NokiaTypesApplicationAssurance_TcaSctpCriteria `path:"criteria" module:"nokia-conf"`
	Direction          E_NokiaTypesApplicationAssurance_TcaDirection    `path:"direction" module:"nokia-conf"`
	HighWatermark      *uint32                                          `path:"high-watermark" module:"nokia-conf"`
	LowWatermark       *uint32                                          `path:"low-watermark" module:"nokia-conf"`
	SctpFilterName     *string                                          `path:"sctp-filter-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCriteria retrieves the value of the leaf Criteria from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Criteria is set, it can
// safely use t.GetCriteria() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Criteria == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) GetCriteria() E_NokiaTypesApplicationAssurance_TcaSctpCriteria {
	if t == nil || t.Criteria == 0 {
		return 0
	}
	return t.Criteria
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) GetDirection() E_NokiaTypesApplicationAssurance_TcaDirection {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) GetHighWatermark() uint32 {
	if t == nil || t.HighWatermark == nil {
		return 4294967295
	}
	return *t.HighWatermark
}

// GetLowWatermark retrieves the value of the leaf LowWatermark from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWatermark is set, it can
// safely use t.GetLowWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) GetLowWatermark() uint32 {
	if t == nil || t.LowWatermark == nil {
		return 0
	}
	return *t.LowWatermark
}

// GetSctpFilterName retrieves the value of the leaf SctpFilterName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SctpFilterName is set, it can
// safely use t.GetSctpFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SctpFilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) GetSctpFilterName() string {
	if t == nil || t.SctpFilterName == nil {
		return ""
	}
	return *t.SctpFilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWatermark == nil {
		var v uint32 = 4294967295
		t.HighWatermark = &v
	}
	if t.LowWatermark == nil {
		var v uint32 = 0
		t.LowWatermark = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) ΛListKeyMap() (map[string]interface{}, error) {

	if t.SctpFilterName == nil {
		return nil, fmt.Errorf("nil value for key SctpFilterName")
	}

	return map[string]interface{}{
		"criteria":         t.Criteria,
		"direction":        t.Direction,
		"sctp-filter-name": *t.SctpFilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry represents the /nokia-conf/configure/application-assurance/group/partition/threshold-crossing-alert/sctp-filter-entry YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry struct {
	ApplyGroups        []string                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaTypesApplicationAssurance_TcaDirection `path:"direction" module:"nokia-conf"`
	EntryId            *uint32                                       `path:"entry-id" module:"nokia-conf"`
	HighWatermark      *uint32                                       `path:"high-watermark" module:"nokia-conf"`
	LowWatermark       *uint32                                       `path:"low-watermark" module:"nokia-conf"`
	SctpFilterName     *string                                       `path:"sctp-filter-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) GetDirection() E_NokiaTypesApplicationAssurance_TcaDirection {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) GetHighWatermark() uint32 {
	if t == nil || t.HighWatermark == nil {
		return 4294967295
	}
	return *t.HighWatermark
}

// GetLowWatermark retrieves the value of the leaf LowWatermark from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWatermark is set, it can
// safely use t.GetLowWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) GetLowWatermark() uint32 {
	if t == nil || t.LowWatermark == nil {
		return 0
	}
	return *t.LowWatermark
}

// GetSctpFilterName retrieves the value of the leaf SctpFilterName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SctpFilterName is set, it can
// safely use t.GetSctpFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SctpFilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) GetSctpFilterName() string {
	if t == nil || t.SctpFilterName == nil {
		return ""
	}
	return *t.SctpFilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWatermark == nil {
		var v uint32 = 4294967295
		t.HighWatermark = &v
	}
	if t.LowWatermark == nil {
		var v uint32 = 0
		t.LowWatermark = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) ΛListKeyMap() (map[string]interface{}, error) {

	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	if t.SctpFilterName == nil {
		return nil, fmt.Errorf("nil value for key SctpFilterName")
	}

	return map[string]interface{}{
		"direction":        t.Direction,
		"entry-id":         *t.EntryId,
		"sctp-filter-name": *t.SctpFilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SctpFilterEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter represents the /nokia-conf/configure/application-assurance/group/partition/threshold-crossing-alert/session-filter YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter struct {
	ApplyGroups        []string                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Criteria           E_NokiaTypesApplicationAssurance_TcaSessionCriteria `path:"criteria" module:"nokia-conf"`
	Direction          E_NokiaTypesApplicationAssurance_TcaDirection       `path:"direction" module:"nokia-conf"`
	HighWatermark      *uint32                                             `path:"high-watermark" module:"nokia-conf"`
	LowWatermark       *uint32                                             `path:"low-watermark" module:"nokia-conf"`
	SessionFilterName  *string                                             `path:"session-filter-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCriteria retrieves the value of the leaf Criteria from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Criteria is set, it can
// safely use t.GetCriteria() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Criteria == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) GetCriteria() E_NokiaTypesApplicationAssurance_TcaSessionCriteria {
	if t == nil || t.Criteria == 0 {
		return 0
	}
	return t.Criteria
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) GetDirection() E_NokiaTypesApplicationAssurance_TcaDirection {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) GetHighWatermark() uint32 {
	if t == nil || t.HighWatermark == nil {
		return 4294967295
	}
	return *t.HighWatermark
}

// GetLowWatermark retrieves the value of the leaf LowWatermark from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWatermark is set, it can
// safely use t.GetLowWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) GetLowWatermark() uint32 {
	if t == nil || t.LowWatermark == nil {
		return 0
	}
	return *t.LowWatermark
}

// GetSessionFilterName retrieves the value of the leaf SessionFilterName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionFilterName is set, it can
// safely use t.GetSessionFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionFilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) GetSessionFilterName() string {
	if t == nil || t.SessionFilterName == nil {
		return ""
	}
	return *t.SessionFilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWatermark == nil {
		var v uint32 = 4294967295
		t.HighWatermark = &v
	}
	if t.LowWatermark == nil {
		var v uint32 = 0
		t.LowWatermark = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) ΛListKeyMap() (map[string]interface{}, error) {

	if t.SessionFilterName == nil {
		return nil, fmt.Errorf("nil value for key SessionFilterName")
	}

	return map[string]interface{}{
		"criteria":            t.Criteria,
		"direction":           t.Direction,
		"session-filter-name": *t.SessionFilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry represents the /nokia-conf/configure/application-assurance/group/partition/threshold-crossing-alert/session-filter-entry YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry struct {
	ApplyGroups        []string                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaTypesApplicationAssurance_TcaDirection `path:"direction" module:"nokia-conf"`
	EntryId            *uint32                                       `path:"entry-id" module:"nokia-conf"`
	HighWatermark      *uint32                                       `path:"high-watermark" module:"nokia-conf"`
	LowWatermark       *uint32                                       `path:"low-watermark" module:"nokia-conf"`
	SessionFilterName  *string                                       `path:"session-filter-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) GetDirection() E_NokiaTypesApplicationAssurance_TcaDirection {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) GetHighWatermark() uint32 {
	if t == nil || t.HighWatermark == nil {
		return 4294967295
	}
	return *t.HighWatermark
}

// GetLowWatermark retrieves the value of the leaf LowWatermark from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWatermark is set, it can
// safely use t.GetLowWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) GetLowWatermark() uint32 {
	if t == nil || t.LowWatermark == nil {
		return 0
	}
	return *t.LowWatermark
}

// GetSessionFilterName retrieves the value of the leaf SessionFilterName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionFilterName is set, it can
// safely use t.GetSessionFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionFilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) GetSessionFilterName() string {
	if t == nil || t.SessionFilterName == nil {
		return ""
	}
	return *t.SessionFilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWatermark == nil {
		var v uint32 = 4294967295
		t.HighWatermark = &v
	}
	if t.LowWatermark == nil {
		var v uint32 = 0
		t.LowWatermark = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) ΛListKeyMap() (map[string]interface{}, error) {

	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	if t.SessionFilterName == nil {
		return nil, fmt.Errorf("nil value for key SessionFilterName")
	}

	return map[string]interface{}{
		"direction":           t.Direction,
		"entry-id":            *t.EntryId,
		"session-filter-name": *t.SessionFilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_SessionFilterEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate represents the /nokia-conf/configure/application-assurance/group/partition/threshold-crossing-alert/tcp-validate YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate struct {
	ApplyGroups        []string                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaTypesApplicationAssurance_TcaDirection `path:"direction" module:"nokia-conf"`
	HighWatermark      *uint32                                       `path:"high-watermark" module:"nokia-conf"`
	LowWatermark       *uint32                                       `path:"low-watermark" module:"nokia-conf"`
	TcpValidateName    *string                                       `path:"tcp-validate-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) GetDirection() E_NokiaTypesApplicationAssurance_TcaDirection {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) GetHighWatermark() uint32 {
	if t == nil || t.HighWatermark == nil {
		return 4294967295
	}
	return *t.HighWatermark
}

// GetLowWatermark retrieves the value of the leaf LowWatermark from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWatermark is set, it can
// safely use t.GetLowWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWatermark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) GetLowWatermark() uint32 {
	if t == nil || t.LowWatermark == nil {
		return 0
	}
	return *t.LowWatermark
}

// GetTcpValidateName retrieves the value of the leaf TcpValidateName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpValidateName is set, it can
// safely use t.GetTcpValidateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpValidateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) GetTcpValidateName() string {
	if t == nil || t.TcpValidateName == nil {
		return ""
	}
	return *t.TcpValidateName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWatermark == nil {
		var v uint32 = 4294967295
		t.HighWatermark = &v
	}
	if t.LowWatermark == nil {
		var v uint32 = 0
		t.LowWatermark = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) ΛListKeyMap() (map[string]interface{}, error) {

	if t.TcpValidateName == nil {
		return nil, fmt.Errorf("nil value for key TcpValidateName")
	}

	return map[string]interface{}{
		"direction":         t.Direction,
		"tcp-validate-name": *t.TcpValidateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_ThresholdCrossingAlert_TcpValidate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy represents the /nokia-conf/configure/application-assurance/group/partition/transit-ip-policy YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy struct {
	ApplyGroups             []string                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultAppProfile       *string                                                                                          `path:"default-app-profile" module:"nokia-conf"`
	Description             *string                                                                                          `path:"description" module:"nokia-conf"`
	DetectSeenIp            *bool                                                                                            `path:"detect-seen-ip" module:"nokia-conf"`
	Dhcp                    *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp                   `path:"dhcp" module:"nokia-conf"`
	Diameter                *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter               `path:"diameter" module:"nokia-conf"`
	IpPolicyId              *uint32                                                                                          `path:"ip-policy-id" module:"nokia-conf"`
	Ipv6AddressPrefixLength *uint32                                                                                          `path:"ipv6-address-prefix-length" module:"nokia-conf"`
	Radius                  *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius                 `path:"radius" module:"nokia-conf"`
	StaticAaSub             map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub `path:"static-aa-sub" module:"nokia-conf"`
	SubIdentPolicy          *string                                                                                          `path:"sub-ident-policy" module:"nokia-conf"`
	TransitAutoCreate       *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate      `path:"transit-auto-create" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) IsYANGGoStruct() {}

// NewStaticAaSub creates a new entry in the StaticAaSub list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) NewStaticAaSub(TransitAaSubName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticAaSub == nil {
		t.StaticAaSub = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub)
	}

	key := TransitAaSubName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticAaSub[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticAaSub", key)
	}

	t.StaticAaSub[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub{
		TransitAaSubName: &TransitAaSubName,
	}

	return t.StaticAaSub[key], nil
}

// RenameStaticAaSub renames an entry in the list StaticAaSub within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) RenameStaticAaSub(oldK, newK string) error {
	if _, ok := t.StaticAaSub[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticAaSub", newK)
	}

	e, ok := t.StaticAaSub[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticAaSub", oldK)
	}
	e.TransitAaSubName = &newK

	t.StaticAaSub[newK] = e
	delete(t.StaticAaSub, oldK)
	return nil
}

// GetOrCreateStaticAaSub retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetOrCreateStaticAaSub(TransitAaSubName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub {

	key := TransitAaSubName

	if v, ok := t.StaticAaSub[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticAaSub(TransitAaSubName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticAaSub got unexpected error: %v", err))
	}
	return v
}

// GetStaticAaSub retrieves the value with the specified key from
// the StaticAaSub map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetStaticAaSub(TransitAaSubName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub {

	if t == nil {
		return nil
	}

	key := TransitAaSubName

	if lm, ok := t.StaticAaSub[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticAaSub deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) DeleteStaticAaSub(TransitAaSubName string) {
	key := TransitAaSubName

	delete(t.StaticAaSub, key)
}

// AppendStaticAaSub appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub struct to the
// list StaticAaSub of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) AppendStaticAaSub(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) error {
	if v.TransitAaSubName == nil {
		return fmt.Errorf("invalid nil key received for TransitAaSubName")
	}

	key := *v.TransitAaSubName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticAaSub == nil {
		t.StaticAaSub = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub)
	}

	if _, ok := t.StaticAaSub[key]; ok {
		return fmt.Errorf("duplicate key for list StaticAaSub %v", key)
	}

	t.StaticAaSub[key] = v
	return nil
}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetOrCreateDhcp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp{}
	return t.Dhcp
}

// GetOrCreateDiameter retrieves the value of the Diameter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetOrCreateDiameter() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter {
	if t.Diameter != nil {
		return t.Diameter
	}
	t.Diameter = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter{}
	return t.Diameter
}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetOrCreateRadius() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius{}
	return t.Radius
}

// GetOrCreateTransitAutoCreate retrieves the value of the TransitAutoCreate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetOrCreateTransitAutoCreate() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate {
	if t.TransitAutoCreate != nil {
		return t.TransitAutoCreate
	}
	t.TransitAutoCreate = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate{}
	return t.TransitAutoCreate
}

// GetDhcp returns the value of the Dhcp struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetDhcp() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetDiameter returns the value of the Diameter struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy. If the receiver or the field Diameter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetDiameter() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter {
	if t != nil && t.Diameter != nil {
		return t.Diameter
	}
	return nil
}

// GetRadius returns the value of the Radius struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetRadius() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetTransitAutoCreate returns the value of the TransitAutoCreate struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy. If the receiver or the field TransitAutoCreate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetTransitAutoCreate() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate {
	if t != nil && t.TransitAutoCreate != nil {
		return t.TransitAutoCreate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDefaultAppProfile retrieves the value of the leaf DefaultAppProfile from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAppProfile is set, it can
// safely use t.GetDefaultAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetDefaultAppProfile() string {
	if t == nil || t.DefaultAppProfile == nil {
		return ""
	}
	return *t.DefaultAppProfile
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDetectSeenIp retrieves the value of the leaf DetectSeenIp from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DetectSeenIp is set, it can
// safely use t.GetDetectSeenIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DetectSeenIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetDetectSeenIp() bool {
	if t == nil || t.DetectSeenIp == nil {
		return false
	}
	return *t.DetectSeenIp
}

// GetIpPolicyId retrieves the value of the leaf IpPolicyId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPolicyId is set, it can
// safely use t.GetIpPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetIpPolicyId() uint32 {
	if t == nil || t.IpPolicyId == nil {
		return 0
	}
	return *t.IpPolicyId
}

// GetIpv6AddressPrefixLength retrieves the value of the leaf Ipv6AddressPrefixLength from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6AddressPrefixLength is set, it can
// safely use t.GetIpv6AddressPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6AddressPrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetIpv6AddressPrefixLength() uint32 {
	if t == nil || t.Ipv6AddressPrefixLength == nil {
		return 0
	}
	return *t.Ipv6AddressPrefixLength
}

// GetSubIdentPolicy retrieves the value of the leaf SubIdentPolicy from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubIdentPolicy is set, it can
// safely use t.GetSubIdentPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubIdentPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) GetSubIdentPolicy() string {
	if t == nil || t.SubIdentPolicy == nil {
		return ""
	}
	return *t.SubIdentPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DetectSeenIp == nil {
		var v bool = false
		t.DetectSeenIp = &v
	}
	t.Dhcp.PopulateDefaults()
	t.Diameter.PopulateDefaults()
	t.Radius.PopulateDefaults()
	t.TransitAutoCreate.PopulateDefaults()
	for _, e := range t.StaticAaSub {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPolicyId == nil {
		return nil, fmt.Errorf("nil value for key IpPolicyId")
	}

	return map[string]interface{}{
		"ip-policy-id": *t.IpPolicyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp represents the /nokia-conf/configure/application-assurance/group/partition/transit-ip-policy/dhcp YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Dhcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter represents the /nokia-conf/configure/application-assurance/group/partition/transit-ip-policy/diameter YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter struct {
	AdminState        E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplicationPolicy *string                     `path:"application-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplicationPolicy retrieves the value of the leaf ApplicationPolicy from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplicationPolicy is set, it can
// safely use t.GetApplicationPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplicationPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter) GetApplicationPolicy() string {
	if t == nil || t.ApplicationPolicy == nil {
		return ""
	}
	return *t.ApplicationPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Diameter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius represents the /nokia-conf/configure/application-assurance/group/partition/transit-ip-policy/radius YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius struct {
	AdminState             E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	AuthenticationPolicy   *string                     `path:"authentication-policy" module:"nokia-conf"`
	SeenIpRadiusAcctPolicy *string                     `path:"seen-ip-radius-acct-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAuthenticationPolicy retrieves the value of the leaf AuthenticationPolicy from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationPolicy is set, it can
// safely use t.GetAuthenticationPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius) GetAuthenticationPolicy() string {
	if t == nil || t.AuthenticationPolicy == nil {
		return ""
	}
	return *t.AuthenticationPolicy
}

// GetSeenIpRadiusAcctPolicy retrieves the value of the leaf SeenIpRadiusAcctPolicy from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SeenIpRadiusAcctPolicy is set, it can
// safely use t.GetSeenIpRadiusAcctPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SeenIpRadiusAcctPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius) GetSeenIpRadiusAcctPolicy() string {
	if t == nil || t.SeenIpRadiusAcctPolicy == nil {
		return ""
	}
	return *t.SeenIpRadiusAcctPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_Radius) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub represents the /nokia-conf/configure/application-assurance/group/partition/transit-ip-policy/static-aa-sub YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub struct {
	AppProfile         *string                                                                                             `path:"app-profile" module:"nokia-conf"`
	ApplyGroups        []string                                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Ip                 map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip `path:"ip" module:"nokia-conf"`
	TransitAaSubName   *string                                                                                             `path:"transit-aa-sub-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) IsYANGGoStruct() {
}

// NewIp creates a new entry in the Ip list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) NewIp(Address string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ip == nil {
		t.Ip = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ip[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ip", key)
	}

	t.Ip[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip{
		Address: &Address,
	}

	return t.Ip[key], nil
}

// RenameIp renames an entry in the list Ip within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) RenameIp(oldK, newK string) error {
	if _, ok := t.Ip[newK]; ok {
		return fmt.Errorf("key %v already exists in Ip", newK)
	}

	e, ok := t.Ip[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ip", oldK)
	}
	e.Address = &newK

	t.Ip[newK] = e
	delete(t.Ip, oldK)
	return nil
}

// GetOrCreateIp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) GetOrCreateIp(Address string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip {

	key := Address

	if v, ok := t.Ip[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIp(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIp got unexpected error: %v", err))
	}
	return v
}

// GetIp retrieves the value with the specified key from
// the Ip map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) GetIp(Address string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Ip[key]; ok {
		return lm
	}
	return nil
}

// DeleteIp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) DeleteIp(Address string) {
	key := Address

	delete(t.Ip, key)
}

// AppendIp appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip struct to the
// list Ip of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) AppendIp(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ip == nil {
		t.Ip = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip)
	}

	if _, ok := t.Ip[key]; ok {
		return fmt.Errorf("duplicate key for list Ip %v", key)
	}

	t.Ip[key] = v
	return nil
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetTransitAaSubName retrieves the value of the leaf TransitAaSubName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitAaSubName is set, it can
// safely use t.GetTransitAaSubName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitAaSubName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) GetTransitAaSubName() string {
	if t == nil || t.TransitAaSubName == nil {
		return ""
	}
	return *t.TransitAaSubName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ip {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TransitAaSubName == nil {
		return nil, fmt.Errorf("nil value for key TransitAaSubName")
	}

	return map[string]interface{}{
		"transit-aa-sub-name": *t.TransitAaSubName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip represents the /nokia-conf/configure/application-assurance/group/partition/transit-ip-policy/static-aa-sub/ip YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_StaticAaSub_Ip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate represents the /nokia-conf/configure/application-assurance/group/partition/transit-ip-policy/transit-auto-create YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate struct {
	AdminState        E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	InactivityMonitor *bool                       `path:"inactivity-monitor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetInactivityMonitor retrieves the value of the leaf InactivityMonitor from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InactivityMonitor is set, it can
// safely use t.GetInactivityMonitor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InactivityMonitor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate) GetInactivityMonitor() bool {
	if t == nil || t.InactivityMonitor == nil {
		return false
	}
	return *t.InactivityMonitor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.InactivityMonitor == nil {
		var v bool = false
		t.InactivityMonitor = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitIpPolicy_TransitAutoCreate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy represents the /nokia-conf/configure/application-assurance/group/partition/transit-prefix-policy YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy struct {
	ApplyGroups        []string                                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                              `path:"description" module:"nokia-conf"`
	Entry              map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry       `path:"entry" module:"nokia-conf"`
	PrefixPolicyId     *uint32                                                                                              `path:"prefix-policy-id" module:"nokia-conf"`
	StaticAaSub        map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub `path:"static-aa-sub" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) NewEntry(EntryId uint32) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) GetEntry(EntryId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry struct to the
// list Entry of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) AppendEntry(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// NewStaticAaSub creates a new entry in the StaticAaSub list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) NewStaticAaSub(TransitAaSubName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticAaSub == nil {
		t.StaticAaSub = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub)
	}

	key := TransitAaSubName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticAaSub[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticAaSub", key)
	}

	t.StaticAaSub[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub{
		TransitAaSubName: &TransitAaSubName,
	}

	return t.StaticAaSub[key], nil
}

// RenameStaticAaSub renames an entry in the list StaticAaSub within
// the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) RenameStaticAaSub(oldK, newK string) error {
	if _, ok := t.StaticAaSub[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticAaSub", newK)
	}

	e, ok := t.StaticAaSub[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticAaSub", oldK)
	}
	e.TransitAaSubName = &newK

	t.StaticAaSub[newK] = e
	delete(t.StaticAaSub, oldK)
	return nil
}

// GetOrCreateStaticAaSub retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) GetOrCreateStaticAaSub(TransitAaSubName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub {

	key := TransitAaSubName

	if v, ok := t.StaticAaSub[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticAaSub(TransitAaSubName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticAaSub got unexpected error: %v", err))
	}
	return v
}

// GetStaticAaSub retrieves the value with the specified key from
// the StaticAaSub map field of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) GetStaticAaSub(TransitAaSubName string) *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub {

	if t == nil {
		return nil
	}

	key := TransitAaSubName

	if lm, ok := t.StaticAaSub[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticAaSub deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) DeleteStaticAaSub(TransitAaSubName string) {
	key := TransitAaSubName

	delete(t.StaticAaSub, key)
}

// AppendStaticAaSub appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub struct to the
// list StaticAaSub of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) AppendStaticAaSub(v *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) error {
	if v.TransitAaSubName == nil {
		return fmt.Errorf("invalid nil key received for TransitAaSubName")
	}

	key := *v.TransitAaSubName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticAaSub == nil {
		t.StaticAaSub = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub)
	}

	if _, ok := t.StaticAaSub[key]; ok {
		return fmt.Errorf("duplicate key for list StaticAaSub %v", key)
	}

	t.StaticAaSub[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPrefixPolicyId retrieves the value of the leaf PrefixPolicyId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixPolicyId is set, it can
// safely use t.GetPrefixPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixPolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) GetPrefixPolicyId() uint32 {
	if t == nil || t.PrefixPolicyId == nil {
		return 0
	}
	return *t.PrefixPolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
	for _, e := range t.StaticAaSub {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PrefixPolicyId == nil {
		return nil, fmt.Errorf("nil value for key PrefixPolicyId")
	}

	return map[string]interface{}{
		"prefix-policy-id": *t.PrefixPolicyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry represents the /nokia-conf/configure/application-assurance/group/partition/transit-prefix-policy/entry YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry struct {
	AaSub              *string                                                                                   `path:"aa-sub" module:"nokia-conf"`
	ApplyGroups        []string                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	EntryId            *uint32                                                                                   `path:"entry-id" module:"nokia-conf"`
	Match              *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) IsYANGGoStruct() {
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) GetOrCreateMatch() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) GetMatch() *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAaSub retrieves the value of the leaf AaSub from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AaSub is set, it can
// safely use t.GetAaSub() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AaSub == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) GetAaSub() string {
	if t == nil || t.AaSub == nil {
		return ""
	}
	return *t.AaSub
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match represents the /nokia-conf/configure/application-assurance/group/partition/transit-prefix-policy/entry/match YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match struct {
	AaSubIp   *string `path:"aa-sub-ip" module:"nokia-conf"`
	NetworkIp *string `path:"network-ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match) IsYANGGoStruct() {
}

// GetAaSubIp retrieves the value of the leaf AaSubIp from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AaSubIp is set, it can
// safely use t.GetAaSubIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AaSubIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match) GetAaSubIp() string {
	if t == nil || t.AaSubIp == nil {
		return ""
	}
	return *t.AaSubIp
}

// GetNetworkIp retrieves the value of the leaf NetworkIp from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkIp is set, it can
// safely use t.GetNetworkIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match) GetNetworkIp() string {
	if t == nil || t.NetworkIp == nil {
		return ""
	}
	return *t.NetworkIp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub represents the /nokia-conf/configure/application-assurance/group/partition/transit-prefix-policy/static-aa-sub YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub struct {
	AppProfile         *string  `path:"app-profile" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IsRemote           *bool    `path:"is-remote" module:"nokia-conf"`
	TransitAaSubName   *string  `path:"transit-aa-sub-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) IsYANGGoStruct() {
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIsRemote retrieves the value of the leaf IsRemote from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IsRemote is set, it can
// safely use t.GetIsRemote() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IsRemote == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) GetIsRemote() bool {
	if t == nil || t.IsRemote == nil {
		return false
	}
	return *t.IsRemote
}

// GetTransitAaSubName retrieves the value of the leaf TransitAaSubName from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitAaSubName is set, it can
// safely use t.GetTransitAaSubName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitAaSubName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) GetTransitAaSubName() string {
	if t == nil || t.TransitAaSubName == nil {
		return ""
	}
	return *t.TransitAaSubName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TransitAaSubName == nil {
		return nil, fmt.Errorf("nil value for key TransitAaSubName")
	}

	return map[string]interface{}{
		"transit-aa-sub-name": *t.TransitAaSubName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_TransitPrefixPolicy_StaticAaSub) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X represents the /nokia-conf/configure/application-assurance/group/partition/wap1x YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Partition_Wap1X) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer represents the /nokia-conf/configure/application-assurance/group/policer YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer struct {
	AnlBandwidthPolicer          map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer          `path:"anl-bandwidth-policer" module:"nokia-conf"`
	DualBucketBandwidthPolicer   map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer   `path:"dual-bucket-bandwidth-policer" module:"nokia-conf"`
	FlowCountLimitPolicer        map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer        `path:"flow-count-limit-policer" module:"nokia-conf"`
	FlowSetupRatePolicer         map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer         `path:"flow-setup-rate-policer" module:"nokia-conf"`
	SingleBucketBandwidthPolicer map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer `path:"single-bucket-bandwidth-policer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer) IsYANGGoStruct() {}

// NewAnlBandwidthPolicer creates a new entry in the AnlBandwidthPolicer list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Policer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) NewAnlBandwidthPolicer(PolicerName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AnlBandwidthPolicer == nil {
		t.AnlBandwidthPolicer = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer)
	}

	key := PolicerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AnlBandwidthPolicer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AnlBandwidthPolicer", key)
	}

	t.AnlBandwidthPolicer[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer{
		PolicerName: &PolicerName,
	}

	return t.AnlBandwidthPolicer[key], nil
}

// RenameAnlBandwidthPolicer renames an entry in the list AnlBandwidthPolicer within
// the NokiaConf_Configure_ApplicationAssurance_Group_Policer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) RenameAnlBandwidthPolicer(oldK, newK string) error {
	if _, ok := t.AnlBandwidthPolicer[newK]; ok {
		return fmt.Errorf("key %v already exists in AnlBandwidthPolicer", newK)
	}

	e, ok := t.AnlBandwidthPolicer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AnlBandwidthPolicer", oldK)
	}
	e.PolicerName = &newK

	t.AnlBandwidthPolicer[newK] = e
	delete(t.AnlBandwidthPolicer, oldK)
	return nil
}

// GetOrCreateAnlBandwidthPolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Policer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) GetOrCreateAnlBandwidthPolicer(PolicerName string) *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer {

	key := PolicerName

	if v, ok := t.AnlBandwidthPolicer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAnlBandwidthPolicer(PolicerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAnlBandwidthPolicer got unexpected error: %v", err))
	}
	return v
}

// GetAnlBandwidthPolicer retrieves the value with the specified key from
// the AnlBandwidthPolicer map field of NokiaConf_Configure_ApplicationAssurance_Group_Policer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) GetAnlBandwidthPolicer(PolicerName string) *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer {

	if t == nil {
		return nil
	}

	key := PolicerName

	if lm, ok := t.AnlBandwidthPolicer[key]; ok {
		return lm
	}
	return nil
}

// DeleteAnlBandwidthPolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Policer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) DeleteAnlBandwidthPolicer(PolicerName string) {
	key := PolicerName

	delete(t.AnlBandwidthPolicer, key)
}

// AppendAnlBandwidthPolicer appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer struct to the
// list AnlBandwidthPolicer of NokiaConf_Configure_ApplicationAssurance_Group_Policer. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) AppendAnlBandwidthPolicer(v *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) error {
	if v.PolicerName == nil {
		return fmt.Errorf("invalid nil key received for PolicerName")
	}

	key := *v.PolicerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AnlBandwidthPolicer == nil {
		t.AnlBandwidthPolicer = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer)
	}

	if _, ok := t.AnlBandwidthPolicer[key]; ok {
		return fmt.Errorf("duplicate key for list AnlBandwidthPolicer %v", key)
	}

	t.AnlBandwidthPolicer[key] = v
	return nil
}

// NewDualBucketBandwidthPolicer creates a new entry in the DualBucketBandwidthPolicer list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Policer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) NewDualBucketBandwidthPolicer(PolicerName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DualBucketBandwidthPolicer == nil {
		t.DualBucketBandwidthPolicer = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer)
	}

	key := PolicerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DualBucketBandwidthPolicer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DualBucketBandwidthPolicer", key)
	}

	t.DualBucketBandwidthPolicer[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer{
		PolicerName: &PolicerName,
	}

	return t.DualBucketBandwidthPolicer[key], nil
}

// RenameDualBucketBandwidthPolicer renames an entry in the list DualBucketBandwidthPolicer within
// the NokiaConf_Configure_ApplicationAssurance_Group_Policer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) RenameDualBucketBandwidthPolicer(oldK, newK string) error {
	if _, ok := t.DualBucketBandwidthPolicer[newK]; ok {
		return fmt.Errorf("key %v already exists in DualBucketBandwidthPolicer", newK)
	}

	e, ok := t.DualBucketBandwidthPolicer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DualBucketBandwidthPolicer", oldK)
	}
	e.PolicerName = &newK

	t.DualBucketBandwidthPolicer[newK] = e
	delete(t.DualBucketBandwidthPolicer, oldK)
	return nil
}

// GetOrCreateDualBucketBandwidthPolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Policer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) GetOrCreateDualBucketBandwidthPolicer(PolicerName string) *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer {

	key := PolicerName

	if v, ok := t.DualBucketBandwidthPolicer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDualBucketBandwidthPolicer(PolicerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDualBucketBandwidthPolicer got unexpected error: %v", err))
	}
	return v
}

// GetDualBucketBandwidthPolicer retrieves the value with the specified key from
// the DualBucketBandwidthPolicer map field of NokiaConf_Configure_ApplicationAssurance_Group_Policer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) GetDualBucketBandwidthPolicer(PolicerName string) *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer {

	if t == nil {
		return nil
	}

	key := PolicerName

	if lm, ok := t.DualBucketBandwidthPolicer[key]; ok {
		return lm
	}
	return nil
}

// DeleteDualBucketBandwidthPolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Policer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) DeleteDualBucketBandwidthPolicer(PolicerName string) {
	key := PolicerName

	delete(t.DualBucketBandwidthPolicer, key)
}

// AppendDualBucketBandwidthPolicer appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer struct to the
// list DualBucketBandwidthPolicer of NokiaConf_Configure_ApplicationAssurance_Group_Policer. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) AppendDualBucketBandwidthPolicer(v *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) error {
	if v.PolicerName == nil {
		return fmt.Errorf("invalid nil key received for PolicerName")
	}

	key := *v.PolicerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DualBucketBandwidthPolicer == nil {
		t.DualBucketBandwidthPolicer = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer)
	}

	if _, ok := t.DualBucketBandwidthPolicer[key]; ok {
		return fmt.Errorf("duplicate key for list DualBucketBandwidthPolicer %v", key)
	}

	t.DualBucketBandwidthPolicer[key] = v
	return nil
}

// NewFlowCountLimitPolicer creates a new entry in the FlowCountLimitPolicer list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Policer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) NewFlowCountLimitPolicer(PolicerName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlowCountLimitPolicer == nil {
		t.FlowCountLimitPolicer = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer)
	}

	key := PolicerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FlowCountLimitPolicer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FlowCountLimitPolicer", key)
	}

	t.FlowCountLimitPolicer[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer{
		PolicerName: &PolicerName,
	}

	return t.FlowCountLimitPolicer[key], nil
}

// RenameFlowCountLimitPolicer renames an entry in the list FlowCountLimitPolicer within
// the NokiaConf_Configure_ApplicationAssurance_Group_Policer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) RenameFlowCountLimitPolicer(oldK, newK string) error {
	if _, ok := t.FlowCountLimitPolicer[newK]; ok {
		return fmt.Errorf("key %v already exists in FlowCountLimitPolicer", newK)
	}

	e, ok := t.FlowCountLimitPolicer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FlowCountLimitPolicer", oldK)
	}
	e.PolicerName = &newK

	t.FlowCountLimitPolicer[newK] = e
	delete(t.FlowCountLimitPolicer, oldK)
	return nil
}

// GetOrCreateFlowCountLimitPolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Policer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) GetOrCreateFlowCountLimitPolicer(PolicerName string) *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer {

	key := PolicerName

	if v, ok := t.FlowCountLimitPolicer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlowCountLimitPolicer(PolicerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlowCountLimitPolicer got unexpected error: %v", err))
	}
	return v
}

// GetFlowCountLimitPolicer retrieves the value with the specified key from
// the FlowCountLimitPolicer map field of NokiaConf_Configure_ApplicationAssurance_Group_Policer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) GetFlowCountLimitPolicer(PolicerName string) *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer {

	if t == nil {
		return nil
	}

	key := PolicerName

	if lm, ok := t.FlowCountLimitPolicer[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlowCountLimitPolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Policer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) DeleteFlowCountLimitPolicer(PolicerName string) {
	key := PolicerName

	delete(t.FlowCountLimitPolicer, key)
}

// AppendFlowCountLimitPolicer appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer struct to the
// list FlowCountLimitPolicer of NokiaConf_Configure_ApplicationAssurance_Group_Policer. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) AppendFlowCountLimitPolicer(v *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) error {
	if v.PolicerName == nil {
		return fmt.Errorf("invalid nil key received for PolicerName")
	}

	key := *v.PolicerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlowCountLimitPolicer == nil {
		t.FlowCountLimitPolicer = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer)
	}

	if _, ok := t.FlowCountLimitPolicer[key]; ok {
		return fmt.Errorf("duplicate key for list FlowCountLimitPolicer %v", key)
	}

	t.FlowCountLimitPolicer[key] = v
	return nil
}

// NewFlowSetupRatePolicer creates a new entry in the FlowSetupRatePolicer list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Policer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) NewFlowSetupRatePolicer(PolicerName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlowSetupRatePolicer == nil {
		t.FlowSetupRatePolicer = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer)
	}

	key := PolicerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FlowSetupRatePolicer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FlowSetupRatePolicer", key)
	}

	t.FlowSetupRatePolicer[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer{
		PolicerName: &PolicerName,
	}

	return t.FlowSetupRatePolicer[key], nil
}

// RenameFlowSetupRatePolicer renames an entry in the list FlowSetupRatePolicer within
// the NokiaConf_Configure_ApplicationAssurance_Group_Policer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) RenameFlowSetupRatePolicer(oldK, newK string) error {
	if _, ok := t.FlowSetupRatePolicer[newK]; ok {
		return fmt.Errorf("key %v already exists in FlowSetupRatePolicer", newK)
	}

	e, ok := t.FlowSetupRatePolicer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FlowSetupRatePolicer", oldK)
	}
	e.PolicerName = &newK

	t.FlowSetupRatePolicer[newK] = e
	delete(t.FlowSetupRatePolicer, oldK)
	return nil
}

// GetOrCreateFlowSetupRatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Policer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) GetOrCreateFlowSetupRatePolicer(PolicerName string) *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer {

	key := PolicerName

	if v, ok := t.FlowSetupRatePolicer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlowSetupRatePolicer(PolicerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlowSetupRatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetFlowSetupRatePolicer retrieves the value with the specified key from
// the FlowSetupRatePolicer map field of NokiaConf_Configure_ApplicationAssurance_Group_Policer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) GetFlowSetupRatePolicer(PolicerName string) *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer {

	if t == nil {
		return nil
	}

	key := PolicerName

	if lm, ok := t.FlowSetupRatePolicer[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlowSetupRatePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Policer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) DeleteFlowSetupRatePolicer(PolicerName string) {
	key := PolicerName

	delete(t.FlowSetupRatePolicer, key)
}

// AppendFlowSetupRatePolicer appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer struct to the
// list FlowSetupRatePolicer of NokiaConf_Configure_ApplicationAssurance_Group_Policer. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) AppendFlowSetupRatePolicer(v *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) error {
	if v.PolicerName == nil {
		return fmt.Errorf("invalid nil key received for PolicerName")
	}

	key := *v.PolicerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlowSetupRatePolicer == nil {
		t.FlowSetupRatePolicer = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer)
	}

	if _, ok := t.FlowSetupRatePolicer[key]; ok {
		return fmt.Errorf("duplicate key for list FlowSetupRatePolicer %v", key)
	}

	t.FlowSetupRatePolicer[key] = v
	return nil
}

// NewSingleBucketBandwidthPolicer creates a new entry in the SingleBucketBandwidthPolicer list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Policer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) NewSingleBucketBandwidthPolicer(PolicerName string) (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SingleBucketBandwidthPolicer == nil {
		t.SingleBucketBandwidthPolicer = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer)
	}

	key := PolicerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SingleBucketBandwidthPolicer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SingleBucketBandwidthPolicer", key)
	}

	t.SingleBucketBandwidthPolicer[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer{
		PolicerName: &PolicerName,
	}

	return t.SingleBucketBandwidthPolicer[key], nil
}

// RenameSingleBucketBandwidthPolicer renames an entry in the list SingleBucketBandwidthPolicer within
// the NokiaConf_Configure_ApplicationAssurance_Group_Policer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) RenameSingleBucketBandwidthPolicer(oldK, newK string) error {
	if _, ok := t.SingleBucketBandwidthPolicer[newK]; ok {
		return fmt.Errorf("key %v already exists in SingleBucketBandwidthPolicer", newK)
	}

	e, ok := t.SingleBucketBandwidthPolicer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SingleBucketBandwidthPolicer", oldK)
	}
	e.PolicerName = &newK

	t.SingleBucketBandwidthPolicer[newK] = e
	delete(t.SingleBucketBandwidthPolicer, oldK)
	return nil
}

// GetOrCreateSingleBucketBandwidthPolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Policer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) GetOrCreateSingleBucketBandwidthPolicer(PolicerName string) *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer {

	key := PolicerName

	if v, ok := t.SingleBucketBandwidthPolicer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSingleBucketBandwidthPolicer(PolicerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSingleBucketBandwidthPolicer got unexpected error: %v", err))
	}
	return v
}

// GetSingleBucketBandwidthPolicer retrieves the value with the specified key from
// the SingleBucketBandwidthPolicer map field of NokiaConf_Configure_ApplicationAssurance_Group_Policer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) GetSingleBucketBandwidthPolicer(PolicerName string) *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer {

	if t == nil {
		return nil
	}

	key := PolicerName

	if lm, ok := t.SingleBucketBandwidthPolicer[key]; ok {
		return lm
	}
	return nil
}

// DeleteSingleBucketBandwidthPolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Policer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) DeleteSingleBucketBandwidthPolicer(PolicerName string) {
	key := PolicerName

	delete(t.SingleBucketBandwidthPolicer, key)
}

// AppendSingleBucketBandwidthPolicer appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer struct to the
// list SingleBucketBandwidthPolicer of NokiaConf_Configure_ApplicationAssurance_Group_Policer. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) AppendSingleBucketBandwidthPolicer(v *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) error {
	if v.PolicerName == nil {
		return fmt.Errorf("invalid nil key received for PolicerName")
	}

	key := *v.PolicerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SingleBucketBandwidthPolicer == nil {
		t.SingleBucketBandwidthPolicer = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer)
	}

	if _, ok := t.SingleBucketBandwidthPolicer[key]; ok {
		return fmt.Errorf("duplicate key for list SingleBucketBandwidthPolicer %v", key)
	}

	t.SingleBucketBandwidthPolicer[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AnlBandwidthPolicer {
		e.PopulateDefaults()
	}
	for _, e := range t.DualBucketBandwidthPolicer {
		e.PopulateDefaults()
	}
	for _, e := range t.FlowCountLimitPolicer {
		e.PopulateDefaults()
	}
	for _, e := range t.FlowSetupRatePolicer {
		e.PopulateDefaults()
	}
	for _, e := range t.SingleBucketBandwidthPolicer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer represents the /nokia-conf/configure/application-assurance/group/policer/anl-bandwidth-policer YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer struct {
	Action                E_NokiaTypesApplicationAssurance_PolicerAction                                             `path:"action" module:"nokia-conf"`
	AdaptationRule        *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups           []string                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Description           *string                                                                                    `path:"description" module:"nokia-conf"`
	Mbs                   *int32                                                                                     `path:"mbs" module:"nokia-conf"`
	PolicerName           *string                                                                                    `path:"policer-name" module:"nokia-conf"`
	RatePercentage        *int32                                                                                     `path:"rate-percentage" module:"nokia-conf"`
	RatePercentageStage_2 *int32                                                                                     `path:"rate-percentage-stage-2" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) GetOrCreateAdaptationRule() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule{}
	return t.AdaptationRule
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) GetAdaptationRule() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) GetAction() E_NokiaTypesApplicationAssurance_PolicerAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesApplicationAssurance_PolicerAction_permit_deny
	}
	return t.Action
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// GetRatePercentage retrieves the value of the leaf RatePercentage from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RatePercentage is set, it can
// safely use t.GetRatePercentage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RatePercentage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) GetRatePercentage() int32 {
	if t == nil || t.RatePercentage == nil {
		return 0
	}
	return *t.RatePercentage
}

// GetRatePercentageStage_2 retrieves the value of the leaf RatePercentageStage_2 from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RatePercentageStage_2 is set, it can
// safely use t.GetRatePercentageStage_2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RatePercentageStage_2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) GetRatePercentageStage_2() int32 {
	if t == nil || t.RatePercentageStage_2 == nil {
		return 0
	}
	return *t.RatePercentageStage_2
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesApplicationAssurance_PolicerAction_permit_deny
	}
	if t.Mbs == nil {
		var v int32 = 0
		t.Mbs = &v
	}
	t.AdaptationRule.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerName == nil {
		return nil, fmt.Errorf("nil value for key PolicerName")
	}

	return map[string]interface{}{
		"policer-name": *t.PolicerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule represents the /nokia-conf/configure/application-assurance/group/policer/anl-bandwidth-policer/adaptation-rule YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule struct {
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule) IsYANGGoStruct() {
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_AnlBandwidthPolicer_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer represents the /nokia-conf/configure/application-assurance/group/policer/dual-bucket-bandwidth-policer YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer struct {
	AdaptationRule            *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule              `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups               []string                                                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                       *int32                                                                                                         `path:"cbs" module:"nokia-conf"`
	Cir                       NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_Cir_Union                    `path:"cir" module:"nokia-conf"`
	CongestionOverride        *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride          `path:"congestion-override" module:"nokia-conf"`
	CongestionOverrideStage_2 *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2   `path:"congestion-override-stage-2" module:"nokia-conf"`
	Description               *string                                                                                                        `path:"description" module:"nokia-conf"`
	Mbs                       *int32                                                                                                         `path:"mbs" module:"nokia-conf"`
	Pir                       NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_Pir_Union                    `path:"pir" module:"nokia-conf"`
	PolicerName               *string                                                                                                        `path:"policer-name" module:"nokia-conf"`
	TimeOfDayOverride         map[int32]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride `path:"time-of-day-override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) IsYANGGoStruct() {
}

// NewTimeOfDayOverride creates a new entry in the TimeOfDayOverride list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) NewTimeOfDayOverride(TodOverrideId int32) (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TimeOfDayOverride == nil {
		t.TimeOfDayOverride = make(map[int32]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride)
	}

	key := TodOverrideId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TimeOfDayOverride[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TimeOfDayOverride", key)
	}

	t.TimeOfDayOverride[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride{
		TodOverrideId: &TodOverrideId,
	}

	return t.TimeOfDayOverride[key], nil
}

// RenameTimeOfDayOverride renames an entry in the list TimeOfDayOverride within
// the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) RenameTimeOfDayOverride(oldK, newK int32) error {
	if _, ok := t.TimeOfDayOverride[newK]; ok {
		return fmt.Errorf("key %v already exists in TimeOfDayOverride", newK)
	}

	e, ok := t.TimeOfDayOverride[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TimeOfDayOverride", oldK)
	}
	e.TodOverrideId = &newK

	t.TimeOfDayOverride[newK] = e
	delete(t.TimeOfDayOverride, oldK)
	return nil
}

// GetOrCreateTimeOfDayOverride retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetOrCreateTimeOfDayOverride(TodOverrideId int32) *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride {

	key := TodOverrideId

	if v, ok := t.TimeOfDayOverride[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTimeOfDayOverride(TodOverrideId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTimeOfDayOverride got unexpected error: %v", err))
	}
	return v
}

// GetTimeOfDayOverride retrieves the value with the specified key from
// the TimeOfDayOverride map field of NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetTimeOfDayOverride(TodOverrideId int32) *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride {

	if t == nil {
		return nil
	}

	key := TodOverrideId

	if lm, ok := t.TimeOfDayOverride[key]; ok {
		return lm
	}
	return nil
}

// DeleteTimeOfDayOverride deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) DeleteTimeOfDayOverride(TodOverrideId int32) {
	key := TodOverrideId

	delete(t.TimeOfDayOverride, key)
}

// AppendTimeOfDayOverride appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride struct to the
// list TimeOfDayOverride of NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) AppendTimeOfDayOverride(v *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) error {
	if v.TodOverrideId == nil {
		return fmt.Errorf("invalid nil key received for TodOverrideId")
	}

	key := *v.TodOverrideId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TimeOfDayOverride == nil {
		t.TimeOfDayOverride = make(map[int32]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride)
	}

	if _, ok := t.TimeOfDayOverride[key]; ok {
		return fmt.Errorf("duplicate key for list TimeOfDayOverride %v", key)
	}

	t.TimeOfDayOverride[key] = v
	return nil
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetOrCreateAdaptationRule() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateCongestionOverride retrieves the value of the CongestionOverride field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetOrCreateCongestionOverride() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride {
	if t.CongestionOverride != nil {
		return t.CongestionOverride
	}
	t.CongestionOverride = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride{}
	return t.CongestionOverride
}

// GetOrCreateCongestionOverrideStage_2 retrieves the value of the CongestionOverrideStage_2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetOrCreateCongestionOverrideStage_2() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2 {
	if t.CongestionOverrideStage_2 != nil {
		return t.CongestionOverrideStage_2
	}
	t.CongestionOverrideStage_2 = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2{}
	return t.CongestionOverrideStage_2
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetAdaptationRule() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetCongestionOverride returns the value of the CongestionOverride struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer. If the receiver or the field CongestionOverride is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetCongestionOverride() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride {
	if t != nil && t.CongestionOverride != nil {
		return t.CongestionOverride
	}
	return nil
}

// GetCongestionOverrideStage_2 returns the value of the CongestionOverrideStage_2 struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer. If the receiver or the field CongestionOverrideStage_2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetCongestionOverrideStage_2() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2 {
	if t != nil && t.CongestionOverrideStage_2 != nil {
		return t.CongestionOverrideStage_2
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetCir() NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetPir() NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	return t.Pir
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		var v int32 = 0
		t.Cbs = &v
	}
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.Mbs == nil {
		var v int32 = 0
		t.Mbs = &v
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	t.AdaptationRule.PopulateDefaults()
	t.CongestionOverride.PopulateDefaults()
	t.CongestionOverrideStage_2.PopulateDefaults()
	for _, e := range t.TimeOfDayOverride {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerName == nil {
		return nil, fmt.Errorf("nil value for key PolicerName")
	}

	return map[string]interface{}{
		"policer-name": *t.PolicerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule represents the /nokia-conf/configure/application-assurance/group/policer/dual-bucket-bandwidth-policer/adaptation-rule YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRule `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Cir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == 0 {
		t.Cir = NokiaTypesQos_AdaptationRule_closest
	}
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride represents the /nokia-conf/configure/application-assurance/group/policer/dual-bucket-bandwidth-policer/congestion-override YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride struct {
	Cbs *int32                                                                                                         `path:"cbs" module:"nokia-conf"`
	Cir NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride_Cir_Union `path:"cir" module:"nokia-conf"`
	Mbs *int32                                                                                                         `path:"mbs" module:"nokia-conf"`
	Pir NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride) IsYANGGoStruct() {
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride) GetCir() NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride) GetPir() NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		var v int32 = 0
		t.Cbs = &v
	}
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.Mbs == nil {
		var v int32 = 0
		t.Mbs = &v
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverride) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2 represents the /nokia-conf/configure/application-assurance/group/policer/dual-bucket-bandwidth-policer/congestion-override-stage-2 YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2 struct {
	Cbs *int32                                                                                                                `path:"cbs" module:"nokia-conf"`
	Cir NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2_Cir_Union `path:"cir" module:"nokia-conf"`
	Mbs *int32                                                                                                                `path:"mbs" module:"nokia-conf"`
	Pir NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2) IsYANGGoStruct() {
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2) GetCir() NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2) GetPir() NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		var v int32 = 0
		t.Cbs = &v
	}
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.Mbs == nil {
		var v int32 = 0
		t.Mbs = &v
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_CongestionOverrideStage_2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride represents the /nokia-conf/configure/application-assurance/group/policer/dual-bucket-bandwidth-policer/time-of-day-override YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                *int32                                                                                                         `path:"cbs" module:"nokia-conf"`
	Cir                NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_Cir_Union  `path:"cir" module:"nokia-conf"`
	Description        *string                                                                                                        `path:"description" module:"nokia-conf"`
	Mbs                *int32                                                                                                         `path:"mbs" module:"nokia-conf"`
	Pir                NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_Pir_Union  `path:"pir" module:"nokia-conf"`
	TimeRange          *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange `path:"time-range" module:"nokia-conf"`
	TodOverrideId      *int32                                                                                                         `path:"tod-override-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) IsYANGGoStruct() {
}

// GetOrCreateTimeRange retrieves the value of the TimeRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) GetOrCreateTimeRange() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange {
	if t.TimeRange != nil {
		return t.TimeRange
	}
	t.TimeRange = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange{}
	return t.TimeRange
}

// GetTimeRange returns the value of the TimeRange struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride. If the receiver or the field TimeRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) GetTimeRange() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange {
	if t != nil && t.TimeRange != nil {
		return t.TimeRange
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) GetCir() NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) GetPir() NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	return t.Pir
}

// GetTodOverrideId retrieves the value of the leaf TodOverrideId from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TodOverrideId is set, it can
// safely use t.GetTodOverrideId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TodOverrideId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) GetTodOverrideId() int32 {
	if t == nil || t.TodOverrideId == nil {
		return 0
	}
	return *t.TodOverrideId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Cbs == nil {
		var v int32 = 0
		t.Cbs = &v
	}
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.Mbs == nil {
		var v int32 = 0
		t.Mbs = &v
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	t.TimeRange.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TodOverrideId == nil {
		return nil, fmt.Errorf("nil value for key TodOverrideId")
	}

	return map[string]interface{}{
		"tod-override-id": *t.TodOverrideId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange represents the /nokia-conf/configure/application-assurance/group/policer/dual-bucket-bandwidth-policer/time-of-day-override/time-range YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange struct {
	Daily  *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily  `path:"daily" module:"nokia-conf" yangPresence:"true"`
	Weekly *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly `path:"weekly" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) IsYANGGoStruct() {
}

// GetOrCreateDaily retrieves the value of the Daily field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) GetOrCreateDaily() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily {
	if t.Daily != nil {
		return t.Daily
	}
	t.Daily = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily{}
	return t.Daily
}

// GetOrCreateWeekly retrieves the value of the Weekly field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) GetOrCreateWeekly() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly {
	if t.Weekly != nil {
		return t.Weekly
	}
	t.Weekly = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly{}
	return t.Weekly
}

// GetDaily returns the value of the Daily struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange. If the receiver or the field Daily is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) GetDaily() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily {
	if t != nil && t.Daily != nil {
		return t.Daily
	}
	return nil
}

// GetWeekly returns the value of the Weekly struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange. If the receiver or the field Weekly is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) GetWeekly() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly {
	if t != nil && t.Weekly != nil {
		return t.Weekly
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Daily.PopulateDefaults()
	t.Weekly.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily represents the /nokia-conf/configure/application-assurance/group/policer/dual-bucket-bandwidth-policer/time-of-day-override/time-range/daily YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily struct {
	AllDays YANGEmpty                                                                                                                  `path:"all-days" module:"nokia-conf"`
	End     *string                                                                                                                    `path:"end" module:"nokia-conf"`
	On      []E_NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily_On `path:"on" module:"nokia-conf"`
	Start   *string                                                                                                                    `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) IsYANGGoStruct() {
}

// GetAllDays retrieves the value of the leaf AllDays from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllDays is set, it can
// safely use t.GetAllDays() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllDays == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) GetAllDays() YANGEmpty {
	if t == nil || t.AllDays == false {
		return false
	}
	return t.AllDays
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetOn retrieves the value of the leaf On from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if On is set, it can
// safely use t.GetOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.On == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) GetOn() []E_NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily_On {
	if t == nil || t.On == nil {
		return nil
	}
	return t.On
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly represents the /nokia-conf/configure/application-assurance/group/policer/dual-bucket-bandwidth-policer/time-of-day-override/time-range/weekly YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly struct {
	End   *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End   `path:"end" module:"nokia-conf" yangPresence:"true"`
	Start *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start `path:"start" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) IsYANGGoStruct() {
}

// GetOrCreateEnd retrieves the value of the End field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) GetOrCreateEnd() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End {
	if t.End != nil {
		return t.End
	}
	t.End = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End{}
	return t.End
}

// GetOrCreateStart retrieves the value of the Start field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) GetOrCreateStart() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start {
	if t.Start != nil {
		return t.Start
	}
	t.Start = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start{}
	return t.Start
}

// GetEnd returns the value of the End struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly. If the receiver or the field End is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) GetEnd() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End {
	if t != nil && t.End != nil {
		return t.End
	}
	return nil
}

// GetStart returns the value of the Start struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly. If the receiver or the field Start is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) GetStart() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start {
	if t != nil && t.Start != nil {
		return t.Start
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.End.PopulateDefaults()
	t.Start.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End represents the /nokia-conf/configure/application-assurance/group/policer/dual-bucket-bandwidth-policer/time-of-day-override/time-range/weekly/end YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End struct {
	Day  E_NokiaTypesApplicationAssurance_DayOfWeek `path:"day" module:"nokia-conf"`
	Time *string                                    `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) IsYANGGoStruct() {
}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) GetDay() E_NokiaTypesApplicationAssurance_DayOfWeek {
	if t == nil || t.Day == 0 {
		return 0
	}
	return t.Day
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) GetTime() string {
	if t == nil || t.Time == nil {
		return ""
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start represents the /nokia-conf/configure/application-assurance/group/policer/dual-bucket-bandwidth-policer/time-of-day-override/time-range/weekly/start YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start struct {
	Day  E_NokiaTypesApplicationAssurance_DayOfWeek `path:"day" module:"nokia-conf"`
	Time *string                                    `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) IsYANGGoStruct() {
}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) GetDay() E_NokiaTypesApplicationAssurance_DayOfWeek {
	if t == nil || t.Day == 0 {
		return 0
	}
	return t.Day
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) GetTime() string {
	if t == nil || t.Time == nil {
		return ""
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_DualBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer represents the /nokia-conf/configure/application-assurance/group/policer/flow-count-limit-policer YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer struct {
	Action             E_NokiaTypesApplicationAssurance_PolicerAction                                                            `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                                   `path:"description" module:"nokia-conf"`
	Granularity        E_NokiaTypesApplicationAssurance_PolicerGranularity                                                       `path:"granularity" module:"nokia-conf"`
	LimitGtpFlows      *bool                                                                                                     `path:"limit-gtp-flows" module:"nokia-conf"`
	PeakFlowCount      NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_PeakFlowCount_Union          `path:"peak-flow-count" module:"nokia-conf"`
	PolicerName        *string                                                                                                   `path:"policer-name" module:"nokia-conf"`
	TimeOfDayOverride  map[int32]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride `path:"time-of-day-override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) IsYANGGoStruct() {
}

// NewTimeOfDayOverride creates a new entry in the TimeOfDayOverride list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) NewTimeOfDayOverride(TodOverrideId int32) (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TimeOfDayOverride == nil {
		t.TimeOfDayOverride = make(map[int32]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride)
	}

	key := TodOverrideId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TimeOfDayOverride[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TimeOfDayOverride", key)
	}

	t.TimeOfDayOverride[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride{
		TodOverrideId: &TodOverrideId,
	}

	return t.TimeOfDayOverride[key], nil
}

// RenameTimeOfDayOverride renames an entry in the list TimeOfDayOverride within
// the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) RenameTimeOfDayOverride(oldK, newK int32) error {
	if _, ok := t.TimeOfDayOverride[newK]; ok {
		return fmt.Errorf("key %v already exists in TimeOfDayOverride", newK)
	}

	e, ok := t.TimeOfDayOverride[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TimeOfDayOverride", oldK)
	}
	e.TodOverrideId = &newK

	t.TimeOfDayOverride[newK] = e
	delete(t.TimeOfDayOverride, oldK)
	return nil
}

// GetOrCreateTimeOfDayOverride retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) GetOrCreateTimeOfDayOverride(TodOverrideId int32) *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride {

	key := TodOverrideId

	if v, ok := t.TimeOfDayOverride[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTimeOfDayOverride(TodOverrideId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTimeOfDayOverride got unexpected error: %v", err))
	}
	return v
}

// GetTimeOfDayOverride retrieves the value with the specified key from
// the TimeOfDayOverride map field of NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) GetTimeOfDayOverride(TodOverrideId int32) *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride {

	if t == nil {
		return nil
	}

	key := TodOverrideId

	if lm, ok := t.TimeOfDayOverride[key]; ok {
		return lm
	}
	return nil
}

// DeleteTimeOfDayOverride deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) DeleteTimeOfDayOverride(TodOverrideId int32) {
	key := TodOverrideId

	delete(t.TimeOfDayOverride, key)
}

// AppendTimeOfDayOverride appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride struct to the
// list TimeOfDayOverride of NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) AppendTimeOfDayOverride(v *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) error {
	if v.TodOverrideId == nil {
		return fmt.Errorf("invalid nil key received for TodOverrideId")
	}

	key := *v.TodOverrideId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TimeOfDayOverride == nil {
		t.TimeOfDayOverride = make(map[int32]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride)
	}

	if _, ok := t.TimeOfDayOverride[key]; ok {
		return fmt.Errorf("duplicate key for list TimeOfDayOverride %v", key)
	}

	t.TimeOfDayOverride[key] = v
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) GetAction() E_NokiaTypesApplicationAssurance_PolicerAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesApplicationAssurance_PolicerAction_permit_deny
	}
	return t.Action
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGranularity retrieves the value of the leaf Granularity from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Granularity is set, it can
// safely use t.GetGranularity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Granularity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) GetGranularity() E_NokiaTypesApplicationAssurance_PolicerGranularity {
	if t == nil || t.Granularity == 0 {
		return 0
	}
	return t.Granularity
}

// GetLimitGtpFlows retrieves the value of the leaf LimitGtpFlows from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitGtpFlows is set, it can
// safely use t.GetLimitGtpFlows() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitGtpFlows == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) GetLimitGtpFlows() bool {
	if t == nil || t.LimitGtpFlows == nil {
		return false
	}
	return *t.LimitGtpFlows
}

// GetPeakFlowCount retrieves the value of the leaf PeakFlowCount from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeakFlowCount is set, it can
// safely use t.GetPeakFlowCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeakFlowCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) GetPeakFlowCount() NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_PeakFlowCount_Union {
	if t == nil || t.PeakFlowCount == nil {
		return NokiaTypesApplicationAssurance_PolicerFlowCountLimit_Enum_max
	}
	return t.PeakFlowCount
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesApplicationAssurance_PolicerAction_permit_deny
	}
	if t.LimitGtpFlows == nil {
		var v bool = false
		t.LimitGtpFlows = &v
	}
	if t.PeakFlowCount == nil {
		t.PeakFlowCount = NokiaTypesApplicationAssurance_PolicerFlowCountLimit_Enum_max
	}
	for _, e := range t.TimeOfDayOverride {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerName == nil {
		return nil, fmt.Errorf("nil value for key PolicerName")
	}

	return map[string]interface{}{
		"policer-name": *t.PolicerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride represents the /nokia-conf/configure/application-assurance/group/policer/flow-count-limit-policer/time-of-day-override YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                        `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                                            `path:"description" module:"nokia-conf"`
	PeakFlowCount      NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_PeakFlowCount_Union `path:"peak-flow-count" module:"nokia-conf"`
	TimeRange          *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange          `path:"time-range" module:"nokia-conf"`
	TodOverrideId      *int32                                                                                                             `path:"tod-override-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) IsYANGGoStruct() {
}

// GetOrCreateTimeRange retrieves the value of the TimeRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) GetOrCreateTimeRange() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange {
	if t.TimeRange != nil {
		return t.TimeRange
	}
	t.TimeRange = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange{}
	return t.TimeRange
}

// GetTimeRange returns the value of the TimeRange struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride. If the receiver or the field TimeRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) GetTimeRange() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange {
	if t != nil && t.TimeRange != nil {
		return t.TimeRange
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPeakFlowCount retrieves the value of the leaf PeakFlowCount from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeakFlowCount is set, it can
// safely use t.GetPeakFlowCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeakFlowCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) GetPeakFlowCount() NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_PeakFlowCount_Union {
	if t == nil || t.PeakFlowCount == nil {
		return NokiaTypesApplicationAssurance_PolicerFlowCountLimit_Enum_max
	}
	return t.PeakFlowCount
}

// GetTodOverrideId retrieves the value of the leaf TodOverrideId from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TodOverrideId is set, it can
// safely use t.GetTodOverrideId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TodOverrideId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) GetTodOverrideId() int32 {
	if t == nil || t.TodOverrideId == nil {
		return 0
	}
	return *t.TodOverrideId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.PeakFlowCount == nil {
		t.PeakFlowCount = NokiaTypesApplicationAssurance_PolicerFlowCountLimit_Enum_max
	}
	t.TimeRange.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TodOverrideId == nil {
		return nil, fmt.Errorf("nil value for key TodOverrideId")
	}

	return map[string]interface{}{
		"tod-override-id": *t.TodOverrideId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange represents the /nokia-conf/configure/application-assurance/group/policer/flow-count-limit-policer/time-of-day-override/time-range YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange struct {
	Daily  *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily  `path:"daily" module:"nokia-conf" yangPresence:"true"`
	Weekly *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly `path:"weekly" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange) IsYANGGoStruct() {
}

// GetOrCreateDaily retrieves the value of the Daily field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange) GetOrCreateDaily() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily {
	if t.Daily != nil {
		return t.Daily
	}
	t.Daily = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily{}
	return t.Daily
}

// GetOrCreateWeekly retrieves the value of the Weekly field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange) GetOrCreateWeekly() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly {
	if t.Weekly != nil {
		return t.Weekly
	}
	t.Weekly = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly{}
	return t.Weekly
}

// GetDaily returns the value of the Daily struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange. If the receiver or the field Daily is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange) GetDaily() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily {
	if t != nil && t.Daily != nil {
		return t.Daily
	}
	return nil
}

// GetWeekly returns the value of the Weekly struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange. If the receiver or the field Weekly is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange) GetWeekly() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly {
	if t != nil && t.Weekly != nil {
		return t.Weekly
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Daily.PopulateDefaults()
	t.Weekly.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily represents the /nokia-conf/configure/application-assurance/group/policer/flow-count-limit-policer/time-of-day-override/time-range/daily YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily struct {
	AllDays YANGEmpty                                                                                                             `path:"all-days" module:"nokia-conf"`
	End     *string                                                                                                               `path:"end" module:"nokia-conf"`
	On      []E_NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily_On `path:"on" module:"nokia-conf"`
	Start   *string                                                                                                               `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily) IsYANGGoStruct() {
}

// GetAllDays retrieves the value of the leaf AllDays from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllDays is set, it can
// safely use t.GetAllDays() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllDays == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily) GetAllDays() YANGEmpty {
	if t == nil || t.AllDays == false {
		return false
	}
	return t.AllDays
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetOn retrieves the value of the leaf On from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if On is set, it can
// safely use t.GetOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.On == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily) GetOn() []E_NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily_On {
	if t == nil || t.On == nil {
		return nil
	}
	return t.On
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Daily) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly represents the /nokia-conf/configure/application-assurance/group/policer/flow-count-limit-policer/time-of-day-override/time-range/weekly YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly struct {
	End   *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End   `path:"end" module:"nokia-conf" yangPresence:"true"`
	Start *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start `path:"start" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly) IsYANGGoStruct() {
}

// GetOrCreateEnd retrieves the value of the End field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly) GetOrCreateEnd() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End {
	if t.End != nil {
		return t.End
	}
	t.End = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End{}
	return t.End
}

// GetOrCreateStart retrieves the value of the Start field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly) GetOrCreateStart() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start {
	if t.Start != nil {
		return t.Start
	}
	t.Start = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start{}
	return t.Start
}

// GetEnd returns the value of the End struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly. If the receiver or the field End is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly) GetEnd() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End {
	if t != nil && t.End != nil {
		return t.End
	}
	return nil
}

// GetStart returns the value of the Start struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly. If the receiver or the field Start is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly) GetStart() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start {
	if t != nil && t.Start != nil {
		return t.Start
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.End.PopulateDefaults()
	t.Start.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End represents the /nokia-conf/configure/application-assurance/group/policer/flow-count-limit-policer/time-of-day-override/time-range/weekly/end YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End struct {
	Day  E_NokiaTypesApplicationAssurance_DayOfWeek `path:"day" module:"nokia-conf"`
	Time *string                                    `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End) IsYANGGoStruct() {
}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End) GetDay() E_NokiaTypesApplicationAssurance_DayOfWeek {
	if t == nil || t.Day == 0 {
		return 0
	}
	return t.Day
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End) GetTime() string {
	if t == nil || t.Time == nil {
		return ""
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start represents the /nokia-conf/configure/application-assurance/group/policer/flow-count-limit-policer/time-of-day-override/time-range/weekly/start YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start struct {
	Day  E_NokiaTypesApplicationAssurance_DayOfWeek `path:"day" module:"nokia-conf"`
	Time *string                                    `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) IsYANGGoStruct() {
}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) GetDay() E_NokiaTypesApplicationAssurance_DayOfWeek {
	if t == nil || t.Day == 0 {
		return 0
	}
	return t.Day
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) GetTime() string {
	if t == nil || t.Time == nil {
		return ""
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowCountLimitPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer represents the /nokia-conf/configure/application-assurance/group/policer/flow-setup-rate-policer YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer struct {
	Action                 E_NokiaTypesApplicationAssurance_PolicerAction                                                           `path:"action" module:"nokia-conf"`
	AdaptationRule         *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule              `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups            []string                                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Description            *string                                                                                                  `path:"description" module:"nokia-conf"`
	FlowSetupRateBurstSize *int32                                                                                                   `path:"flow-setup-rate-burst-size" module:"nokia-conf"`
	Granularity            E_NokiaTypesApplicationAssurance_PolicerGranularity                                                      `path:"granularity" module:"nokia-conf"`
	PeakFlowSetupRate      NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_PeakFlowSetupRate_Union      `path:"peak-flow-setup-rate" module:"nokia-conf"`
	PolicerName            *string                                                                                                  `path:"policer-name" module:"nokia-conf"`
	TimeOfDayOverride      map[int32]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride `path:"time-of-day-override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) IsYANGGoStruct() {
}

// NewTimeOfDayOverride creates a new entry in the TimeOfDayOverride list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) NewTimeOfDayOverride(TodOverrideId int32) (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TimeOfDayOverride == nil {
		t.TimeOfDayOverride = make(map[int32]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride)
	}

	key := TodOverrideId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TimeOfDayOverride[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TimeOfDayOverride", key)
	}

	t.TimeOfDayOverride[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride{
		TodOverrideId: &TodOverrideId,
	}

	return t.TimeOfDayOverride[key], nil
}

// RenameTimeOfDayOverride renames an entry in the list TimeOfDayOverride within
// the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) RenameTimeOfDayOverride(oldK, newK int32) error {
	if _, ok := t.TimeOfDayOverride[newK]; ok {
		return fmt.Errorf("key %v already exists in TimeOfDayOverride", newK)
	}

	e, ok := t.TimeOfDayOverride[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TimeOfDayOverride", oldK)
	}
	e.TodOverrideId = &newK

	t.TimeOfDayOverride[newK] = e
	delete(t.TimeOfDayOverride, oldK)
	return nil
}

// GetOrCreateTimeOfDayOverride retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetOrCreateTimeOfDayOverride(TodOverrideId int32) *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride {

	key := TodOverrideId

	if v, ok := t.TimeOfDayOverride[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTimeOfDayOverride(TodOverrideId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTimeOfDayOverride got unexpected error: %v", err))
	}
	return v
}

// GetTimeOfDayOverride retrieves the value with the specified key from
// the TimeOfDayOverride map field of NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetTimeOfDayOverride(TodOverrideId int32) *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride {

	if t == nil {
		return nil
	}

	key := TodOverrideId

	if lm, ok := t.TimeOfDayOverride[key]; ok {
		return lm
	}
	return nil
}

// DeleteTimeOfDayOverride deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) DeleteTimeOfDayOverride(TodOverrideId int32) {
	key := TodOverrideId

	delete(t.TimeOfDayOverride, key)
}

// AppendTimeOfDayOverride appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride struct to the
// list TimeOfDayOverride of NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) AppendTimeOfDayOverride(v *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) error {
	if v.TodOverrideId == nil {
		return fmt.Errorf("invalid nil key received for TodOverrideId")
	}

	key := *v.TodOverrideId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TimeOfDayOverride == nil {
		t.TimeOfDayOverride = make(map[int32]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride)
	}

	if _, ok := t.TimeOfDayOverride[key]; ok {
		return fmt.Errorf("duplicate key for list TimeOfDayOverride %v", key)
	}

	t.TimeOfDayOverride[key] = v
	return nil
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetOrCreateAdaptationRule() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule{}
	return t.AdaptationRule
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetAdaptationRule() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetAction() E_NokiaTypesApplicationAssurance_PolicerAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesApplicationAssurance_PolicerAction_permit_deny
	}
	return t.Action
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFlowSetupRateBurstSize retrieves the value of the leaf FlowSetupRateBurstSize from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowSetupRateBurstSize is set, it can
// safely use t.GetFlowSetupRateBurstSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowSetupRateBurstSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetFlowSetupRateBurstSize() int32 {
	if t == nil || t.FlowSetupRateBurstSize == nil {
		return 0
	}
	return *t.FlowSetupRateBurstSize
}

// GetGranularity retrieves the value of the leaf Granularity from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Granularity is set, it can
// safely use t.GetGranularity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Granularity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetGranularity() E_NokiaTypesApplicationAssurance_PolicerGranularity {
	if t == nil || t.Granularity == 0 {
		return 0
	}
	return t.Granularity
}

// GetPeakFlowSetupRate retrieves the value of the leaf PeakFlowSetupRate from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeakFlowSetupRate is set, it can
// safely use t.GetPeakFlowSetupRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeakFlowSetupRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetPeakFlowSetupRate() NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_PeakFlowSetupRate_Union {
	if t == nil || t.PeakFlowSetupRate == nil {
		return NokiaTypesApplicationAssurance_PolicerFlowRate_Enum_max
	}
	return t.PeakFlowSetupRate
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesApplicationAssurance_PolicerAction_permit_deny
	}
	if t.FlowSetupRateBurstSize == nil {
		var v int32 = 0
		t.FlowSetupRateBurstSize = &v
	}
	if t.PeakFlowSetupRate == nil {
		t.PeakFlowSetupRate = NokiaTypesApplicationAssurance_PolicerFlowRate_Enum_max
	}
	t.AdaptationRule.PopulateDefaults()
	for _, e := range t.TimeOfDayOverride {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerName == nil {
		return nil, fmt.Errorf("nil value for key PolicerName")
	}

	return map[string]interface{}{
		"policer-name": *t.PolicerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule represents the /nokia-conf/configure/application-assurance/group/policer/flow-setup-rate-policer/adaptation-rule YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule struct {
	PeakFlowSetupRate E_NokiaTypesQos_AdaptationRule `path:"peak-flow-setup-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule) IsYANGGoStruct() {
}

// GetPeakFlowSetupRate retrieves the value of the leaf PeakFlowSetupRate from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeakFlowSetupRate is set, it can
// safely use t.GetPeakFlowSetupRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeakFlowSetupRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule) GetPeakFlowSetupRate() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.PeakFlowSetupRate == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.PeakFlowSetupRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PeakFlowSetupRate == 0 {
		t.PeakFlowSetupRate = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride represents the /nokia-conf/configure/application-assurance/group/policer/flow-setup-rate-policer/time-of-day-override YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride struct {
	AdminState             E_NokiaTypesSros_AdminState                                                                                           `path:"admin-state" module:"nokia-conf"`
	ApplyGroups            []string                                                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Description            *string                                                                                                               `path:"description" module:"nokia-conf"`
	FlowSetupRateBurstSize *int32                                                                                                                `path:"flow-setup-rate-burst-size" module:"nokia-conf"`
	PeakFlowSetupRate      NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_PeakFlowSetupRate_Union `path:"peak-flow-setup-rate" module:"nokia-conf"`
	TimeRange              *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange              `path:"time-range" module:"nokia-conf"`
	TodOverrideId          *int32                                                                                                                `path:"tod-override-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) IsYANGGoStruct() {
}

// GetOrCreateTimeRange retrieves the value of the TimeRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) GetOrCreateTimeRange() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange {
	if t.TimeRange != nil {
		return t.TimeRange
	}
	t.TimeRange = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange{}
	return t.TimeRange
}

// GetTimeRange returns the value of the TimeRange struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride. If the receiver or the field TimeRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) GetTimeRange() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange {
	if t != nil && t.TimeRange != nil {
		return t.TimeRange
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFlowSetupRateBurstSize retrieves the value of the leaf FlowSetupRateBurstSize from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowSetupRateBurstSize is set, it can
// safely use t.GetFlowSetupRateBurstSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowSetupRateBurstSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) GetFlowSetupRateBurstSize() int32 {
	if t == nil || t.FlowSetupRateBurstSize == nil {
		return 0
	}
	return *t.FlowSetupRateBurstSize
}

// GetPeakFlowSetupRate retrieves the value of the leaf PeakFlowSetupRate from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeakFlowSetupRate is set, it can
// safely use t.GetPeakFlowSetupRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeakFlowSetupRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) GetPeakFlowSetupRate() NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_PeakFlowSetupRate_Union {
	if t == nil || t.PeakFlowSetupRate == nil {
		return NokiaTypesApplicationAssurance_PolicerFlowRate_Enum_max
	}
	return t.PeakFlowSetupRate
}

// GetTodOverrideId retrieves the value of the leaf TodOverrideId from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TodOverrideId is set, it can
// safely use t.GetTodOverrideId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TodOverrideId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) GetTodOverrideId() int32 {
	if t == nil || t.TodOverrideId == nil {
		return 0
	}
	return *t.TodOverrideId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.FlowSetupRateBurstSize == nil {
		var v int32 = 0
		t.FlowSetupRateBurstSize = &v
	}
	if t.PeakFlowSetupRate == nil {
		t.PeakFlowSetupRate = NokiaTypesApplicationAssurance_PolicerFlowRate_Enum_max
	}
	t.TimeRange.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TodOverrideId == nil {
		return nil, fmt.Errorf("nil value for key TodOverrideId")
	}

	return map[string]interface{}{
		"tod-override-id": *t.TodOverrideId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange represents the /nokia-conf/configure/application-assurance/group/policer/flow-setup-rate-policer/time-of-day-override/time-range YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange struct {
	Daily  *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily  `path:"daily" module:"nokia-conf" yangPresence:"true"`
	Weekly *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly `path:"weekly" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange) IsYANGGoStruct() {
}

// GetOrCreateDaily retrieves the value of the Daily field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange) GetOrCreateDaily() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily {
	if t.Daily != nil {
		return t.Daily
	}
	t.Daily = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily{}
	return t.Daily
}

// GetOrCreateWeekly retrieves the value of the Weekly field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange) GetOrCreateWeekly() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly {
	if t.Weekly != nil {
		return t.Weekly
	}
	t.Weekly = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly{}
	return t.Weekly
}

// GetDaily returns the value of the Daily struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange. If the receiver or the field Daily is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange) GetDaily() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily {
	if t != nil && t.Daily != nil {
		return t.Daily
	}
	return nil
}

// GetWeekly returns the value of the Weekly struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange. If the receiver or the field Weekly is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange) GetWeekly() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly {
	if t != nil && t.Weekly != nil {
		return t.Weekly
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Daily.PopulateDefaults()
	t.Weekly.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily represents the /nokia-conf/configure/application-assurance/group/policer/flow-setup-rate-policer/time-of-day-override/time-range/daily YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily struct {
	AllDays YANGEmpty                                                                                                            `path:"all-days" module:"nokia-conf"`
	End     *string                                                                                                              `path:"end" module:"nokia-conf"`
	On      []E_NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily_On `path:"on" module:"nokia-conf"`
	Start   *string                                                                                                              `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily) IsYANGGoStruct() {
}

// GetAllDays retrieves the value of the leaf AllDays from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllDays is set, it can
// safely use t.GetAllDays() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllDays == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily) GetAllDays() YANGEmpty {
	if t == nil || t.AllDays == false {
		return false
	}
	return t.AllDays
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetOn retrieves the value of the leaf On from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if On is set, it can
// safely use t.GetOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.On == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily) GetOn() []E_NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily_On {
	if t == nil || t.On == nil {
		return nil
	}
	return t.On
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Daily) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly represents the /nokia-conf/configure/application-assurance/group/policer/flow-setup-rate-policer/time-of-day-override/time-range/weekly YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly struct {
	End   *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End   `path:"end" module:"nokia-conf" yangPresence:"true"`
	Start *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start `path:"start" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly) IsYANGGoStruct() {
}

// GetOrCreateEnd retrieves the value of the End field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly) GetOrCreateEnd() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End {
	if t.End != nil {
		return t.End
	}
	t.End = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End{}
	return t.End
}

// GetOrCreateStart retrieves the value of the Start field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly) GetOrCreateStart() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start {
	if t.Start != nil {
		return t.Start
	}
	t.Start = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start{}
	return t.Start
}

// GetEnd returns the value of the End struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly. If the receiver or the field End is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly) GetEnd() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End {
	if t != nil && t.End != nil {
		return t.End
	}
	return nil
}

// GetStart returns the value of the Start struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly. If the receiver or the field Start is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly) GetStart() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start {
	if t != nil && t.Start != nil {
		return t.Start
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.End.PopulateDefaults()
	t.Start.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End represents the /nokia-conf/configure/application-assurance/group/policer/flow-setup-rate-policer/time-of-day-override/time-range/weekly/end YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End struct {
	Day  E_NokiaTypesApplicationAssurance_DayOfWeek `path:"day" module:"nokia-conf"`
	Time *string                                    `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End) IsYANGGoStruct() {
}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End) GetDay() E_NokiaTypesApplicationAssurance_DayOfWeek {
	if t == nil || t.Day == 0 {
		return 0
	}
	return t.Day
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End) GetTime() string {
	if t == nil || t.Time == nil {
		return ""
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start represents the /nokia-conf/configure/application-assurance/group/policer/flow-setup-rate-policer/time-of-day-override/time-range/weekly/start YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start struct {
	Day  E_NokiaTypesApplicationAssurance_DayOfWeek `path:"day" module:"nokia-conf"`
	Time *string                                    `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start) IsYANGGoStruct() {
}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start) GetDay() E_NokiaTypesApplicationAssurance_DayOfWeek {
	if t == nil || t.Day == 0 {
		return 0
	}
	return t.Day
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start) GetTime() string {
	if t == nil || t.Time == nil {
		return ""
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_FlowSetupRatePolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer represents the /nokia-conf/configure/application-assurance/group/policer/single-bucket-bandwidth-policer YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer struct {
	Action                    E_NokiaTypesApplicationAssurance_PolicerAction                                                                   `path:"action" module:"nokia-conf"`
	AdaptationRule            *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule              `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups               []string                                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	CongestionOverride        *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride          `path:"congestion-override" module:"nokia-conf"`
	CongestionOverrideStage_2 *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2   `path:"congestion-override-stage-2" module:"nokia-conf"`
	Description               *string                                                                                                          `path:"description" module:"nokia-conf"`
	Granularity               E_NokiaTypesApplicationAssurance_PolicerGranularity                                                              `path:"granularity" module:"nokia-conf"`
	Mbs                       *int32                                                                                                           `path:"mbs" module:"nokia-conf"`
	Pir                       NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_Pir_Union                    `path:"pir" module:"nokia-conf"`
	PolicerName               *string                                                                                                          `path:"policer-name" module:"nokia-conf"`
	TimeOfDayOverride         map[int32]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride `path:"time-of-day-override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) IsYANGGoStruct() {
}

// NewTimeOfDayOverride creates a new entry in the TimeOfDayOverride list of the
// NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) NewTimeOfDayOverride(TodOverrideId int32) (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TimeOfDayOverride == nil {
		t.TimeOfDayOverride = make(map[int32]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride)
	}

	key := TodOverrideId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TimeOfDayOverride[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TimeOfDayOverride", key)
	}

	t.TimeOfDayOverride[key] = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride{
		TodOverrideId: &TodOverrideId,
	}

	return t.TimeOfDayOverride[key], nil
}

// RenameTimeOfDayOverride renames an entry in the list TimeOfDayOverride within
// the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) RenameTimeOfDayOverride(oldK, newK int32) error {
	if _, ok := t.TimeOfDayOverride[newK]; ok {
		return fmt.Errorf("key %v already exists in TimeOfDayOverride", newK)
	}

	e, ok := t.TimeOfDayOverride[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TimeOfDayOverride", oldK)
	}
	e.TodOverrideId = &newK

	t.TimeOfDayOverride[newK] = e
	delete(t.TimeOfDayOverride, oldK)
	return nil
}

// GetOrCreateTimeOfDayOverride retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetOrCreateTimeOfDayOverride(TodOverrideId int32) *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride {

	key := TodOverrideId

	if v, ok := t.TimeOfDayOverride[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTimeOfDayOverride(TodOverrideId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTimeOfDayOverride got unexpected error: %v", err))
	}
	return v
}

// GetTimeOfDayOverride retrieves the value with the specified key from
// the TimeOfDayOverride map field of NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetTimeOfDayOverride(TodOverrideId int32) *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride {

	if t == nil {
		return nil
	}

	key := TodOverrideId

	if lm, ok := t.TimeOfDayOverride[key]; ok {
		return lm
	}
	return nil
}

// DeleteTimeOfDayOverride deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) DeleteTimeOfDayOverride(TodOverrideId int32) {
	key := TodOverrideId

	delete(t.TimeOfDayOverride, key)
}

// AppendTimeOfDayOverride appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride struct to the
// list TimeOfDayOverride of NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) AppendTimeOfDayOverride(v *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) error {
	if v.TodOverrideId == nil {
		return fmt.Errorf("invalid nil key received for TodOverrideId")
	}

	key := *v.TodOverrideId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TimeOfDayOverride == nil {
		t.TimeOfDayOverride = make(map[int32]*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride)
	}

	if _, ok := t.TimeOfDayOverride[key]; ok {
		return fmt.Errorf("duplicate key for list TimeOfDayOverride %v", key)
	}

	t.TimeOfDayOverride[key] = v
	return nil
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetOrCreateAdaptationRule() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateCongestionOverride retrieves the value of the CongestionOverride field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetOrCreateCongestionOverride() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride {
	if t.CongestionOverride != nil {
		return t.CongestionOverride
	}
	t.CongestionOverride = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride{}
	return t.CongestionOverride
}

// GetOrCreateCongestionOverrideStage_2 retrieves the value of the CongestionOverrideStage_2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetOrCreateCongestionOverrideStage_2() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2 {
	if t.CongestionOverrideStage_2 != nil {
		return t.CongestionOverrideStage_2
	}
	t.CongestionOverrideStage_2 = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2{}
	return t.CongestionOverrideStage_2
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetAdaptationRule() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetCongestionOverride returns the value of the CongestionOverride struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer. If the receiver or the field CongestionOverride is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetCongestionOverride() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride {
	if t != nil && t.CongestionOverride != nil {
		return t.CongestionOverride
	}
	return nil
}

// GetCongestionOverrideStage_2 returns the value of the CongestionOverrideStage_2 struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer. If the receiver or the field CongestionOverrideStage_2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetCongestionOverrideStage_2() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2 {
	if t != nil && t.CongestionOverrideStage_2 != nil {
		return t.CongestionOverrideStage_2
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetAction() E_NokiaTypesApplicationAssurance_PolicerAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesApplicationAssurance_PolicerAction_permit_deny
	}
	return t.Action
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGranularity retrieves the value of the leaf Granularity from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Granularity is set, it can
// safely use t.GetGranularity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Granularity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetGranularity() E_NokiaTypesApplicationAssurance_PolicerGranularity {
	if t == nil || t.Granularity == 0 {
		return 0
	}
	return t.Granularity
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetPir() NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	return t.Pir
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesApplicationAssurance_PolicerAction_permit_deny
	}
	if t.Mbs == nil {
		var v int32 = 0
		t.Mbs = &v
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	t.AdaptationRule.PopulateDefaults()
	t.CongestionOverride.PopulateDefaults()
	t.CongestionOverrideStage_2.PopulateDefaults()
	for _, e := range t.TimeOfDayOverride {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerName == nil {
		return nil, fmt.Errorf("nil value for key PolicerName")
	}

	return map[string]interface{}{
		"policer-name": *t.PolicerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule represents the /nokia-conf/configure/application-assurance/group/policer/single-bucket-bandwidth-policer/adaptation-rule YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule struct {
	Pir E_NokiaTypesQos_AdaptationRule `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule) IsYANGGoStruct() {
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.Pir == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pir == 0 {
		t.Pir = NokiaTypesQos_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride represents the /nokia-conf/configure/application-assurance/group/policer/single-bucket-bandwidth-policer/congestion-override YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride struct {
	Mbs *int32                                                                                                           `path:"mbs" module:"nokia-conf"`
	Pir NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride) IsYANGGoStruct() {
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride) GetPir() NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mbs == nil {
		var v int32 = 0
		t.Mbs = &v
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverride) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2 represents the /nokia-conf/configure/application-assurance/group/policer/single-bucket-bandwidth-policer/congestion-override-stage-2 YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2 struct {
	Mbs *int32                                                                                                                  `path:"mbs" module:"nokia-conf"`
	Pir NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2) IsYANGGoStruct() {
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2) GetPir() NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mbs == nil {
		var v int32 = 0
		t.Mbs = &v
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_CongestionOverrideStage_2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride represents the /nokia-conf/configure/application-assurance/group/policer/single-bucket-bandwidth-policer/time-of-day-override YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                      `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                                          `path:"description" module:"nokia-conf"`
	Mbs                *int32                                                                                                           `path:"mbs" module:"nokia-conf"`
	Pir                NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_Pir_Union  `path:"pir" module:"nokia-conf"`
	TimeRange          *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange `path:"time-range" module:"nokia-conf"`
	TodOverrideId      *int32                                                                                                           `path:"tod-override-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) IsYANGGoStruct() {
}

// GetOrCreateTimeRange retrieves the value of the TimeRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) GetOrCreateTimeRange() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange {
	if t.TimeRange != nil {
		return t.TimeRange
	}
	t.TimeRange = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange{}
	return t.TimeRange
}

// GetTimeRange returns the value of the TimeRange struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride. If the receiver or the field TimeRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) GetTimeRange() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange {
	if t != nil && t.TimeRange != nil {
		return t.TimeRange
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) GetPir() NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	return t.Pir
}

// GetTodOverrideId retrieves the value of the leaf TodOverrideId from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TodOverrideId is set, it can
// safely use t.GetTodOverrideId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TodOverrideId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) GetTodOverrideId() int32 {
	if t == nil || t.TodOverrideId == nil {
		return 0
	}
	return *t.TodOverrideId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Mbs == nil {
		var v int32 = 0
		t.Mbs = &v
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesApplicationAssurance_PolicerIr_Enum_max
	}
	t.TimeRange.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TodOverrideId == nil {
		return nil, fmt.Errorf("nil value for key TodOverrideId")
	}

	return map[string]interface{}{
		"tod-override-id": *t.TodOverrideId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange represents the /nokia-conf/configure/application-assurance/group/policer/single-bucket-bandwidth-policer/time-of-day-override/time-range YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange struct {
	Daily  *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily  `path:"daily" module:"nokia-conf" yangPresence:"true"`
	Weekly *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly `path:"weekly" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) IsYANGGoStruct() {
}

// GetOrCreateDaily retrieves the value of the Daily field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) GetOrCreateDaily() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily {
	if t.Daily != nil {
		return t.Daily
	}
	t.Daily = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily{}
	return t.Daily
}

// GetOrCreateWeekly retrieves the value of the Weekly field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) GetOrCreateWeekly() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly {
	if t.Weekly != nil {
		return t.Weekly
	}
	t.Weekly = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly{}
	return t.Weekly
}

// GetDaily returns the value of the Daily struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange. If the receiver or the field Daily is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) GetDaily() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily {
	if t != nil && t.Daily != nil {
		return t.Daily
	}
	return nil
}

// GetWeekly returns the value of the Weekly struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange. If the receiver or the field Weekly is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) GetWeekly() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly {
	if t != nil && t.Weekly != nil {
		return t.Weekly
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Daily.PopulateDefaults()
	t.Weekly.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily represents the /nokia-conf/configure/application-assurance/group/policer/single-bucket-bandwidth-policer/time-of-day-override/time-range/daily YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily struct {
	AllDays YANGEmpty                                                                                                                    `path:"all-days" module:"nokia-conf"`
	End     *string                                                                                                                      `path:"end" module:"nokia-conf"`
	On      []E_NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily_On `path:"on" module:"nokia-conf"`
	Start   *string                                                                                                                      `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) IsYANGGoStruct() {
}

// GetAllDays retrieves the value of the leaf AllDays from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllDays is set, it can
// safely use t.GetAllDays() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllDays == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) GetAllDays() YANGEmpty {
	if t == nil || t.AllDays == false {
		return false
	}
	return t.AllDays
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetOn retrieves the value of the leaf On from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if On is set, it can
// safely use t.GetOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.On == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) GetOn() []E_NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily_On {
	if t == nil || t.On == nil {
		return nil
	}
	return t.On
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Daily) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly represents the /nokia-conf/configure/application-assurance/group/policer/single-bucket-bandwidth-policer/time-of-day-override/time-range/weekly YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly struct {
	End   *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End   `path:"end" module:"nokia-conf" yangPresence:"true"`
	Start *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start `path:"start" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) IsYANGGoStruct() {
}

// GetOrCreateEnd retrieves the value of the End field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) GetOrCreateEnd() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End {
	if t.End != nil {
		return t.End
	}
	t.End = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End{}
	return t.End
}

// GetOrCreateStart retrieves the value of the Start field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) GetOrCreateStart() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start {
	if t.Start != nil {
		return t.Start
	}
	t.Start = &NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start{}
	return t.Start
}

// GetEnd returns the value of the End struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly. If the receiver or the field End is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) GetEnd() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End {
	if t != nil && t.End != nil {
		return t.End
	}
	return nil
}

// GetStart returns the value of the Start struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly. If the receiver or the field Start is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) GetStart() *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start {
	if t != nil && t.Start != nil {
		return t.Start
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.End.PopulateDefaults()
	t.Start.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End represents the /nokia-conf/configure/application-assurance/group/policer/single-bucket-bandwidth-policer/time-of-day-override/time-range/weekly/end YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End struct {
	Day  E_NokiaTypesApplicationAssurance_DayOfWeek `path:"day" module:"nokia-conf"`
	Time *string                                    `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) IsYANGGoStruct() {
}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) GetDay() E_NokiaTypesApplicationAssurance_DayOfWeek {
	if t == nil || t.Day == 0 {
		return 0
	}
	return t.Day
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) GetTime() string {
	if t == nil || t.Time == nil {
		return ""
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_End) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start represents the /nokia-conf/configure/application-assurance/group/policer/single-bucket-bandwidth-policer/time-of-day-override/time-range/weekly/start YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start struct {
	Day  E_NokiaTypesApplicationAssurance_DayOfWeek `path:"day" module:"nokia-conf"`
	Time *string                                    `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) IsYANGGoStruct() {
}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) GetDay() E_NokiaTypesApplicationAssurance_DayOfWeek {
	if t == nil || t.Day == 0 {
		return 0
	}
	return t.Day
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) GetTime() string {
	if t == nil || t.Time == nil {
		return ""
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start.
func (*NokiaConf_Configure_ApplicationAssurance_Group_Policer_SingleBucketBandwidthPolicer_TimeOfDayOverride_TimeRange_Weekly_Start) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer represents the /nokia-conf/configure/application-assurance/group/tcp-optimizer YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer struct {
	ApplyGroups         []string                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	DackTimeout         *uint32                                                                              `path:"dack-timeout" module:"nokia-conf"`
	Description         *string                                                                              `path:"description" module:"nokia-conf"`
	InitialCwnd         *uint32                                                                              `path:"initial-cwnd" module:"nokia-conf"`
	InitialSsThreshold  NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer_InitialSsThreshold_Union `path:"initial-ss-threshold" module:"nokia-conf"`
	NetworkRttThreshold *uint32                                                                              `path:"network-rtt-threshold" module:"nokia-conf"`
	TcpOptimizerName    *string                                                                              `path:"tcp-optimizer-name" module:"nokia-conf"`
	TcpStack            E_NokiaTypesApplicationAssurance_TcpOptimizerStack                                   `path:"tcp-stack" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDackTimeout retrieves the value of the leaf DackTimeout from the NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DackTimeout is set, it can
// safely use t.GetDackTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DackTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer) GetDackTimeout() uint32 {
	if t == nil || t.DackTimeout == nil {
		return 0
	}
	return *t.DackTimeout
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInitialCwnd retrieves the value of the leaf InitialCwnd from the NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialCwnd is set, it can
// safely use t.GetInitialCwnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialCwnd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer) GetInitialCwnd() uint32 {
	if t == nil || t.InitialCwnd == nil {
		return 8
	}
	return *t.InitialCwnd
}

// GetInitialSsThreshold retrieves the value of the leaf InitialSsThreshold from the NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialSsThreshold is set, it can
// safely use t.GetInitialSsThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialSsThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer) GetInitialSsThreshold() NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer_InitialSsThreshold_Union {
	if t == nil || t.InitialSsThreshold == nil {
		return UnionUint32(1000000)
	}
	return t.InitialSsThreshold
}

// GetNetworkRttThreshold retrieves the value of the leaf NetworkRttThreshold from the NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkRttThreshold is set, it can
// safely use t.GetNetworkRttThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkRttThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer) GetNetworkRttThreshold() uint32 {
	if t == nil || t.NetworkRttThreshold == nil {
		return 0
	}
	return *t.NetworkRttThreshold
}

// GetTcpOptimizerName retrieves the value of the leaf TcpOptimizerName from the NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpOptimizerName is set, it can
// safely use t.GetTcpOptimizerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpOptimizerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer) GetTcpOptimizerName() string {
	if t == nil || t.TcpOptimizerName == nil {
		return ""
	}
	return *t.TcpOptimizerName
}

// GetTcpStack retrieves the value of the leaf TcpStack from the NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpStack is set, it can
// safely use t.GetTcpStack() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpStack == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer) GetTcpStack() E_NokiaTypesApplicationAssurance_TcpOptimizerStack {
	if t == nil || t.TcpStack == 0 {
		return NokiaTypesApplicationAssurance_TcpOptimizerStack_westwood
	}
	return t.TcpStack
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialCwnd == nil {
		var v uint32 = 8
		t.InitialCwnd = &v
	}
	if t.InitialSsThreshold == nil {
		t.InitialSsThreshold = UnionUint32(1000000)
	}
	if t.TcpStack == 0 {
		t.TcpStack = NokiaTypesApplicationAssurance_TcpOptimizerStack_westwood
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TcpOptimizerName == nil {
		return nil, fmt.Errorf("nil value for key TcpOptimizerName")
	}

	return map[string]interface{}{
		"tcp-optimizer-name": *t.TcpOptimizerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer.
func (*NokiaConf_Configure_ApplicationAssurance_Group_TcpOptimizer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter represents the /nokia-conf/configure/application-assurance/group/url-filter YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter struct {
	AdminState                     E_NokiaTypesSros_AdminState                                                     `path:"admin-state" module:"nokia-conf"`
	ApplyFunctionSpecificBehaviour *bool                                                                           `path:"apply-function-specific-behaviour" module:"nokia-conf"`
	ApplyGroups                    []string                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude             []string                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultAction                  *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction         `path:"default-action" module:"nokia-conf"`
	Description                    *string                                                                         `path:"description" module:"nokia-conf"`
	HttpRedirect                   *string                                                                         `path:"http-redirect" module:"nokia-conf"`
	HttpRequestFiltering           E_NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_HttpRequestFiltering `path:"http-request-filtering" module:"nokia-conf"`
	Icap                           *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap                  `path:"icap" module:"nokia-conf"`
	LocalFiltering                 *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering        `path:"local-filtering" module:"nokia-conf"`
	UrlFilterName                  *string                                                                         `path:"url-filter-name" module:"nokia-conf"`
	WebService                     *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService            `path:"web-service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) IsYANGGoStruct() {}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) GetOrCreateDefaultAction() *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction{}
	return t.DefaultAction
}

// GetOrCreateIcap retrieves the value of the Icap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) GetOrCreateIcap() *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap {
	if t.Icap != nil {
		return t.Icap
	}
	t.Icap = &NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap{}
	return t.Icap
}

// GetOrCreateLocalFiltering retrieves the value of the LocalFiltering field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) GetOrCreateLocalFiltering() *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering {
	if t.LocalFiltering != nil {
		return t.LocalFiltering
	}
	t.LocalFiltering = &NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering{}
	return t.LocalFiltering
}

// GetOrCreateWebService retrieves the value of the WebService field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) GetOrCreateWebService() *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService {
	if t.WebService != nil {
		return t.WebService
	}
	t.WebService = &NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService{}
	return t.WebService
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) GetDefaultAction() *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetIcap returns the value of the Icap struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter. If the receiver or the field Icap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) GetIcap() *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap {
	if t != nil && t.Icap != nil {
		return t.Icap
	}
	return nil
}

// GetLocalFiltering returns the value of the LocalFiltering struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter. If the receiver or the field LocalFiltering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) GetLocalFiltering() *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering {
	if t != nil && t.LocalFiltering != nil {
		return t.LocalFiltering
	}
	return nil
}

// GetWebService returns the value of the WebService struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter. If the receiver or the field WebService is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) GetWebService() *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService {
	if t != nil && t.WebService != nil {
		return t.WebService
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyFunctionSpecificBehaviour retrieves the value of the leaf ApplyFunctionSpecificBehaviour from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyFunctionSpecificBehaviour is set, it can
// safely use t.GetApplyFunctionSpecificBehaviour() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyFunctionSpecificBehaviour == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) GetApplyFunctionSpecificBehaviour() bool {
	if t == nil || t.ApplyFunctionSpecificBehaviour == nil {
		return false
	}
	return *t.ApplyFunctionSpecificBehaviour
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHttpRedirect retrieves the value of the leaf HttpRedirect from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpRedirect is set, it can
// safely use t.GetHttpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) GetHttpRedirect() string {
	if t == nil || t.HttpRedirect == nil {
		return ""
	}
	return *t.HttpRedirect
}

// GetHttpRequestFiltering retrieves the value of the leaf HttpRequestFiltering from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpRequestFiltering is set, it can
// safely use t.GetHttpRequestFiltering() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpRequestFiltering == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) GetHttpRequestFiltering() E_NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_HttpRequestFiltering {
	if t == nil || t.HttpRequestFiltering == 0 {
		return NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_HttpRequestFiltering_all
	}
	return t.HttpRequestFiltering
}

// GetUrlFilterName retrieves the value of the leaf UrlFilterName from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UrlFilterName is set, it can
// safely use t.GetUrlFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UrlFilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) GetUrlFilterName() string {
	if t == nil || t.UrlFilterName == nil {
		return ""
	}
	return *t.UrlFilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ApplyFunctionSpecificBehaviour == nil {
		var v bool = false
		t.ApplyFunctionSpecificBehaviour = &v
	}
	if t.HttpRequestFiltering == 0 {
		t.HttpRequestFiltering = NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_HttpRequestFiltering_all
	}
	t.DefaultAction.PopulateDefaults()
	t.Icap.PopulateDefaults()
	t.LocalFiltering.PopulateDefaults()
	t.WebService.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.UrlFilterName == nil {
		return nil, fmt.Errorf("nil value for key UrlFilterName")
	}

	return map[string]interface{}{
		"url-filter-name": *t.UrlFilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction represents the /nokia-conf/configure/application-assurance/group/url-filter/default-action YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction struct {
	Allow             YANGEmpty `path:"allow" module:"nokia-conf"`
	BlockAll          YANGEmpty `path:"block-all" module:"nokia-conf"`
	BlockHttpRedirect *string   `path:"block-http-redirect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction) IsYANGGoStruct() {}

// GetAllow retrieves the value of the leaf Allow from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Allow is set, it can
// safely use t.GetAllow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Allow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction) GetAllow() YANGEmpty {
	if t == nil || t.Allow == false {
		return false
	}
	return t.Allow
}

// GetBlockAll retrieves the value of the leaf BlockAll from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockAll is set, it can
// safely use t.GetBlockAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockAll == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction) GetBlockAll() YANGEmpty {
	if t == nil || t.BlockAll == false {
		return false
	}
	return t.BlockAll
}

// GetBlockHttpRedirect retrieves the value of the leaf BlockHttpRedirect from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockHttpRedirect is set, it can
// safely use t.GetBlockHttpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockHttpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction) GetBlockHttpRedirect() string {
	if t == nil || t.BlockHttpRedirect == nil {
		return ""
	}
	return *t.BlockHttpRedirect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap represents the /nokia-conf/configure/application-assurance/group/url-filter/icap YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap struct {
	CustomXHeader *string                                                                                                                                            `path:"custom-x-header" module:"nokia-conf"`
	DefaultAction *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction                                                                       `path:"default-action" module:"nokia-conf"`
	HttpRedirect  *string                                                                                                                                            `path:"http-redirect" module:"nokia-conf"`
	Server        map[NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key]*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server `path:"server" module:"nokia-conf"`
	VlanId        *int32                                                                                                                                             `path:"vlan-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap) IsYANGGoStruct() {}

// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key represents the key for list Server of element /nokia-conf/configure/application-assurance/group/url-filter/icap.
type NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key struct {
	IpAddress string `path:"ip-address"`
	Port      int32  `path:"port"`
}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap) NewServer(IpAddress string, Port int32) (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key]*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server)
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server{
		IpAddress: &IpAddress,
		Port:      &Port,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap) RenameServer(oldK, newK NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.IpAddress = &newK.IpAddress
	e.Port = &newK.Port

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap) GetOrCreateServer(IpAddress string, Port int32) *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server {

	key := NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(IpAddress, Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap) GetServer(IpAddress string, Port int32) *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap) DeleteServer(IpAddress string, Port int32) {
	key := NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server struct to the
// list Server of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap) AppendServer(v *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key for IpAddress")
	}

	if v.Port == nil {
		return fmt.Errorf("invalid nil key for Port")
	}

	key := NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key{
		IpAddress: *v.IpAddress,
		Port:      *v.Port,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server_Key]*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap) GetOrCreateDefaultAction() *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction{}
	return t.DefaultAction
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap) GetDefaultAction() *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetCustomXHeader retrieves the value of the leaf CustomXHeader from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CustomXHeader is set, it can
// safely use t.GetCustomXHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CustomXHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap) GetCustomXHeader() string {
	if t == nil || t.CustomXHeader == nil {
		return ""
	}
	return *t.CustomXHeader
}

// GetHttpRedirect retrieves the value of the leaf HttpRedirect from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpRedirect is set, it can
// safely use t.GetHttpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap) GetHttpRedirect() string {
	if t == nil || t.HttpRedirect == nil {
		return ""
	}
	return *t.HttpRedirect
}

// GetVlanId retrieves the value of the leaf VlanId from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap) GetVlanId() int32 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefaultAction.PopulateDefaults()
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction represents the /nokia-conf/configure/application-assurance/group/url-filter/icap/default-action YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction struct {
	Allow             YANGEmpty `path:"allow" module:"nokia-conf"`
	BlockAll          YANGEmpty `path:"block-all" module:"nokia-conf"`
	BlockHttpRedirect *string   `path:"block-http-redirect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction) IsYANGGoStruct() {
}

// GetAllow retrieves the value of the leaf Allow from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Allow is set, it can
// safely use t.GetAllow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Allow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction) GetAllow() YANGEmpty {
	if t == nil || t.Allow == false {
		return false
	}
	return t.Allow
}

// GetBlockAll retrieves the value of the leaf BlockAll from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockAll is set, it can
// safely use t.GetBlockAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockAll == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction) GetBlockAll() YANGEmpty {
	if t == nil || t.BlockAll == false {
		return false
	}
	return t.BlockAll
}

// GetBlockHttpRedirect retrieves the value of the leaf BlockHttpRedirect from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockHttpRedirect is set, it can
// safely use t.GetBlockHttpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockHttpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction) GetBlockHttpRedirect() string {
	if t == nil || t.BlockHttpRedirect == nil {
		return ""
	}
	return *t.BlockHttpRedirect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server represents the /nokia-conf/configure/application-assurance/group/url-filter/icap/server YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                     `path:"description" module:"nokia-conf"`
	IpAddress          *string                     `path:"ip-address" module:"nokia-conf"`
	Port               *int32                      `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	if t.Port == nil {
		return nil, fmt.Errorf("nil value for key Port")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
		"port":       *t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_Icap_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering represents the /nokia-conf/configure/application-assurance/group/url-filter/local-filtering YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering struct {
	AllowList *string                                                                                      `path:"allow-list" module:"nokia-conf"`
	DenyList  map[string]*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList `path:"deny-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering) IsYANGGoStruct() {}

// NewDenyList creates a new entry in the DenyList list of the
// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering) NewDenyList(UrlListName string) (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DenyList == nil {
		t.DenyList = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList)
	}

	key := UrlListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DenyList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DenyList", key)
	}

	t.DenyList[key] = &NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList{
		UrlListName: &UrlListName,
	}

	return t.DenyList[key], nil
}

// RenameDenyList renames an entry in the list DenyList within
// the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering) RenameDenyList(oldK, newK string) error {
	if _, ok := t.DenyList[newK]; ok {
		return fmt.Errorf("key %v already exists in DenyList", newK)
	}

	e, ok := t.DenyList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DenyList", oldK)
	}
	e.UrlListName = &newK

	t.DenyList[newK] = e
	delete(t.DenyList, oldK)
	return nil
}

// GetOrCreateDenyList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering) GetOrCreateDenyList(UrlListName string) *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList {

	key := UrlListName

	if v, ok := t.DenyList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDenyList(UrlListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDenyList got unexpected error: %v", err))
	}
	return v
}

// GetDenyList retrieves the value with the specified key from
// the DenyList map field of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering) GetDenyList(UrlListName string) *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList {

	if t == nil {
		return nil
	}

	key := UrlListName

	if lm, ok := t.DenyList[key]; ok {
		return lm
	}
	return nil
}

// DeleteDenyList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering) DeleteDenyList(UrlListName string) {
	key := UrlListName

	delete(t.DenyList, key)
}

// AppendDenyList appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList struct to the
// list DenyList of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering) AppendDenyList(v *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) error {
	if v.UrlListName == nil {
		return fmt.Errorf("invalid nil key received for UrlListName")
	}

	key := *v.UrlListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DenyList == nil {
		t.DenyList = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList)
	}

	if _, ok := t.DenyList[key]; ok {
		return fmt.Errorf("duplicate key for list DenyList %v", key)
	}

	t.DenyList[key] = v
	return nil
}

// GetAllowList retrieves the value of the leaf AllowList from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowList is set, it can
// safely use t.GetAllowList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering) GetAllowList() string {
	if t == nil || t.AllowList == nil {
		return ""
	}
	return *t.AllowList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.DenyList {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList represents the /nokia-conf/configure/application-assurance/group/url-filter/local-filtering/deny-list YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList struct {
	ApplyGroups        []string                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultAction      *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction `path:"default-action" module:"nokia-conf"`
	HttpRedirect       *string                                                                                         `path:"http-redirect" module:"nokia-conf"`
	UrlListName        *string                                                                                         `path:"url-list-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) IsYANGGoStruct() {
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) GetOrCreateDefaultAction() *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction{}
	return t.DefaultAction
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) GetDefaultAction() *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHttpRedirect retrieves the value of the leaf HttpRedirect from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpRedirect is set, it can
// safely use t.GetHttpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) GetHttpRedirect() string {
	if t == nil || t.HttpRedirect == nil {
		return ""
	}
	return *t.HttpRedirect
}

// GetUrlListName retrieves the value of the leaf UrlListName from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UrlListName is set, it can
// safely use t.GetUrlListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UrlListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) GetUrlListName() string {
	if t == nil || t.UrlListName == nil {
		return ""
	}
	return *t.UrlListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefaultAction.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.UrlListName == nil {
		return nil, fmt.Errorf("nil value for key UrlListName")
	}

	return map[string]interface{}{
		"url-list-name": *t.UrlListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction represents the /nokia-conf/configure/application-assurance/group/url-filter/local-filtering/deny-list/default-action YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction struct {
	Allow             YANGEmpty `path:"allow" module:"nokia-conf"`
	BlockAll          YANGEmpty `path:"block-all" module:"nokia-conf"`
	BlockHttpRedirect *string   `path:"block-http-redirect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction) IsYANGGoStruct() {
}

// GetAllow retrieves the value of the leaf Allow from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Allow is set, it can
// safely use t.GetAllow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Allow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction) GetAllow() YANGEmpty {
	if t == nil || t.Allow == false {
		return false
	}
	return t.Allow
}

// GetBlockAll retrieves the value of the leaf BlockAll from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockAll is set, it can
// safely use t.GetBlockAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockAll == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction) GetBlockAll() YANGEmpty {
	if t == nil || t.BlockAll == false {
		return false
	}
	return t.BlockAll
}

// GetBlockHttpRedirect retrieves the value of the leaf BlockHttpRedirect from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockHttpRedirect is set, it can
// safely use t.GetBlockHttpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockHttpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction) GetBlockHttpRedirect() string {
	if t == nil || t.BlockHttpRedirect == nil {
		return ""
	}
	return *t.BlockHttpRedirect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_LocalFiltering_DenyList_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService represents the /nokia-conf/configure/application-assurance/group/url-filter/web-service YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService struct {
	CategorySet             *uint32                                                                                      `path:"category-set" module:"nokia-conf"`
	ClassificationOverrides *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides `path:"classification-overrides" module:"nokia-conf"`
	Classifier              E_NokiaTypesApplicationAssurance_WebServClassifierId                                         `path:"classifier" module:"nokia-conf"`
	DefaultAction           *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction           `path:"default-action" module:"nokia-conf"`
	DefaultProfile          *string                                                                                      `path:"default-profile" module:"nokia-conf"`
	DnsServer               *string                                                                                      `path:"dns-server" module:"nokia-conf"`
	Fqdn                    *string                                                                                      `path:"fqdn" module:"nokia-conf"`
	HttpRedirect            *string                                                                                      `path:"http-redirect" module:"nokia-conf"`
	Profile                 map[string]*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile      `path:"profile" module:"nokia-conf"`
	VlanId                  *int32                                                                                       `path:"vlan-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) IsYANGGoStruct() {}

// NewProfile creates a new entry in the Profile list of the
// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) NewProfile(ProfileName string) (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Profile == nil {
		t.Profile = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile)
	}

	key := ProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Profile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Profile", key)
	}

	t.Profile[key] = &NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile{
		ProfileName: &ProfileName,
	}

	return t.Profile[key], nil
}

// RenameProfile renames an entry in the list Profile within
// the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) RenameProfile(oldK, newK string) error {
	if _, ok := t.Profile[newK]; ok {
		return fmt.Errorf("key %v already exists in Profile", newK)
	}

	e, ok := t.Profile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Profile", oldK)
	}
	e.ProfileName = &newK

	t.Profile[newK] = e
	delete(t.Profile, oldK)
	return nil
}

// GetOrCreateProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) GetOrCreateProfile(ProfileName string) *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile {

	key := ProfileName

	if v, ok := t.Profile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProfile(ProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProfile got unexpected error: %v", err))
	}
	return v
}

// GetProfile retrieves the value with the specified key from
// the Profile map field of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) GetProfile(ProfileName string) *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile {

	if t == nil {
		return nil
	}

	key := ProfileName

	if lm, ok := t.Profile[key]; ok {
		return lm
	}
	return nil
}

// DeleteProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) DeleteProfile(ProfileName string) {
	key := ProfileName

	delete(t.Profile, key)
}

// AppendProfile appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile struct to the
// list Profile of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) AppendProfile(v *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile) error {
	if v.ProfileName == nil {
		return fmt.Errorf("invalid nil key received for ProfileName")
	}

	key := *v.ProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Profile == nil {
		t.Profile = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile)
	}

	if _, ok := t.Profile[key]; ok {
		return fmt.Errorf("duplicate key for list Profile %v", key)
	}

	t.Profile[key] = v
	return nil
}

// GetOrCreateClassificationOverrides retrieves the value of the ClassificationOverrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) GetOrCreateClassificationOverrides() *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides {
	if t.ClassificationOverrides != nil {
		return t.ClassificationOverrides
	}
	t.ClassificationOverrides = &NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides{}
	return t.ClassificationOverrides
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) GetOrCreateDefaultAction() *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction{}
	return t.DefaultAction
}

// GetClassificationOverrides returns the value of the ClassificationOverrides struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService. If the receiver or the field ClassificationOverrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) GetClassificationOverrides() *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides {
	if t != nil && t.ClassificationOverrides != nil {
		return t.ClassificationOverrides
	}
	return nil
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) GetDefaultAction() *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetCategorySet retrieves the value of the leaf CategorySet from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CategorySet is set, it can
// safely use t.GetCategorySet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CategorySet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) GetCategorySet() uint32 {
	if t == nil || t.CategorySet == nil {
		return 0
	}
	return *t.CategorySet
}

// GetClassifier retrieves the value of the leaf Classifier from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Classifier is set, it can
// safely use t.GetClassifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Classifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) GetClassifier() E_NokiaTypesApplicationAssurance_WebServClassifierId {
	if t == nil || t.Classifier == 0 {
		return 0
	}
	return t.Classifier
}

// GetDefaultProfile retrieves the value of the leaf DefaultProfile from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultProfile is set, it can
// safely use t.GetDefaultProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) GetDefaultProfile() string {
	if t == nil || t.DefaultProfile == nil {
		return ""
	}
	return *t.DefaultProfile
}

// GetDnsServer retrieves the value of the leaf DnsServer from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnsServer is set, it can
// safely use t.GetDnsServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnsServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) GetDnsServer() string {
	if t == nil || t.DnsServer == nil {
		return ""
	}
	return *t.DnsServer
}

// GetFqdn retrieves the value of the leaf Fqdn from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fqdn is set, it can
// safely use t.GetFqdn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fqdn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) GetFqdn() string {
	if t == nil || t.Fqdn == nil {
		return ""
	}
	return *t.Fqdn
}

// GetHttpRedirect retrieves the value of the leaf HttpRedirect from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpRedirect is set, it can
// safely use t.GetHttpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) GetHttpRedirect() string {
	if t == nil || t.HttpRedirect == nil {
		return ""
	}
	return *t.HttpRedirect
}

// GetVlanId retrieves the value of the leaf VlanId from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) GetVlanId() int32 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ClassificationOverrides.PopulateDefaults()
	t.DefaultAction.PopulateDefaults()
	for _, e := range t.Profile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides represents the /nokia-conf/configure/application-assurance/group/url-filter/web-service/classification-overrides YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides struct {
	Entry map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) NewEntry(EntryId uint32) (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) GetEntry(EntryId uint32) *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry struct to the
// list Entry of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) AppendEntry(v *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry represents the /nokia-conf/configure/application-assurance/group/url-filter/web-service/classification-overrides/entry YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CategoryName       *string  `path:"category-name" module:"nokia-conf"`
	EntryId            *uint32  `path:"entry-id" module:"nokia-conf"`
	Expression         *string  `path:"expression" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCategoryName retrieves the value of the leaf CategoryName from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CategoryName is set, it can
// safely use t.GetCategoryName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CategoryName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) GetCategoryName() string {
	if t == nil || t.CategoryName == nil {
		return ""
	}
	return *t.CategoryName
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_ClassificationOverrides_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction represents the /nokia-conf/configure/application-assurance/group/url-filter/web-service/default-action YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction struct {
	Allow             YANGEmpty `path:"allow" module:"nokia-conf"`
	BlockAll          YANGEmpty `path:"block-all" module:"nokia-conf"`
	BlockHttpRedirect *string   `path:"block-http-redirect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction) IsYANGGoStruct() {
}

// GetAllow retrieves the value of the leaf Allow from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Allow is set, it can
// safely use t.GetAllow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Allow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction) GetAllow() YANGEmpty {
	if t == nil || t.Allow == false {
		return false
	}
	return t.Allow
}

// GetBlockAll retrieves the value of the leaf BlockAll from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockAll is set, it can
// safely use t.GetBlockAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockAll == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction) GetBlockAll() YANGEmpty {
	if t == nil || t.BlockAll == false {
		return false
	}
	return t.BlockAll
}

// GetBlockHttpRedirect retrieves the value of the leaf BlockHttpRedirect from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockHttpRedirect is set, it can
// safely use t.GetBlockHttpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockHttpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction) GetBlockHttpRedirect() string {
	if t == nil || t.BlockHttpRedirect == nil {
		return ""
	}
	return *t.BlockHttpRedirect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile represents the /nokia-conf/configure/application-assurance/group/url-filter/web-service/profile YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile struct {
	ApplyGroups        []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Block              *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block `path:"block" module:"nokia-conf"`
	Description        *string                                                                            `path:"description" module:"nokia-conf"`
	ProfileName        *string                                                                            `path:"profile-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile) IsYANGGoStruct() {
}

// GetOrCreateBlock retrieves the value of the Block field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile) GetOrCreateBlock() *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block {
	if t.Block != nil {
		return t.Block
	}
	t.Block = &NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block{}
	return t.Block
}

// GetBlock returns the value of the Block struct pointer
// from NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile. If the receiver or the field Block is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile) GetBlock() *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block {
	if t != nil && t.Block != nil {
		return t.Block
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetProfileName retrieves the value of the leaf ProfileName from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfileName is set, it can
// safely use t.GetProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile) GetProfileName() string {
	if t == nil || t.ProfileName == nil {
		return ""
	}
	return *t.ProfileName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Block.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ProfileName == nil {
		return nil, fmt.Errorf("nil value for key ProfileName")
	}

	return map[string]interface{}{
		"profile-name": *t.ProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block represents the /nokia-conf/configure/application-assurance/group/url-filter/web-service/profile/block YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block struct {
	Category map[string]*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category `path:"category" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) IsYANGGoStruct() {
}

// NewCategory creates a new entry in the Category list of the
// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) NewCategory(CategoryName string) (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Category == nil {
		t.Category = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category)
	}

	key := CategoryName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Category[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Category", key)
	}

	t.Category[key] = &NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category{
		CategoryName: &CategoryName,
	}

	return t.Category[key], nil
}

// RenameCategory renames an entry in the list Category within
// the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) RenameCategory(oldK, newK string) error {
	if _, ok := t.Category[newK]; ok {
		return fmt.Errorf("key %v already exists in Category", newK)
	}

	e, ok := t.Category[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Category", oldK)
	}
	e.CategoryName = &newK

	t.Category[newK] = e
	delete(t.Category, oldK)
	return nil
}

// GetOrCreateCategory retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) GetOrCreateCategory(CategoryName string) *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category {

	key := CategoryName

	if v, ok := t.Category[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCategory(CategoryName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCategory got unexpected error: %v", err))
	}
	return v
}

// GetCategory retrieves the value with the specified key from
// the Category map field of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) GetCategory(CategoryName string) *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category {

	if t == nil {
		return nil
	}

	key := CategoryName

	if lm, ok := t.Category[key]; ok {
		return lm
	}
	return nil
}

// DeleteCategory deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) DeleteCategory(CategoryName string) {
	key := CategoryName

	delete(t.Category, key)
}

// AppendCategory appends the supplied NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category struct to the
// list Category of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) AppendCategory(v *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category) error {
	if v.CategoryName == nil {
		return fmt.Errorf("invalid nil key received for CategoryName")
	}

	key := *v.CategoryName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Category == nil {
		t.Category = make(map[string]*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category)
	}

	if _, ok := t.Category[key]; ok {
		return fmt.Errorf("duplicate key for list Category %v", key)
	}

	t.Category[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Category {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category represents the /nokia-conf/configure/application-assurance/group/url-filter/web-service/profile/block/category YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category struct {
	CategoryName *string `path:"category-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category) IsYANGGoStruct() {
}

// GetCategoryName retrieves the value of the leaf CategoryName from the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CategoryName is set, it can
// safely use t.GetCategoryName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CategoryName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category) GetCategoryName() string {
	if t == nil || t.CategoryName == nil {
		return ""
	}
	return *t.CategoryName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CategoryName == nil {
		return nil, fmt.Errorf("nil value for key CategoryName")
	}

	return map[string]interface{}{
		"category-name": *t.CategoryName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlFilter_WebService_Profile_Block_Category) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Group_UrlList represents the /nokia-conf/configure/application-assurance/group/url-list YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Group_UrlList struct {
	AdminState         E_NokiaTypesSros_AdminState                                   `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                       `path:"description" module:"nokia-conf"`
	File               *string                                                       `path:"file" module:"nokia-conf"`
	HostExpressions    *bool                                                         `path:"host-expressions" module:"nokia-conf"`
	Key                *string                                                       `path:"key" module:"nokia-conf"`
	Size               E_NokiaConf_Configure_ApplicationAssurance_Group_UrlList_Size `path:"size" module:"nokia-conf"`
	UrlListName        *string                                                       `path:"url-list-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Group_UrlList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlList) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Group_UrlList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlList) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Group_UrlList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Group_UrlList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_Group_UrlList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlList) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFile retrieves the value of the leaf File from the NokiaConf_Configure_ApplicationAssurance_Group_UrlList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if File is set, it can
// safely use t.GetFile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.File == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlList) GetFile() string {
	if t == nil || t.File == nil {
		return ""
	}
	return *t.File
}

// GetHostExpressions retrieves the value of the leaf HostExpressions from the NokiaConf_Configure_ApplicationAssurance_Group_UrlList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostExpressions is set, it can
// safely use t.GetHostExpressions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostExpressions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlList) GetHostExpressions() bool {
	if t == nil || t.HostExpressions == nil {
		return false
	}
	return *t.HostExpressions
}

// GetKey retrieves the value of the leaf Key from the NokiaConf_Configure_ApplicationAssurance_Group_UrlList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlList) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// GetSize retrieves the value of the leaf Size from the NokiaConf_Configure_ApplicationAssurance_Group_UrlList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlList) GetSize() E_NokiaConf_Configure_ApplicationAssurance_Group_UrlList_Size {
	if t == nil || t.Size == 0 {
		return NokiaConf_Configure_ApplicationAssurance_Group_UrlList_Size_standard
	}
	return t.Size
}

// GetUrlListName retrieves the value of the leaf UrlListName from the NokiaConf_Configure_ApplicationAssurance_Group_UrlList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UrlListName is set, it can
// safely use t.GetUrlListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UrlListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlList) GetUrlListName() string {
	if t == nil || t.UrlListName == nil {
		return ""
	}
	return *t.UrlListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Group_UrlList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HostExpressions == nil {
		var v bool = false
		t.HostExpressions = &v
	}
	if t.Size == 0 {
		t.Size = NokiaConf_Configure_ApplicationAssurance_Group_UrlList_Size_standard
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Group_UrlList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.UrlListName == nil {
		return nil, fmt.Errorf("nil value for key UrlListName")
	}

	return map[string]interface{}{
		"url-list-name": *t.UrlListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Group_UrlList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Group_UrlList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Group_UrlList.
func (*NokiaConf_Configure_ApplicationAssurance_Group_UrlList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_HttpEnrich represents the /nokia-conf/configure/application-assurance/http-enrich YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_HttpEnrich struct {
	Field map[string]*NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field `path:"field" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_HttpEnrich implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_HttpEnrich) IsYANGGoStruct() {}

// NewField creates a new entry in the Field list of the
// NokiaConf_Configure_ApplicationAssurance_HttpEnrich struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpEnrich) NewField(FieldName string) (*NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field)
	}

	key := FieldName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Field[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Field", key)
	}

	t.Field[key] = &NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field{
		FieldName: &FieldName,
	}

	return t.Field[key], nil
}

// RenameField renames an entry in the list Field within
// the NokiaConf_Configure_ApplicationAssurance_HttpEnrich struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpEnrich) RenameField(oldK, newK string) error {
	if _, ok := t.Field[newK]; ok {
		return fmt.Errorf("key %v already exists in Field", newK)
	}

	e, ok := t.Field[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Field", oldK)
	}
	e.FieldName = &newK

	t.Field[newK] = e
	delete(t.Field, oldK)
	return nil
}

// GetOrCreateField retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_HttpEnrich. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpEnrich) GetOrCreateField(FieldName string) *NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field {

	key := FieldName

	if v, ok := t.Field[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewField(FieldName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateField got unexpected error: %v", err))
	}
	return v
}

// GetField retrieves the value with the specified key from
// the Field map field of NokiaConf_Configure_ApplicationAssurance_HttpEnrich. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpEnrich) GetField(FieldName string) *NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field {

	if t == nil {
		return nil
	}

	key := FieldName

	if lm, ok := t.Field[key]; ok {
		return lm
	}
	return nil
}

// DeleteField deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_HttpEnrich. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpEnrich) DeleteField(FieldName string) {
	key := FieldName

	delete(t.Field, key)
}

// AppendField appends the supplied NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field struct to the
// list Field of NokiaConf_Configure_ApplicationAssurance_HttpEnrich. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpEnrich) AppendField(v *NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field) error {
	if v.FieldName == nil {
		return fmt.Errorf("invalid nil key received for FieldName")
	}

	key := *v.FieldName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Field == nil {
		t.Field = make(map[string]*NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field)
	}

	if _, ok := t.Field[key]; ok {
		return fmt.Errorf("duplicate key for list Field %v", key)
	}

	t.Field[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_HttpEnrich
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpEnrich) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Field {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpEnrich) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_HttpEnrich"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpEnrich) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpEnrich) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_HttpEnrich.
func (*NokiaConf_Configure_ApplicationAssurance_HttpEnrich) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field represents the /nokia-conf/configure/application-assurance/http-enrich/field YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Comment            *string  `path:"comment" module:"nokia-conf"`
	FieldName          *string  `path:"field-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetComment retrieves the value of the leaf Comment from the NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Comment is set, it can
// safely use t.GetComment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Comment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field) GetComment() string {
	if t == nil || t.Comment == nil {
		return ""
	}
	return *t.Comment
}

// GetFieldName retrieves the value of the leaf FieldName from the NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FieldName is set, it can
// safely use t.GetFieldName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FieldName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field) GetFieldName() string {
	if t == nil || t.FieldName == nil {
		return ""
	}
	return *t.FieldName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FieldName == nil {
		return nil, fmt.Errorf("nil value for key FieldName")
	}

	return map[string]interface{}{
		"field-name": *t.FieldName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field.
func (*NokiaConf_Configure_ApplicationAssurance_HttpEnrich_Field) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect represents the /nokia-conf/configure/application-assurance/http-error-redirect YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect struct {
	ErrorCode map[uint32]*NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode `path:"error-code" module:"nokia-conf"`
	Template  map[uint32]*NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template  `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect) IsYANGGoStruct() {}

// NewErrorCode creates a new entry in the ErrorCode list of the
// NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect) NewErrorCode(ErrorCodeNumber uint32) (*NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ErrorCode == nil {
		t.ErrorCode = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode)
	}

	key := ErrorCodeNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ErrorCode[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ErrorCode", key)
	}

	t.ErrorCode[key] = &NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode{
		ErrorCodeNumber: &ErrorCodeNumber,
	}

	return t.ErrorCode[key], nil
}

// RenameErrorCode renames an entry in the list ErrorCode within
// the NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect) RenameErrorCode(oldK, newK uint32) error {
	if _, ok := t.ErrorCode[newK]; ok {
		return fmt.Errorf("key %v already exists in ErrorCode", newK)
	}

	e, ok := t.ErrorCode[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ErrorCode", oldK)
	}
	e.ErrorCodeNumber = &newK

	t.ErrorCode[newK] = e
	delete(t.ErrorCode, oldK)
	return nil
}

// GetOrCreateErrorCode retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect) GetOrCreateErrorCode(ErrorCodeNumber uint32) *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode {

	key := ErrorCodeNumber

	if v, ok := t.ErrorCode[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewErrorCode(ErrorCodeNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateErrorCode got unexpected error: %v", err))
	}
	return v
}

// GetErrorCode retrieves the value with the specified key from
// the ErrorCode map field of NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect) GetErrorCode(ErrorCodeNumber uint32) *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode {

	if t == nil {
		return nil
	}

	key := ErrorCodeNumber

	if lm, ok := t.ErrorCode[key]; ok {
		return lm
	}
	return nil
}

// DeleteErrorCode deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect) DeleteErrorCode(ErrorCodeNumber uint32) {
	key := ErrorCodeNumber

	delete(t.ErrorCode, key)
}

// AppendErrorCode appends the supplied NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode struct to the
// list ErrorCode of NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect) AppendErrorCode(v *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode) error {
	if v.ErrorCodeNumber == nil {
		return fmt.Errorf("invalid nil key received for ErrorCodeNumber")
	}

	key := *v.ErrorCodeNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ErrorCode == nil {
		t.ErrorCode = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode)
	}

	if _, ok := t.ErrorCode[key]; ok {
		return fmt.Errorf("duplicate key for list ErrorCode %v", key)
	}

	t.ErrorCode[key] = v
	return nil
}

// NewTemplate creates a new entry in the Template list of the
// NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect) NewTemplate(TemplateId uint32) (*NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template)
	}

	key := TemplateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Template[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Template", key)
	}

	t.Template[key] = &NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template{
		TemplateId: &TemplateId,
	}

	return t.Template[key], nil
}

// RenameTemplate renames an entry in the list Template within
// the NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect) RenameTemplate(oldK, newK uint32) error {
	if _, ok := t.Template[newK]; ok {
		return fmt.Errorf("key %v already exists in Template", newK)
	}

	e, ok := t.Template[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Template", oldK)
	}
	e.TemplateId = &newK

	t.Template[newK] = e
	delete(t.Template, oldK)
	return nil
}

// GetOrCreateTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect) GetOrCreateTemplate(TemplateId uint32) *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template {

	key := TemplateId

	if v, ok := t.Template[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTemplate(TemplateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTemplate got unexpected error: %v", err))
	}
	return v
}

// GetTemplate retrieves the value with the specified key from
// the Template map field of NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect) GetTemplate(TemplateId uint32) *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template {

	if t == nil {
		return nil
	}

	key := TemplateId

	if lm, ok := t.Template[key]; ok {
		return lm
	}
	return nil
}

// DeleteTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect) DeleteTemplate(TemplateId uint32) {
	key := TemplateId

	delete(t.Template, key)
}

// AppendTemplate appends the supplied NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template struct to the
// list Template of NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect) AppendTemplate(v *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template) error {
	if v.TemplateId == nil {
		return fmt.Errorf("invalid nil key received for TemplateId")
	}

	key := *v.TemplateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template)
	}

	if _, ok := t.Template[key]; ok {
		return fmt.Errorf("duplicate key for list Template %v", key)
	}

	t.Template[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ErrorCode {
		e.PopulateDefaults()
	}
	for _, e := range t.Template {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect.
func (*NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode represents the /nokia-conf/configure/application-assurance/http-error-redirect/error-code YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Comment            *string  `path:"comment" module:"nokia-conf"`
	ErrorCodeNumber    *uint32  `path:"error-code-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetComment retrieves the value of the leaf Comment from the NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Comment is set, it can
// safely use t.GetComment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Comment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode) GetComment() string {
	if t == nil || t.Comment == nil {
		return ""
	}
	return *t.Comment
}

// GetErrorCodeNumber retrieves the value of the leaf ErrorCodeNumber from the NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorCodeNumber is set, it can
// safely use t.GetErrorCodeNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorCodeNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode) GetErrorCodeNumber() uint32 {
	if t == nil || t.ErrorCodeNumber == nil {
		return 0
	}
	return *t.ErrorCodeNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ErrorCodeNumber == nil {
		return nil, fmt.Errorf("nil value for key ErrorCodeNumber")
	}

	return map[string]interface{}{
		"error-code-number": *t.ErrorCodeNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode.
func (*NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_ErrorCode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template represents the /nokia-conf/configure/application-assurance/http-error-redirect/template YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Comment            *string  `path:"comment" module:"nokia-conf"`
	TemplateId         *uint32  `path:"template-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetComment retrieves the value of the leaf Comment from the NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Comment is set, it can
// safely use t.GetComment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Comment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template) GetComment() string {
	if t == nil || t.Comment == nil {
		return ""
	}
	return *t.Comment
}

// GetTemplateId retrieves the value of the leaf TemplateId from the NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateId is set, it can
// safely use t.GetTemplateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template) GetTemplateId() uint32 {
	if t == nil || t.TemplateId == nil {
		return 0
	}
	return *t.TemplateId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TemplateId == nil {
		return nil, fmt.Errorf("nil value for key TemplateId")
	}

	return map[string]interface{}{
		"template-id": *t.TemplateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template.
func (*NokiaConf_Configure_ApplicationAssurance_HttpErrorRedirect_Template) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_HttpNotification represents the /nokia-conf/configure/application-assurance/http-notification YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_HttpNotification struct {
	Template map[uint32]*NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_HttpNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_HttpNotification) IsYANGGoStruct() {}

// NewTemplate creates a new entry in the Template list of the
// NokiaConf_Configure_ApplicationAssurance_HttpNotification struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpNotification) NewTemplate(TemplateId uint32) (*NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template)
	}

	key := TemplateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Template[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Template", key)
	}

	t.Template[key] = &NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template{
		TemplateId: &TemplateId,
	}

	return t.Template[key], nil
}

// RenameTemplate renames an entry in the list Template within
// the NokiaConf_Configure_ApplicationAssurance_HttpNotification struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpNotification) RenameTemplate(oldK, newK uint32) error {
	if _, ok := t.Template[newK]; ok {
		return fmt.Errorf("key %v already exists in Template", newK)
	}

	e, ok := t.Template[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Template", oldK)
	}
	e.TemplateId = &newK

	t.Template[newK] = e
	delete(t.Template, oldK)
	return nil
}

// GetOrCreateTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_HttpNotification. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpNotification) GetOrCreateTemplate(TemplateId uint32) *NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template {

	key := TemplateId

	if v, ok := t.Template[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTemplate(TemplateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTemplate got unexpected error: %v", err))
	}
	return v
}

// GetTemplate retrieves the value with the specified key from
// the Template map field of NokiaConf_Configure_ApplicationAssurance_HttpNotification. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpNotification) GetTemplate(TemplateId uint32) *NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template {

	if t == nil {
		return nil
	}

	key := TemplateId

	if lm, ok := t.Template[key]; ok {
		return lm
	}
	return nil
}

// DeleteTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_HttpNotification. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpNotification) DeleteTemplate(TemplateId uint32) {
	key := TemplateId

	delete(t.Template, key)
}

// AppendTemplate appends the supplied NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template struct to the
// list Template of NokiaConf_Configure_ApplicationAssurance_HttpNotification. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpNotification) AppendTemplate(v *NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template) error {
	if v.TemplateId == nil {
		return fmt.Errorf("invalid nil key received for TemplateId")
	}

	key := *v.TemplateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template)
	}

	if _, ok := t.Template[key]; ok {
		return fmt.Errorf("duplicate key for list Template %v", key)
	}

	t.Template[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_HttpNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Template {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_HttpNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_HttpNotification.
func (*NokiaConf_Configure_ApplicationAssurance_HttpNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template represents the /nokia-conf/configure/application-assurance/http-notification/template YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Comment            *string  `path:"comment" module:"nokia-conf"`
	TemplateId         *uint32  `path:"template-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetComment retrieves the value of the leaf Comment from the NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Comment is set, it can
// safely use t.GetComment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Comment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template) GetComment() string {
	if t == nil || t.Comment == nil {
		return ""
	}
	return *t.Comment
}

// GetTemplateId retrieves the value of the leaf TemplateId from the NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateId is set, it can
// safely use t.GetTemplateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template) GetTemplateId() uint32 {
	if t == nil || t.TemplateId == nil {
		return 0
	}
	return *t.TemplateId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TemplateId == nil {
		return nil, fmt.Errorf("nil value for key TemplateId")
	}

	return map[string]interface{}{
		"template-id": *t.TemplateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template.
func (*NokiaConf_Configure_ApplicationAssurance_HttpNotification_Template) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_HttpRedirect represents the /nokia-conf/configure/application-assurance/http-redirect YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_HttpRedirect struct {
	Template map[uint32]*NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_HttpRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_HttpRedirect) IsYANGGoStruct() {}

// NewTemplate creates a new entry in the Template list of the
// NokiaConf_Configure_ApplicationAssurance_HttpRedirect struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpRedirect) NewTemplate(TemplateId uint32) (*NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template)
	}

	key := TemplateId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Template[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Template", key)
	}

	t.Template[key] = &NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template{
		TemplateId: &TemplateId,
	}

	return t.Template[key], nil
}

// RenameTemplate renames an entry in the list Template within
// the NokiaConf_Configure_ApplicationAssurance_HttpRedirect struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpRedirect) RenameTemplate(oldK, newK uint32) error {
	if _, ok := t.Template[newK]; ok {
		return fmt.Errorf("key %v already exists in Template", newK)
	}

	e, ok := t.Template[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Template", oldK)
	}
	e.TemplateId = &newK

	t.Template[newK] = e
	delete(t.Template, oldK)
	return nil
}

// GetOrCreateTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_HttpRedirect. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpRedirect) GetOrCreateTemplate(TemplateId uint32) *NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template {

	key := TemplateId

	if v, ok := t.Template[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTemplate(TemplateId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTemplate got unexpected error: %v", err))
	}
	return v
}

// GetTemplate retrieves the value with the specified key from
// the Template map field of NokiaConf_Configure_ApplicationAssurance_HttpRedirect. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpRedirect) GetTemplate(TemplateId uint32) *NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template {

	if t == nil {
		return nil
	}

	key := TemplateId

	if lm, ok := t.Template[key]; ok {
		return lm
	}
	return nil
}

// DeleteTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_HttpRedirect. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpRedirect) DeleteTemplate(TemplateId uint32) {
	key := TemplateId

	delete(t.Template, key)
}

// AppendTemplate appends the supplied NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template struct to the
// list Template of NokiaConf_Configure_ApplicationAssurance_HttpRedirect. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpRedirect) AppendTemplate(v *NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template) error {
	if v.TemplateId == nil {
		return fmt.Errorf("invalid nil key received for TemplateId")
	}

	key := *v.TemplateId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template)
	}

	if _, ok := t.Template[key]; ok {
		return fmt.Errorf("duplicate key for list Template %v", key)
	}

	t.Template[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_HttpRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Template {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_HttpRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_HttpRedirect.
func (*NokiaConf_Configure_ApplicationAssurance_HttpRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template represents the /nokia-conf/configure/application-assurance/http-redirect/template YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Comment            *string  `path:"comment" module:"nokia-conf"`
	TemplateId         *uint32  `path:"template-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetComment retrieves the value of the leaf Comment from the NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Comment is set, it can
// safely use t.GetComment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Comment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template) GetComment() string {
	if t == nil || t.Comment == nil {
		return ""
	}
	return *t.Comment
}

// GetTemplateId retrieves the value of the leaf TemplateId from the NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateId is set, it can
// safely use t.GetTemplateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template) GetTemplateId() uint32 {
	if t == nil || t.TemplateId == nil {
		return 0
	}
	return *t.TemplateId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TemplateId == nil {
		return nil, fmt.Errorf("nil value for key TemplateId")
	}

	return map[string]interface{}{
		"template-id": *t.TemplateId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template.
func (*NokiaConf_Configure_ApplicationAssurance_HttpRedirect_Template) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_Protocol represents the /nokia-conf/configure/application-assurance/protocol YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_Protocol struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	ProtocolName       *string                     `path:"protocol-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_Protocol) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_ApplicationAssurance_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Protocol) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Protocol) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Protocol) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetProtocolName retrieves the value of the leaf ProtocolName from the NokiaConf_Configure_ApplicationAssurance_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolName is set, it can
// safely use t.GetProtocolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_Protocol) GetProtocolName() string {
	if t == nil || t.ProtocolName == nil {
		return ""
	}
	return *t.ProtocolName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_Protocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_Protocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_Protocol struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_Protocol) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ProtocolName == nil {
		return nil, fmt.Errorf("nil value for key ProtocolName")
	}

	return map[string]interface{}{
		"protocol-name": *t.ProtocolName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_Protocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_Protocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_Protocol.
func (*NokiaConf_Configure_ApplicationAssurance_Protocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy represents the /nokia-conf/configure/application-assurance/radius-accounting-policy YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy struct {
	ApplyGroups            []string                                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Description            *string                                                                                 `path:"description" module:"nokia-conf"`
	InterimUpdateInterval  *uint32                                                                                 `path:"interim-update-interval" module:"nokia-conf"`
	RadAcctPlcyName        *string                                                                                 `path:"rad-acct-plcy-name" module:"nokia-conf"`
	RadiusAccountingServer *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer `path:"radius-accounting-server" module:"nokia-conf"`
	SignificantChange      *uint32                                                                                 `path:"significant-change" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy) IsYANGGoStruct() {}

// GetOrCreateRadiusAccountingServer retrieves the value of the RadiusAccountingServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy) GetOrCreateRadiusAccountingServer() *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer {
	if t.RadiusAccountingServer != nil {
		return t.RadiusAccountingServer
	}
	t.RadiusAccountingServer = &NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer{}
	return t.RadiusAccountingServer
}

// GetRadiusAccountingServer returns the value of the RadiusAccountingServer struct pointer
// from NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy. If the receiver or the field RadiusAccountingServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy) GetRadiusAccountingServer() *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer {
	if t != nil && t.RadiusAccountingServer != nil {
		return t.RadiusAccountingServer
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInterimUpdateInterval retrieves the value of the leaf InterimUpdateInterval from the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterimUpdateInterval is set, it can
// safely use t.GetInterimUpdateInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterimUpdateInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy) GetInterimUpdateInterval() uint32 {
	if t == nil || t.InterimUpdateInterval == nil {
		return 0
	}
	return *t.InterimUpdateInterval
}

// GetRadAcctPlcyName retrieves the value of the leaf RadAcctPlcyName from the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadAcctPlcyName is set, it can
// safely use t.GetRadAcctPlcyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadAcctPlcyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy) GetRadAcctPlcyName() string {
	if t == nil || t.RadAcctPlcyName == nil {
		return ""
	}
	return *t.RadAcctPlcyName
}

// GetSignificantChange retrieves the value of the leaf SignificantChange from the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignificantChange is set, it can
// safely use t.GetSignificantChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignificantChange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy) GetSignificantChange() uint32 {
	if t == nil || t.SignificantChange == nil {
		return 0
	}
	return *t.SignificantChange
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RadiusAccountingServer.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RadAcctPlcyName == nil {
		return nil, fmt.Errorf("nil value for key RadAcctPlcyName")
	}

	return map[string]interface{}{
		"rad-acct-plcy-name": *t.RadAcctPlcyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy.
func (*NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer represents the /nokia-conf/configure/application-assurance/radius-accounting-policy/radius-accounting-server YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer struct {
	AccessAlgorithm E_NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_AccessAlgorithm  `path:"access-algorithm" module:"nokia-conf"`
	Retry           *uint32                                                                                                   `path:"retry" module:"nokia-conf"`
	RouterInstance  *string                                                                                                   `path:"router-instance" module:"nokia-conf"`
	Server          map[uint32]*NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server `path:"server" module:"nokia-conf"`
	SourceAddress   *string                                                                                                   `path:"source-address" module:"nokia-conf"`
	Timeout         *uint32                                                                                                   `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) IsYANGGoStruct() {
}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) NewServer(ServerIndex uint32) (*NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server)
	}

	key := ServerIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server{
		ServerIndex: &ServerIndex,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) RenameServer(oldK, newK uint32) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.ServerIndex = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) GetOrCreateServer(ServerIndex uint32) *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server {

	key := ServerIndex

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(ServerIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) GetServer(ServerIndex uint32) *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server {

	if t == nil {
		return nil
	}

	key := ServerIndex

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) DeleteServer(ServerIndex uint32) {
	key := ServerIndex

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server struct to the
// list Server of NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer. If the key value(s) specified in
// the supplied NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) AppendServer(v *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) error {
	if v.ServerIndex == nil {
		return fmt.Errorf("invalid nil key received for ServerIndex")
	}

	key := *v.ServerIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[uint32]*NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetAccessAlgorithm retrieves the value of the leaf AccessAlgorithm from the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessAlgorithm is set, it can
// safely use t.GetAccessAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) GetAccessAlgorithm() E_NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_AccessAlgorithm {
	if t == nil || t.AccessAlgorithm == 0 {
		return NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_AccessAlgorithm_direct
	}
	return t.AccessAlgorithm
}

// GetRetry retrieves the value of the leaf Retry from the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Retry is set, it can
// safely use t.GetRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Retry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) GetRetry() uint32 {
	if t == nil || t.Retry == nil {
		return 3
	}
	return *t.Retry
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 5
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AccessAlgorithm == 0 {
		t.AccessAlgorithm = NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_AccessAlgorithm_direct
	}
	if t.Retry == nil {
		var v uint32 = 3
		t.Retry = &v
	}
	if t.Timeout == nil {
		var v uint32 = 5
		t.Timeout = &v
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer.
func (*NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server represents the /nokia-conf/configure/application-assurance/radius-accounting-policy/radius-accounting-server/server YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Port               *uint16  `path:"port" module:"nokia-conf"`
	Secret             *string  `path:"secret" module:"nokia-conf"`
	ServerIndex        *uint32  `path:"server-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 1813
	}
	return *t.Port
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// GetServerIndex retrieves the value of the leaf ServerIndex from the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerIndex is set, it can
// safely use t.GetServerIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) GetServerIndex() uint32 {
	if t == nil || t.ServerIndex == nil {
		return 0
	}
	return *t.ServerIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v uint16 = 1813
		t.Port = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServerIndex == nil {
		return nil, fmt.Errorf("nil value for key ServerIndex")
	}

	return map[string]interface{}{
		"server-index": *t.ServerIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server.
func (*NokiaConf_Configure_ApplicationAssurance_RadiusAccountingPolicy_RadiusAccountingServer_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds represents the /nokia-conf/configure/application-assurance/usage-alert-thresholds YANG schema element.
type NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds struct {
	BitRateHighWmark       NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds_BitRateHighWmark_Union       `path:"bit-rate-high-wmark" module:"nokia-conf"`
	BitRateLowWmark        *uint32                                                                                    `path:"bit-rate-low-wmark" module:"nokia-conf"`
	DatapathCpuHighWmark   NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds_DatapathCpuHighWmark_Union   `path:"datapath-cpu-high-wmark" module:"nokia-conf"`
	DatapathCpuLowWmark    *int32                                                                                     `path:"datapath-cpu-low-wmark" module:"nokia-conf"`
	FlowSetupRateHighWmark NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds_FlowSetupRateHighWmark_Union `path:"flow-setup-rate-high-wmark" module:"nokia-conf"`
	FlowSetupRateLowWmark  *uint32                                                                                    `path:"flow-setup-rate-low-wmark" module:"nokia-conf"`
	FlowTableHighWmark     *int32                                                                                     `path:"flow-table-high-wmark" module:"nokia-conf"`
	FlowTableLowWmark      *int32                                                                                     `path:"flow-table-low-wmark" module:"nokia-conf"`
	PacketRateHighWmark    NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds_PacketRateHighWmark_Union    `path:"packet-rate-high-wmark" module:"nokia-conf"`
	PacketRateLowWmark     *uint32                                                                                    `path:"packet-rate-low-wmark" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds) IsYANGGoStruct() {}

// GetBitRateHighWmark retrieves the value of the leaf BitRateHighWmark from the NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitRateHighWmark is set, it can
// safely use t.GetBitRateHighWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitRateHighWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds) GetBitRateHighWmark() NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds_BitRateHighWmark_Union {
	if t == nil || t.BitRateHighWmark == nil {
		return NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds_BitRateHighWmark_Enum_max
	}
	return t.BitRateHighWmark
}

// GetBitRateLowWmark retrieves the value of the leaf BitRateLowWmark from the NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitRateLowWmark is set, it can
// safely use t.GetBitRateLowWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitRateLowWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds) GetBitRateLowWmark() uint32 {
	if t == nil || t.BitRateLowWmark == nil {
		return 0
	}
	return *t.BitRateLowWmark
}

// GetDatapathCpuHighWmark retrieves the value of the leaf DatapathCpuHighWmark from the NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DatapathCpuHighWmark is set, it can
// safely use t.GetDatapathCpuHighWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DatapathCpuHighWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds) GetDatapathCpuHighWmark() NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds_DatapathCpuHighWmark_Union {
	if t == nil || t.DatapathCpuHighWmark == nil {
		return UnionInt32(95)
	}
	return t.DatapathCpuHighWmark
}

// GetDatapathCpuLowWmark retrieves the value of the leaf DatapathCpuLowWmark from the NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DatapathCpuLowWmark is set, it can
// safely use t.GetDatapathCpuLowWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DatapathCpuLowWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds) GetDatapathCpuLowWmark() int32 {
	if t == nil || t.DatapathCpuLowWmark == nil {
		return 90
	}
	return *t.DatapathCpuLowWmark
}

// GetFlowSetupRateHighWmark retrieves the value of the leaf FlowSetupRateHighWmark from the NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowSetupRateHighWmark is set, it can
// safely use t.GetFlowSetupRateHighWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowSetupRateHighWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds) GetFlowSetupRateHighWmark() NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds_FlowSetupRateHighWmark_Union {
	if t == nil || t.FlowSetupRateHighWmark == nil {
		return NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds_FlowSetupRateHighWmark_Enum_max
	}
	return t.FlowSetupRateHighWmark
}

// GetFlowSetupRateLowWmark retrieves the value of the leaf FlowSetupRateLowWmark from the NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowSetupRateLowWmark is set, it can
// safely use t.GetFlowSetupRateLowWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowSetupRateLowWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds) GetFlowSetupRateLowWmark() uint32 {
	if t == nil || t.FlowSetupRateLowWmark == nil {
		return 0
	}
	return *t.FlowSetupRateLowWmark
}

// GetFlowTableHighWmark retrieves the value of the leaf FlowTableHighWmark from the NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowTableHighWmark is set, it can
// safely use t.GetFlowTableHighWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowTableHighWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds) GetFlowTableHighWmark() int32 {
	if t == nil || t.FlowTableHighWmark == nil {
		return 95
	}
	return *t.FlowTableHighWmark
}

// GetFlowTableLowWmark retrieves the value of the leaf FlowTableLowWmark from the NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowTableLowWmark is set, it can
// safely use t.GetFlowTableLowWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowTableLowWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds) GetFlowTableLowWmark() int32 {
	if t == nil || t.FlowTableLowWmark == nil {
		return 90
	}
	return *t.FlowTableLowWmark
}

// GetPacketRateHighWmark retrieves the value of the leaf PacketRateHighWmark from the NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketRateHighWmark is set, it can
// safely use t.GetPacketRateHighWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketRateHighWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds) GetPacketRateHighWmark() NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds_PacketRateHighWmark_Union {
	if t == nil || t.PacketRateHighWmark == nil {
		return NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds_PacketRateHighWmark_Enum_max
	}
	return t.PacketRateHighWmark
}

// GetPacketRateLowWmark retrieves the value of the leaf PacketRateLowWmark from the NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketRateLowWmark is set, it can
// safely use t.GetPacketRateLowWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketRateLowWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds) GetPacketRateLowWmark() uint32 {
	if t == nil || t.PacketRateLowWmark == nil {
		return 0
	}
	return *t.PacketRateLowWmark
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitRateHighWmark == nil {
		t.BitRateHighWmark = NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds_BitRateHighWmark_Enum_max
	}
	if t.BitRateLowWmark == nil {
		var v uint32 = 0
		t.BitRateLowWmark = &v
	}
	if t.DatapathCpuHighWmark == nil {
		t.DatapathCpuHighWmark = UnionInt32(95)
	}
	if t.DatapathCpuLowWmark == nil {
		var v int32 = 90
		t.DatapathCpuLowWmark = &v
	}
	if t.FlowSetupRateHighWmark == nil {
		t.FlowSetupRateHighWmark = NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds_FlowSetupRateHighWmark_Enum_max
	}
	if t.FlowSetupRateLowWmark == nil {
		var v uint32 = 0
		t.FlowSetupRateLowWmark = &v
	}
	if t.FlowTableHighWmark == nil {
		var v int32 = 95
		t.FlowTableHighWmark = &v
	}
	if t.FlowTableLowWmark == nil {
		var v int32 = 90
		t.FlowTableLowWmark = &v
	}
	if t.PacketRateHighWmark == nil {
		t.PacketRateHighWmark = NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds_PacketRateHighWmark_Enum_max
	}
	if t.PacketRateLowWmark == nil {
		var v uint32 = 0
		t.PacketRateLowWmark = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds.
func (*NokiaConf_Configure_ApplicationAssurance_UsageAlertThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aps represents the /nokia-conf/configure/aps YANG schema element.
type NokiaConf_Configure_Aps struct {
	AdvertiseInterval  *uint32                                 `path:"advertise-interval" module:"nokia-conf"`
	Annexb             *NokiaConf_Configure_Aps_Annexb         `path:"annexb" module:"nokia-conf" yangPresence:"true"`
	ApplyGroups        []string                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupId            *uint32                                 `path:"group-id" module:"nokia-conf"`
	HoldTime           *uint32                                 `path:"hold-time" module:"nokia-conf"`
	Neighbor           *string                                 `path:"neighbor" module:"nokia-conf"`
	ProtectCircuit     *string                                 `path:"protect-circuit" module:"nokia-conf"`
	Revert             *NokiaConf_Configure_Aps_Revert         `path:"revert" module:"nokia-conf" yangPresence:"true"`
	SwitchingMode      E_NokiaConf_Configure_Aps_SwitchingMode `path:"switching-mode" module:"nokia-conf"`
	WorkingCircuit     *string                                 `path:"working-circuit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aps) IsYANGGoStruct() {}

// GetOrCreateAnnexb retrieves the value of the Annexb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aps) GetOrCreateAnnexb() *NokiaConf_Configure_Aps_Annexb {
	if t.Annexb != nil {
		return t.Annexb
	}
	t.Annexb = &NokiaConf_Configure_Aps_Annexb{}
	return t.Annexb
}

// GetOrCreateRevert retrieves the value of the Revert field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Aps) GetOrCreateRevert() *NokiaConf_Configure_Aps_Revert {
	if t.Revert != nil {
		return t.Revert
	}
	t.Revert = &NokiaConf_Configure_Aps_Revert{}
	return t.Revert
}

// GetAnnexb returns the value of the Annexb struct pointer
// from NokiaConf_Configure_Aps. If the receiver or the field Annexb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aps) GetAnnexb() *NokiaConf_Configure_Aps_Annexb {
	if t != nil && t.Annexb != nil {
		return t.Annexb
	}
	return nil
}

// GetRevert returns the value of the Revert struct pointer
// from NokiaConf_Configure_Aps. If the receiver or the field Revert is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Aps) GetRevert() *NokiaConf_Configure_Aps_Revert {
	if t != nil && t.Revert != nil {
		return t.Revert
	}
	return nil
}

// GetAdvertiseInterval retrieves the value of the leaf AdvertiseInterval from the NokiaConf_Configure_Aps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseInterval is set, it can
// safely use t.GetAdvertiseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aps) GetAdvertiseInterval() uint32 {
	if t == nil || t.AdvertiseInterval == nil {
		return 10
	}
	return *t.AdvertiseInterval
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Aps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aps) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Aps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aps) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Aps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aps) GetGroupId() uint32 {
	if t == nil || t.GroupId == nil {
		return 0
	}
	return *t.GroupId
}

// GetHoldTime retrieves the value of the leaf HoldTime from the NokiaConf_Configure_Aps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aps) GetHoldTime() uint32 {
	if t == nil || t.HoldTime == nil {
		return 30
	}
	return *t.HoldTime
}

// GetNeighbor retrieves the value of the leaf Neighbor from the NokiaConf_Configure_Aps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neighbor is set, it can
// safely use t.GetNeighbor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neighbor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aps) GetNeighbor() string {
	if t == nil || t.Neighbor == nil {
		return ""
	}
	return *t.Neighbor
}

// GetProtectCircuit retrieves the value of the leaf ProtectCircuit from the NokiaConf_Configure_Aps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectCircuit is set, it can
// safely use t.GetProtectCircuit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectCircuit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aps) GetProtectCircuit() string {
	if t == nil || t.ProtectCircuit == nil {
		return ""
	}
	return *t.ProtectCircuit
}

// GetSwitchingMode retrieves the value of the leaf SwitchingMode from the NokiaConf_Configure_Aps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SwitchingMode is set, it can
// safely use t.GetSwitchingMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SwitchingMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aps) GetSwitchingMode() E_NokiaConf_Configure_Aps_SwitchingMode {
	if t == nil || t.SwitchingMode == 0 {
		return NokiaConf_Configure_Aps_SwitchingMode_bi_directional
	}
	return t.SwitchingMode
}

// GetWorkingCircuit retrieves the value of the leaf WorkingCircuit from the NokiaConf_Configure_Aps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WorkingCircuit is set, it can
// safely use t.GetWorkingCircuit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WorkingCircuit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aps) GetWorkingCircuit() string {
	if t == nil || t.WorkingCircuit == nil {
		return ""
	}
	return *t.WorkingCircuit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseInterval == nil {
		var v uint32 = 10
		t.AdvertiseInterval = &v
	}
	if t.HoldTime == nil {
		var v uint32 = 30
		t.HoldTime = &v
	}
	if t.SwitchingMode == 0 {
		t.SwitchingMode = NokiaConf_Configure_Aps_SwitchingMode_bi_directional
	}
	t.Annexb.PopulateDefaults()
	t.Revert.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Aps struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Aps) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aps) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aps) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aps.
func (*NokiaConf_Configure_Aps) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aps_Annexb represents the /nokia-conf/configure/aps/annexb YANG schema element.
type NokiaConf_Configure_Aps_Annexb struct {
	WaitToRestoreTime *uint32  `path:"wait-to-restore-time" module:"nokia-conf"`
	WorkingCircuit    []string `path:"working-circuit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aps_Annexb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aps_Annexb) IsYANGGoStruct() {}

// GetWaitToRestoreTime retrieves the value of the leaf WaitToRestoreTime from the NokiaConf_Configure_Aps_Annexb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaitToRestoreTime is set, it can
// safely use t.GetWaitToRestoreTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaitToRestoreTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aps_Annexb) GetWaitToRestoreTime() uint32 {
	if t == nil || t.WaitToRestoreTime == nil {
		return 300
	}
	return *t.WaitToRestoreTime
}

// GetWorkingCircuit retrieves the value of the leaf WorkingCircuit from the NokiaConf_Configure_Aps_Annexb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WorkingCircuit is set, it can
// safely use t.GetWorkingCircuit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WorkingCircuit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aps_Annexb) GetWorkingCircuit() []string {
	if t == nil || t.WorkingCircuit == nil {
		return nil
	}
	return t.WorkingCircuit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aps_Annexb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aps_Annexb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.WaitToRestoreTime == nil {
		var v uint32 = 300
		t.WaitToRestoreTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aps_Annexb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aps_Annexb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aps_Annexb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aps_Annexb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aps_Annexb.
func (*NokiaConf_Configure_Aps_Annexb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Aps_Revert represents the /nokia-conf/configure/aps/revert YANG schema element.
type NokiaConf_Configure_Aps_Revert struct {
	Time *uint32 `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Aps_Revert implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Aps_Revert) IsYANGGoStruct() {}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Aps_Revert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Aps_Revert) GetTime() uint32 {
	if t == nil || t.Time == nil {
		return 300
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Aps_Revert
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Aps_Revert) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Time == nil {
		var v uint32 = 300
		t.Time = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aps_Revert) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Aps_Revert"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Aps_Revert) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Aps_Revert) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Aps_Revert.
func (*NokiaConf_Configure_Aps_Revert) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Bfd represents the /nokia-conf/configure/bfd YANG schema element.
type NokiaConf_Configure_Bfd struct {
	ApplyGroups        []string                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	BfdTemplate        map[string]*NokiaConf_Configure_Bfd_BfdTemplate `path:"bfd-template" module:"nokia-conf"`
	SeamlessBfd        *NokiaConf_Configure_Bfd_SeamlessBfd            `path:"seamless-bfd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Bfd) IsYANGGoStruct() {}

// NewBfdTemplate creates a new entry in the BfdTemplate list of the
// NokiaConf_Configure_Bfd struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Bfd) NewBfdTemplate(Name string) (*NokiaConf_Configure_Bfd_BfdTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BfdTemplate == nil {
		t.BfdTemplate = make(map[string]*NokiaConf_Configure_Bfd_BfdTemplate)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BfdTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BfdTemplate", key)
	}

	t.BfdTemplate[key] = &NokiaConf_Configure_Bfd_BfdTemplate{
		Name: &Name,
	}

	return t.BfdTemplate[key], nil
}

// RenameBfdTemplate renames an entry in the list BfdTemplate within
// the NokiaConf_Configure_Bfd struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Bfd) RenameBfdTemplate(oldK, newK string) error {
	if _, ok := t.BfdTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in BfdTemplate", newK)
	}

	e, ok := t.BfdTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BfdTemplate", oldK)
	}
	e.Name = &newK

	t.BfdTemplate[newK] = e
	delete(t.BfdTemplate, oldK)
	return nil
}

// GetOrCreateBfdTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Bfd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Bfd) GetOrCreateBfdTemplate(Name string) *NokiaConf_Configure_Bfd_BfdTemplate {

	key := Name

	if v, ok := t.BfdTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBfdTemplate(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBfdTemplate got unexpected error: %v", err))
	}
	return v
}

// GetBfdTemplate retrieves the value with the specified key from
// the BfdTemplate map field of NokiaConf_Configure_Bfd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Bfd) GetBfdTemplate(Name string) *NokiaConf_Configure_Bfd_BfdTemplate {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.BfdTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteBfdTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Bfd. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Bfd) DeleteBfdTemplate(Name string) {
	key := Name

	delete(t.BfdTemplate, key)
}

// AppendBfdTemplate appends the supplied NokiaConf_Configure_Bfd_BfdTemplate struct to the
// list BfdTemplate of NokiaConf_Configure_Bfd. If the key value(s) specified in
// the supplied NokiaConf_Configure_Bfd_BfdTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Bfd) AppendBfdTemplate(v *NokiaConf_Configure_Bfd_BfdTemplate) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BfdTemplate == nil {
		t.BfdTemplate = make(map[string]*NokiaConf_Configure_Bfd_BfdTemplate)
	}

	if _, ok := t.BfdTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list BfdTemplate %v", key)
	}

	t.BfdTemplate[key] = v
	return nil
}

// GetOrCreateSeamlessBfd retrieves the value of the SeamlessBfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Bfd) GetOrCreateSeamlessBfd() *NokiaConf_Configure_Bfd_SeamlessBfd {
	if t.SeamlessBfd != nil {
		return t.SeamlessBfd
	}
	t.SeamlessBfd = &NokiaConf_Configure_Bfd_SeamlessBfd{}
	return t.SeamlessBfd
}

// GetSeamlessBfd returns the value of the SeamlessBfd struct pointer
// from NokiaConf_Configure_Bfd. If the receiver or the field SeamlessBfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Bfd) GetSeamlessBfd() *NokiaConf_Configure_Bfd_SeamlessBfd {
	if t != nil && t.SeamlessBfd != nil {
		return t.SeamlessBfd
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bfd) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bfd) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SeamlessBfd.PopulateDefaults()
	for _, e := range t.BfdTemplate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Bfd) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Bfd.
func (*NokiaConf_Configure_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Bfd_BfdTemplate represents the /nokia-conf/configure/bfd/bfd-template YANG schema element.
type NokiaConf_Configure_Bfd_BfdTemplate struct {
	ApplyGroups        []string                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	EchoReceive        *uint32                                    `path:"echo-receive" module:"nokia-conf"`
	Multiplier         *uint32                                    `path:"multiplier" module:"nokia-conf"`
	Name               *string                                    `path:"name" module:"nokia-conf"`
	ReceiveInterval    *uint32                                    `path:"receive-interval" module:"nokia-conf"`
	TransmitInterval   *uint32                                    `path:"transmit-interval" module:"nokia-conf"`
	Type               E_NokiaConf_Configure_Bfd_BfdTemplate_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Bfd_BfdTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Bfd_BfdTemplate) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Bfd_BfdTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bfd_BfdTemplate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Bfd_BfdTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bfd_BfdTemplate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEchoReceive retrieves the value of the leaf EchoReceive from the NokiaConf_Configure_Bfd_BfdTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoReceive is set, it can
// safely use t.GetEchoReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoReceive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bfd_BfdTemplate) GetEchoReceive() uint32 {
	if t == nil || t.EchoReceive == nil {
		return 100
	}
	return *t.EchoReceive
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Bfd_BfdTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bfd_BfdTemplate) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Bfd_BfdTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bfd_BfdTemplate) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetReceiveInterval retrieves the value of the leaf ReceiveInterval from the NokiaConf_Configure_Bfd_BfdTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveInterval is set, it can
// safely use t.GetReceiveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bfd_BfdTemplate) GetReceiveInterval() uint32 {
	if t == nil || t.ReceiveInterval == nil {
		return 100
	}
	return *t.ReceiveInterval
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Bfd_BfdTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bfd_BfdTemplate) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 100
	}
	return *t.TransmitInterval
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Bfd_BfdTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bfd_BfdTemplate) GetType() E_NokiaConf_Configure_Bfd_BfdTemplate_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Bfd_BfdTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Bfd_BfdTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EchoReceive == nil {
		var v uint32 = 100
		t.EchoReceive = &v
	}
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
	if t.ReceiveInterval == nil {
		var v uint32 = 100
		t.ReceiveInterval = &v
	}
	if t.TransmitInterval == nil {
		var v uint32 = 100
		t.TransmitInterval = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Bfd_BfdTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Bfd_BfdTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bfd_BfdTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Bfd_BfdTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bfd_BfdTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Bfd_BfdTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Bfd_BfdTemplate.
func (*NokiaConf_Configure_Bfd_BfdTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Bfd_SeamlessBfd represents the /nokia-conf/configure/bfd/seamless-bfd YANG schema element.
type NokiaConf_Configure_Bfd_SeamlessBfd struct {
	Reflector map[string]*NokiaConf_Configure_Bfd_SeamlessBfd_Reflector `path:"reflector" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Bfd_SeamlessBfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Bfd_SeamlessBfd) IsYANGGoStruct() {}

// NewReflector creates a new entry in the Reflector list of the
// NokiaConf_Configure_Bfd_SeamlessBfd struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd) NewReflector(Name string) (*NokiaConf_Configure_Bfd_SeamlessBfd_Reflector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Reflector == nil {
		t.Reflector = make(map[string]*NokiaConf_Configure_Bfd_SeamlessBfd_Reflector)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Reflector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Reflector", key)
	}

	t.Reflector[key] = &NokiaConf_Configure_Bfd_SeamlessBfd_Reflector{
		Name: &Name,
	}

	return t.Reflector[key], nil
}

// RenameReflector renames an entry in the list Reflector within
// the NokiaConf_Configure_Bfd_SeamlessBfd struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd) RenameReflector(oldK, newK string) error {
	if _, ok := t.Reflector[newK]; ok {
		return fmt.Errorf("key %v already exists in Reflector", newK)
	}

	e, ok := t.Reflector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Reflector", oldK)
	}
	e.Name = &newK

	t.Reflector[newK] = e
	delete(t.Reflector, oldK)
	return nil
}

// GetOrCreateReflector retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Bfd_SeamlessBfd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd) GetOrCreateReflector(Name string) *NokiaConf_Configure_Bfd_SeamlessBfd_Reflector {

	key := Name

	if v, ok := t.Reflector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewReflector(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateReflector got unexpected error: %v", err))
	}
	return v
}

// GetReflector retrieves the value with the specified key from
// the Reflector map field of NokiaConf_Configure_Bfd_SeamlessBfd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd) GetReflector(Name string) *NokiaConf_Configure_Bfd_SeamlessBfd_Reflector {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Reflector[key]; ok {
		return lm
	}
	return nil
}

// DeleteReflector deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Bfd_SeamlessBfd. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd) DeleteReflector(Name string) {
	key := Name

	delete(t.Reflector, key)
}

// AppendReflector appends the supplied NokiaConf_Configure_Bfd_SeamlessBfd_Reflector struct to the
// list Reflector of NokiaConf_Configure_Bfd_SeamlessBfd. If the key value(s) specified in
// the supplied NokiaConf_Configure_Bfd_SeamlessBfd_Reflector already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd) AppendReflector(v *NokiaConf_Configure_Bfd_SeamlessBfd_Reflector) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Reflector == nil {
		t.Reflector = make(map[string]*NokiaConf_Configure_Bfd_SeamlessBfd_Reflector)
	}

	if _, ok := t.Reflector[key]; ok {
		return fmt.Errorf("duplicate key for list Reflector %v", key)
	}

	t.Reflector[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Bfd_SeamlessBfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Reflector {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Bfd_SeamlessBfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Bfd_SeamlessBfd.
func (*NokiaConf_Configure_Bfd_SeamlessBfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Bfd_SeamlessBfd_Reflector represents the /nokia-conf/configure/bfd/seamless-bfd/reflector YANG schema element.
type NokiaConf_Configure_Bfd_SeamlessBfd_Reflector struct {
	AdminState         E_NokiaTypesSros_AdminState                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                    `path:"description" module:"nokia-conf"`
	Discriminator      *uint32                                                    `path:"discriminator" module:"nokia-conf"`
	LocalState         E_NokiaConf_Configure_Bfd_SeamlessBfd_Reflector_LocalState `path:"local-state" module:"nokia-conf"`
	Name               *string                                                    `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Bfd_SeamlessBfd_Reflector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Bfd_SeamlessBfd_Reflector) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Bfd_SeamlessBfd_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd_Reflector) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Bfd_SeamlessBfd_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd_Reflector) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Bfd_SeamlessBfd_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd_Reflector) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Bfd_SeamlessBfd_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd_Reflector) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDiscriminator retrieves the value of the leaf Discriminator from the NokiaConf_Configure_Bfd_SeamlessBfd_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Discriminator is set, it can
// safely use t.GetDiscriminator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Discriminator == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd_Reflector) GetDiscriminator() uint32 {
	if t == nil || t.Discriminator == nil {
		return 0
	}
	return *t.Discriminator
}

// GetLocalState retrieves the value of the leaf LocalState from the NokiaConf_Configure_Bfd_SeamlessBfd_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalState is set, it can
// safely use t.GetLocalState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd_Reflector) GetLocalState() E_NokiaConf_Configure_Bfd_SeamlessBfd_Reflector_LocalState {
	if t == nil || t.LocalState == 0 {
		return NokiaConf_Configure_Bfd_SeamlessBfd_Reflector_LocalState_up
	}
	return t.LocalState
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Bfd_SeamlessBfd_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd_Reflector) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Bfd_SeamlessBfd_Reflector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd_Reflector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.LocalState == 0 {
		t.LocalState = NokiaConf_Configure_Bfd_SeamlessBfd_Reflector_LocalState_up
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Bfd_SeamlessBfd_Reflector struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd_Reflector) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd_Reflector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Bfd_SeamlessBfd_Reflector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd_Reflector) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Bfd_SeamlessBfd_Reflector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Bfd_SeamlessBfd_Reflector.
func (*NokiaConf_Configure_Bfd_SeamlessBfd_Reflector) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Bmp represents the /nokia-conf/configure/bmp YANG schema element.
type NokiaConf_Configure_Bmp struct {
	AdminState         E_NokiaTypesSros_AdminState                 `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Collector          *NokiaConf_Configure_Bmp_Collector          `path:"collector" module:"nokia-conf"`
	Station            map[string]*NokiaConf_Configure_Bmp_Station `path:"station" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Bmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Bmp) IsYANGGoStruct() {}

// NewStation creates a new entry in the Station list of the
// NokiaConf_Configure_Bmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Bmp) NewStation(Name string) (*NokiaConf_Configure_Bmp_Station, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Bmp_Station)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Station[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Station", key)
	}

	t.Station[key] = &NokiaConf_Configure_Bmp_Station{
		Name: &Name,
	}

	return t.Station[key], nil
}

// RenameStation renames an entry in the list Station within
// the NokiaConf_Configure_Bmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Bmp) RenameStation(oldK, newK string) error {
	if _, ok := t.Station[newK]; ok {
		return fmt.Errorf("key %v already exists in Station", newK)
	}

	e, ok := t.Station[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Station", oldK)
	}
	e.Name = &newK

	t.Station[newK] = e
	delete(t.Station, oldK)
	return nil
}

// GetOrCreateStation retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Bmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Bmp) GetOrCreateStation(Name string) *NokiaConf_Configure_Bmp_Station {

	key := Name

	if v, ok := t.Station[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStation(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStation got unexpected error: %v", err))
	}
	return v
}

// GetStation retrieves the value with the specified key from
// the Station map field of NokiaConf_Configure_Bmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Bmp) GetStation(Name string) *NokiaConf_Configure_Bmp_Station {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Station[key]; ok {
		return lm
	}
	return nil
}

// DeleteStation deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Bmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Bmp) DeleteStation(Name string) {
	key := Name

	delete(t.Station, key)
}

// AppendStation appends the supplied NokiaConf_Configure_Bmp_Station struct to the
// list Station of NokiaConf_Configure_Bmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Bmp_Station already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Bmp) AppendStation(v *NokiaConf_Configure_Bmp_Station) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Bmp_Station)
	}

	if _, ok := t.Station[key]; ok {
		return fmt.Errorf("duplicate key for list Station %v", key)
	}

	t.Station[key] = v
	return nil
}

// GetOrCreateCollector retrieves the value of the Collector field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Bmp) GetOrCreateCollector() *NokiaConf_Configure_Bmp_Collector {
	if t.Collector != nil {
		return t.Collector
	}
	t.Collector = &NokiaConf_Configure_Bmp_Collector{}
	return t.Collector
}

// GetCollector returns the value of the Collector struct pointer
// from NokiaConf_Configure_Bmp. If the receiver or the field Collector is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Bmp) GetCollector() *NokiaConf_Configure_Bmp_Collector {
	if t != nil && t.Collector != nil {
		return t.Collector
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Bmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Bmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Bmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Bmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Bmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Collector.PopulateDefaults()
	for _, e := range t.Station {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Bmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Bmp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Bmp.
func (*NokiaConf_Configure_Bmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Bmp_Collector represents the /nokia-conf/configure/bmp/collector YANG schema element.
type NokiaConf_Configure_Bmp_Collector struct {
	AdminState         E_NokiaTypesSros_AdminState                   `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Connection         *NokiaConf_Configure_Bmp_Collector_Connection `path:"connection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Bmp_Collector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Bmp_Collector) IsYANGGoStruct() {}

// GetOrCreateConnection retrieves the value of the Connection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Bmp_Collector) GetOrCreateConnection() *NokiaConf_Configure_Bmp_Collector_Connection {
	if t.Connection != nil {
		return t.Connection
	}
	t.Connection = &NokiaConf_Configure_Bmp_Collector_Connection{}
	return t.Connection
}

// GetConnection returns the value of the Connection struct pointer
// from NokiaConf_Configure_Bmp_Collector. If the receiver or the field Connection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Bmp_Collector) GetConnection() *NokiaConf_Configure_Bmp_Collector_Connection {
	if t != nil && t.Connection != nil {
		return t.Connection
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Bmp_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Collector) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Bmp_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Collector) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Bmp_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Collector) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Bmp_Collector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Bmp_Collector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Connection.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bmp_Collector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Bmp_Collector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bmp_Collector) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Bmp_Collector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Bmp_Collector.
func (*NokiaConf_Configure_Bmp_Collector) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Bmp_Collector_Connection represents the /nokia-conf/configure/bmp/collector/connection YANG schema element.
type NokiaConf_Configure_Bmp_Collector_Connection struct {
	Ipv4 *NokiaConf_Configure_Bmp_Collector_Connection_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6 *NokiaConf_Configure_Bmp_Collector_Connection_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Bmp_Collector_Connection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Bmp_Collector_Connection) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Bmp_Collector_Connection) GetOrCreateIpv4() *NokiaConf_Configure_Bmp_Collector_Connection_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Bmp_Collector_Connection_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Bmp_Collector_Connection) GetOrCreateIpv6() *NokiaConf_Configure_Bmp_Collector_Connection_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Bmp_Collector_Connection_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Bmp_Collector_Connection. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Bmp_Collector_Connection) GetIpv4() *NokiaConf_Configure_Bmp_Collector_Connection_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Bmp_Collector_Connection. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Bmp_Collector_Connection) GetIpv6() *NokiaConf_Configure_Bmp_Collector_Connection_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Bmp_Collector_Connection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Bmp_Collector_Connection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bmp_Collector_Connection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Bmp_Collector_Connection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bmp_Collector_Connection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Bmp_Collector_Connection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Bmp_Collector_Connection.
func (*NokiaConf_Configure_Bmp_Collector_Connection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Bmp_Collector_Connection_Ipv4 represents the /nokia-conf/configure/bmp/collector/connection/ipv4 YANG schema element.
type NokiaConf_Configure_Bmp_Collector_Connection_Ipv4 struct {
	Address *string `path:"address" module:"nokia-conf"`
	Port    *int32  `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Bmp_Collector_Connection_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Bmp_Collector_Connection_Ipv4) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Bmp_Collector_Connection_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Collector_Connection_Ipv4) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Bmp_Collector_Connection_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Collector_Connection_Ipv4) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 4210
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Bmp_Collector_Connection_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Bmp_Collector_Connection_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v int32 = 4210
		t.Port = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bmp_Collector_Connection_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Bmp_Collector_Connection_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bmp_Collector_Connection_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Bmp_Collector_Connection_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Bmp_Collector_Connection_Ipv4.
func (*NokiaConf_Configure_Bmp_Collector_Connection_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Bmp_Collector_Connection_Ipv6 represents the /nokia-conf/configure/bmp/collector/connection/ipv6 YANG schema element.
type NokiaConf_Configure_Bmp_Collector_Connection_Ipv6 struct {
	Address *string `path:"address" module:"nokia-conf"`
	Port    *int32  `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Bmp_Collector_Connection_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Bmp_Collector_Connection_Ipv6) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Bmp_Collector_Connection_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Collector_Connection_Ipv6) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Bmp_Collector_Connection_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Collector_Connection_Ipv6) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 4210
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Bmp_Collector_Connection_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Bmp_Collector_Connection_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v int32 = 4210
		t.Port = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bmp_Collector_Connection_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Bmp_Collector_Connection_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bmp_Collector_Connection_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Bmp_Collector_Connection_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Bmp_Collector_Connection_Ipv6.
func (*NokiaConf_Configure_Bmp_Collector_Connection_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Bmp_Station represents the /nokia-conf/configure/bmp/station YANG schema element.
type NokiaConf_Configure_Bmp_Station struct {
	AdminState          E_NokiaTypesSros_AdminState                 `path:"admin-state" module:"nokia-conf"`
	ApplyGroups         []string                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Connection          *NokiaConf_Configure_Bmp_Station_Connection `path:"connection" module:"nokia-conf"`
	Description         *string                                     `path:"description" module:"nokia-conf"`
	Family              *NokiaConf_Configure_Bmp_Station_Family     `path:"family" module:"nokia-conf"`
	InitiationMessage   *string                                     `path:"initiation-message" module:"nokia-conf"`
	Name                *string                                     `path:"name" module:"nokia-conf"`
	ReportLocalRoutes   *bool                                       `path:"report-local-routes" module:"nokia-conf"`
	StatsReportInterval *uint32                                     `path:"stats-report-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Bmp_Station implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Bmp_Station) IsYANGGoStruct() {}

// GetOrCreateConnection retrieves the value of the Connection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Bmp_Station) GetOrCreateConnection() *NokiaConf_Configure_Bmp_Station_Connection {
	if t.Connection != nil {
		return t.Connection
	}
	t.Connection = &NokiaConf_Configure_Bmp_Station_Connection{}
	return t.Connection
}

// GetOrCreateFamily retrieves the value of the Family field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Bmp_Station) GetOrCreateFamily() *NokiaConf_Configure_Bmp_Station_Family {
	if t.Family != nil {
		return t.Family
	}
	t.Family = &NokiaConf_Configure_Bmp_Station_Family{}
	return t.Family
}

// GetConnection returns the value of the Connection struct pointer
// from NokiaConf_Configure_Bmp_Station. If the receiver or the field Connection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Bmp_Station) GetConnection() *NokiaConf_Configure_Bmp_Station_Connection {
	if t != nil && t.Connection != nil {
		return t.Connection
	}
	return nil
}

// GetFamily returns the value of the Family struct pointer
// from NokiaConf_Configure_Bmp_Station. If the receiver or the field Family is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Bmp_Station) GetFamily() *NokiaConf_Configure_Bmp_Station_Family {
	if t != nil && t.Family != nil {
		return t.Family
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Bmp_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Bmp_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Bmp_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Bmp_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInitiationMessage retrieves the value of the leaf InitiationMessage from the NokiaConf_Configure_Bmp_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitiationMessage is set, it can
// safely use t.GetInitiationMessage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitiationMessage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station) GetInitiationMessage() string {
	if t == nil || t.InitiationMessage == nil {
		return ""
	}
	return *t.InitiationMessage
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Bmp_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetReportLocalRoutes retrieves the value of the leaf ReportLocalRoutes from the NokiaConf_Configure_Bmp_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReportLocalRoutes is set, it can
// safely use t.GetReportLocalRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReportLocalRoutes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station) GetReportLocalRoutes() bool {
	if t == nil || t.ReportLocalRoutes == nil {
		return false
	}
	return *t.ReportLocalRoutes
}

// GetStatsReportInterval retrieves the value of the leaf StatsReportInterval from the NokiaConf_Configure_Bmp_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatsReportInterval is set, it can
// safely use t.GetStatsReportInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatsReportInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station) GetStatsReportInterval() uint32 {
	if t == nil || t.StatsReportInterval == nil {
		return 0
	}
	return *t.StatsReportInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Bmp_Station
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Bmp_Station) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ReportLocalRoutes == nil {
		var v bool = false
		t.ReportLocalRoutes = &v
	}
	t.Connection.PopulateDefaults()
	t.Family.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Bmp_Station struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Bmp_Station) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bmp_Station) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Bmp_Station"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bmp_Station) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Bmp_Station) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Bmp_Station.
func (*NokiaConf_Configure_Bmp_Station) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Bmp_Station_Connection represents the /nokia-conf/configure/bmp/station/connection YANG schema element.
type NokiaConf_Configure_Bmp_Station_Connection struct {
	ConnectRetry   *uint32                                                    `path:"connect-retry" module:"nokia-conf"`
	LocalAddress   *string                                                    `path:"local-address" module:"nokia-conf"`
	RouterInstance *string                                                    `path:"router-instance" module:"nokia-conf"`
	StationAddress *NokiaConf_Configure_Bmp_Station_Connection_StationAddress `path:"station-address" module:"nokia-conf"`
	TcpKeepalive   *NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive   `path:"tcp-keepalive" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Bmp_Station_Connection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Bmp_Station_Connection) IsYANGGoStruct() {}

// GetOrCreateStationAddress retrieves the value of the StationAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Bmp_Station_Connection) GetOrCreateStationAddress() *NokiaConf_Configure_Bmp_Station_Connection_StationAddress {
	if t.StationAddress != nil {
		return t.StationAddress
	}
	t.StationAddress = &NokiaConf_Configure_Bmp_Station_Connection_StationAddress{}
	return t.StationAddress
}

// GetOrCreateTcpKeepalive retrieves the value of the TcpKeepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Bmp_Station_Connection) GetOrCreateTcpKeepalive() *NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive {
	if t.TcpKeepalive != nil {
		return t.TcpKeepalive
	}
	t.TcpKeepalive = &NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive{}
	return t.TcpKeepalive
}

// GetStationAddress returns the value of the StationAddress struct pointer
// from NokiaConf_Configure_Bmp_Station_Connection. If the receiver or the field StationAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Bmp_Station_Connection) GetStationAddress() *NokiaConf_Configure_Bmp_Station_Connection_StationAddress {
	if t != nil && t.StationAddress != nil {
		return t.StationAddress
	}
	return nil
}

// GetTcpKeepalive returns the value of the TcpKeepalive struct pointer
// from NokiaConf_Configure_Bmp_Station_Connection. If the receiver or the field TcpKeepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Bmp_Station_Connection) GetTcpKeepalive() *NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive {
	if t != nil && t.TcpKeepalive != nil {
		return t.TcpKeepalive
	}
	return nil
}

// GetConnectRetry retrieves the value of the leaf ConnectRetry from the NokiaConf_Configure_Bmp_Station_Connection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectRetry is set, it can
// safely use t.GetConnectRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Connection) GetConnectRetry() uint32 {
	if t == nil || t.ConnectRetry == nil {
		return 120
	}
	return *t.ConnectRetry
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Bmp_Station_Connection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Connection) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Bmp_Station_Connection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Connection) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "Base"
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Bmp_Station_Connection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Bmp_Station_Connection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ConnectRetry == nil {
		var v uint32 = 120
		t.ConnectRetry = &v
	}
	if t.RouterInstance == nil {
		var v string = "Base"
		t.RouterInstance = &v
	}
	t.StationAddress.PopulateDefaults()
	t.TcpKeepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bmp_Station_Connection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Bmp_Station_Connection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bmp_Station_Connection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Bmp_Station_Connection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Bmp_Station_Connection.
func (*NokiaConf_Configure_Bmp_Station_Connection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Bmp_Station_Connection_StationAddress represents the /nokia-conf/configure/bmp/station/connection/station-address YANG schema element.
type NokiaConf_Configure_Bmp_Station_Connection_StationAddress struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
	Port      *int32  `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Bmp_Station_Connection_StationAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Bmp_Station_Connection_StationAddress) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Bmp_Station_Connection_StationAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Connection_StationAddress) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Bmp_Station_Connection_StationAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Connection_StationAddress) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Bmp_Station_Connection_StationAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Bmp_Station_Connection_StationAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bmp_Station_Connection_StationAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Bmp_Station_Connection_StationAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bmp_Station_Connection_StationAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Bmp_Station_Connection_StationAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Bmp_Station_Connection_StationAddress.
func (*NokiaConf_Configure_Bmp_Station_Connection_StationAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive represents the /nokia-conf/configure/bmp/station/connection/tcp-keepalive YANG schema element.
type NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive struct {
	AdminState   E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	KeepCount    *uint32                     `path:"keep-count" module:"nokia-conf"`
	KeepIdle     *uint32                     `path:"keep-idle" module:"nokia-conf"`
	KeepInterval *uint32                     `path:"keep-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetKeepCount retrieves the value of the leaf KeepCount from the NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepCount is set, it can
// safely use t.GetKeepCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive) GetKeepCount() uint32 {
	if t == nil || t.KeepCount == nil {
		return 4
	}
	return *t.KeepCount
}

// GetKeepIdle retrieves the value of the leaf KeepIdle from the NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepIdle is set, it can
// safely use t.GetKeepIdle() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepIdle == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive) GetKeepIdle() uint32 {
	if t == nil || t.KeepIdle == nil {
		return 600
	}
	return *t.KeepIdle
}

// GetKeepInterval retrieves the value of the leaf KeepInterval from the NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepInterval is set, it can
// safely use t.GetKeepInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive) GetKeepInterval() uint32 {
	if t == nil || t.KeepInterval == nil {
		return 15
	}
	return *t.KeepInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.KeepCount == nil {
		var v uint32 = 4
		t.KeepCount = &v
	}
	if t.KeepIdle == nil {
		var v uint32 = 600
		t.KeepIdle = &v
	}
	if t.KeepInterval == nil {
		var v uint32 = 15
		t.KeepInterval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive.
func (*NokiaConf_Configure_Bmp_Station_Connection_TcpKeepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Bmp_Station_Family represents the /nokia-conf/configure/bmp/station/family YANG schema element.
type NokiaConf_Configure_Bmp_Station_Family struct {
	Evpn         *bool `path:"evpn" module:"nokia-conf"`
	Ipv4         *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6         *bool `path:"ipv6" module:"nokia-conf"`
	L2Vpn        *bool `path:"l2-vpn" module:"nokia-conf"`
	LabelIpv4    *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6    *bool `path:"label-ipv6" module:"nokia-conf"`
	McastIpv4    *bool `path:"mcast-ipv4" module:"nokia-conf"`
	McastIpv6    *bool `path:"mcast-ipv6" module:"nokia-conf"`
	McastVpnIpv4 *bool `path:"mcast-vpn-ipv4" module:"nokia-conf"`
	McastVpnIpv6 *bool `path:"mcast-vpn-ipv6" module:"nokia-conf"`
	VpnIpv4      *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6      *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Bmp_Station_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Bmp_Station_Family) IsYANGGoStruct() {}

// GetEvpn retrieves the value of the leaf Evpn from the NokiaConf_Configure_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evpn is set, it can
// safely use t.GetEvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Family) GetEvpn() bool {
	if t == nil || t.Evpn == nil {
		return false
	}
	return *t.Evpn
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Family) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return true
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Family) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetL2Vpn retrieves the value of the leaf L2Vpn from the NokiaConf_Configure_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Vpn is set, it can
// safely use t.GetL2Vpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Vpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Family) GetL2Vpn() bool {
	if t == nil || t.L2Vpn == nil {
		return false
	}
	return *t.L2Vpn
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Family) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Family) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetMcastIpv4 retrieves the value of the leaf McastIpv4 from the NokiaConf_Configure_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv4 is set, it can
// safely use t.GetMcastIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Family) GetMcastIpv4() bool {
	if t == nil || t.McastIpv4 == nil {
		return false
	}
	return *t.McastIpv4
}

// GetMcastIpv6 retrieves the value of the leaf McastIpv6 from the NokiaConf_Configure_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv6 is set, it can
// safely use t.GetMcastIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Family) GetMcastIpv6() bool {
	if t == nil || t.McastIpv6 == nil {
		return false
	}
	return *t.McastIpv6
}

// GetMcastVpnIpv4 retrieves the value of the leaf McastVpnIpv4 from the NokiaConf_Configure_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastVpnIpv4 is set, it can
// safely use t.GetMcastVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastVpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Family) GetMcastVpnIpv4() bool {
	if t == nil || t.McastVpnIpv4 == nil {
		return false
	}
	return *t.McastVpnIpv4
}

// GetMcastVpnIpv6 retrieves the value of the leaf McastVpnIpv6 from the NokiaConf_Configure_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastVpnIpv6 is set, it can
// safely use t.GetMcastVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastVpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Family) GetMcastVpnIpv6() bool {
	if t == nil || t.McastVpnIpv6 == nil {
		return false
	}
	return *t.McastVpnIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Family) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Bmp_Station_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Bmp_Station_Family) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Bmp_Station_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Bmp_Station_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Evpn == nil {
		var v bool = false
		t.Evpn = &v
	}
	if t.Ipv4 == nil {
		var v bool = true
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.L2Vpn == nil {
		var v bool = false
		t.L2Vpn = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.McastIpv4 == nil {
		var v bool = false
		t.McastIpv4 = &v
	}
	if t.McastIpv6 == nil {
		var v bool = false
		t.McastIpv6 = &v
	}
	if t.McastVpnIpv4 == nil {
		var v bool = false
		t.McastVpnIpv4 = &v
	}
	if t.McastVpnIpv6 == nil {
		var v bool = false
		t.McastVpnIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bmp_Station_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Bmp_Station_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Bmp_Station_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Bmp_Station_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Bmp_Station_Family.
func (*NokiaConf_Configure_Bmp_Station_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_CallTrace represents the /nokia-conf/configure/call-trace YANG schema element.
type NokiaConf_Configure_CallTrace struct {
	ApplyGroups        []string                                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Buffering          *bool                                                                                             `path:"buffering" module:"nokia-conf"`
	Location           map[E_NokiaConf_Configure_CallTrace_Location_LocationType]*NokiaConf_Configure_CallTrace_Location `path:"location" module:"nokia-conf"`
	MaxFilesNumber     *uint32                                                                                           `path:"max-files-number" module:"nokia-conf"`
	PrimaryCf          E_NokiaConf_Configure_CallTrace_PrimaryCf                                                         `path:"primary-cf" module:"nokia-conf"`
	TraceProfile       map[string]*NokiaConf_Configure_CallTrace_TraceProfile                                            `path:"trace-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_CallTrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_CallTrace) IsYANGGoStruct() {}

// NewLocation creates a new entry in the Location list of the
// NokiaConf_Configure_CallTrace struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_CallTrace) NewLocation(LocationType E_NokiaConf_Configure_CallTrace_Location_LocationType) (*NokiaConf_Configure_CallTrace_Location, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Location == nil {
		t.Location = make(map[E_NokiaConf_Configure_CallTrace_Location_LocationType]*NokiaConf_Configure_CallTrace_Location)
	}

	key := LocationType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Location[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Location", key)
	}

	t.Location[key] = &NokiaConf_Configure_CallTrace_Location{
		LocationType: LocationType,
	}

	return t.Location[key], nil
}

// RenameLocation renames an entry in the list Location within
// the NokiaConf_Configure_CallTrace struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_CallTrace) RenameLocation(oldK, newK E_NokiaConf_Configure_CallTrace_Location_LocationType) error {
	if _, ok := t.Location[newK]; ok {
		return fmt.Errorf("key %v already exists in Location", newK)
	}

	e, ok := t.Location[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Location", oldK)
	}
	e.LocationType = newK

	t.Location[newK] = e
	delete(t.Location, oldK)
	return nil
}

// GetOrCreateLocation retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_CallTrace. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_CallTrace) GetOrCreateLocation(LocationType E_NokiaConf_Configure_CallTrace_Location_LocationType) *NokiaConf_Configure_CallTrace_Location {

	key := LocationType

	if v, ok := t.Location[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocation(LocationType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocation got unexpected error: %v", err))
	}
	return v
}

// GetLocation retrieves the value with the specified key from
// the Location map field of NokiaConf_Configure_CallTrace. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_CallTrace) GetLocation(LocationType E_NokiaConf_Configure_CallTrace_Location_LocationType) *NokiaConf_Configure_CallTrace_Location {

	if t == nil {
		return nil
	}

	key := LocationType

	if lm, ok := t.Location[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocation deletes the value with the specified keys from
// the receiver NokiaConf_Configure_CallTrace. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_CallTrace) DeleteLocation(LocationType E_NokiaConf_Configure_CallTrace_Location_LocationType) {
	key := LocationType

	delete(t.Location, key)
}

// AppendLocation appends the supplied NokiaConf_Configure_CallTrace_Location struct to the
// list Location of NokiaConf_Configure_CallTrace. If the key value(s) specified in
// the supplied NokiaConf_Configure_CallTrace_Location already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_CallTrace) AppendLocation(v *NokiaConf_Configure_CallTrace_Location) error {
	key := v.LocationType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Location == nil {
		t.Location = make(map[E_NokiaConf_Configure_CallTrace_Location_LocationType]*NokiaConf_Configure_CallTrace_Location)
	}

	if _, ok := t.Location[key]; ok {
		return fmt.Errorf("duplicate key for list Location %v", key)
	}

	t.Location[key] = v
	return nil
}

// NewTraceProfile creates a new entry in the TraceProfile list of the
// NokiaConf_Configure_CallTrace struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_CallTrace) NewTraceProfile(Name string) (*NokiaConf_Configure_CallTrace_TraceProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TraceProfile == nil {
		t.TraceProfile = make(map[string]*NokiaConf_Configure_CallTrace_TraceProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TraceProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TraceProfile", key)
	}

	t.TraceProfile[key] = &NokiaConf_Configure_CallTrace_TraceProfile{
		Name: &Name,
	}

	return t.TraceProfile[key], nil
}

// RenameTraceProfile renames an entry in the list TraceProfile within
// the NokiaConf_Configure_CallTrace struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_CallTrace) RenameTraceProfile(oldK, newK string) error {
	if _, ok := t.TraceProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in TraceProfile", newK)
	}

	e, ok := t.TraceProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TraceProfile", oldK)
	}
	e.Name = &newK

	t.TraceProfile[newK] = e
	delete(t.TraceProfile, oldK)
	return nil
}

// GetOrCreateTraceProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_CallTrace. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_CallTrace) GetOrCreateTraceProfile(Name string) *NokiaConf_Configure_CallTrace_TraceProfile {

	key := Name

	if v, ok := t.TraceProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTraceProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTraceProfile got unexpected error: %v", err))
	}
	return v
}

// GetTraceProfile retrieves the value with the specified key from
// the TraceProfile map field of NokiaConf_Configure_CallTrace. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_CallTrace) GetTraceProfile(Name string) *NokiaConf_Configure_CallTrace_TraceProfile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.TraceProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteTraceProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_CallTrace. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_CallTrace) DeleteTraceProfile(Name string) {
	key := Name

	delete(t.TraceProfile, key)
}

// AppendTraceProfile appends the supplied NokiaConf_Configure_CallTrace_TraceProfile struct to the
// list TraceProfile of NokiaConf_Configure_CallTrace. If the key value(s) specified in
// the supplied NokiaConf_Configure_CallTrace_TraceProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_CallTrace) AppendTraceProfile(v *NokiaConf_Configure_CallTrace_TraceProfile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TraceProfile == nil {
		t.TraceProfile = make(map[string]*NokiaConf_Configure_CallTrace_TraceProfile)
	}

	if _, ok := t.TraceProfile[key]; ok {
		return fmt.Errorf("duplicate key for list TraceProfile %v", key)
	}

	t.TraceProfile[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_CallTrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_CallTrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBuffering retrieves the value of the leaf Buffering from the NokiaConf_Configure_CallTrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Buffering is set, it can
// safely use t.GetBuffering() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Buffering == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace) GetBuffering() bool {
	if t == nil || t.Buffering == nil {
		return false
	}
	return *t.Buffering
}

// GetMaxFilesNumber retrieves the value of the leaf MaxFilesNumber from the NokiaConf_Configure_CallTrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxFilesNumber is set, it can
// safely use t.GetMaxFilesNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxFilesNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace) GetMaxFilesNumber() uint32 {
	if t == nil || t.MaxFilesNumber == nil {
		return 200
	}
	return *t.MaxFilesNumber
}

// GetPrimaryCf retrieves the value of the leaf PrimaryCf from the NokiaConf_Configure_CallTrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryCf is set, it can
// safely use t.GetPrimaryCf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryCf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace) GetPrimaryCf() E_NokiaConf_Configure_CallTrace_PrimaryCf {
	if t == nil || t.PrimaryCf == 0 {
		return NokiaConf_Configure_CallTrace_PrimaryCf_cf1
	}
	return t.PrimaryCf
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_CallTrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_CallTrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Buffering == nil {
		var v bool = false
		t.Buffering = &v
	}
	if t.MaxFilesNumber == nil {
		var v uint32 = 200
		t.MaxFilesNumber = &v
	}
	if t.PrimaryCf == 0 {
		t.PrimaryCf = NokiaConf_Configure_CallTrace_PrimaryCf_cf1
	}
	for _, e := range t.Location {
		e.PopulateDefaults()
	}
	for _, e := range t.TraceProfile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_CallTrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_CallTrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_CallTrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_CallTrace) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_CallTrace.
func (*NokiaConf_Configure_CallTrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_CallTrace_Location represents the /nokia-conf/configure/call-trace/location YANG schema element.
type NokiaConf_Configure_CallTrace_Location struct {
	AdminState         E_NokiaTypesSros_AdminState                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	LocationType       E_NokiaConf_Configure_CallTrace_Location_LocationType  `path:"location-type" module:"nokia-conf"`
	SizeLimit          NokiaConf_Configure_CallTrace_Location_SizeLimit_Union `path:"size-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_CallTrace_Location implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_CallTrace_Location) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_CallTrace_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_Location) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_CallTrace_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_Location) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_CallTrace_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_Location) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLocationType retrieves the value of the leaf LocationType from the NokiaConf_Configure_CallTrace_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocationType is set, it can
// safely use t.GetLocationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_Location) GetLocationType() E_NokiaConf_Configure_CallTrace_Location_LocationType {
	if t == nil || t.LocationType == 0 {
		return 0
	}
	return t.LocationType
}

// GetSizeLimit retrieves the value of the leaf SizeLimit from the NokiaConf_Configure_CallTrace_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeLimit is set, it can
// safely use t.GetSizeLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_Location) GetSizeLimit() NokiaConf_Configure_CallTrace_Location_SizeLimit_Union {
	if t == nil || t.SizeLimit == nil {
		return UnionUint32(1000)
	}
	return t.SizeLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_CallTrace_Location
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_CallTrace_Location) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.SizeLimit == nil {
		t.SizeLimit = UnionUint32(1000)
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_CallTrace_Location struct, which is a YANG list entry.
func (t *NokiaConf_Configure_CallTrace_Location) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"location-type": t.LocationType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_CallTrace_Location) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_CallTrace_Location"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_CallTrace_Location) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_CallTrace_Location) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_CallTrace_Location.
func (*NokiaConf_Configure_CallTrace_Location) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_CallTrace_TraceProfile represents the /nokia-conf/configure/call-trace/trace-profile YANG schema element.
type NokiaConf_Configure_CallTrace_TraceProfile struct {
	Applications       *NokiaConf_Configure_CallTrace_TraceProfile_Applications `path:"applications" module:"nokia-conf"`
	ApplyGroups        []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                  `path:"description" module:"nokia-conf"`
	Events             E_NokiaConf_Configure_CallTrace_TraceProfile_Events      `path:"events" module:"nokia-conf"`
	Name               *string                                                  `path:"name" module:"nokia-conf"`
	Output             *NokiaConf_Configure_CallTrace_TraceProfile_Output       `path:"output" module:"nokia-conf"`
	SizeLimit          *uint32                                                  `path:"size-limit" module:"nokia-conf"`
	TimeLimit          *uint32                                                  `path:"time-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_CallTrace_TraceProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_CallTrace_TraceProfile) IsYANGGoStruct() {}

// GetOrCreateApplications retrieves the value of the Applications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_CallTrace_TraceProfile) GetOrCreateApplications() *NokiaConf_Configure_CallTrace_TraceProfile_Applications {
	if t.Applications != nil {
		return t.Applications
	}
	t.Applications = &NokiaConf_Configure_CallTrace_TraceProfile_Applications{}
	return t.Applications
}

// GetOrCreateOutput retrieves the value of the Output field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_CallTrace_TraceProfile) GetOrCreateOutput() *NokiaConf_Configure_CallTrace_TraceProfile_Output {
	if t.Output != nil {
		return t.Output
	}
	t.Output = &NokiaConf_Configure_CallTrace_TraceProfile_Output{}
	return t.Output
}

// GetApplications returns the value of the Applications struct pointer
// from NokiaConf_Configure_CallTrace_TraceProfile. If the receiver or the field Applications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_CallTrace_TraceProfile) GetApplications() *NokiaConf_Configure_CallTrace_TraceProfile_Applications {
	if t != nil && t.Applications != nil {
		return t.Applications
	}
	return nil
}

// GetOutput returns the value of the Output struct pointer
// from NokiaConf_Configure_CallTrace_TraceProfile. If the receiver or the field Output is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_CallTrace_TraceProfile) GetOutput() *NokiaConf_Configure_CallTrace_TraceProfile_Output {
	if t != nil && t.Output != nil {
		return t.Output
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_CallTrace_TraceProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_CallTrace_TraceProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_CallTrace_TraceProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEvents retrieves the value of the leaf Events from the NokiaConf_Configure_CallTrace_TraceProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Events is set, it can
// safely use t.GetEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Events == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile) GetEvents() E_NokiaConf_Configure_CallTrace_TraceProfile_Events {
	if t == nil || t.Events == 0 {
		return 0
	}
	return t.Events
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_CallTrace_TraceProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSizeLimit retrieves the value of the leaf SizeLimit from the NokiaConf_Configure_CallTrace_TraceProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeLimit is set, it can
// safely use t.GetSizeLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile) GetSizeLimit() uint32 {
	if t == nil || t.SizeLimit == nil {
		return 10
	}
	return *t.SizeLimit
}

// GetTimeLimit retrieves the value of the leaf TimeLimit from the NokiaConf_Configure_CallTrace_TraceProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeLimit is set, it can
// safely use t.GetTimeLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile) GetTimeLimit() uint32 {
	if t == nil || t.TimeLimit == nil {
		return 86400
	}
	return *t.TimeLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_CallTrace_TraceProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_CallTrace_TraceProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SizeLimit == nil {
		var v uint32 = 10
		t.SizeLimit = &v
	}
	if t.TimeLimit == nil {
		var v uint32 = 86400
		t.TimeLimit = &v
	}
	t.Applications.PopulateDefaults()
	t.Output.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_CallTrace_TraceProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_CallTrace_TraceProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_CallTrace_TraceProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_CallTrace_TraceProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_CallTrace_TraceProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_CallTrace_TraceProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_CallTrace_TraceProfile.
func (*NokiaConf_Configure_CallTrace_TraceProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_CallTrace_TraceProfile_Applications represents the /nokia-conf/configure/call-trace/trace-profile/applications YANG schema element.
type NokiaConf_Configure_CallTrace_TraceProfile_Applications struct {
	ConnectivityManagement *bool `path:"connectivity-management" module:"nokia-conf"`
	Gx                     *bool `path:"gx" module:"nokia-conf"`
	Gy                     *bool `path:"gy" module:"nokia-conf"`
	Ludb                   *bool `path:"ludb" module:"nokia-conf"`
	Msap                   *bool `path:"msap" module:"nokia-conf"`
	Nasreq                 *bool `path:"nasreq" module:"nokia-conf"`
	PppEvent               *bool `path:"ppp-event" module:"nokia-conf"`
	Python                 *bool `path:"python" module:"nokia-conf"`
	RadiusAcct             *bool `path:"radius-acct" module:"nokia-conf"`
	RadiusAuth             *bool `path:"radius-auth" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_CallTrace_TraceProfile_Applications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_CallTrace_TraceProfile_Applications) IsYANGGoStruct() {}

// GetConnectivityManagement retrieves the value of the leaf ConnectivityManagement from the NokiaConf_Configure_CallTrace_TraceProfile_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectivityManagement is set, it can
// safely use t.GetConnectivityManagement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectivityManagement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Applications) GetConnectivityManagement() bool {
	if t == nil || t.ConnectivityManagement == nil {
		return true
	}
	return *t.ConnectivityManagement
}

// GetGx retrieves the value of the leaf Gx from the NokiaConf_Configure_CallTrace_TraceProfile_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gx is set, it can
// safely use t.GetGx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gx == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Applications) GetGx() bool {
	if t == nil || t.Gx == nil {
		return false
	}
	return *t.Gx
}

// GetGy retrieves the value of the leaf Gy from the NokiaConf_Configure_CallTrace_TraceProfile_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gy is set, it can
// safely use t.GetGy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Applications) GetGy() bool {
	if t == nil || t.Gy == nil {
		return false
	}
	return *t.Gy
}

// GetLudb retrieves the value of the leaf Ludb from the NokiaConf_Configure_CallTrace_TraceProfile_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ludb is set, it can
// safely use t.GetLudb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ludb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Applications) GetLudb() bool {
	if t == nil || t.Ludb == nil {
		return true
	}
	return *t.Ludb
}

// GetMsap retrieves the value of the leaf Msap from the NokiaConf_Configure_CallTrace_TraceProfile_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Msap is set, it can
// safely use t.GetMsap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Msap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Applications) GetMsap() bool {
	if t == nil || t.Msap == nil {
		return true
	}
	return *t.Msap
}

// GetNasreq retrieves the value of the leaf Nasreq from the NokiaConf_Configure_CallTrace_TraceProfile_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Nasreq is set, it can
// safely use t.GetNasreq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Nasreq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Applications) GetNasreq() bool {
	if t == nil || t.Nasreq == nil {
		return false
	}
	return *t.Nasreq
}

// GetPppEvent retrieves the value of the leaf PppEvent from the NokiaConf_Configure_CallTrace_TraceProfile_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppEvent is set, it can
// safely use t.GetPppEvent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppEvent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Applications) GetPppEvent() bool {
	if t == nil || t.PppEvent == nil {
		return false
	}
	return *t.PppEvent
}

// GetPython retrieves the value of the leaf Python from the NokiaConf_Configure_CallTrace_TraceProfile_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Python is set, it can
// safely use t.GetPython() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Python == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Applications) GetPython() bool {
	if t == nil || t.Python == nil {
		return true
	}
	return *t.Python
}

// GetRadiusAcct retrieves the value of the leaf RadiusAcct from the NokiaConf_Configure_CallTrace_TraceProfile_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAcct is set, it can
// safely use t.GetRadiusAcct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAcct == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Applications) GetRadiusAcct() bool {
	if t == nil || t.RadiusAcct == nil {
		return true
	}
	return *t.RadiusAcct
}

// GetRadiusAuth retrieves the value of the leaf RadiusAuth from the NokiaConf_Configure_CallTrace_TraceProfile_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAuth is set, it can
// safely use t.GetRadiusAuth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAuth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Applications) GetRadiusAuth() bool {
	if t == nil || t.RadiusAuth == nil {
		return true
	}
	return *t.RadiusAuth
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_CallTrace_TraceProfile_Applications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Applications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ConnectivityManagement == nil {
		var v bool = true
		t.ConnectivityManagement = &v
	}
	if t.Ludb == nil {
		var v bool = true
		t.Ludb = &v
	}
	if t.Msap == nil {
		var v bool = true
		t.Msap = &v
	}
	if t.PppEvent == nil {
		var v bool = false
		t.PppEvent = &v
	}
	if t.Python == nil {
		var v bool = true
		t.Python = &v
	}
	if t.RadiusAcct == nil {
		var v bool = true
		t.RadiusAcct = &v
	}
	if t.RadiusAuth == nil {
		var v bool = true
		t.RadiusAuth = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Applications) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_CallTrace_TraceProfile_Applications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Applications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Applications) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_CallTrace_TraceProfile_Applications.
func (*NokiaConf_Configure_CallTrace_TraceProfile_Applications) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_CallTrace_TraceProfile_Output represents the /nokia-conf/configure/call-trace/trace-profile/output YANG schema element.
type NokiaConf_Configure_CallTrace_TraceProfile_Output struct {
	Debug        YANGEmpty                                               `path:"debug" module:"nokia-conf"`
	Live         *NokiaConf_Configure_CallTrace_TraceProfile_Output_Live `path:"live" module:"nokia-conf" yangPresence:"true"`
	LocalStorage YANGEmpty                                               `path:"local-storage" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_CallTrace_TraceProfile_Output implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_CallTrace_TraceProfile_Output) IsYANGGoStruct() {}

// GetOrCreateLive retrieves the value of the Live field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Output) GetOrCreateLive() *NokiaConf_Configure_CallTrace_TraceProfile_Output_Live {
	if t.Live != nil {
		return t.Live
	}
	t.Live = &NokiaConf_Configure_CallTrace_TraceProfile_Output_Live{}
	return t.Live
}

// GetLive returns the value of the Live struct pointer
// from NokiaConf_Configure_CallTrace_TraceProfile_Output. If the receiver or the field Live is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Output) GetLive() *NokiaConf_Configure_CallTrace_TraceProfile_Output_Live {
	if t != nil && t.Live != nil {
		return t.Live
	}
	return nil
}

// GetDebug retrieves the value of the leaf Debug from the NokiaConf_Configure_CallTrace_TraceProfile_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Debug is set, it can
// safely use t.GetDebug() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Debug == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Output) GetDebug() YANGEmpty {
	if t == nil || t.Debug == false {
		return false
	}
	return t.Debug
}

// GetLocalStorage retrieves the value of the leaf LocalStorage from the NokiaConf_Configure_CallTrace_TraceProfile_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalStorage is set, it can
// safely use t.GetLocalStorage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalStorage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Output) GetLocalStorage() YANGEmpty {
	if t == nil || t.LocalStorage == false {
		return false
	}
	return t.LocalStorage
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_CallTrace_TraceProfile_Output
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Output) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Live.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Output) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_CallTrace_TraceProfile_Output"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Output) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Output) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_CallTrace_TraceProfile_Output.
func (*NokiaConf_Configure_CallTrace_TraceProfile_Output) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_CallTrace_TraceProfile_Output_Live represents the /nokia-conf/configure/call-trace/trace-profile/output/live YANG schema element.
type NokiaConf_Configure_CallTrace_TraceProfile_Output_Live struct {
	Fqdn           *string `path:"fqdn" module:"nokia-conf"`
	IpAddress      *string `path:"ip-address" module:"nokia-conf"`
	Port           *uint32 `path:"port" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_CallTrace_TraceProfile_Output_Live implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_CallTrace_TraceProfile_Output_Live) IsYANGGoStruct() {}

// GetFqdn retrieves the value of the leaf Fqdn from the NokiaConf_Configure_CallTrace_TraceProfile_Output_Live
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fqdn is set, it can
// safely use t.GetFqdn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fqdn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Output_Live) GetFqdn() string {
	if t == nil || t.Fqdn == nil {
		return ""
	}
	return *t.Fqdn
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_CallTrace_TraceProfile_Output_Live
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Output_Live) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_CallTrace_TraceProfile_Output_Live
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Output_Live) GetPort() uint32 {
	if t == nil || t.Port == nil {
		return 29770
	}
	return *t.Port
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_CallTrace_TraceProfile_Output_Live
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Output_Live) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "Base"
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_CallTrace_TraceProfile_Output_Live
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Output_Live) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v uint32 = 29770
		t.Port = &v
	}
	if t.RouterInstance == nil {
		var v string = "Base"
		t.RouterInstance = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Output_Live) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_CallTrace_TraceProfile_Output_Live"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Output_Live) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_CallTrace_TraceProfile_Output_Live) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_CallTrace_TraceProfile_Output_Live.
func (*NokiaConf_Configure_CallTrace_TraceProfile_Output_Live) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card represents the /nokia-conf/configure/card YANG schema element.
type NokiaConf_Configure_Card struct {
	AdminState                 E_NokiaTypesSros_AdminState                                               `path:"admin-state" module:"nokia-conf"`
	ApplyGroups                []string                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude         []string                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	CardType                   E_NokiaTypesCard_SrosIomType                                              `path:"card-type" module:"nokia-conf"`
	Event                      map[E_NokiaConf_Configure_Card_Event_Type]*NokiaConf_Configure_Card_Event `path:"event" module:"nokia-conf"`
	FailOnError                *bool                                                                     `path:"fail-on-error" module:"nokia-conf"`
	FilterProfile              E_NokiaTypesCard_FilterProfile                                            `path:"filter-profile" module:"nokia-conf"`
	Fp                         map[uint32]*NokiaConf_Configure_Card_Fp                                   `path:"fp" module:"nokia-conf"`
	HashSeedShift              *uint32                                                                   `path:"hash-seed-shift" module:"nokia-conf"`
	Level                      E_NokiaTypesCard_SrosIomLevel                                             `path:"level" module:"nokia-conf"`
	Mda                        map[uint32]*NokiaConf_Configure_Card_Mda                                  `path:"mda" module:"nokia-conf"`
	PowerSave                  *bool                                                                     `path:"power-save" module:"nokia-conf"`
	ResetOnRecoverableError    *bool                                                                     `path:"reset-on-recoverable-error" module:"nokia-conf"`
	SlotNumber                 *uint32                                                                   `path:"slot-number" module:"nokia-conf"`
	Upgrade                    map[uint32]*NokiaConf_Configure_Card_Upgrade                              `path:"upgrade" module:"nokia-conf"`
	VirtualSchedulerAdjustment *NokiaConf_Configure_Card_VirtualSchedulerAdjustment                      `path:"virtual-scheduler-adjustment" module:"nokia-conf"`
	Xiom                       map[string]*NokiaConf_Configure_Card_Xiom                                 `path:"xiom" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// NokiaConf_Configure_Card struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card) NewEvent(Type E_NokiaConf_Configure_Card_Event_Type) (*NokiaConf_Configure_Card_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_NokiaConf_Configure_Card_Event_Type]*NokiaConf_Configure_Card_Event)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &NokiaConf_Configure_Card_Event{
		Type: Type,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the NokiaConf_Configure_Card struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card) RenameEvent(oldK, newK E_NokiaConf_Configure_Card_Event_Type) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.Type = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card) GetOrCreateEvent(Type E_NokiaConf_Configure_Card_Event_Type) *NokiaConf_Configure_Card_Event {

	key := Type

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of NokiaConf_Configure_Card. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card) GetEvent(Type E_NokiaConf_Configure_Card_Event_Type) *NokiaConf_Configure_Card_Event {

	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card) DeleteEvent(Type E_NokiaConf_Configure_Card_Event_Type) {
	key := Type

	delete(t.Event, key)
}

// AppendEvent appends the supplied NokiaConf_Configure_Card_Event struct to the
// list Event of NokiaConf_Configure_Card. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Event already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card) AppendEvent(v *NokiaConf_Configure_Card_Event) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_NokiaConf_Configure_Card_Event_Type]*NokiaConf_Configure_Card_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// NewFp creates a new entry in the Fp list of the
// NokiaConf_Configure_Card struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card) NewFp(FpNumber uint32) (*NokiaConf_Configure_Card_Fp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fp == nil {
		t.Fp = make(map[uint32]*NokiaConf_Configure_Card_Fp)
	}

	key := FpNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fp", key)
	}

	t.Fp[key] = &NokiaConf_Configure_Card_Fp{
		FpNumber: &FpNumber,
	}

	return t.Fp[key], nil
}

// RenameFp renames an entry in the list Fp within
// the NokiaConf_Configure_Card struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card) RenameFp(oldK, newK uint32) error {
	if _, ok := t.Fp[newK]; ok {
		return fmt.Errorf("key %v already exists in Fp", newK)
	}

	e, ok := t.Fp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fp", oldK)
	}
	e.FpNumber = &newK

	t.Fp[newK] = e
	delete(t.Fp, oldK)
	return nil
}

// GetOrCreateFp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card) GetOrCreateFp(FpNumber uint32) *NokiaConf_Configure_Card_Fp {

	key := FpNumber

	if v, ok := t.Fp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFp(FpNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFp got unexpected error: %v", err))
	}
	return v
}

// GetFp retrieves the value with the specified key from
// the Fp map field of NokiaConf_Configure_Card. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card) GetFp(FpNumber uint32) *NokiaConf_Configure_Card_Fp {

	if t == nil {
		return nil
	}

	key := FpNumber

	if lm, ok := t.Fp[key]; ok {
		return lm
	}
	return nil
}

// DeleteFp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card) DeleteFp(FpNumber uint32) {
	key := FpNumber

	delete(t.Fp, key)
}

// AppendFp appends the supplied NokiaConf_Configure_Card_Fp struct to the
// list Fp of NokiaConf_Configure_Card. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Fp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card) AppendFp(v *NokiaConf_Configure_Card_Fp) error {
	if v.FpNumber == nil {
		return fmt.Errorf("invalid nil key received for FpNumber")
	}

	key := *v.FpNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fp == nil {
		t.Fp = make(map[uint32]*NokiaConf_Configure_Card_Fp)
	}

	if _, ok := t.Fp[key]; ok {
		return fmt.Errorf("duplicate key for list Fp %v", key)
	}

	t.Fp[key] = v
	return nil
}

// NewMda creates a new entry in the Mda list of the
// NokiaConf_Configure_Card struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card) NewMda(MdaSlot uint32) (*NokiaConf_Configure_Card_Mda, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[uint32]*NokiaConf_Configure_Card_Mda)
	}

	key := MdaSlot

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mda[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mda", key)
	}

	t.Mda[key] = &NokiaConf_Configure_Card_Mda{
		MdaSlot: &MdaSlot,
	}

	return t.Mda[key], nil
}

// RenameMda renames an entry in the list Mda within
// the NokiaConf_Configure_Card struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card) RenameMda(oldK, newK uint32) error {
	if _, ok := t.Mda[newK]; ok {
		return fmt.Errorf("key %v already exists in Mda", newK)
	}

	e, ok := t.Mda[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mda", oldK)
	}
	e.MdaSlot = &newK

	t.Mda[newK] = e
	delete(t.Mda, oldK)
	return nil
}

// GetOrCreateMda retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card) GetOrCreateMda(MdaSlot uint32) *NokiaConf_Configure_Card_Mda {

	key := MdaSlot

	if v, ok := t.Mda[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMda(MdaSlot)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMda got unexpected error: %v", err))
	}
	return v
}

// GetMda retrieves the value with the specified key from
// the Mda map field of NokiaConf_Configure_Card. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card) GetMda(MdaSlot uint32) *NokiaConf_Configure_Card_Mda {

	if t == nil {
		return nil
	}

	key := MdaSlot

	if lm, ok := t.Mda[key]; ok {
		return lm
	}
	return nil
}

// DeleteMda deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card) DeleteMda(MdaSlot uint32) {
	key := MdaSlot

	delete(t.Mda, key)
}

// AppendMda appends the supplied NokiaConf_Configure_Card_Mda struct to the
// list Mda of NokiaConf_Configure_Card. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Mda already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card) AppendMda(v *NokiaConf_Configure_Card_Mda) error {
	if v.MdaSlot == nil {
		return fmt.Errorf("invalid nil key received for MdaSlot")
	}

	key := *v.MdaSlot

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[uint32]*NokiaConf_Configure_Card_Mda)
	}

	if _, ok := t.Mda[key]; ok {
		return fmt.Errorf("duplicate key for list Mda %v", key)
	}

	t.Mda[key] = v
	return nil
}

// NewUpgrade creates a new entry in the Upgrade list of the
// NokiaConf_Configure_Card struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card) NewUpgrade(UpgradeIndex uint32) (*NokiaConf_Configure_Card_Upgrade, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Upgrade == nil {
		t.Upgrade = make(map[uint32]*NokiaConf_Configure_Card_Upgrade)
	}

	key := UpgradeIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Upgrade[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Upgrade", key)
	}

	t.Upgrade[key] = &NokiaConf_Configure_Card_Upgrade{
		UpgradeIndex: &UpgradeIndex,
	}

	return t.Upgrade[key], nil
}

// RenameUpgrade renames an entry in the list Upgrade within
// the NokiaConf_Configure_Card struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card) RenameUpgrade(oldK, newK uint32) error {
	if _, ok := t.Upgrade[newK]; ok {
		return fmt.Errorf("key %v already exists in Upgrade", newK)
	}

	e, ok := t.Upgrade[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Upgrade", oldK)
	}
	e.UpgradeIndex = &newK

	t.Upgrade[newK] = e
	delete(t.Upgrade, oldK)
	return nil
}

// GetOrCreateUpgrade retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card) GetOrCreateUpgrade(UpgradeIndex uint32) *NokiaConf_Configure_Card_Upgrade {

	key := UpgradeIndex

	if v, ok := t.Upgrade[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUpgrade(UpgradeIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUpgrade got unexpected error: %v", err))
	}
	return v
}

// GetUpgrade retrieves the value with the specified key from
// the Upgrade map field of NokiaConf_Configure_Card. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card) GetUpgrade(UpgradeIndex uint32) *NokiaConf_Configure_Card_Upgrade {

	if t == nil {
		return nil
	}

	key := UpgradeIndex

	if lm, ok := t.Upgrade[key]; ok {
		return lm
	}
	return nil
}

// DeleteUpgrade deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card) DeleteUpgrade(UpgradeIndex uint32) {
	key := UpgradeIndex

	delete(t.Upgrade, key)
}

// AppendUpgrade appends the supplied NokiaConf_Configure_Card_Upgrade struct to the
// list Upgrade of NokiaConf_Configure_Card. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Upgrade already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card) AppendUpgrade(v *NokiaConf_Configure_Card_Upgrade) error {
	if v.UpgradeIndex == nil {
		return fmt.Errorf("invalid nil key received for UpgradeIndex")
	}

	key := *v.UpgradeIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Upgrade == nil {
		t.Upgrade = make(map[uint32]*NokiaConf_Configure_Card_Upgrade)
	}

	if _, ok := t.Upgrade[key]; ok {
		return fmt.Errorf("duplicate key for list Upgrade %v", key)
	}

	t.Upgrade[key] = v
	return nil
}

// NewXiom creates a new entry in the Xiom list of the
// NokiaConf_Configure_Card struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card) NewXiom(XiomSlot string) (*NokiaConf_Configure_Card_Xiom, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Xiom == nil {
		t.Xiom = make(map[string]*NokiaConf_Configure_Card_Xiom)
	}

	key := XiomSlot

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Xiom[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Xiom", key)
	}

	t.Xiom[key] = &NokiaConf_Configure_Card_Xiom{
		XiomSlot: &XiomSlot,
	}

	return t.Xiom[key], nil
}

// RenameXiom renames an entry in the list Xiom within
// the NokiaConf_Configure_Card struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card) RenameXiom(oldK, newK string) error {
	if _, ok := t.Xiom[newK]; ok {
		return fmt.Errorf("key %v already exists in Xiom", newK)
	}

	e, ok := t.Xiom[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Xiom", oldK)
	}
	e.XiomSlot = &newK

	t.Xiom[newK] = e
	delete(t.Xiom, oldK)
	return nil
}

// GetOrCreateXiom retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card) GetOrCreateXiom(XiomSlot string) *NokiaConf_Configure_Card_Xiom {

	key := XiomSlot

	if v, ok := t.Xiom[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewXiom(XiomSlot)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateXiom got unexpected error: %v", err))
	}
	return v
}

// GetXiom retrieves the value with the specified key from
// the Xiom map field of NokiaConf_Configure_Card. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card) GetXiom(XiomSlot string) *NokiaConf_Configure_Card_Xiom {

	if t == nil {
		return nil
	}

	key := XiomSlot

	if lm, ok := t.Xiom[key]; ok {
		return lm
	}
	return nil
}

// DeleteXiom deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card) DeleteXiom(XiomSlot string) {
	key := XiomSlot

	delete(t.Xiom, key)
}

// AppendXiom appends the supplied NokiaConf_Configure_Card_Xiom struct to the
// list Xiom of NokiaConf_Configure_Card. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Xiom already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card) AppendXiom(v *NokiaConf_Configure_Card_Xiom) error {
	if v.XiomSlot == nil {
		return fmt.Errorf("invalid nil key received for XiomSlot")
	}

	key := *v.XiomSlot

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Xiom == nil {
		t.Xiom = make(map[string]*NokiaConf_Configure_Card_Xiom)
	}

	if _, ok := t.Xiom[key]; ok {
		return fmt.Errorf("duplicate key for list Xiom %v", key)
	}

	t.Xiom[key] = v
	return nil
}

// GetOrCreateVirtualSchedulerAdjustment retrieves the value of the VirtualSchedulerAdjustment field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card) GetOrCreateVirtualSchedulerAdjustment() *NokiaConf_Configure_Card_VirtualSchedulerAdjustment {
	if t.VirtualSchedulerAdjustment != nil {
		return t.VirtualSchedulerAdjustment
	}
	t.VirtualSchedulerAdjustment = &NokiaConf_Configure_Card_VirtualSchedulerAdjustment{}
	return t.VirtualSchedulerAdjustment
}

// GetVirtualSchedulerAdjustment returns the value of the VirtualSchedulerAdjustment struct pointer
// from NokiaConf_Configure_Card. If the receiver or the field VirtualSchedulerAdjustment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card) GetVirtualSchedulerAdjustment() *NokiaConf_Configure_Card_VirtualSchedulerAdjustment {
	if t != nil && t.VirtualSchedulerAdjustment != nil {
		return t.VirtualSchedulerAdjustment
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Card
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCardType retrieves the value of the leaf CardType from the NokiaConf_Configure_Card
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CardType is set, it can
// safely use t.GetCardType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CardType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card) GetCardType() E_NokiaTypesCard_SrosIomType {
	if t == nil || t.CardType == 0 {
		return 0
	}
	return t.CardType
}

// GetFailOnError retrieves the value of the leaf FailOnError from the NokiaConf_Configure_Card
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailOnError is set, it can
// safely use t.GetFailOnError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailOnError == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card) GetFailOnError() bool {
	if t == nil || t.FailOnError == nil {
		return false
	}
	return *t.FailOnError
}

// GetFilterProfile retrieves the value of the leaf FilterProfile from the NokiaConf_Configure_Card
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterProfile is set, it can
// safely use t.GetFilterProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card) GetFilterProfile() E_NokiaTypesCard_FilterProfile {
	if t == nil || t.FilterProfile == 0 {
		return NokiaTypesCard_FilterProfile_none
	}
	return t.FilterProfile
}

// GetHashSeedShift retrieves the value of the leaf HashSeedShift from the NokiaConf_Configure_Card
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HashSeedShift is set, it can
// safely use t.GetHashSeedShift() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HashSeedShift == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card) GetHashSeedShift() uint32 {
	if t == nil || t.HashSeedShift == nil {
		return 2
	}
	return *t.HashSeedShift
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Card
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card) GetLevel() E_NokiaTypesCard_SrosIomLevel {
	if t == nil || t.Level == 0 {
		return 0
	}
	return t.Level
}

// GetPowerSave retrieves the value of the leaf PowerSave from the NokiaConf_Configure_Card
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerSave is set, it can
// safely use t.GetPowerSave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerSave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card) GetPowerSave() bool {
	if t == nil || t.PowerSave == nil {
		return false
	}
	return *t.PowerSave
}

// GetResetOnRecoverableError retrieves the value of the leaf ResetOnRecoverableError from the NokiaConf_Configure_Card
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResetOnRecoverableError is set, it can
// safely use t.GetResetOnRecoverableError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResetOnRecoverableError == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card) GetResetOnRecoverableError() bool {
	if t == nil || t.ResetOnRecoverableError == nil {
		return false
	}
	return *t.ResetOnRecoverableError
}

// GetSlotNumber retrieves the value of the leaf SlotNumber from the NokiaConf_Configure_Card
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlotNumber is set, it can
// safely use t.GetSlotNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlotNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card) GetSlotNumber() uint32 {
	if t == nil || t.SlotNumber == nil {
		return 0
	}
	return *t.SlotNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.FailOnError == nil {
		var v bool = false
		t.FailOnError = &v
	}
	if t.FilterProfile == 0 {
		t.FilterProfile = NokiaTypesCard_FilterProfile_none
	}
	if t.HashSeedShift == nil {
		var v uint32 = 2
		t.HashSeedShift = &v
	}
	if t.PowerSave == nil {
		var v bool = false
		t.PowerSave = &v
	}
	if t.ResetOnRecoverableError == nil {
		var v bool = false
		t.ResetOnRecoverableError = &v
	}
	t.VirtualSchedulerAdjustment.PopulateDefaults()
	for _, e := range t.Event {
		e.PopulateDefaults()
	}
	for _, e := range t.Fp {
		e.PopulateDefaults()
	}
	for _, e := range t.Mda {
		e.PopulateDefaults()
	}
	for _, e := range t.Upgrade {
		e.PopulateDefaults()
	}
	for _, e := range t.Xiom {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SlotNumber == nil {
		return nil, fmt.Errorf("nil value for key SlotNumber")
	}

	return map[string]interface{}{
		"slot-number": *t.SlotNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card.
func (*NokiaConf_Configure_Card) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Event represents the /nokia-conf/configure/card/event YANG schema element.
type NokiaConf_Configure_Card_Event struct {
	Action             E_NokiaTypesChassis_HwEventAction     `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Type               E_NokiaConf_Configure_Card_Event_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Event) IsYANGGoStruct() {}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Card_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Event) GetAction() E_NokiaTypesChassis_HwEventAction {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Event) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Event) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Card_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Event) GetType() E_NokiaConf_Configure_Card_Event_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Event
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Event) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Event struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Event) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Event.
func (*NokiaConf_Configure_Card_Event) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp represents the /nokia-conf/configure/card/fp YANG schema element.
type NokiaConf_Configure_Card_Fp struct {
	ApplyGroups             []string                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	DistCpuProtection       *NokiaConf_Configure_Card_Fp_DistCpuProtection    `path:"dist-cpu-protection" module:"nokia-conf"`
	Egress                  *NokiaConf_Configure_Card_Fp_Egress               `path:"egress" module:"nokia-conf"`
	FpNumber                *uint32                                           `path:"fp-number" module:"nokia-conf"`
	FpResourcePolicy        *string                                           `path:"fp-resource-policy" module:"nokia-conf"`
	HiBwMcastSrc            *NokiaConf_Configure_Card_Fp_HiBwMcastSrc         `path:"hi-bw-mcast-src" module:"nokia-conf" yangPresence:"true"`
	Ingress                 *NokiaConf_Configure_Card_Fp_Ingress              `path:"ingress" module:"nokia-conf"`
	IngressBufferAllocation *float64                                          `path:"ingress-buffer-allocation" module:"nokia-conf"`
	InitExtractPrioMode     E_NokiaConf_Configure_Card_Fp_InitExtractPrioMode `path:"init-extract-prio-mode" module:"nokia-conf"`
	PolicyAccounting        *uint32                                           `path:"policy-accounting" module:"nokia-conf"`
	StablePoolSizing        *bool                                             `path:"stable-pool-sizing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp) IsYANGGoStruct() {}

// GetOrCreateDistCpuProtection retrieves the value of the DistCpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp) GetOrCreateDistCpuProtection() *NokiaConf_Configure_Card_Fp_DistCpuProtection {
	if t.DistCpuProtection != nil {
		return t.DistCpuProtection
	}
	t.DistCpuProtection = &NokiaConf_Configure_Card_Fp_DistCpuProtection{}
	return t.DistCpuProtection
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp) GetOrCreateEgress() *NokiaConf_Configure_Card_Fp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Card_Fp_Egress{}
	return t.Egress
}

// GetOrCreateHiBwMcastSrc retrieves the value of the HiBwMcastSrc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp) GetOrCreateHiBwMcastSrc() *NokiaConf_Configure_Card_Fp_HiBwMcastSrc {
	if t.HiBwMcastSrc != nil {
		return t.HiBwMcastSrc
	}
	t.HiBwMcastSrc = &NokiaConf_Configure_Card_Fp_HiBwMcastSrc{}
	return t.HiBwMcastSrc
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp) GetOrCreateIngress() *NokiaConf_Configure_Card_Fp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Card_Fp_Ingress{}
	return t.Ingress
}

// GetDistCpuProtection returns the value of the DistCpuProtection struct pointer
// from NokiaConf_Configure_Card_Fp. If the receiver or the field DistCpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp) GetDistCpuProtection() *NokiaConf_Configure_Card_Fp_DistCpuProtection {
	if t != nil && t.DistCpuProtection != nil {
		return t.DistCpuProtection
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Card_Fp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp) GetEgress() *NokiaConf_Configure_Card_Fp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetHiBwMcastSrc returns the value of the HiBwMcastSrc struct pointer
// from NokiaConf_Configure_Card_Fp. If the receiver or the field HiBwMcastSrc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp) GetHiBwMcastSrc() *NokiaConf_Configure_Card_Fp_HiBwMcastSrc {
	if t != nil && t.HiBwMcastSrc != nil {
		return t.HiBwMcastSrc
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Card_Fp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp) GetIngress() *NokiaConf_Configure_Card_Fp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Fp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Fp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFpNumber retrieves the value of the leaf FpNumber from the NokiaConf_Configure_Card_Fp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpNumber is set, it can
// safely use t.GetFpNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp) GetFpNumber() uint32 {
	if t == nil || t.FpNumber == nil {
		return 0
	}
	return *t.FpNumber
}

// GetFpResourcePolicy retrieves the value of the leaf FpResourcePolicy from the NokiaConf_Configure_Card_Fp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpResourcePolicy is set, it can
// safely use t.GetFpResourcePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpResourcePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp) GetFpResourcePolicy() string {
	if t == nil || t.FpResourcePolicy == nil {
		return ""
	}
	return *t.FpResourcePolicy
}

// GetIngressBufferAllocation retrieves the value of the leaf IngressBufferAllocation from the NokiaConf_Configure_Card_Fp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressBufferAllocation is set, it can
// safely use t.GetIngressBufferAllocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressBufferAllocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp) GetIngressBufferAllocation() float64 {
	if t == nil || t.IngressBufferAllocation == nil {
		return 50.00
	}
	return *t.IngressBufferAllocation
}

// GetInitExtractPrioMode retrieves the value of the leaf InitExtractPrioMode from the NokiaConf_Configure_Card_Fp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitExtractPrioMode is set, it can
// safely use t.GetInitExtractPrioMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitExtractPrioMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp) GetInitExtractPrioMode() E_NokiaConf_Configure_Card_Fp_InitExtractPrioMode {
	if t == nil || t.InitExtractPrioMode == 0 {
		return NokiaConf_Configure_Card_Fp_InitExtractPrioMode_uniform
	}
	return t.InitExtractPrioMode
}

// GetPolicyAccounting retrieves the value of the leaf PolicyAccounting from the NokiaConf_Configure_Card_Fp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyAccounting is set, it can
// safely use t.GetPolicyAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp) GetPolicyAccounting() uint32 {
	if t == nil || t.PolicyAccounting == nil {
		return 0
	}
	return *t.PolicyAccounting
}

// GetStablePoolSizing retrieves the value of the leaf StablePoolSizing from the NokiaConf_Configure_Card_Fp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StablePoolSizing is set, it can
// safely use t.GetStablePoolSizing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StablePoolSizing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp) GetStablePoolSizing() bool {
	if t == nil || t.StablePoolSizing == nil {
		return false
	}
	return *t.StablePoolSizing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IngressBufferAllocation == nil {
		var v float64 = 50.00
		t.IngressBufferAllocation = &v
	}
	if t.InitExtractPrioMode == 0 {
		t.InitExtractPrioMode = NokiaConf_Configure_Card_Fp_InitExtractPrioMode_uniform
	}
	if t.StablePoolSizing == nil {
		var v bool = false
		t.StablePoolSizing = &v
	}
	t.DistCpuProtection.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.HiBwMcastSrc.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Fp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Fp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FpNumber == nil {
		return nil, fmt.Errorf("nil value for key FpNumber")
	}

	return map[string]interface{}{
		"fp-number": *t.FpNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp.
func (*NokiaConf_Configure_Card_Fp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_DistCpuProtection represents the /nokia-conf/configure/card/fp/dist-cpu-protection YANG schema element.
type NokiaConf_Configure_Card_Fp_DistCpuProtection struct {
	DynamicEnforcementPolicerPool *uint32 `path:"dynamic-enforcement-policer-pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_DistCpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_DistCpuProtection) IsYANGGoStruct() {}

// GetDynamicEnforcementPolicerPool retrieves the value of the leaf DynamicEnforcementPolicerPool from the NokiaConf_Configure_Card_Fp_DistCpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicEnforcementPolicerPool is set, it can
// safely use t.GetDynamicEnforcementPolicerPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicEnforcementPolicerPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_DistCpuProtection) GetDynamicEnforcementPolicerPool() uint32 {
	if t == nil || t.DynamicEnforcementPolicerPool == nil {
		return 0
	}
	return *t.DynamicEnforcementPolicerPool
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_DistCpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_DistCpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_DistCpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_DistCpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_DistCpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_DistCpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_DistCpuProtection.
func (*NokiaConf_Configure_Card_Fp_DistCpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Egress represents the /nokia-conf/configure/card/fp/egress YANG schema element.
type NokiaConf_Configure_Card_Fp_Egress struct {
	HsFixedHighThreshDelta *int32                                               `path:"hs-fixed-high-thresh-delta" module:"nokia-conf"`
	HsPoolPolicy           *string                                              `path:"hs-pool-policy" module:"nokia-conf"`
	WredQueueControl       *NokiaConf_Configure_Card_Fp_Egress_WredQueueControl `path:"wred-queue-control" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Egress) IsYANGGoStruct() {}

// GetOrCreateWredQueueControl retrieves the value of the WredQueueControl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp_Egress) GetOrCreateWredQueueControl() *NokiaConf_Configure_Card_Fp_Egress_WredQueueControl {
	if t.WredQueueControl != nil {
		return t.WredQueueControl
	}
	t.WredQueueControl = &NokiaConf_Configure_Card_Fp_Egress_WredQueueControl{}
	return t.WredQueueControl
}

// GetWredQueueControl returns the value of the WredQueueControl struct pointer
// from NokiaConf_Configure_Card_Fp_Egress. If the receiver or the field WredQueueControl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Egress) GetWredQueueControl() *NokiaConf_Configure_Card_Fp_Egress_WredQueueControl {
	if t != nil && t.WredQueueControl != nil {
		return t.WredQueueControl
	}
	return nil
}

// GetHsFixedHighThreshDelta retrieves the value of the leaf HsFixedHighThreshDelta from the NokiaConf_Configure_Card_Fp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsFixedHighThreshDelta is set, it can
// safely use t.GetHsFixedHighThreshDelta() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsFixedHighThreshDelta == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Egress) GetHsFixedHighThreshDelta() int32 {
	if t == nil || t.HsFixedHighThreshDelta == nil {
		return 0
	}
	return *t.HsFixedHighThreshDelta
}

// GetHsPoolPolicy retrieves the value of the leaf HsPoolPolicy from the NokiaConf_Configure_Card_Fp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsPoolPolicy is set, it can
// safely use t.GetHsPoolPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsPoolPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Egress) GetHsPoolPolicy() string {
	if t == nil || t.HsPoolPolicy == nil {
		return ""
	}
	return *t.HsPoolPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.WredQueueControl.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Egress.
func (*NokiaConf_Configure_Card_Fp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Egress_WredQueueControl represents the /nokia-conf/configure/card/fp/egress/wred-queue-control YANG schema element.
type NokiaConf_Configure_Card_Fp_Egress_WredQueueControl struct {
	AdminState       E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	BufferAllocation *float64                    `path:"buffer-allocation" module:"nokia-conf"`
	ReservedCbs      *float64                    `path:"reserved-cbs" module:"nokia-conf"`
	SlopePolicy      *string                     `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Egress_WredQueueControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Egress_WredQueueControl) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Card_Fp_Egress_WredQueueControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Egress_WredQueueControl) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBufferAllocation retrieves the value of the leaf BufferAllocation from the NokiaConf_Configure_Card_Fp_Egress_WredQueueControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BufferAllocation is set, it can
// safely use t.GetBufferAllocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BufferAllocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Egress_WredQueueControl) GetBufferAllocation() float64 {
	if t == nil || t.BufferAllocation == nil {
		return 25.00
	}
	return *t.BufferAllocation
}

// GetReservedCbs retrieves the value of the leaf ReservedCbs from the NokiaConf_Configure_Card_Fp_Egress_WredQueueControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReservedCbs is set, it can
// safely use t.GetReservedCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReservedCbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Egress_WredQueueControl) GetReservedCbs() float64 {
	if t == nil || t.ReservedCbs == nil {
		return 25.00
	}
	return *t.ReservedCbs
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Card_Fp_Egress_WredQueueControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Egress_WredQueueControl) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Egress_WredQueueControl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Egress_WredQueueControl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.BufferAllocation == nil {
		var v float64 = 25.00
		t.BufferAllocation = &v
	}
	if t.ReservedCbs == nil {
		var v float64 = 25.00
		t.ReservedCbs = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Egress_WredQueueControl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Egress_WredQueueControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Egress_WredQueueControl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Egress_WredQueueControl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Egress_WredQueueControl.
func (*NokiaConf_Configure_Card_Fp_Egress_WredQueueControl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_HiBwMcastSrc represents the /nokia-conf/configure/card/fp/hi-bw-mcast-src YANG schema element.
type NokiaConf_Configure_Card_Fp_HiBwMcastSrc struct {
	Alarm            *bool   `path:"alarm" module:"nokia-conf"`
	DefaultPathsOnly *bool   `path:"default-paths-only" module:"nokia-conf"`
	Group            *uint32 `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_HiBwMcastSrc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_HiBwMcastSrc) IsYANGGoStruct() {}

// GetAlarm retrieves the value of the leaf Alarm from the NokiaConf_Configure_Card_Fp_HiBwMcastSrc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Alarm is set, it can
// safely use t.GetAlarm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Alarm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_HiBwMcastSrc) GetAlarm() bool {
	if t == nil || t.Alarm == nil {
		return false
	}
	return *t.Alarm
}

// GetDefaultPathsOnly retrieves the value of the leaf DefaultPathsOnly from the NokiaConf_Configure_Card_Fp_HiBwMcastSrc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultPathsOnly is set, it can
// safely use t.GetDefaultPathsOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultPathsOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_HiBwMcastSrc) GetDefaultPathsOnly() bool {
	if t == nil || t.DefaultPathsOnly == nil {
		return false
	}
	return *t.DefaultPathsOnly
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Card_Fp_HiBwMcastSrc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_HiBwMcastSrc) GetGroup() uint32 {
	if t == nil || t.Group == nil {
		return 0
	}
	return *t.Group
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_HiBwMcastSrc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_HiBwMcastSrc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Alarm == nil {
		var v bool = false
		t.Alarm = &v
	}
	if t.DefaultPathsOnly == nil {
		var v bool = false
		t.DefaultPathsOnly = &v
	}
	if t.Group == nil {
		var v uint32 = 0
		t.Group = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_HiBwMcastSrc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_HiBwMcastSrc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_HiBwMcastSrc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_HiBwMcastSrc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_HiBwMcastSrc.
func (*NokiaConf_Configure_Card_Fp_HiBwMcastSrc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress represents the /nokia-conf/configure/card/fp/ingress YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress struct {
	Access              *NokiaConf_Configure_Card_Fp_Ingress_Access              `path:"access" module:"nokia-conf"`
	DistCpuProtection   *NokiaConf_Configure_Card_Fp_Ingress_DistCpuProtection   `path:"dist-cpu-protection" module:"nokia-conf"`
	McastPathManagement *NokiaConf_Configure_Card_Fp_Ingress_McastPathManagement `path:"mcast-path-management" module:"nokia-conf"`
	Network             *NokiaConf_Configure_Card_Fp_Ingress_Network             `path:"network" module:"nokia-conf"`
	PolicyAccounting    *NokiaConf_Configure_Card_Fp_Ingress_PolicyAccounting    `path:"policy-accounting" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress) IsYANGGoStruct() {}

// GetOrCreateAccess retrieves the value of the Access field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp_Ingress) GetOrCreateAccess() *NokiaConf_Configure_Card_Fp_Ingress_Access {
	if t.Access != nil {
		return t.Access
	}
	t.Access = &NokiaConf_Configure_Card_Fp_Ingress_Access{}
	return t.Access
}

// GetOrCreateDistCpuProtection retrieves the value of the DistCpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp_Ingress) GetOrCreateDistCpuProtection() *NokiaConf_Configure_Card_Fp_Ingress_DistCpuProtection {
	if t.DistCpuProtection != nil {
		return t.DistCpuProtection
	}
	t.DistCpuProtection = &NokiaConf_Configure_Card_Fp_Ingress_DistCpuProtection{}
	return t.DistCpuProtection
}

// GetOrCreateMcastPathManagement retrieves the value of the McastPathManagement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp_Ingress) GetOrCreateMcastPathManagement() *NokiaConf_Configure_Card_Fp_Ingress_McastPathManagement {
	if t.McastPathManagement != nil {
		return t.McastPathManagement
	}
	t.McastPathManagement = &NokiaConf_Configure_Card_Fp_Ingress_McastPathManagement{}
	return t.McastPathManagement
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp_Ingress) GetOrCreateNetwork() *NokiaConf_Configure_Card_Fp_Ingress_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Card_Fp_Ingress_Network{}
	return t.Network
}

// GetOrCreatePolicyAccounting retrieves the value of the PolicyAccounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp_Ingress) GetOrCreatePolicyAccounting() *NokiaConf_Configure_Card_Fp_Ingress_PolicyAccounting {
	if t.PolicyAccounting != nil {
		return t.PolicyAccounting
	}
	t.PolicyAccounting = &NokiaConf_Configure_Card_Fp_Ingress_PolicyAccounting{}
	return t.PolicyAccounting
}

// GetAccess returns the value of the Access struct pointer
// from NokiaConf_Configure_Card_Fp_Ingress. If the receiver or the field Access is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress) GetAccess() *NokiaConf_Configure_Card_Fp_Ingress_Access {
	if t != nil && t.Access != nil {
		return t.Access
	}
	return nil
}

// GetDistCpuProtection returns the value of the DistCpuProtection struct pointer
// from NokiaConf_Configure_Card_Fp_Ingress. If the receiver or the field DistCpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress) GetDistCpuProtection() *NokiaConf_Configure_Card_Fp_Ingress_DistCpuProtection {
	if t != nil && t.DistCpuProtection != nil {
		return t.DistCpuProtection
	}
	return nil
}

// GetMcastPathManagement returns the value of the McastPathManagement struct pointer
// from NokiaConf_Configure_Card_Fp_Ingress. If the receiver or the field McastPathManagement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress) GetMcastPathManagement() *NokiaConf_Configure_Card_Fp_Ingress_McastPathManagement {
	if t != nil && t.McastPathManagement != nil {
		return t.McastPathManagement
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Card_Fp_Ingress. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress) GetNetwork() *NokiaConf_Configure_Card_Fp_Ingress_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetPolicyAccounting returns the value of the PolicyAccounting struct pointer
// from NokiaConf_Configure_Card_Fp_Ingress. If the receiver or the field PolicyAccounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress) GetPolicyAccounting() *NokiaConf_Configure_Card_Fp_Ingress_PolicyAccounting {
	if t != nil && t.PolicyAccounting != nil {
		return t.PolicyAccounting
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Access.PopulateDefaults()
	t.DistCpuProtection.PopulateDefaults()
	t.McastPathManagement.PopulateDefaults()
	t.Network.PopulateDefaults()
	t.PolicyAccounting.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress.
func (*NokiaConf_Configure_Card_Fp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Access represents the /nokia-conf/configure/card/fp/ingress/access YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Access struct {
	QueueGroup map[NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_Key]*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup `path:"queue-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Access implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Access) IsYANGGoStruct() {}

// NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_Key represents the key for list QueueGroup of element /nokia-conf/configure/card/fp/ingress/access.
type NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_Key struct {
	QueueGroupName string `path:"queue-group-name"`
	InstanceId     uint16 `path:"instance-id"`
}

// NewQueueGroup creates a new entry in the QueueGroup list of the
// NokiaConf_Configure_Card_Fp_Ingress_Access struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access) NewQueueGroup(QueueGroupName string, InstanceId uint16) (*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_Key]*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup)
	}

	key := NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueGroup", key)
	}

	t.QueueGroup[key] = &NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup{
		QueueGroupName: &QueueGroupName,
		InstanceId:     &InstanceId,
	}

	return t.QueueGroup[key], nil
}

// RenameQueueGroup renames an entry in the list QueueGroup within
// the NokiaConf_Configure_Card_Fp_Ingress_Access struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access) RenameQueueGroup(oldK, newK NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_Key) error {
	if _, ok := t.QueueGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueGroup", newK)
	}

	e, ok := t.QueueGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueGroup", oldK)
	}
	e.QueueGroupName = &newK.QueueGroupName
	e.InstanceId = &newK.InstanceId

	t.QueueGroup[newK] = e
	delete(t.QueueGroup, oldK)
	return nil
}

// GetOrCreateQueueGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Fp_Ingress_Access. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access) GetOrCreateQueueGroup(QueueGroupName string, InstanceId uint16) *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup {

	key := NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	if v, ok := t.QueueGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueGroup(QueueGroupName, InstanceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueGroup got unexpected error: %v", err))
	}
	return v
}

// GetQueueGroup retrieves the value with the specified key from
// the QueueGroup map field of NokiaConf_Configure_Card_Fp_Ingress_Access. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access) GetQueueGroup(QueueGroupName string, InstanceId uint16) *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	if lm, ok := t.QueueGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Fp_Ingress_Access. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access) DeleteQueueGroup(QueueGroupName string, InstanceId uint16) {
	key := NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	delete(t.QueueGroup, key)
}

// AppendQueueGroup appends the supplied NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup struct to the
// list QueueGroup of NokiaConf_Configure_Card_Fp_Ingress_Access. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access) AppendQueueGroup(v *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup) error {
	if v.QueueGroupName == nil {
		return fmt.Errorf("invalid nil key for QueueGroupName")
	}

	if v.InstanceId == nil {
		return fmt.Errorf("invalid nil key for InstanceId")
	}

	key := NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_Key{
		QueueGroupName: *v.QueueGroupName,
		InstanceId:     *v.InstanceId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_Key]*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup)
	}

	if _, ok := t.QueueGroup[key]; ok {
		return fmt.Errorf("duplicate key for list QueueGroup %v", key)
	}

	t.QueueGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Access
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.QueueGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Access"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Access.
func (*NokiaConf_Configure_Card_Fp_Ingress_Access) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup represents the /nokia-conf/configure/card/fp/ingress/access/queue-group YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup struct {
	AccountingPolicy     *uint32                                                                     `path:"accounting-policy" module:"nokia-conf"`
	ApplyGroups          []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats         *bool                                                                       `path:"collect-stats" module:"nokia-conf"`
	Description          *string                                                                     `path:"description" module:"nokia-conf"`
	InstanceId           *uint16                                                                     `path:"instance-id" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	PolicerOverrides     *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides     `path:"policer-overrides" module:"nokia-conf"`
	QueueGroupName       *string                                                                     `path:"queue-group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup) IsYANGGoStruct() {}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreatePolicerOverrides retrieves the value of the PolicerOverrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup) GetOrCreatePolicerOverrides() *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides {
	if t.PolicerOverrides != nil {
		return t.PolicerOverrides
	}
	t.PolicerOverrides = &NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides{}
	return t.PolicerOverrides
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup) GetPolicerControlPolicy() *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetPolicerOverrides returns the value of the PolicerOverrides struct pointer
// from NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup. If the receiver or the field PolicerOverrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup) GetPolicerOverrides() *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides {
	if t != nil && t.PolicerOverrides != nil {
		return t.PolicerOverrides
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInstanceId retrieves the value of the leaf InstanceId from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceId is set, it can
// safely use t.GetInstanceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup) GetInstanceId() uint16 {
	if t == nil || t.InstanceId == nil {
		return 0
	}
	return *t.InstanceId
}

// GetQueueGroupName retrieves the value of the leaf QueueGroupName from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupName is set, it can
// safely use t.GetQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup) GetQueueGroupName() string {
	if t == nil || t.QueueGroupName == nil {
		return ""
	}
	return *t.QueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	t.PolicerControlPolicy.PopulateDefaults()
	t.PolicerOverrides.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InstanceId == nil {
		return nil, fmt.Errorf("nil value for key InstanceId")
	}

	if t.QueueGroupName == nil {
		return nil, fmt.Errorf("nil value for key QueueGroupName")
	}

	return map[string]interface{}{
		"instance-id":      *t.InstanceId,
		"queue-group-name": *t.QueueGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup.
func (*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy represents the /nokia-conf/configure/card/fp/ingress/access/queue-group/policer-control-policy YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                               `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy.
func (*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/card/fp/ingress/access/queue-group/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides struct {
	ApplyGroups           []string                                                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	MaxRate               NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides) GetPriorityMbsThresholds() *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides) GetMaxRate() NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds represents the /nokia-conf/configure/card/fp/ingress/access/queue-group/policer-control-policy/overrides/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds struct {
	MinThresholdSeparation NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_MinThresholdSeparation_Union `path:"min-threshold-separation" module:"nokia-conf"`
	Priority               map[int32]*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority          `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) NewPriority(Level int32) (*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority)
	}

	key := Level

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority{
		Level: &Level,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) RenamePriority(oldK, newK int32) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.Level = &newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) GetOrCreatePriority(Level int32) *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority {

	key := Level

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(Level)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) GetPriority(Level int32) *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := Level

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) DeletePriority(Level int32) {
	key := Level

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) error {
	if v.Level == nil {
		return fmt.Errorf("invalid nil key received for Level")
	}

	key := *v.Level

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThresholdSeparation retrieves the value of the leaf MinThresholdSeparation from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThresholdSeparation is set, it can
// safely use t.GetMinThresholdSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThresholdSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) GetMinThresholdSeparation() NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_MinThresholdSeparation_Union {
	if t == nil || t.MinThresholdSeparation == nil {
		return nil
	}
	return t.MinThresholdSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds.
func (*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/card/fp/ingress/access/queue-group/policer-control-policy/overrides/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority struct {
	ApplyGroups        []string                                                                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              *int32                                                                                                                                    `path:"level" module:"nokia-conf"`
	MbsContribution    NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Level == nil {
		return nil, fmt.Errorf("nil value for key Level")
	}

	return map[string]interface{}{
		"level": *t.Level,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides represents the /nokia-conf/configure/card/fp/ingress/access/queue-group/policer-overrides YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides struct {
	Policer map[int32]*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer `path:"policer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) IsYANGGoStruct() {}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) NewPolicer(PolicerId int32) (*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) RenamePolicer(oldK, newK int32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) GetOrCreatePolicer(PolicerId int32) *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) GetPolicer(PolicerId int32) *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) DeletePolicer(PolicerId int32) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer struct to the
// list Policer of NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) AppendPolicer(v *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides.
func (*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer represents the /nokia-conf/configure/card/fp/ingress/access/queue-group/policer-overrides/policer YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer struct {
	ApplyGroups        []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Cbs_Union `path:"cbs" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Mbs_Union `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                                   `path:"packet-byte-offset" module:"nokia-conf"`
	PolicerId          *int32                                                                                   `path:"policer-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate     `path:"rate" module:"nokia-conf"`
	StatMode           E_NokiaTypesQos_IngressPolicerStatMode                                                   `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) IsYANGGoStruct() {
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate{}
	return t.Rate
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) GetRate() *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) GetCbs() NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) GetMbs() NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) GetPolicerId() int32 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) GetStatMode() E_NokiaTypesQos_IngressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer.
func (*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate represents the /nokia-conf/configure/card/fp/ingress/access/queue-group/policer-overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate) GetCir() NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate) GetPir() NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate.
func (*NokiaConf_Configure_Card_Fp_Ingress_Access_QueueGroup_PolicerOverrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_DistCpuProtection represents the /nokia-conf/configure/card/fp/ingress/dist-cpu-protection YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_DistCpuProtection struct {
	DynamicEnforcementPolicerPool *uint32 `path:"dynamic-enforcement-policer-pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_DistCpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_DistCpuProtection) IsYANGGoStruct() {}

// GetDynamicEnforcementPolicerPool retrieves the value of the leaf DynamicEnforcementPolicerPool from the NokiaConf_Configure_Card_Fp_Ingress_DistCpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicEnforcementPolicerPool is set, it can
// safely use t.GetDynamicEnforcementPolicerPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicEnforcementPolicerPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_DistCpuProtection) GetDynamicEnforcementPolicerPool() uint32 {
	if t == nil || t.DynamicEnforcementPolicerPool == nil {
		return 0
	}
	return *t.DynamicEnforcementPolicerPool
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_DistCpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_DistCpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_DistCpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_DistCpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_DistCpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_DistCpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_DistCpuProtection.
func (*NokiaConf_Configure_Card_Fp_Ingress_DistCpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_McastPathManagement represents the /nokia-conf/configure/card/fp/ingress/mcast-path-management YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_McastPathManagement struct {
	AdminState      E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	BandwidthPolicy *string                     `path:"bandwidth-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_McastPathManagement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_McastPathManagement) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Card_Fp_Ingress_McastPathManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_McastPathManagement) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBandwidthPolicy retrieves the value of the leaf BandwidthPolicy from the NokiaConf_Configure_Card_Fp_Ingress_McastPathManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BandwidthPolicy is set, it can
// safely use t.GetBandwidthPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BandwidthPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_McastPathManagement) GetBandwidthPolicy() string {
	if t == nil || t.BandwidthPolicy == nil {
		return ""
	}
	return *t.BandwidthPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_McastPathManagement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_McastPathManagement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_McastPathManagement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_McastPathManagement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_McastPathManagement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_McastPathManagement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_McastPathManagement.
func (*NokiaConf_Configure_Card_Fp_Ingress_McastPathManagement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Network represents the /nokia-conf/configure/card/fp/ingress/network YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Network struct {
	Pool        map[string]*NokiaConf_Configure_Card_Fp_Ingress_Network_Pool                                                           `path:"pool" module:"nokia-conf"`
	QueueGroup  map[NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_Key]*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup `path:"queue-group" module:"nokia-conf"`
	QueuePolicy *string                                                                                                                `path:"queue-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network) IsYANGGoStruct() {}

// NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_Key represents the key for list QueueGroup of element /nokia-conf/configure/card/fp/ingress/network.
type NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_Key struct {
	QueueGroupName string `path:"queue-group-name"`
	InstanceId     uint16 `path:"instance-id"`
}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Card_Fp_Ingress_Network struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network) NewPool(Name string) (*NokiaConf_Configure_Card_Fp_Ingress_Network_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Card_Fp_Ingress_Network_Pool)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Card_Fp_Ingress_Network_Pool{
		Name: &Name,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Card_Fp_Ingress_Network struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.Name = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Fp_Ingress_Network. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network) GetOrCreatePool(Name string) *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool {

	key := Name

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Card_Fp_Ingress_Network. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network) GetPool(Name string) *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Fp_Ingress_Network. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network) DeletePool(Name string) {
	key := Name

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Card_Fp_Ingress_Network_Pool struct to the
// list Pool of NokiaConf_Configure_Card_Fp_Ingress_Network. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Fp_Ingress_Network_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network) AppendPool(v *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Card_Fp_Ingress_Network_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// NewQueueGroup creates a new entry in the QueueGroup list of the
// NokiaConf_Configure_Card_Fp_Ingress_Network struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network) NewQueueGroup(QueueGroupName string, InstanceId uint16) (*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_Key]*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup)
	}

	key := NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueGroup", key)
	}

	t.QueueGroup[key] = &NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup{
		QueueGroupName: &QueueGroupName,
		InstanceId:     &InstanceId,
	}

	return t.QueueGroup[key], nil
}

// RenameQueueGroup renames an entry in the list QueueGroup within
// the NokiaConf_Configure_Card_Fp_Ingress_Network struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network) RenameQueueGroup(oldK, newK NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_Key) error {
	if _, ok := t.QueueGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueGroup", newK)
	}

	e, ok := t.QueueGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueGroup", oldK)
	}
	e.QueueGroupName = &newK.QueueGroupName
	e.InstanceId = &newK.InstanceId

	t.QueueGroup[newK] = e
	delete(t.QueueGroup, oldK)
	return nil
}

// GetOrCreateQueueGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Fp_Ingress_Network. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network) GetOrCreateQueueGroup(QueueGroupName string, InstanceId uint16) *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup {

	key := NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	if v, ok := t.QueueGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueGroup(QueueGroupName, InstanceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueGroup got unexpected error: %v", err))
	}
	return v
}

// GetQueueGroup retrieves the value with the specified key from
// the QueueGroup map field of NokiaConf_Configure_Card_Fp_Ingress_Network. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network) GetQueueGroup(QueueGroupName string, InstanceId uint16) *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	if lm, ok := t.QueueGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Fp_Ingress_Network. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network) DeleteQueueGroup(QueueGroupName string, InstanceId uint16) {
	key := NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	delete(t.QueueGroup, key)
}

// AppendQueueGroup appends the supplied NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup struct to the
// list QueueGroup of NokiaConf_Configure_Card_Fp_Ingress_Network. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network) AppendQueueGroup(v *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup) error {
	if v.QueueGroupName == nil {
		return fmt.Errorf("invalid nil key for QueueGroupName")
	}

	if v.InstanceId == nil {
		return fmt.Errorf("invalid nil key for InstanceId")
	}

	key := NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_Key{
		QueueGroupName: *v.QueueGroupName,
		InstanceId:     *v.InstanceId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_Key]*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup)
	}

	if _, ok := t.QueueGroup[key]; ok {
		return fmt.Errorf("duplicate key for list QueueGroup %v", key)
	}

	t.QueueGroup[key] = v
	return nil
}

// GetQueuePolicy retrieves the value of the leaf QueuePolicy from the NokiaConf_Configure_Card_Fp_Ingress_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuePolicy is set, it can
// safely use t.GetQueuePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network) GetQueuePolicy() string {
	if t == nil || t.QueuePolicy == nil {
		return ""
	}
	return *t.QueuePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
	for _, e := range t.QueueGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Network.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Network_Pool represents the /nokia-conf/configure/card/fp/ingress/network/pool YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Network_Pool struct {
	AmberAlarmThreshold *uint32                                                   `path:"amber-alarm-threshold" module:"nokia-conf"`
	ApplyGroups         []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Name                *string                                                   `path:"name" module:"nokia-conf"`
	RedAlarmThreshold   *uint32                                                   `path:"red-alarm-threshold" module:"nokia-conf"`
	ResvCbs             *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs `path:"resv-cbs" module:"nokia-conf"`
	SlopePolicy         *string                                                   `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Network_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_Pool) IsYANGGoStruct() {}

// GetOrCreateResvCbs retrieves the value of the ResvCbs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool) GetOrCreateResvCbs() *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs {
	if t.ResvCbs != nil {
		return t.ResvCbs
	}
	t.ResvCbs = &NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs{}
	return t.ResvCbs
}

// GetResvCbs returns the value of the ResvCbs struct pointer
// from NokiaConf_Configure_Card_Fp_Ingress_Network_Pool. If the receiver or the field ResvCbs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool) GetResvCbs() *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs {
	if t != nil && t.ResvCbs != nil {
		return t.ResvCbs
	}
	return nil
}

// GetAmberAlarmThreshold retrieves the value of the leaf AmberAlarmThreshold from the NokiaConf_Configure_Card_Fp_Ingress_Network_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AmberAlarmThreshold is set, it can
// safely use t.GetAmberAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AmberAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool) GetAmberAlarmThreshold() uint32 {
	if t == nil || t.AmberAlarmThreshold == nil {
		return 0
	}
	return *t.AmberAlarmThreshold
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Fp_Ingress_Network_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Fp_Ingress_Network_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Card_Fp_Ingress_Network_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRedAlarmThreshold retrieves the value of the leaf RedAlarmThreshold from the NokiaConf_Configure_Card_Fp_Ingress_Network_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedAlarmThreshold is set, it can
// safely use t.GetRedAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool) GetRedAlarmThreshold() uint32 {
	if t == nil || t.RedAlarmThreshold == nil {
		return 0
	}
	return *t.RedAlarmThreshold
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Card_Fp_Ingress_Network_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Network_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ResvCbs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Fp_Ingress_Network_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Network_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Network_Pool.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs represents the /nokia-conf/configure/card/fp/ingress/network/pool/resv-cbs YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs struct {
	AmberAlarmAction *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction `path:"amber-alarm-action" module:"nokia-conf"`
	Cbs              *int32                                                                     `path:"cbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs) IsYANGGoStruct() {}

// GetOrCreateAmberAlarmAction retrieves the value of the AmberAlarmAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs) GetOrCreateAmberAlarmAction() *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction {
	if t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	t.AmberAlarmAction = &NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction{}
	return t.AmberAlarmAction
}

// GetAmberAlarmAction returns the value of the AmberAlarmAction struct pointer
// from NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs. If the receiver or the field AmberAlarmAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs) GetAmberAlarmAction() *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction {
	if t != nil && t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AmberAlarmAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction represents the /nokia-conf/configure/card/fp/ingress/network/pool/resv-cbs/amber-alarm-action YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction struct {
	Max  *uint32 `path:"max" module:"nokia-conf"`
	Step *uint32 `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction) IsYANGGoStruct() {}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction) GetStep() uint32 {
	if t == nil || t.Step == nil {
		return 0
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_Pool_ResvCbs_AmberAlarmAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup represents the /nokia-conf/configure/card/fp/ingress/network/queue-group YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup struct {
	AccountingPolicy     *uint32                                                                      `path:"accounting-policy" module:"nokia-conf"`
	ApplyGroups          []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats         *bool                                                                        `path:"collect-stats" module:"nokia-conf"`
	Description          *string                                                                      `path:"description" module:"nokia-conf"`
	InstanceId           *uint16                                                                      `path:"instance-id" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	PolicerOverrides     *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides     `path:"policer-overrides" module:"nokia-conf"`
	QueueGroupName       *string                                                                      `path:"queue-group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup) IsYANGGoStruct() {}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreatePolicerOverrides retrieves the value of the PolicerOverrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup) GetOrCreatePolicerOverrides() *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides {
	if t.PolicerOverrides != nil {
		return t.PolicerOverrides
	}
	t.PolicerOverrides = &NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides{}
	return t.PolicerOverrides
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup) GetPolicerControlPolicy() *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetPolicerOverrides returns the value of the PolicerOverrides struct pointer
// from NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup. If the receiver or the field PolicerOverrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup) GetPolicerOverrides() *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides {
	if t != nil && t.PolicerOverrides != nil {
		return t.PolicerOverrides
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInstanceId retrieves the value of the leaf InstanceId from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceId is set, it can
// safely use t.GetInstanceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup) GetInstanceId() uint16 {
	if t == nil || t.InstanceId == nil {
		return 0
	}
	return *t.InstanceId
}

// GetQueueGroupName retrieves the value of the leaf QueueGroupName from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupName is set, it can
// safely use t.GetQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup) GetQueueGroupName() string {
	if t == nil || t.QueueGroupName == nil {
		return ""
	}
	return *t.QueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	t.PolicerControlPolicy.PopulateDefaults()
	t.PolicerOverrides.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InstanceId == nil {
		return nil, fmt.Errorf("nil value for key InstanceId")
	}

	if t.QueueGroupName == nil {
		return nil, fmt.Errorf("nil value for key QueueGroupName")
	}

	return map[string]interface{}{
		"instance-id":      *t.InstanceId,
		"queue-group-name": *t.QueueGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy represents the /nokia-conf/configure/card/fp/ingress/network/queue-group/policer-control-policy YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                                `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/card/fp/ingress/network/queue-group/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides struct {
	ApplyGroups           []string                                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	MaxRate               NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides) GetPriorityMbsThresholds() *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides) GetMaxRate() NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds represents the /nokia-conf/configure/card/fp/ingress/network/queue-group/policer-control-policy/overrides/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds struct {
	MinThresholdSeparation NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_MinThresholdSeparation_Union `path:"min-threshold-separation" module:"nokia-conf"`
	Priority               map[int32]*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority          `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) NewPriority(Level int32) (*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority)
	}

	key := Level

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority{
		Level: &Level,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) RenamePriority(oldK, newK int32) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.Level = &newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) GetOrCreatePriority(Level int32) *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority {

	key := Level

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(Level)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) GetPriority(Level int32) *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := Level

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) DeletePriority(Level int32) {
	key := Level

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) error {
	if v.Level == nil {
		return fmt.Errorf("invalid nil key received for Level")
	}

	key := *v.Level

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThresholdSeparation retrieves the value of the leaf MinThresholdSeparation from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThresholdSeparation is set, it can
// safely use t.GetMinThresholdSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThresholdSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) GetMinThresholdSeparation() NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_MinThresholdSeparation_Union {
	if t == nil || t.MinThresholdSeparation == nil {
		return nil
	}
	return t.MinThresholdSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/card/fp/ingress/network/queue-group/policer-control-policy/overrides/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority struct {
	ApplyGroups        []string                                                                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              *int32                                                                                                                                     `path:"level" module:"nokia-conf"`
	MbsContribution    NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Level == nil {
		return nil, fmt.Errorf("nil value for key Level")
	}

	return map[string]interface{}{
		"level": *t.Level,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerControlPolicy_Overrides_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides represents the /nokia-conf/configure/card/fp/ingress/network/queue-group/policer-overrides YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides struct {
	Policer map[int32]*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer `path:"policer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) IsYANGGoStruct() {}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) NewPolicer(PolicerId int32) (*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) RenamePolicer(oldK, newK int32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) GetOrCreatePolicer(PolicerId int32) *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) GetPolicer(PolicerId int32) *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) DeletePolicer(PolicerId int32) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer struct to the
// list Policer of NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) AppendPolicer(v *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer represents the /nokia-conf/configure/card/fp/ingress/network/queue-group/policer-overrides/policer YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer struct {
	ApplyGroups        []string                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Cbs_Union `path:"cbs" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Mbs_Union `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                                    `path:"packet-byte-offset" module:"nokia-conf"`
	PolicerId          *int32                                                                                    `path:"policer-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate     `path:"rate" module:"nokia-conf"`
	StatMode           E_NokiaTypesQos_IngressPolicerStatMode                                                    `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) IsYANGGoStruct() {
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate{}
	return t.Rate
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) GetRate() *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) GetCbs() NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) GetMbs() NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) GetPolicerId() int32 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) GetStatMode() E_NokiaTypesQos_IngressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate represents the /nokia-conf/configure/card/fp/ingress/network/queue-group/policer-overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate) GetCir() NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate) GetPir() NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate.
func (*NokiaConf_Configure_Card_Fp_Ingress_Network_QueueGroup_PolicerOverrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Fp_Ingress_PolicyAccounting represents the /nokia-conf/configure/card/fp/ingress/policy-accounting YANG schema element.
type NokiaConf_Configure_Card_Fp_Ingress_PolicyAccounting struct {
	Classes  *uint32 `path:"classes" module:"nokia-conf"`
	Policers *uint32 `path:"policers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Fp_Ingress_PolicyAccounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Fp_Ingress_PolicyAccounting) IsYANGGoStruct() {}

// GetClasses retrieves the value of the leaf Classes from the NokiaConf_Configure_Card_Fp_Ingress_PolicyAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Classes is set, it can
// safely use t.GetClasses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Classes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_PolicyAccounting) GetClasses() uint32 {
	if t == nil || t.Classes == nil {
		return 0
	}
	return *t.Classes
}

// GetPolicers retrieves the value of the leaf Policers from the NokiaConf_Configure_Card_Fp_Ingress_PolicyAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policers is set, it can
// safely use t.GetPolicers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Fp_Ingress_PolicyAccounting) GetPolicers() uint32 {
	if t == nil || t.Policers == nil {
		return 0
	}
	return *t.Policers
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Fp_Ingress_PolicyAccounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Fp_Ingress_PolicyAccounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_PolicyAccounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Fp_Ingress_PolicyAccounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Fp_Ingress_PolicyAccounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Fp_Ingress_PolicyAccounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Fp_Ingress_PolicyAccounting.
func (*NokiaConf_Configure_Card_Fp_Ingress_PolicyAccounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda represents the /nokia-conf/configure/card/mda YANG schema element.
type NokiaConf_Configure_Card_Mda struct {
	Access                  *NokiaConf_Configure_Card_Mda_Access                                              `path:"access" module:"nokia-conf"`
	AdminState              E_NokiaTypesSros_AdminState                                                       `path:"admin-state" module:"nokia-conf"`
	ApplyGroups             []string                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	ClockMode               *NokiaConf_Configure_Card_Mda_ClockMode                                           `path:"clock-mode" module:"nokia-conf"`
	Egress                  *NokiaConf_Configure_Card_Mda_Egress                                              `path:"egress" module:"nokia-conf"`
	EgressXpl               *NokiaConf_Configure_Card_Mda_EgressXpl                                           `path:"egress-xpl" module:"nokia-conf"`
	Event                   map[E_NokiaConf_Configure_Card_Mda_Event_Type]*NokiaConf_Configure_Card_Mda_Event `path:"event" module:"nokia-conf"`
	FailOnError             *bool                                                                             `path:"fail-on-error" module:"nokia-conf"`
	IngressXpl              *NokiaConf_Configure_Card_Mda_IngressXpl                                          `path:"ingress-xpl" module:"nokia-conf"`
	Level                   E_NokiaTypesCard_SrosMdaLevel                                                     `path:"level" module:"nokia-conf"`
	MdaSlot                 *uint32                                                                           `path:"mda-slot" module:"nokia-conf"`
	MdaType                 E_NokiaTypesCard_SrosMdaType                                                      `path:"mda-type" module:"nokia-conf"`
	Network                 *NokiaConf_Configure_Card_Mda_Network                                             `path:"network" module:"nokia-conf"`
	PowerPriorityLevel      *uint32                                                                           `path:"power-priority-level" module:"nokia-conf"`
	ResetOnRecoverableError *bool                                                                             `path:"reset-on-recoverable-error" module:"nokia-conf"`
	SyncE                   E_NokiaConf_Configure_Card_Mda_SyncE                                              `path:"sync-e" module:"nokia-conf"`
	Upgrade                 map[uint32]*NokiaConf_Configure_Card_Mda_Upgrade                                  `path:"upgrade" module:"nokia-conf"`
	Xconnect                *NokiaConf_Configure_Card_Mda_Xconnect                                            `path:"xconnect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// NokiaConf_Configure_Card_Mda struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card_Mda) NewEvent(Type E_NokiaConf_Configure_Card_Mda_Event_Type) (*NokiaConf_Configure_Card_Mda_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_NokiaConf_Configure_Card_Mda_Event_Type]*NokiaConf_Configure_Card_Mda_Event)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &NokiaConf_Configure_Card_Mda_Event{
		Type: Type,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the NokiaConf_Configure_Card_Mda struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card_Mda) RenameEvent(oldK, newK E_NokiaConf_Configure_Card_Mda_Event_Type) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.Type = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Mda. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card_Mda) GetOrCreateEvent(Type E_NokiaConf_Configure_Card_Mda_Event_Type) *NokiaConf_Configure_Card_Mda_Event {

	key := Type

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of NokiaConf_Configure_Card_Mda. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card_Mda) GetEvent(Type E_NokiaConf_Configure_Card_Mda_Event_Type) *NokiaConf_Configure_Card_Mda_Event {

	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Mda. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card_Mda) DeleteEvent(Type E_NokiaConf_Configure_Card_Mda_Event_Type) {
	key := Type

	delete(t.Event, key)
}

// AppendEvent appends the supplied NokiaConf_Configure_Card_Mda_Event struct to the
// list Event of NokiaConf_Configure_Card_Mda. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Mda_Event already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card_Mda) AppendEvent(v *NokiaConf_Configure_Card_Mda_Event) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_NokiaConf_Configure_Card_Mda_Event_Type]*NokiaConf_Configure_Card_Mda_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// NewUpgrade creates a new entry in the Upgrade list of the
// NokiaConf_Configure_Card_Mda struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card_Mda) NewUpgrade(UpgradeIndex uint32) (*NokiaConf_Configure_Card_Mda_Upgrade, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Upgrade == nil {
		t.Upgrade = make(map[uint32]*NokiaConf_Configure_Card_Mda_Upgrade)
	}

	key := UpgradeIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Upgrade[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Upgrade", key)
	}

	t.Upgrade[key] = &NokiaConf_Configure_Card_Mda_Upgrade{
		UpgradeIndex: &UpgradeIndex,
	}

	return t.Upgrade[key], nil
}

// RenameUpgrade renames an entry in the list Upgrade within
// the NokiaConf_Configure_Card_Mda struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card_Mda) RenameUpgrade(oldK, newK uint32) error {
	if _, ok := t.Upgrade[newK]; ok {
		return fmt.Errorf("key %v already exists in Upgrade", newK)
	}

	e, ok := t.Upgrade[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Upgrade", oldK)
	}
	e.UpgradeIndex = &newK

	t.Upgrade[newK] = e
	delete(t.Upgrade, oldK)
	return nil
}

// GetOrCreateUpgrade retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Mda. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card_Mda) GetOrCreateUpgrade(UpgradeIndex uint32) *NokiaConf_Configure_Card_Mda_Upgrade {

	key := UpgradeIndex

	if v, ok := t.Upgrade[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUpgrade(UpgradeIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUpgrade got unexpected error: %v", err))
	}
	return v
}

// GetUpgrade retrieves the value with the specified key from
// the Upgrade map field of NokiaConf_Configure_Card_Mda. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card_Mda) GetUpgrade(UpgradeIndex uint32) *NokiaConf_Configure_Card_Mda_Upgrade {

	if t == nil {
		return nil
	}

	key := UpgradeIndex

	if lm, ok := t.Upgrade[key]; ok {
		return lm
	}
	return nil
}

// DeleteUpgrade deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Mda. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card_Mda) DeleteUpgrade(UpgradeIndex uint32) {
	key := UpgradeIndex

	delete(t.Upgrade, key)
}

// AppendUpgrade appends the supplied NokiaConf_Configure_Card_Mda_Upgrade struct to the
// list Upgrade of NokiaConf_Configure_Card_Mda. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Mda_Upgrade already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card_Mda) AppendUpgrade(v *NokiaConf_Configure_Card_Mda_Upgrade) error {
	if v.UpgradeIndex == nil {
		return fmt.Errorf("invalid nil key received for UpgradeIndex")
	}

	key := *v.UpgradeIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Upgrade == nil {
		t.Upgrade = make(map[uint32]*NokiaConf_Configure_Card_Mda_Upgrade)
	}

	if _, ok := t.Upgrade[key]; ok {
		return fmt.Errorf("duplicate key for list Upgrade %v", key)
	}

	t.Upgrade[key] = v
	return nil
}

// GetOrCreateAccess retrieves the value of the Access field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Mda) GetOrCreateAccess() *NokiaConf_Configure_Card_Mda_Access {
	if t.Access != nil {
		return t.Access
	}
	t.Access = &NokiaConf_Configure_Card_Mda_Access{}
	return t.Access
}

// GetOrCreateClockMode retrieves the value of the ClockMode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Mda) GetOrCreateClockMode() *NokiaConf_Configure_Card_Mda_ClockMode {
	if t.ClockMode != nil {
		return t.ClockMode
	}
	t.ClockMode = &NokiaConf_Configure_Card_Mda_ClockMode{}
	return t.ClockMode
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Mda) GetOrCreateEgress() *NokiaConf_Configure_Card_Mda_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Card_Mda_Egress{}
	return t.Egress
}

// GetOrCreateEgressXpl retrieves the value of the EgressXpl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Mda) GetOrCreateEgressXpl() *NokiaConf_Configure_Card_Mda_EgressXpl {
	if t.EgressXpl != nil {
		return t.EgressXpl
	}
	t.EgressXpl = &NokiaConf_Configure_Card_Mda_EgressXpl{}
	return t.EgressXpl
}

// GetOrCreateIngressXpl retrieves the value of the IngressXpl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Mda) GetOrCreateIngressXpl() *NokiaConf_Configure_Card_Mda_IngressXpl {
	if t.IngressXpl != nil {
		return t.IngressXpl
	}
	t.IngressXpl = &NokiaConf_Configure_Card_Mda_IngressXpl{}
	return t.IngressXpl
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Mda) GetOrCreateNetwork() *NokiaConf_Configure_Card_Mda_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Card_Mda_Network{}
	return t.Network
}

// GetOrCreateXconnect retrieves the value of the Xconnect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Mda) GetOrCreateXconnect() *NokiaConf_Configure_Card_Mda_Xconnect {
	if t.Xconnect != nil {
		return t.Xconnect
	}
	t.Xconnect = &NokiaConf_Configure_Card_Mda_Xconnect{}
	return t.Xconnect
}

// GetAccess returns the value of the Access struct pointer
// from NokiaConf_Configure_Card_Mda. If the receiver or the field Access is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Mda) GetAccess() *NokiaConf_Configure_Card_Mda_Access {
	if t != nil && t.Access != nil {
		return t.Access
	}
	return nil
}

// GetClockMode returns the value of the ClockMode struct pointer
// from NokiaConf_Configure_Card_Mda. If the receiver or the field ClockMode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Mda) GetClockMode() *NokiaConf_Configure_Card_Mda_ClockMode {
	if t != nil && t.ClockMode != nil {
		return t.ClockMode
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Card_Mda. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Mda) GetEgress() *NokiaConf_Configure_Card_Mda_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEgressXpl returns the value of the EgressXpl struct pointer
// from NokiaConf_Configure_Card_Mda. If the receiver or the field EgressXpl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Mda) GetEgressXpl() *NokiaConf_Configure_Card_Mda_EgressXpl {
	if t != nil && t.EgressXpl != nil {
		return t.EgressXpl
	}
	return nil
}

// GetIngressXpl returns the value of the IngressXpl struct pointer
// from NokiaConf_Configure_Card_Mda. If the receiver or the field IngressXpl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Mda) GetIngressXpl() *NokiaConf_Configure_Card_Mda_IngressXpl {
	if t != nil && t.IngressXpl != nil {
		return t.IngressXpl
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Card_Mda. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Mda) GetNetwork() *NokiaConf_Configure_Card_Mda_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetXconnect returns the value of the Xconnect struct pointer
// from NokiaConf_Configure_Card_Mda. If the receiver or the field Xconnect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Mda) GetXconnect() *NokiaConf_Configure_Card_Mda_Xconnect {
	if t != nil && t.Xconnect != nil {
		return t.Xconnect
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Card_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFailOnError retrieves the value of the leaf FailOnError from the NokiaConf_Configure_Card_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailOnError is set, it can
// safely use t.GetFailOnError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailOnError == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda) GetFailOnError() bool {
	if t == nil || t.FailOnError == nil {
		return false
	}
	return *t.FailOnError
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Card_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda) GetLevel() E_NokiaTypesCard_SrosMdaLevel {
	if t == nil || t.Level == 0 {
		return 0
	}
	return t.Level
}

// GetMdaSlot retrieves the value of the leaf MdaSlot from the NokiaConf_Configure_Card_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdaSlot is set, it can
// safely use t.GetMdaSlot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdaSlot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda) GetMdaSlot() uint32 {
	if t == nil || t.MdaSlot == nil {
		return 0
	}
	return *t.MdaSlot
}

// GetMdaType retrieves the value of the leaf MdaType from the NokiaConf_Configure_Card_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdaType is set, it can
// safely use t.GetMdaType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdaType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda) GetMdaType() E_NokiaTypesCard_SrosMdaType {
	if t == nil || t.MdaType == 0 {
		return 0
	}
	return t.MdaType
}

// GetPowerPriorityLevel retrieves the value of the leaf PowerPriorityLevel from the NokiaConf_Configure_Card_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerPriorityLevel is set, it can
// safely use t.GetPowerPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerPriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda) GetPowerPriorityLevel() uint32 {
	if t == nil || t.PowerPriorityLevel == nil {
		return 150
	}
	return *t.PowerPriorityLevel
}

// GetResetOnRecoverableError retrieves the value of the leaf ResetOnRecoverableError from the NokiaConf_Configure_Card_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResetOnRecoverableError is set, it can
// safely use t.GetResetOnRecoverableError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResetOnRecoverableError == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda) GetResetOnRecoverableError() bool {
	if t == nil || t.ResetOnRecoverableError == nil {
		return false
	}
	return *t.ResetOnRecoverableError
}

// GetSyncE retrieves the value of the leaf SyncE from the NokiaConf_Configure_Card_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncE is set, it can
// safely use t.GetSyncE() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncE == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda) GetSyncE() E_NokiaConf_Configure_Card_Mda_SyncE {
	if t == nil || t.SyncE == 0 {
		return 0
	}
	return t.SyncE
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.FailOnError == nil {
		var v bool = false
		t.FailOnError = &v
	}
	if t.PowerPriorityLevel == nil {
		var v uint32 = 150
		t.PowerPriorityLevel = &v
	}
	if t.ResetOnRecoverableError == nil {
		var v bool = false
		t.ResetOnRecoverableError = &v
	}
	t.Access.PopulateDefaults()
	t.ClockMode.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.EgressXpl.PopulateDefaults()
	t.IngressXpl.PopulateDefaults()
	t.Network.PopulateDefaults()
	t.Xconnect.PopulateDefaults()
	for _, e := range t.Event {
		e.PopulateDefaults()
	}
	for _, e := range t.Upgrade {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Mda struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Mda) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MdaSlot == nil {
		return nil, fmt.Errorf("nil value for key MdaSlot")
	}

	return map[string]interface{}{
		"mda-slot": *t.MdaSlot,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda.
func (*NokiaConf_Configure_Card_Mda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Access represents the /nokia-conf/configure/card/mda/access YANG schema element.
type NokiaConf_Configure_Card_Mda_Access struct {
	ApplyGroups        []string                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Card_Mda_Access_Egress  `path:"egress" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Card_Mda_Access_Ingress `path:"ingress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Access implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Access) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Mda_Access) GetOrCreateEgress() *NokiaConf_Configure_Card_Mda_Access_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Card_Mda_Access_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Mda_Access) GetOrCreateIngress() *NokiaConf_Configure_Card_Mda_Access_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Card_Mda_Access_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Card_Mda_Access. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Mda_Access) GetEgress() *NokiaConf_Configure_Card_Mda_Access_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Card_Mda_Access. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Mda_Access) GetIngress() *NokiaConf_Configure_Card_Mda_Access_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Mda_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Mda_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Access
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Access) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Access) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Access"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Access) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Access) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Access.
func (*NokiaConf_Configure_Card_Mda_Access) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Access_Egress represents the /nokia-conf/configure/card/mda/access/egress YANG schema element.
type NokiaConf_Configure_Card_Mda_Access_Egress struct {
	ApplyGroups        []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Pool               map[string]*NokiaConf_Configure_Card_Mda_Access_Egress_Pool `path:"pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Access_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Access_Egress) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Card_Mda_Access_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress) NewPool(Name string) (*NokiaConf_Configure_Card_Mda_Access_Egress_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Card_Mda_Access_Egress_Pool)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Card_Mda_Access_Egress_Pool{
		Name: &Name,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Card_Mda_Access_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.Name = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Mda_Access_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress) GetOrCreatePool(Name string) *NokiaConf_Configure_Card_Mda_Access_Egress_Pool {

	key := Name

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Card_Mda_Access_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress) GetPool(Name string) *NokiaConf_Configure_Card_Mda_Access_Egress_Pool {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Mda_Access_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress) DeletePool(Name string) {
	key := Name

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Card_Mda_Access_Egress_Pool struct to the
// list Pool of NokiaConf_Configure_Card_Mda_Access_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Mda_Access_Egress_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress) AppendPool(v *NokiaConf_Configure_Card_Mda_Access_Egress_Pool) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Card_Mda_Access_Egress_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Mda_Access_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Mda_Access_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Access_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Access_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Access_Egress.
func (*NokiaConf_Configure_Card_Mda_Access_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Access_Egress_Pool represents the /nokia-conf/configure/card/mda/access/egress/pool YANG schema element.
type NokiaConf_Configure_Card_Mda_Access_Egress_Pool struct {
	AmberAlarmThreshold *uint32                                                  `path:"amber-alarm-threshold" module:"nokia-conf"`
	ApplyGroups         []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Name                *string                                                  `path:"name" module:"nokia-conf"`
	RedAlarmThreshold   *uint32                                                  `path:"red-alarm-threshold" module:"nokia-conf"`
	ResvCbs             *NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs `path:"resv-cbs" module:"nokia-conf"`
	SlopePolicy         *string                                                  `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Access_Egress_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Access_Egress_Pool) IsYANGGoStruct() {}

// GetOrCreateResvCbs retrieves the value of the ResvCbs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool) GetOrCreateResvCbs() *NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs {
	if t.ResvCbs != nil {
		return t.ResvCbs
	}
	t.ResvCbs = &NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs{}
	return t.ResvCbs
}

// GetResvCbs returns the value of the ResvCbs struct pointer
// from NokiaConf_Configure_Card_Mda_Access_Egress_Pool. If the receiver or the field ResvCbs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool) GetResvCbs() *NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs {
	if t != nil && t.ResvCbs != nil {
		return t.ResvCbs
	}
	return nil
}

// GetAmberAlarmThreshold retrieves the value of the leaf AmberAlarmThreshold from the NokiaConf_Configure_Card_Mda_Access_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AmberAlarmThreshold is set, it can
// safely use t.GetAmberAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AmberAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool) GetAmberAlarmThreshold() uint32 {
	if t == nil || t.AmberAlarmThreshold == nil {
		return 0
	}
	return *t.AmberAlarmThreshold
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Mda_Access_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Mda_Access_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Card_Mda_Access_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRedAlarmThreshold retrieves the value of the leaf RedAlarmThreshold from the NokiaConf_Configure_Card_Mda_Access_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedAlarmThreshold is set, it can
// safely use t.GetRedAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool) GetRedAlarmThreshold() uint32 {
	if t == nil || t.RedAlarmThreshold == nil {
		return 0
	}
	return *t.RedAlarmThreshold
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Card_Mda_Access_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Access_Egress_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ResvCbs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Mda_Access_Egress_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Access_Egress_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Access_Egress_Pool.
func (*NokiaConf_Configure_Card_Mda_Access_Egress_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs represents the /nokia-conf/configure/card/mda/access/egress/pool/resv-cbs YANG schema element.
type NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs struct {
	AmberAlarmAction *NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction `path:"amber-alarm-action" module:"nokia-conf"`
	Cbs              *int32                                                                    `path:"cbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs) IsYANGGoStruct() {}

// GetOrCreateAmberAlarmAction retrieves the value of the AmberAlarmAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs) GetOrCreateAmberAlarmAction() *NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction {
	if t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	t.AmberAlarmAction = &NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction{}
	return t.AmberAlarmAction
}

// GetAmberAlarmAction returns the value of the AmberAlarmAction struct pointer
// from NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs. If the receiver or the field AmberAlarmAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs) GetAmberAlarmAction() *NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction {
	if t != nil && t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AmberAlarmAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs.
func (*NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction represents the /nokia-conf/configure/card/mda/access/egress/pool/resv-cbs/amber-alarm-action YANG schema element.
type NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction struct {
	Max  *uint32 `path:"max" module:"nokia-conf"`
	Step *uint32 `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction) IsYANGGoStruct() {}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction) GetStep() uint32 {
	if t == nil || t.Step == nil {
		return 0
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction.
func (*NokiaConf_Configure_Card_Mda_Access_Egress_Pool_ResvCbs_AmberAlarmAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Access_Ingress represents the /nokia-conf/configure/card/mda/access/ingress YANG schema element.
type NokiaConf_Configure_Card_Mda_Access_Ingress struct {
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Pool               map[string]*NokiaConf_Configure_Card_Mda_Access_Ingress_Pool `path:"pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Access_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Access_Ingress) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Card_Mda_Access_Ingress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress) NewPool(Name string) (*NokiaConf_Configure_Card_Mda_Access_Ingress_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Card_Mda_Access_Ingress_Pool)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Card_Mda_Access_Ingress_Pool{
		Name: &Name,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Card_Mda_Access_Ingress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.Name = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Mda_Access_Ingress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress) GetOrCreatePool(Name string) *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool {

	key := Name

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Card_Mda_Access_Ingress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress) GetPool(Name string) *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Mda_Access_Ingress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress) DeletePool(Name string) {
	key := Name

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Card_Mda_Access_Ingress_Pool struct to the
// list Pool of NokiaConf_Configure_Card_Mda_Access_Ingress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Mda_Access_Ingress_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress) AppendPool(v *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Card_Mda_Access_Ingress_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Mda_Access_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Mda_Access_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Access_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Access_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Access_Ingress.
func (*NokiaConf_Configure_Card_Mda_Access_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Access_Ingress_Pool represents the /nokia-conf/configure/card/mda/access/ingress/pool YANG schema element.
type NokiaConf_Configure_Card_Mda_Access_Ingress_Pool struct {
	AmberAlarmThreshold *uint32                                                   `path:"amber-alarm-threshold" module:"nokia-conf"`
	ApplyGroups         []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Name                *string                                                   `path:"name" module:"nokia-conf"`
	RedAlarmThreshold   *uint32                                                   `path:"red-alarm-threshold" module:"nokia-conf"`
	ResvCbs             *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs `path:"resv-cbs" module:"nokia-conf"`
	SlopePolicy         *string                                                   `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Access_Ingress_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Access_Ingress_Pool) IsYANGGoStruct() {}

// GetOrCreateResvCbs retrieves the value of the ResvCbs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool) GetOrCreateResvCbs() *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs {
	if t.ResvCbs != nil {
		return t.ResvCbs
	}
	t.ResvCbs = &NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs{}
	return t.ResvCbs
}

// GetResvCbs returns the value of the ResvCbs struct pointer
// from NokiaConf_Configure_Card_Mda_Access_Ingress_Pool. If the receiver or the field ResvCbs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool) GetResvCbs() *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs {
	if t != nil && t.ResvCbs != nil {
		return t.ResvCbs
	}
	return nil
}

// GetAmberAlarmThreshold retrieves the value of the leaf AmberAlarmThreshold from the NokiaConf_Configure_Card_Mda_Access_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AmberAlarmThreshold is set, it can
// safely use t.GetAmberAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AmberAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool) GetAmberAlarmThreshold() uint32 {
	if t == nil || t.AmberAlarmThreshold == nil {
		return 0
	}
	return *t.AmberAlarmThreshold
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Mda_Access_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Mda_Access_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Card_Mda_Access_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRedAlarmThreshold retrieves the value of the leaf RedAlarmThreshold from the NokiaConf_Configure_Card_Mda_Access_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedAlarmThreshold is set, it can
// safely use t.GetRedAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool) GetRedAlarmThreshold() uint32 {
	if t == nil || t.RedAlarmThreshold == nil {
		return 0
	}
	return *t.RedAlarmThreshold
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Card_Mda_Access_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Access_Ingress_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ResvCbs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Mda_Access_Ingress_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Access_Ingress_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Access_Ingress_Pool.
func (*NokiaConf_Configure_Card_Mda_Access_Ingress_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs represents the /nokia-conf/configure/card/mda/access/ingress/pool/resv-cbs YANG schema element.
type NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs struct {
	AmberAlarmAction *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction `path:"amber-alarm-action" module:"nokia-conf"`
	Cbs              *int32                                                                     `path:"cbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs) IsYANGGoStruct() {}

// GetOrCreateAmberAlarmAction retrieves the value of the AmberAlarmAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs) GetOrCreateAmberAlarmAction() *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction {
	if t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	t.AmberAlarmAction = &NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction{}
	return t.AmberAlarmAction
}

// GetAmberAlarmAction returns the value of the AmberAlarmAction struct pointer
// from NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs. If the receiver or the field AmberAlarmAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs) GetAmberAlarmAction() *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction {
	if t != nil && t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AmberAlarmAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs.
func (*NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction represents the /nokia-conf/configure/card/mda/access/ingress/pool/resv-cbs/amber-alarm-action YANG schema element.
type NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction struct {
	Max  *uint32 `path:"max" module:"nokia-conf"`
	Step *uint32 `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) IsYANGGoStruct() {}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) GetStep() uint32 {
	if t == nil || t.Step == nil {
		return 0
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction.
func (*NokiaConf_Configure_Card_Mda_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_ClockMode represents the /nokia-conf/configure/card/mda/clock-mode YANG schema element.
type NokiaConf_Configure_Card_Mda_ClockMode struct {
	Mode          E_NokiaConf_Configure_Card_Mda_ClockMode_Mode `path:"mode" module:"nokia-conf"`
	TimestampFreq *uint32                                       `path:"timestamp-freq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_ClockMode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_ClockMode) IsYANGGoStruct() {}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Card_Mda_ClockMode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_ClockMode) GetMode() E_NokiaConf_Configure_Card_Mda_ClockMode_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetTimestampFreq retrieves the value of the leaf TimestampFreq from the NokiaConf_Configure_Card_Mda_ClockMode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimestampFreq is set, it can
// safely use t.GetTimestampFreq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimestampFreq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_ClockMode) GetTimestampFreq() uint32 {
	if t == nil || t.TimestampFreq == nil {
		return 0
	}
	return *t.TimestampFreq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_ClockMode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_ClockMode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_ClockMode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_ClockMode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_ClockMode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_ClockMode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_ClockMode.
func (*NokiaConf_Configure_Card_Mda_ClockMode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Egress represents the /nokia-conf/configure/card/mda/egress YANG schema element.
type NokiaConf_Configure_Card_Mda_Egress struct {
	HsmdaAggregateQueueBurst *NokiaConf_Configure_Card_Mda_Egress_HsmdaAggregateQueueBurst `path:"hsmda-aggregate-queue-burst" module:"nokia-conf"`
	HsmdaPoolPolicy          *string                                                       `path:"hsmda-pool-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Egress) IsYANGGoStruct() {}

// GetOrCreateHsmdaAggregateQueueBurst retrieves the value of the HsmdaAggregateQueueBurst field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Mda_Egress) GetOrCreateHsmdaAggregateQueueBurst() *NokiaConf_Configure_Card_Mda_Egress_HsmdaAggregateQueueBurst {
	if t.HsmdaAggregateQueueBurst != nil {
		return t.HsmdaAggregateQueueBurst
	}
	t.HsmdaAggregateQueueBurst = &NokiaConf_Configure_Card_Mda_Egress_HsmdaAggregateQueueBurst{}
	return t.HsmdaAggregateQueueBurst
}

// GetHsmdaAggregateQueueBurst returns the value of the HsmdaAggregateQueueBurst struct pointer
// from NokiaConf_Configure_Card_Mda_Egress. If the receiver or the field HsmdaAggregateQueueBurst is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Mda_Egress) GetHsmdaAggregateQueueBurst() *NokiaConf_Configure_Card_Mda_Egress_HsmdaAggregateQueueBurst {
	if t != nil && t.HsmdaAggregateQueueBurst != nil {
		return t.HsmdaAggregateQueueBurst
	}
	return nil
}

// GetHsmdaPoolPolicy retrieves the value of the leaf HsmdaPoolPolicy from the NokiaConf_Configure_Card_Mda_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsmdaPoolPolicy is set, it can
// safely use t.GetHsmdaPoolPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsmdaPoolPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Egress) GetHsmdaPoolPolicy() string {
	if t == nil || t.HsmdaPoolPolicy == nil {
		return ""
	}
	return *t.HsmdaPoolPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HsmdaAggregateQueueBurst.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Egress.
func (*NokiaConf_Configure_Card_Mda_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_EgressXpl represents the /nokia-conf/configure/card/mda/egress-xpl YANG schema element.
type NokiaConf_Configure_Card_Mda_EgressXpl struct {
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
	Window    *uint32 `path:"window" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_EgressXpl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_EgressXpl) IsYANGGoStruct() {}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Card_Mda_EgressXpl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_EgressXpl) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 1000
	}
	return *t.Threshold
}

// GetWindow retrieves the value of the leaf Window from the NokiaConf_Configure_Card_Mda_EgressXpl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Window is set, it can
// safely use t.GetWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Window == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_EgressXpl) GetWindow() uint32 {
	if t == nil || t.Window == nil {
		return 60
	}
	return *t.Window
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_EgressXpl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_EgressXpl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Threshold == nil {
		var v uint32 = 1000
		t.Threshold = &v
	}
	if t.Window == nil {
		var v uint32 = 60
		t.Window = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_EgressXpl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_EgressXpl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_EgressXpl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_EgressXpl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_EgressXpl.
func (*NokiaConf_Configure_Card_Mda_EgressXpl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Egress_HsmdaAggregateQueueBurst represents the /nokia-conf/configure/card/mda/egress/hsmda-aggregate-queue-burst YANG schema element.
type NokiaConf_Configure_Card_Mda_Egress_HsmdaAggregateQueueBurst struct {
	HighBurstIncrease  *int32 `path:"high-burst-increase" module:"nokia-conf"`
	LowBurstMultiplier *int32 `path:"low-burst-multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Egress_HsmdaAggregateQueueBurst implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Egress_HsmdaAggregateQueueBurst) IsYANGGoStruct() {}

// GetHighBurstIncrease retrieves the value of the leaf HighBurstIncrease from the NokiaConf_Configure_Card_Mda_Egress_HsmdaAggregateQueueBurst
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighBurstIncrease is set, it can
// safely use t.GetHighBurstIncrease() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighBurstIncrease == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Egress_HsmdaAggregateQueueBurst) GetHighBurstIncrease() int32 {
	if t == nil || t.HighBurstIncrease == nil {
		return 0
	}
	return *t.HighBurstIncrease
}

// GetLowBurstMultiplier retrieves the value of the leaf LowBurstMultiplier from the NokiaConf_Configure_Card_Mda_Egress_HsmdaAggregateQueueBurst
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowBurstMultiplier is set, it can
// safely use t.GetLowBurstMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowBurstMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Egress_HsmdaAggregateQueueBurst) GetLowBurstMultiplier() int32 {
	if t == nil || t.LowBurstMultiplier == nil {
		return 0
	}
	return *t.LowBurstMultiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Egress_HsmdaAggregateQueueBurst
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Egress_HsmdaAggregateQueueBurst) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Egress_HsmdaAggregateQueueBurst) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Egress_HsmdaAggregateQueueBurst"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Egress_HsmdaAggregateQueueBurst) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Egress_HsmdaAggregateQueueBurst) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Egress_HsmdaAggregateQueueBurst.
func (*NokiaConf_Configure_Card_Mda_Egress_HsmdaAggregateQueueBurst) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Event represents the /nokia-conf/configure/card/mda/event YANG schema element.
type NokiaConf_Configure_Card_Mda_Event struct {
	Action             E_NokiaTypesChassis_HwEventAction         `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Type               E_NokiaConf_Configure_Card_Mda_Event_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Event) IsYANGGoStruct() {}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Card_Mda_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Event) GetAction() E_NokiaTypesChassis_HwEventAction {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Mda_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Event) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Mda_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Event) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Card_Mda_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Event) GetType() E_NokiaConf_Configure_Card_Mda_Event_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Event
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Event) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Mda_Event struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Mda_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Event) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Event.
func (*NokiaConf_Configure_Card_Mda_Event) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_IngressXpl represents the /nokia-conf/configure/card/mda/ingress-xpl YANG schema element.
type NokiaConf_Configure_Card_Mda_IngressXpl struct {
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
	Window    *uint32 `path:"window" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_IngressXpl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_IngressXpl) IsYANGGoStruct() {}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Card_Mda_IngressXpl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_IngressXpl) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 1000
	}
	return *t.Threshold
}

// GetWindow retrieves the value of the leaf Window from the NokiaConf_Configure_Card_Mda_IngressXpl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Window is set, it can
// safely use t.GetWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Window == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_IngressXpl) GetWindow() uint32 {
	if t == nil || t.Window == nil {
		return 60
	}
	return *t.Window
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_IngressXpl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_IngressXpl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Threshold == nil {
		var v uint32 = 1000
		t.Threshold = &v
	}
	if t.Window == nil {
		var v uint32 = 60
		t.Window = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_IngressXpl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_IngressXpl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_IngressXpl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_IngressXpl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_IngressXpl.
func (*NokiaConf_Configure_Card_Mda_IngressXpl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Network represents the /nokia-conf/configure/card/mda/network YANG schema element.
type NokiaConf_Configure_Card_Mda_Network struct {
	ApplyGroups        []string                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Card_Mda_Network_Egress  `path:"egress" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Card_Mda_Network_Ingress `path:"ingress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Network) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Mda_Network) GetOrCreateEgress() *NokiaConf_Configure_Card_Mda_Network_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Card_Mda_Network_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Mda_Network) GetOrCreateIngress() *NokiaConf_Configure_Card_Mda_Network_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Card_Mda_Network_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Card_Mda_Network. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Mda_Network) GetEgress() *NokiaConf_Configure_Card_Mda_Network_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Card_Mda_Network. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Mda_Network) GetIngress() *NokiaConf_Configure_Card_Mda_Network_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Mda_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Mda_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Network.
func (*NokiaConf_Configure_Card_Mda_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Network_Egress represents the /nokia-conf/configure/card/mda/network/egress YANG schema element.
type NokiaConf_Configure_Card_Mda_Network_Egress struct {
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Pool               map[string]*NokiaConf_Configure_Card_Mda_Network_Egress_Pool `path:"pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Network_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Network_Egress) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Card_Mda_Network_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress) NewPool(Name string) (*NokiaConf_Configure_Card_Mda_Network_Egress_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Card_Mda_Network_Egress_Pool)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Card_Mda_Network_Egress_Pool{
		Name: &Name,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Card_Mda_Network_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.Name = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Mda_Network_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress) GetOrCreatePool(Name string) *NokiaConf_Configure_Card_Mda_Network_Egress_Pool {

	key := Name

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Card_Mda_Network_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress) GetPool(Name string) *NokiaConf_Configure_Card_Mda_Network_Egress_Pool {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Mda_Network_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress) DeletePool(Name string) {
	key := Name

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Card_Mda_Network_Egress_Pool struct to the
// list Pool of NokiaConf_Configure_Card_Mda_Network_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Mda_Network_Egress_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress) AppendPool(v *NokiaConf_Configure_Card_Mda_Network_Egress_Pool) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Card_Mda_Network_Egress_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Mda_Network_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Mda_Network_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Network_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Network_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Network_Egress.
func (*NokiaConf_Configure_Card_Mda_Network_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Network_Egress_Pool represents the /nokia-conf/configure/card/mda/network/egress/pool YANG schema element.
type NokiaConf_Configure_Card_Mda_Network_Egress_Pool struct {
	AmberAlarmThreshold *uint32                                                   `path:"amber-alarm-threshold" module:"nokia-conf"`
	ApplyGroups         []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Name                *string                                                   `path:"name" module:"nokia-conf"`
	RedAlarmThreshold   *uint32                                                   `path:"red-alarm-threshold" module:"nokia-conf"`
	ResvCbs             *NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs `path:"resv-cbs" module:"nokia-conf"`
	SlopePolicy         *string                                                   `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Network_Egress_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Network_Egress_Pool) IsYANGGoStruct() {}

// GetOrCreateResvCbs retrieves the value of the ResvCbs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool) GetOrCreateResvCbs() *NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs {
	if t.ResvCbs != nil {
		return t.ResvCbs
	}
	t.ResvCbs = &NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs{}
	return t.ResvCbs
}

// GetResvCbs returns the value of the ResvCbs struct pointer
// from NokiaConf_Configure_Card_Mda_Network_Egress_Pool. If the receiver or the field ResvCbs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool) GetResvCbs() *NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs {
	if t != nil && t.ResvCbs != nil {
		return t.ResvCbs
	}
	return nil
}

// GetAmberAlarmThreshold retrieves the value of the leaf AmberAlarmThreshold from the NokiaConf_Configure_Card_Mda_Network_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AmberAlarmThreshold is set, it can
// safely use t.GetAmberAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AmberAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool) GetAmberAlarmThreshold() uint32 {
	if t == nil || t.AmberAlarmThreshold == nil {
		return 0
	}
	return *t.AmberAlarmThreshold
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Mda_Network_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Mda_Network_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Card_Mda_Network_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRedAlarmThreshold retrieves the value of the leaf RedAlarmThreshold from the NokiaConf_Configure_Card_Mda_Network_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedAlarmThreshold is set, it can
// safely use t.GetRedAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool) GetRedAlarmThreshold() uint32 {
	if t == nil || t.RedAlarmThreshold == nil {
		return 0
	}
	return *t.RedAlarmThreshold
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Card_Mda_Network_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Network_Egress_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ResvCbs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Mda_Network_Egress_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Network_Egress_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Network_Egress_Pool.
func (*NokiaConf_Configure_Card_Mda_Network_Egress_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs represents the /nokia-conf/configure/card/mda/network/egress/pool/resv-cbs YANG schema element.
type NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs struct {
	AmberAlarmAction *NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction `path:"amber-alarm-action" module:"nokia-conf"`
	Cbs              *int32                                                                     `path:"cbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs) IsYANGGoStruct() {}

// GetOrCreateAmberAlarmAction retrieves the value of the AmberAlarmAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs) GetOrCreateAmberAlarmAction() *NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction {
	if t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	t.AmberAlarmAction = &NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction{}
	return t.AmberAlarmAction
}

// GetAmberAlarmAction returns the value of the AmberAlarmAction struct pointer
// from NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs. If the receiver or the field AmberAlarmAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs) GetAmberAlarmAction() *NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction {
	if t != nil && t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AmberAlarmAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs.
func (*NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction represents the /nokia-conf/configure/card/mda/network/egress/pool/resv-cbs/amber-alarm-action YANG schema element.
type NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction struct {
	Max  *uint32 `path:"max" module:"nokia-conf"`
	Step *uint32 `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction) IsYANGGoStruct() {}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction) GetStep() uint32 {
	if t == nil || t.Step == nil {
		return 0
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction.
func (*NokiaConf_Configure_Card_Mda_Network_Egress_Pool_ResvCbs_AmberAlarmAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Network_Ingress represents the /nokia-conf/configure/card/mda/network/ingress YANG schema element.
type NokiaConf_Configure_Card_Mda_Network_Ingress struct {
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Pool               map[string]*NokiaConf_Configure_Card_Mda_Network_Ingress_Pool `path:"pool" module:"nokia-conf"`
	QueuePolicy        *string                                                       `path:"queue-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Network_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Network_Ingress) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Card_Mda_Network_Ingress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress) NewPool(Name string) (*NokiaConf_Configure_Card_Mda_Network_Ingress_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Card_Mda_Network_Ingress_Pool)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Card_Mda_Network_Ingress_Pool{
		Name: &Name,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Card_Mda_Network_Ingress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.Name = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Mda_Network_Ingress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress) GetOrCreatePool(Name string) *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool {

	key := Name

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Card_Mda_Network_Ingress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress) GetPool(Name string) *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Mda_Network_Ingress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress) DeletePool(Name string) {
	key := Name

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Card_Mda_Network_Ingress_Pool struct to the
// list Pool of NokiaConf_Configure_Card_Mda_Network_Ingress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Mda_Network_Ingress_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress) AppendPool(v *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Card_Mda_Network_Ingress_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Mda_Network_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Mda_Network_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetQueuePolicy retrieves the value of the leaf QueuePolicy from the NokiaConf_Configure_Card_Mda_Network_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuePolicy is set, it can
// safely use t.GetQueuePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress) GetQueuePolicy() string {
	if t == nil || t.QueuePolicy == nil {
		return ""
	}
	return *t.QueuePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Network_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Network_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Network_Ingress.
func (*NokiaConf_Configure_Card_Mda_Network_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Network_Ingress_Pool represents the /nokia-conf/configure/card/mda/network/ingress/pool YANG schema element.
type NokiaConf_Configure_Card_Mda_Network_Ingress_Pool struct {
	AmberAlarmThreshold *uint32                                                    `path:"amber-alarm-threshold" module:"nokia-conf"`
	ApplyGroups         []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Name                *string                                                    `path:"name" module:"nokia-conf"`
	RedAlarmThreshold   *uint32                                                    `path:"red-alarm-threshold" module:"nokia-conf"`
	ResvCbs             *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs `path:"resv-cbs" module:"nokia-conf"`
	SlopePolicy         *string                                                    `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Network_Ingress_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Network_Ingress_Pool) IsYANGGoStruct() {}

// GetOrCreateResvCbs retrieves the value of the ResvCbs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool) GetOrCreateResvCbs() *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs {
	if t.ResvCbs != nil {
		return t.ResvCbs
	}
	t.ResvCbs = &NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs{}
	return t.ResvCbs
}

// GetResvCbs returns the value of the ResvCbs struct pointer
// from NokiaConf_Configure_Card_Mda_Network_Ingress_Pool. If the receiver or the field ResvCbs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool) GetResvCbs() *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs {
	if t != nil && t.ResvCbs != nil {
		return t.ResvCbs
	}
	return nil
}

// GetAmberAlarmThreshold retrieves the value of the leaf AmberAlarmThreshold from the NokiaConf_Configure_Card_Mda_Network_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AmberAlarmThreshold is set, it can
// safely use t.GetAmberAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AmberAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool) GetAmberAlarmThreshold() uint32 {
	if t == nil || t.AmberAlarmThreshold == nil {
		return 0
	}
	return *t.AmberAlarmThreshold
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Mda_Network_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Mda_Network_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Card_Mda_Network_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRedAlarmThreshold retrieves the value of the leaf RedAlarmThreshold from the NokiaConf_Configure_Card_Mda_Network_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedAlarmThreshold is set, it can
// safely use t.GetRedAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool) GetRedAlarmThreshold() uint32 {
	if t == nil || t.RedAlarmThreshold == nil {
		return 0
	}
	return *t.RedAlarmThreshold
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Card_Mda_Network_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Network_Ingress_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ResvCbs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Mda_Network_Ingress_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Network_Ingress_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Network_Ingress_Pool.
func (*NokiaConf_Configure_Card_Mda_Network_Ingress_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs represents the /nokia-conf/configure/card/mda/network/ingress/pool/resv-cbs YANG schema element.
type NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs struct {
	AmberAlarmAction *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction `path:"amber-alarm-action" module:"nokia-conf"`
	Cbs              *int32                                                                      `path:"cbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs) IsYANGGoStruct() {}

// GetOrCreateAmberAlarmAction retrieves the value of the AmberAlarmAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs) GetOrCreateAmberAlarmAction() *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction {
	if t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	t.AmberAlarmAction = &NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction{}
	return t.AmberAlarmAction
}

// GetAmberAlarmAction returns the value of the AmberAlarmAction struct pointer
// from NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs. If the receiver or the field AmberAlarmAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs) GetAmberAlarmAction() *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction {
	if t != nil && t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AmberAlarmAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs.
func (*NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction represents the /nokia-conf/configure/card/mda/network/ingress/pool/resv-cbs/amber-alarm-action YANG schema element.
type NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction struct {
	Max  *uint32 `path:"max" module:"nokia-conf"`
	Step *uint32 `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction) IsYANGGoStruct() {}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction) GetStep() uint32 {
	if t == nil || t.Step == nil {
		return 0
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction.
func (*NokiaConf_Configure_Card_Mda_Network_Ingress_Pool_ResvCbs_AmberAlarmAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Upgrade represents the /nokia-conf/configure/card/mda/upgrade YANG schema element.
type NokiaConf_Configure_Card_Mda_Upgrade struct {
	ApplyGroups        []string                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Path               E_NokiaTypesCard_SrosMdaLevelUpgradePath `path:"path" module:"nokia-conf"`
	UpgradeIndex       *uint32                                  `path:"upgrade-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Upgrade implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Upgrade) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Mda_Upgrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Upgrade) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Mda_Upgrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Upgrade) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPath retrieves the value of the leaf Path from the NokiaConf_Configure_Card_Mda_Upgrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Path is set, it can
// safely use t.GetPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Path == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Upgrade) GetPath() E_NokiaTypesCard_SrosMdaLevelUpgradePath {
	if t == nil || t.Path == 0 {
		return 0
	}
	return t.Path
}

// GetUpgradeIndex retrieves the value of the leaf UpgradeIndex from the NokiaConf_Configure_Card_Mda_Upgrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpgradeIndex is set, it can
// safely use t.GetUpgradeIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpgradeIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Upgrade) GetUpgradeIndex() uint32 {
	if t == nil || t.UpgradeIndex == nil {
		return 0
	}
	return *t.UpgradeIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Upgrade
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Upgrade) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Mda_Upgrade struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Mda_Upgrade) ΛListKeyMap() (map[string]interface{}, error) {
	if t.UpgradeIndex == nil {
		return nil, fmt.Errorf("nil value for key UpgradeIndex")
	}

	return map[string]interface{}{
		"upgrade-index": *t.UpgradeIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Upgrade) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Upgrade"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Upgrade) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Upgrade) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Upgrade.
func (*NokiaConf_Configure_Card_Mda_Upgrade) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Xconnect represents the /nokia-conf/configure/card/mda/xconnect YANG schema element.
type NokiaConf_Configure_Card_Mda_Xconnect struct {
	Mac map[uint32]*NokiaConf_Configure_Card_Mda_Xconnect_Mac `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Xconnect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Xconnect) IsYANGGoStruct() {}

// NewMac creates a new entry in the Mac list of the
// NokiaConf_Configure_Card_Mda_Xconnect struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card_Mda_Xconnect) NewMac(MacId uint32) (*NokiaConf_Configure_Card_Mda_Xconnect_Mac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[uint32]*NokiaConf_Configure_Card_Mda_Xconnect_Mac)
	}

	key := MacId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mac", key)
	}

	t.Mac[key] = &NokiaConf_Configure_Card_Mda_Xconnect_Mac{
		MacId: &MacId,
	}

	return t.Mac[key], nil
}

// RenameMac renames an entry in the list Mac within
// the NokiaConf_Configure_Card_Mda_Xconnect struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card_Mda_Xconnect) RenameMac(oldK, newK uint32) error {
	if _, ok := t.Mac[newK]; ok {
		return fmt.Errorf("key %v already exists in Mac", newK)
	}

	e, ok := t.Mac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mac", oldK)
	}
	e.MacId = &newK

	t.Mac[newK] = e
	delete(t.Mac, oldK)
	return nil
}

// GetOrCreateMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Mda_Xconnect. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card_Mda_Xconnect) GetOrCreateMac(MacId uint32) *NokiaConf_Configure_Card_Mda_Xconnect_Mac {

	key := MacId

	if v, ok := t.Mac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMac(MacId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMac got unexpected error: %v", err))
	}
	return v
}

// GetMac retrieves the value with the specified key from
// the Mac map field of NokiaConf_Configure_Card_Mda_Xconnect. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card_Mda_Xconnect) GetMac(MacId uint32) *NokiaConf_Configure_Card_Mda_Xconnect_Mac {

	if t == nil {
		return nil
	}

	key := MacId

	if lm, ok := t.Mac[key]; ok {
		return lm
	}
	return nil
}

// DeleteMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Mda_Xconnect. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card_Mda_Xconnect) DeleteMac(MacId uint32) {
	key := MacId

	delete(t.Mac, key)
}

// AppendMac appends the supplied NokiaConf_Configure_Card_Mda_Xconnect_Mac struct to the
// list Mac of NokiaConf_Configure_Card_Mda_Xconnect. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Mda_Xconnect_Mac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card_Mda_Xconnect) AppendMac(v *NokiaConf_Configure_Card_Mda_Xconnect_Mac) error {
	if v.MacId == nil {
		return fmt.Errorf("invalid nil key received for MacId")
	}

	key := *v.MacId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[uint32]*NokiaConf_Configure_Card_Mda_Xconnect_Mac)
	}

	if _, ok := t.Mac[key]; ok {
		return fmt.Errorf("duplicate key for list Mac %v", key)
	}

	t.Mac[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Xconnect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Xconnect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Xconnect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Xconnect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Xconnect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Xconnect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Xconnect.
func (*NokiaConf_Configure_Card_Mda_Xconnect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Xconnect_Mac represents the /nokia-conf/configure/card/mda/xconnect/mac YANG schema element.
type NokiaConf_Configure_Card_Mda_Xconnect_Mac struct {
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                        `path:"description" module:"nokia-conf"`
	Loopback           map[uint32]*NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback `path:"loopback" module:"nokia-conf"`
	MacId              *uint32                                                        `path:"mac-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Xconnect_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Xconnect_Mac) IsYANGGoStruct() {}

// NewLoopback creates a new entry in the Loopback list of the
// NokiaConf_Configure_Card_Mda_Xconnect_Mac struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac) NewLoopback(LoopbackId uint32) (*NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Loopback == nil {
		t.Loopback = make(map[uint32]*NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback)
	}

	key := LoopbackId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Loopback[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Loopback", key)
	}

	t.Loopback[key] = &NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback{
		LoopbackId: &LoopbackId,
	}

	return t.Loopback[key], nil
}

// RenameLoopback renames an entry in the list Loopback within
// the NokiaConf_Configure_Card_Mda_Xconnect_Mac struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac) RenameLoopback(oldK, newK uint32) error {
	if _, ok := t.Loopback[newK]; ok {
		return fmt.Errorf("key %v already exists in Loopback", newK)
	}

	e, ok := t.Loopback[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Loopback", oldK)
	}
	e.LoopbackId = &newK

	t.Loopback[newK] = e
	delete(t.Loopback, oldK)
	return nil
}

// GetOrCreateLoopback retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Mda_Xconnect_Mac. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac) GetOrCreateLoopback(LoopbackId uint32) *NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback {

	key := LoopbackId

	if v, ok := t.Loopback[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLoopback(LoopbackId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLoopback got unexpected error: %v", err))
	}
	return v
}

// GetLoopback retrieves the value with the specified key from
// the Loopback map field of NokiaConf_Configure_Card_Mda_Xconnect_Mac. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac) GetLoopback(LoopbackId uint32) *NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback {

	if t == nil {
		return nil
	}

	key := LoopbackId

	if lm, ok := t.Loopback[key]; ok {
		return lm
	}
	return nil
}

// DeleteLoopback deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Mda_Xconnect_Mac. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac) DeleteLoopback(LoopbackId uint32) {
	key := LoopbackId

	delete(t.Loopback, key)
}

// AppendLoopback appends the supplied NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback struct to the
// list Loopback of NokiaConf_Configure_Card_Mda_Xconnect_Mac. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac) AppendLoopback(v *NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback) error {
	if v.LoopbackId == nil {
		return fmt.Errorf("invalid nil key received for LoopbackId")
	}

	key := *v.LoopbackId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Loopback == nil {
		t.Loopback = make(map[uint32]*NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback)
	}

	if _, ok := t.Loopback[key]; ok {
		return fmt.Errorf("duplicate key for list Loopback %v", key)
	}

	t.Loopback[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Mda_Xconnect_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Mda_Xconnect_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Card_Mda_Xconnect_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMacId retrieves the value of the leaf MacId from the NokiaConf_Configure_Card_Mda_Xconnect_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacId is set, it can
// safely use t.GetMacId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac) GetMacId() uint32 {
	if t == nil || t.MacId == nil {
		return 0
	}
	return *t.MacId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Xconnect_Mac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Loopback {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Mda_Xconnect_Mac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MacId == nil {
		return nil, fmt.Errorf("nil value for key MacId")
	}

	return map[string]interface{}{
		"mac-id": *t.MacId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Xconnect_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Xconnect_Mac.
func (*NokiaConf_Configure_Card_Mda_Xconnect_Mac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback represents the /nokia-conf/configure/card/mda/xconnect/mac/loopback YANG schema element.
type NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Bandwidth          *uint32  `path:"bandwidth" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	LoopbackId         *uint32  `path:"loopback-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback) GetBandwidth() uint32 {
	if t == nil || t.Bandwidth == nil {
		return 100
	}
	return *t.Bandwidth
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLoopbackId retrieves the value of the leaf LoopbackId from the NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopbackId is set, it can
// safely use t.GetLoopbackId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopbackId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback) GetLoopbackId() uint32 {
	if t == nil || t.LoopbackId == nil {
		return 0
	}
	return *t.LoopbackId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Bandwidth == nil {
		var v uint32 = 100
		t.Bandwidth = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LoopbackId == nil {
		return nil, fmt.Errorf("nil value for key LoopbackId")
	}

	return map[string]interface{}{
		"loopback-id": *t.LoopbackId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback.
func (*NokiaConf_Configure_Card_Mda_Xconnect_Mac_Loopback) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Upgrade represents the /nokia-conf/configure/card/upgrade YANG schema element.
type NokiaConf_Configure_Card_Upgrade struct {
	ApplyGroups        []string                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Path               E_NokiaTypesCard_SrosIomLevelUpgradePath `path:"path" module:"nokia-conf"`
	UpgradeIndex       *uint32                                  `path:"upgrade-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Upgrade implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Upgrade) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Upgrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Upgrade) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Upgrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Upgrade) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPath retrieves the value of the leaf Path from the NokiaConf_Configure_Card_Upgrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Path is set, it can
// safely use t.GetPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Path == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Upgrade) GetPath() E_NokiaTypesCard_SrosIomLevelUpgradePath {
	if t == nil || t.Path == 0 {
		return 0
	}
	return t.Path
}

// GetUpgradeIndex retrieves the value of the leaf UpgradeIndex from the NokiaConf_Configure_Card_Upgrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpgradeIndex is set, it can
// safely use t.GetUpgradeIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpgradeIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Upgrade) GetUpgradeIndex() uint32 {
	if t == nil || t.UpgradeIndex == nil {
		return 0
	}
	return *t.UpgradeIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Upgrade
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Upgrade) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Upgrade struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Upgrade) ΛListKeyMap() (map[string]interface{}, error) {
	if t.UpgradeIndex == nil {
		return nil, fmt.Errorf("nil value for key UpgradeIndex")
	}

	return map[string]interface{}{
		"upgrade-index": *t.UpgradeIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Upgrade) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Upgrade"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Upgrade) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Upgrade) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Upgrade.
func (*NokiaConf_Configure_Card_Upgrade) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_VirtualSchedulerAdjustment represents the /nokia-conf/configure/card/virtual-scheduler-adjustment YANG schema element.
type NokiaConf_Configure_Card_VirtualSchedulerAdjustment struct {
	ApplyGroups                 []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude          []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	InternalSchedulerWeightMode E_NokiaTypesQos_InternalSchedulerWeightMode                   `path:"internal-scheduler-weight-mode" module:"nokia-conf"`
	Interval                    *NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval `path:"interval" module:"nokia-conf"`
	SlowQueueThresholdRate      *uint32                                                       `path:"slow-queue-threshold-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_VirtualSchedulerAdjustment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_VirtualSchedulerAdjustment) IsYANGGoStruct() {}

// GetOrCreateInterval retrieves the value of the Interval field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment) GetOrCreateInterval() *NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval {
	if t.Interval != nil {
		return t.Interval
	}
	t.Interval = &NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval{}
	return t.Interval
}

// GetInterval returns the value of the Interval struct pointer
// from NokiaConf_Configure_Card_VirtualSchedulerAdjustment. If the receiver or the field Interval is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment) GetInterval() *NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval {
	if t != nil && t.Interval != nil {
		return t.Interval
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_VirtualSchedulerAdjustment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_VirtualSchedulerAdjustment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInternalSchedulerWeightMode retrieves the value of the leaf InternalSchedulerWeightMode from the NokiaConf_Configure_Card_VirtualSchedulerAdjustment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalSchedulerWeightMode is set, it can
// safely use t.GetInternalSchedulerWeightMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalSchedulerWeightMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment) GetInternalSchedulerWeightMode() E_NokiaTypesQos_InternalSchedulerWeightMode {
	if t == nil || t.InternalSchedulerWeightMode == 0 {
		return NokiaTypesQos_InternalSchedulerWeightMode_auto
	}
	return t.InternalSchedulerWeightMode
}

// GetSlowQueueThresholdRate retrieves the value of the leaf SlowQueueThresholdRate from the NokiaConf_Configure_Card_VirtualSchedulerAdjustment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlowQueueThresholdRate is set, it can
// safely use t.GetSlowQueueThresholdRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlowQueueThresholdRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment) GetSlowQueueThresholdRate() uint32 {
	if t == nil || t.SlowQueueThresholdRate == nil {
		return 1000
	}
	return *t.SlowQueueThresholdRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_VirtualSchedulerAdjustment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InternalSchedulerWeightMode == 0 {
		t.InternalSchedulerWeightMode = NokiaTypesQos_InternalSchedulerWeightMode_auto
	}
	if t.SlowQueueThresholdRate == nil {
		var v uint32 = 1000
		t.SlowQueueThresholdRate = &v
	}
	t.Interval.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_VirtualSchedulerAdjustment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_VirtualSchedulerAdjustment.
func (*NokiaConf_Configure_Card_VirtualSchedulerAdjustment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval represents the /nokia-conf/configure/card/virtual-scheduler-adjustment/interval YANG schema element.
type NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval struct {
	RateCalculationMinimum *NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum `path:"rate-calculation-minimum" module:"nokia-conf"`
	SchedulerRunMinimum    *float64                                                                             `path:"scheduler-run-minimum" module:"nokia-conf"`
	TaskScheduling         *float64                                                                             `path:"task-scheduling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval) IsYANGGoStruct() {}

// GetOrCreateRateCalculationMinimum retrieves the value of the RateCalculationMinimum field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval) GetOrCreateRateCalculationMinimum() *NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum {
	if t.RateCalculationMinimum != nil {
		return t.RateCalculationMinimum
	}
	t.RateCalculationMinimum = &NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum{}
	return t.RateCalculationMinimum
}

// GetRateCalculationMinimum returns the value of the RateCalculationMinimum struct pointer
// from NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval. If the receiver or the field RateCalculationMinimum is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval) GetRateCalculationMinimum() *NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum {
	if t != nil && t.RateCalculationMinimum != nil {
		return t.RateCalculationMinimum
	}
	return nil
}

// GetSchedulerRunMinimum retrieves the value of the leaf SchedulerRunMinimum from the NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerRunMinimum is set, it can
// safely use t.GetSchedulerRunMinimum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerRunMinimum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval) GetSchedulerRunMinimum() float64 {
	if t == nil || t.SchedulerRunMinimum == nil {
		return 100.00
	}
	return *t.SchedulerRunMinimum
}

// GetTaskScheduling retrieves the value of the leaf TaskScheduling from the NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TaskScheduling is set, it can
// safely use t.GetTaskScheduling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TaskScheduling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval) GetTaskScheduling() float64 {
	if t == nil || t.TaskScheduling == nil {
		return 100.00
	}
	return *t.TaskScheduling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SchedulerRunMinimum == nil {
		var v float64 = 100.00
		t.SchedulerRunMinimum = &v
	}
	if t.TaskScheduling == nil {
		var v float64 = 100.00
		t.TaskScheduling = &v
	}
	t.RateCalculationMinimum.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval.
func (*NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum represents the /nokia-conf/configure/card/virtual-scheduler-adjustment/interval/rate-calculation-minimum YANG schema element.
type NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum struct {
	FastQueue *float64 `path:"fast-queue" module:"nokia-conf"`
	SlowQueue *float64 `path:"slow-queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum) IsYANGGoStruct() {
}

// GetFastQueue retrieves the value of the leaf FastQueue from the NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastQueue is set, it can
// safely use t.GetFastQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum) GetFastQueue() float64 {
	if t == nil || t.FastQueue == nil {
		return 100.00
	}
	return *t.FastQueue
}

// GetSlowQueue retrieves the value of the leaf SlowQueue from the NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlowQueue is set, it can
// safely use t.GetSlowQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlowQueue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum) GetSlowQueue() float64 {
	if t == nil || t.SlowQueue == nil {
		return 100.00
	}
	return *t.SlowQueue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastQueue == nil {
		var v float64 = 100.00
		t.FastQueue = &v
	}
	if t.SlowQueue == nil {
		var v float64 = 100.00
		t.SlowQueue = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum.
func (*NokiaConf_Configure_Card_VirtualSchedulerAdjustment_Interval_RateCalculationMinimum) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Xiom represents the /nokia-conf/configure/card/xiom YANG schema element.
type NokiaConf_Configure_Card_Xiom struct {
	AdminState              E_NokiaTypesSros_AdminState                       `path:"admin-state" module:"nokia-conf"`
	ApplyGroups             []string                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	FailOnError             *bool                                             `path:"fail-on-error" module:"nokia-conf"`
	Level                   E_NokiaTypesCard_SrosXiomLevel                    `path:"level" module:"nokia-conf"`
	Mda                     map[uint32]*NokiaConf_Configure_Card_Xiom_Mda     `path:"mda" module:"nokia-conf"`
	ResetOnRecoverableError *bool                                             `path:"reset-on-recoverable-error" module:"nokia-conf"`
	Upgrade                 map[uint32]*NokiaConf_Configure_Card_Xiom_Upgrade `path:"upgrade" module:"nokia-conf"`
	XiomSlot                *string                                           `path:"xiom-slot" module:"nokia-conf"`
	XiomType                E_NokiaTypesCard_SrosXiomType                     `path:"xiom-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Xiom implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Xiom) IsYANGGoStruct() {}

// NewMda creates a new entry in the Mda list of the
// NokiaConf_Configure_Card_Xiom struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card_Xiom) NewMda(MdaSlot uint32) (*NokiaConf_Configure_Card_Xiom_Mda, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[uint32]*NokiaConf_Configure_Card_Xiom_Mda)
	}

	key := MdaSlot

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mda[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mda", key)
	}

	t.Mda[key] = &NokiaConf_Configure_Card_Xiom_Mda{
		MdaSlot: &MdaSlot,
	}

	return t.Mda[key], nil
}

// RenameMda renames an entry in the list Mda within
// the NokiaConf_Configure_Card_Xiom struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card_Xiom) RenameMda(oldK, newK uint32) error {
	if _, ok := t.Mda[newK]; ok {
		return fmt.Errorf("key %v already exists in Mda", newK)
	}

	e, ok := t.Mda[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mda", oldK)
	}
	e.MdaSlot = &newK

	t.Mda[newK] = e
	delete(t.Mda, oldK)
	return nil
}

// GetOrCreateMda retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Xiom. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card_Xiom) GetOrCreateMda(MdaSlot uint32) *NokiaConf_Configure_Card_Xiom_Mda {

	key := MdaSlot

	if v, ok := t.Mda[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMda(MdaSlot)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMda got unexpected error: %v", err))
	}
	return v
}

// GetMda retrieves the value with the specified key from
// the Mda map field of NokiaConf_Configure_Card_Xiom. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card_Xiom) GetMda(MdaSlot uint32) *NokiaConf_Configure_Card_Xiom_Mda {

	if t == nil {
		return nil
	}

	key := MdaSlot

	if lm, ok := t.Mda[key]; ok {
		return lm
	}
	return nil
}

// DeleteMda deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Xiom. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card_Xiom) DeleteMda(MdaSlot uint32) {
	key := MdaSlot

	delete(t.Mda, key)
}

// AppendMda appends the supplied NokiaConf_Configure_Card_Xiom_Mda struct to the
// list Mda of NokiaConf_Configure_Card_Xiom. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Xiom_Mda already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card_Xiom) AppendMda(v *NokiaConf_Configure_Card_Xiom_Mda) error {
	if v.MdaSlot == nil {
		return fmt.Errorf("invalid nil key received for MdaSlot")
	}

	key := *v.MdaSlot

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[uint32]*NokiaConf_Configure_Card_Xiom_Mda)
	}

	if _, ok := t.Mda[key]; ok {
		return fmt.Errorf("duplicate key for list Mda %v", key)
	}

	t.Mda[key] = v
	return nil
}

// NewUpgrade creates a new entry in the Upgrade list of the
// NokiaConf_Configure_Card_Xiom struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card_Xiom) NewUpgrade(UpgradeIndex uint32) (*NokiaConf_Configure_Card_Xiom_Upgrade, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Upgrade == nil {
		t.Upgrade = make(map[uint32]*NokiaConf_Configure_Card_Xiom_Upgrade)
	}

	key := UpgradeIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Upgrade[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Upgrade", key)
	}

	t.Upgrade[key] = &NokiaConf_Configure_Card_Xiom_Upgrade{
		UpgradeIndex: &UpgradeIndex,
	}

	return t.Upgrade[key], nil
}

// RenameUpgrade renames an entry in the list Upgrade within
// the NokiaConf_Configure_Card_Xiom struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card_Xiom) RenameUpgrade(oldK, newK uint32) error {
	if _, ok := t.Upgrade[newK]; ok {
		return fmt.Errorf("key %v already exists in Upgrade", newK)
	}

	e, ok := t.Upgrade[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Upgrade", oldK)
	}
	e.UpgradeIndex = &newK

	t.Upgrade[newK] = e
	delete(t.Upgrade, oldK)
	return nil
}

// GetOrCreateUpgrade retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Xiom. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card_Xiom) GetOrCreateUpgrade(UpgradeIndex uint32) *NokiaConf_Configure_Card_Xiom_Upgrade {

	key := UpgradeIndex

	if v, ok := t.Upgrade[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUpgrade(UpgradeIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUpgrade got unexpected error: %v", err))
	}
	return v
}

// GetUpgrade retrieves the value with the specified key from
// the Upgrade map field of NokiaConf_Configure_Card_Xiom. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card_Xiom) GetUpgrade(UpgradeIndex uint32) *NokiaConf_Configure_Card_Xiom_Upgrade {

	if t == nil {
		return nil
	}

	key := UpgradeIndex

	if lm, ok := t.Upgrade[key]; ok {
		return lm
	}
	return nil
}

// DeleteUpgrade deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Xiom. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card_Xiom) DeleteUpgrade(UpgradeIndex uint32) {
	key := UpgradeIndex

	delete(t.Upgrade, key)
}

// AppendUpgrade appends the supplied NokiaConf_Configure_Card_Xiom_Upgrade struct to the
// list Upgrade of NokiaConf_Configure_Card_Xiom. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Xiom_Upgrade already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card_Xiom) AppendUpgrade(v *NokiaConf_Configure_Card_Xiom_Upgrade) error {
	if v.UpgradeIndex == nil {
		return fmt.Errorf("invalid nil key received for UpgradeIndex")
	}

	key := *v.UpgradeIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Upgrade == nil {
		t.Upgrade = make(map[uint32]*NokiaConf_Configure_Card_Xiom_Upgrade)
	}

	if _, ok := t.Upgrade[key]; ok {
		return fmt.Errorf("duplicate key for list Upgrade %v", key)
	}

	t.Upgrade[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Card_Xiom
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Xiom
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Xiom
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFailOnError retrieves the value of the leaf FailOnError from the NokiaConf_Configure_Card_Xiom
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailOnError is set, it can
// safely use t.GetFailOnError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailOnError == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom) GetFailOnError() bool {
	if t == nil || t.FailOnError == nil {
		return false
	}
	return *t.FailOnError
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Card_Xiom
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom) GetLevel() E_NokiaTypesCard_SrosXiomLevel {
	if t == nil || t.Level == 0 {
		return 0
	}
	return t.Level
}

// GetResetOnRecoverableError retrieves the value of the leaf ResetOnRecoverableError from the NokiaConf_Configure_Card_Xiom
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResetOnRecoverableError is set, it can
// safely use t.GetResetOnRecoverableError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResetOnRecoverableError == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom) GetResetOnRecoverableError() bool {
	if t == nil || t.ResetOnRecoverableError == nil {
		return false
	}
	return *t.ResetOnRecoverableError
}

// GetXiomSlot retrieves the value of the leaf XiomSlot from the NokiaConf_Configure_Card_Xiom
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XiomSlot is set, it can
// safely use t.GetXiomSlot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XiomSlot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom) GetXiomSlot() string {
	if t == nil || t.XiomSlot == nil {
		return ""
	}
	return *t.XiomSlot
}

// GetXiomType retrieves the value of the leaf XiomType from the NokiaConf_Configure_Card_Xiom
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XiomType is set, it can
// safely use t.GetXiomType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XiomType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom) GetXiomType() E_NokiaTypesCard_SrosXiomType {
	if t == nil || t.XiomType == 0 {
		return 0
	}
	return t.XiomType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Xiom
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Xiom) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.FailOnError == nil {
		var v bool = false
		t.FailOnError = &v
	}
	if t.ResetOnRecoverableError == nil {
		var v bool = false
		t.ResetOnRecoverableError = &v
	}
	for _, e := range t.Mda {
		e.PopulateDefaults()
	}
	for _, e := range t.Upgrade {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Xiom struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Xiom) ΛListKeyMap() (map[string]interface{}, error) {
	if t.XiomSlot == nil {
		return nil, fmt.Errorf("nil value for key XiomSlot")
	}

	return map[string]interface{}{
		"xiom-slot": *t.XiomSlot,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Xiom) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Xiom"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Xiom) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Xiom) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Xiom.
func (*NokiaConf_Configure_Card_Xiom) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Xiom_Mda represents the /nokia-conf/configure/card/xiom/mda YANG schema element.
type NokiaConf_Configure_Card_Xiom_Mda struct {
	AdminState         E_NokiaTypesSros_AdminState                 `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	MdaSlot            *uint32                                     `path:"mda-slot" module:"nokia-conf"`
	MdaType            E_NokiaTypesCard_SrosXiomMdaType            `path:"mda-type" module:"nokia-conf"`
	PowerPriorityLevel *uint32                                     `path:"power-priority-level" module:"nokia-conf"`
	SyncE              E_NokiaConf_Configure_Card_Xiom_Mda_SyncE   `path:"sync-e" module:"nokia-conf"`
	Xconnect           *NokiaConf_Configure_Card_Xiom_Mda_Xconnect `path:"xconnect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Xiom_Mda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Xiom_Mda) IsYANGGoStruct() {}

// GetOrCreateXconnect retrieves the value of the Xconnect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Card_Xiom_Mda) GetOrCreateXconnect() *NokiaConf_Configure_Card_Xiom_Mda_Xconnect {
	if t.Xconnect != nil {
		return t.Xconnect
	}
	t.Xconnect = &NokiaConf_Configure_Card_Xiom_Mda_Xconnect{}
	return t.Xconnect
}

// GetXconnect returns the value of the Xconnect struct pointer
// from NokiaConf_Configure_Card_Xiom_Mda. If the receiver or the field Xconnect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Card_Xiom_Mda) GetXconnect() *NokiaConf_Configure_Card_Xiom_Mda_Xconnect {
	if t != nil && t.Xconnect != nil {
		return t.Xconnect
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Card_Xiom_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom_Mda) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Xiom_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom_Mda) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Xiom_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom_Mda) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMdaSlot retrieves the value of the leaf MdaSlot from the NokiaConf_Configure_Card_Xiom_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdaSlot is set, it can
// safely use t.GetMdaSlot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdaSlot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom_Mda) GetMdaSlot() uint32 {
	if t == nil || t.MdaSlot == nil {
		return 0
	}
	return *t.MdaSlot
}

// GetMdaType retrieves the value of the leaf MdaType from the NokiaConf_Configure_Card_Xiom_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdaType is set, it can
// safely use t.GetMdaType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdaType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom_Mda) GetMdaType() E_NokiaTypesCard_SrosXiomMdaType {
	if t == nil || t.MdaType == 0 {
		return 0
	}
	return t.MdaType
}

// GetPowerPriorityLevel retrieves the value of the leaf PowerPriorityLevel from the NokiaConf_Configure_Card_Xiom_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerPriorityLevel is set, it can
// safely use t.GetPowerPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerPriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom_Mda) GetPowerPriorityLevel() uint32 {
	if t == nil || t.PowerPriorityLevel == nil {
		return 150
	}
	return *t.PowerPriorityLevel
}

// GetSyncE retrieves the value of the leaf SyncE from the NokiaConf_Configure_Card_Xiom_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncE is set, it can
// safely use t.GetSyncE() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncE == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom_Mda) GetSyncE() E_NokiaConf_Configure_Card_Xiom_Mda_SyncE {
	if t == nil || t.SyncE == 0 {
		return 0
	}
	return t.SyncE
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Xiom_Mda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Xiom_Mda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.PowerPriorityLevel == nil {
		var v uint32 = 150
		t.PowerPriorityLevel = &v
	}
	t.Xconnect.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Xiom_Mda struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Xiom_Mda) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MdaSlot == nil {
		return nil, fmt.Errorf("nil value for key MdaSlot")
	}

	return map[string]interface{}{
		"mda-slot": *t.MdaSlot,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Xiom_Mda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Xiom_Mda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Xiom_Mda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Xiom_Mda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Xiom_Mda.
func (*NokiaConf_Configure_Card_Xiom_Mda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Xiom_Mda_Xconnect represents the /nokia-conf/configure/card/xiom/mda/xconnect YANG schema element.
type NokiaConf_Configure_Card_Xiom_Mda_Xconnect struct {
	Mac map[uint32]*NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Xiom_Mda_Xconnect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Xiom_Mda_Xconnect) IsYANGGoStruct() {}

// NewMac creates a new entry in the Mac list of the
// NokiaConf_Configure_Card_Xiom_Mda_Xconnect struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect) NewMac(MacId uint32) (*NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[uint32]*NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac)
	}

	key := MacId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mac", key)
	}

	t.Mac[key] = &NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac{
		MacId: &MacId,
	}

	return t.Mac[key], nil
}

// RenameMac renames an entry in the list Mac within
// the NokiaConf_Configure_Card_Xiom_Mda_Xconnect struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect) RenameMac(oldK, newK uint32) error {
	if _, ok := t.Mac[newK]; ok {
		return fmt.Errorf("key %v already exists in Mac", newK)
	}

	e, ok := t.Mac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mac", oldK)
	}
	e.MacId = &newK

	t.Mac[newK] = e
	delete(t.Mac, oldK)
	return nil
}

// GetOrCreateMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Xiom_Mda_Xconnect. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect) GetOrCreateMac(MacId uint32) *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac {

	key := MacId

	if v, ok := t.Mac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMac(MacId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMac got unexpected error: %v", err))
	}
	return v
}

// GetMac retrieves the value with the specified key from
// the Mac map field of NokiaConf_Configure_Card_Xiom_Mda_Xconnect. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect) GetMac(MacId uint32) *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac {

	if t == nil {
		return nil
	}

	key := MacId

	if lm, ok := t.Mac[key]; ok {
		return lm
	}
	return nil
}

// DeleteMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Xiom_Mda_Xconnect. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect) DeleteMac(MacId uint32) {
	key := MacId

	delete(t.Mac, key)
}

// AppendMac appends the supplied NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac struct to the
// list Mac of NokiaConf_Configure_Card_Xiom_Mda_Xconnect. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect) AppendMac(v *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac) error {
	if v.MacId == nil {
		return fmt.Errorf("invalid nil key received for MacId")
	}

	key := *v.MacId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[uint32]*NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac)
	}

	if _, ok := t.Mac[key]; ok {
		return fmt.Errorf("duplicate key for list Mac %v", key)
	}

	t.Mac[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Xiom_Mda_Xconnect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Xiom_Mda_Xconnect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Xiom_Mda_Xconnect.
func (*NokiaConf_Configure_Card_Xiom_Mda_Xconnect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac represents the /nokia-conf/configure/card/xiom/mda/xconnect/mac YANG schema element.
type NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac struct {
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                             `path:"description" module:"nokia-conf"`
	Loopback           map[uint32]*NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback `path:"loopback" module:"nokia-conf"`
	MacId              *uint32                                                             `path:"mac-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac) IsYANGGoStruct() {}

// NewLoopback creates a new entry in the Loopback list of the
// NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac) NewLoopback(LoopbackId uint32) (*NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Loopback == nil {
		t.Loopback = make(map[uint32]*NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback)
	}

	key := LoopbackId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Loopback[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Loopback", key)
	}

	t.Loopback[key] = &NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback{
		LoopbackId: &LoopbackId,
	}

	return t.Loopback[key], nil
}

// RenameLoopback renames an entry in the list Loopback within
// the NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac) RenameLoopback(oldK, newK uint32) error {
	if _, ok := t.Loopback[newK]; ok {
		return fmt.Errorf("key %v already exists in Loopback", newK)
	}

	e, ok := t.Loopback[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Loopback", oldK)
	}
	e.LoopbackId = &newK

	t.Loopback[newK] = e
	delete(t.Loopback, oldK)
	return nil
}

// GetOrCreateLoopback retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac) GetOrCreateLoopback(LoopbackId uint32) *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback {

	key := LoopbackId

	if v, ok := t.Loopback[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLoopback(LoopbackId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLoopback got unexpected error: %v", err))
	}
	return v
}

// GetLoopback retrieves the value with the specified key from
// the Loopback map field of NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac) GetLoopback(LoopbackId uint32) *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback {

	if t == nil {
		return nil
	}

	key := LoopbackId

	if lm, ok := t.Loopback[key]; ok {
		return lm
	}
	return nil
}

// DeleteLoopback deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac) DeleteLoopback(LoopbackId uint32) {
	key := LoopbackId

	delete(t.Loopback, key)
}

// AppendLoopback appends the supplied NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback struct to the
// list Loopback of NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac. If the key value(s) specified in
// the supplied NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac) AppendLoopback(v *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback) error {
	if v.LoopbackId == nil {
		return fmt.Errorf("invalid nil key received for LoopbackId")
	}

	key := *v.LoopbackId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Loopback == nil {
		t.Loopback = make(map[uint32]*NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback)
	}

	if _, ok := t.Loopback[key]; ok {
		return fmt.Errorf("duplicate key for list Loopback %v", key)
	}

	t.Loopback[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMacId retrieves the value of the leaf MacId from the NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacId is set, it can
// safely use t.GetMacId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac) GetMacId() uint32 {
	if t == nil || t.MacId == nil {
		return 0
	}
	return *t.MacId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Loopback {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MacId == nil {
		return nil, fmt.Errorf("nil value for key MacId")
	}

	return map[string]interface{}{
		"mac-id": *t.MacId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac.
func (*NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback represents the /nokia-conf/configure/card/xiom/mda/xconnect/mac/loopback YANG schema element.
type NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Bandwidth          *uint32  `path:"bandwidth" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	LoopbackId         *uint32  `path:"loopback-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback) GetBandwidth() uint32 {
	if t == nil || t.Bandwidth == nil {
		return 100
	}
	return *t.Bandwidth
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLoopbackId retrieves the value of the leaf LoopbackId from the NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopbackId is set, it can
// safely use t.GetLoopbackId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopbackId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback) GetLoopbackId() uint32 {
	if t == nil || t.LoopbackId == nil {
		return 0
	}
	return *t.LoopbackId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Bandwidth == nil {
		var v uint32 = 100
		t.Bandwidth = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LoopbackId == nil {
		return nil, fmt.Errorf("nil value for key LoopbackId")
	}

	return map[string]interface{}{
		"loopback-id": *t.LoopbackId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback.
func (*NokiaConf_Configure_Card_Xiom_Mda_Xconnect_Mac_Loopback) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Card_Xiom_Upgrade represents the /nokia-conf/configure/card/xiom/upgrade YANG schema element.
type NokiaConf_Configure_Card_Xiom_Upgrade struct {
	ApplyGroups        []string                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Path               E_NokiaTypesCard_SrosXiomLevelUpgradePath `path:"path" module:"nokia-conf"`
	UpgradeIndex       *uint32                                   `path:"upgrade-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Card_Xiom_Upgrade implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Card_Xiom_Upgrade) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Card_Xiom_Upgrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom_Upgrade) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Card_Xiom_Upgrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom_Upgrade) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPath retrieves the value of the leaf Path from the NokiaConf_Configure_Card_Xiom_Upgrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Path is set, it can
// safely use t.GetPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Path == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom_Upgrade) GetPath() E_NokiaTypesCard_SrosXiomLevelUpgradePath {
	if t == nil || t.Path == 0 {
		return 0
	}
	return t.Path
}

// GetUpgradeIndex retrieves the value of the leaf UpgradeIndex from the NokiaConf_Configure_Card_Xiom_Upgrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpgradeIndex is set, it can
// safely use t.GetUpgradeIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpgradeIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Card_Xiom_Upgrade) GetUpgradeIndex() uint32 {
	if t == nil || t.UpgradeIndex == nil {
		return 0
	}
	return *t.UpgradeIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Card_Xiom_Upgrade
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Card_Xiom_Upgrade) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Card_Xiom_Upgrade struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Card_Xiom_Upgrade) ΛListKeyMap() (map[string]interface{}, error) {
	if t.UpgradeIndex == nil {
		return nil, fmt.Errorf("nil value for key UpgradeIndex")
	}

	return map[string]interface{}{
		"upgrade-index": *t.UpgradeIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Xiom_Upgrade) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Card_Xiom_Upgrade"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Card_Xiom_Upgrade) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Card_Xiom_Upgrade) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Card_Xiom_Upgrade.
func (*NokiaConf_Configure_Card_Xiom_Upgrade) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Cflowd represents the /nokia-conf/configure/cflowd YANG schema element.
type NokiaConf_Configure_Cflowd struct {
	ActiveFlowTimeout         *uint32                                                                            `path:"active-flow-timeout" module:"nokia-conf"`
	ActiveTimeout             *uint32                                                                            `path:"active-timeout" module:"nokia-conf"`
	AdminState                E_NokiaTypesSros_AdminState                                                        `path:"admin-state" module:"nokia-conf"`
	AnalyzeGrePayload         *bool                                                                              `path:"analyze-gre-payload" module:"nokia-conf"`
	AnalyzeL2TpTraffic        *bool                                                                              `path:"analyze-l2tp-traffic" module:"nokia-conf"`
	AnalyzeV4Overv6Traffic    *bool                                                                              `path:"analyze-v4overv6-traffic" module:"nokia-conf"`
	ApplyGroups               []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	CacheSize                 *uint32                                                                            `path:"cache-size" module:"nokia-conf"`
	Collector                 map[NokiaConf_Configure_Cflowd_Collector_Key]*NokiaConf_Configure_Cflowd_Collector `path:"collector" module:"nokia-conf"`
	EnhancedDistribution      *bool                                                                              `path:"enhanced-distribution" module:"nokia-conf"`
	ExportMode                E_NokiaConf_Configure_Cflowd_ExportMode                                            `path:"export-mode" module:"nokia-conf"`
	InactiveFlowTimeout       *uint32                                                                            `path:"inactive-flow-timeout" module:"nokia-conf"`
	InactiveTimeout           *uint32                                                                            `path:"inactive-timeout" module:"nokia-conf"`
	InbandCollectorExportOnly *bool                                                                              `path:"inband-collector-export-only" module:"nokia-conf"`
	Overflow                  *uint32                                                                            `path:"overflow" module:"nokia-conf"`
	Rate                      *uint32                                                                            `path:"rate" module:"nokia-conf"`
	SampleProfile             map[uint32]*NokiaConf_Configure_Cflowd_SampleProfile                               `path:"sample-profile" module:"nokia-conf"`
	TemplateRetransmit        *uint32                                                                            `path:"template-retransmit" module:"nokia-conf"`
	UseVrtrIfIndex            *bool                                                                              `path:"use-vrtr-if-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Cflowd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Cflowd) IsYANGGoStruct() {}

// NokiaConf_Configure_Cflowd_Collector_Key represents the key for list Collector of element /nokia-conf/configure/cflowd.
type NokiaConf_Configure_Cflowd_Collector_Key struct {
	IpAddress string `path:"ip-address"`
	Port      int32  `path:"port"`
}

// NewCollector creates a new entry in the Collector list of the
// NokiaConf_Configure_Cflowd struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Cflowd) NewCollector(IpAddress string, Port int32) (*NokiaConf_Configure_Cflowd_Collector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[NokiaConf_Configure_Cflowd_Collector_Key]*NokiaConf_Configure_Cflowd_Collector)
	}

	key := NokiaConf_Configure_Cflowd_Collector_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Collector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Collector", key)
	}

	t.Collector[key] = &NokiaConf_Configure_Cflowd_Collector{
		IpAddress: &IpAddress,
		Port:      &Port,
	}

	return t.Collector[key], nil
}

// RenameCollector renames an entry in the list Collector within
// the NokiaConf_Configure_Cflowd struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Cflowd) RenameCollector(oldK, newK NokiaConf_Configure_Cflowd_Collector_Key) error {
	if _, ok := t.Collector[newK]; ok {
		return fmt.Errorf("key %v already exists in Collector", newK)
	}

	e, ok := t.Collector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Collector", oldK)
	}
	e.IpAddress = &newK.IpAddress
	e.Port = &newK.Port

	t.Collector[newK] = e
	delete(t.Collector, oldK)
	return nil
}

// GetOrCreateCollector retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Cflowd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Cflowd) GetOrCreateCollector(IpAddress string, Port int32) *NokiaConf_Configure_Cflowd_Collector {

	key := NokiaConf_Configure_Cflowd_Collector_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	if v, ok := t.Collector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCollector(IpAddress, Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCollector got unexpected error: %v", err))
	}
	return v
}

// GetCollector retrieves the value with the specified key from
// the Collector map field of NokiaConf_Configure_Cflowd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Cflowd) GetCollector(IpAddress string, Port int32) *NokiaConf_Configure_Cflowd_Collector {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Cflowd_Collector_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	if lm, ok := t.Collector[key]; ok {
		return lm
	}
	return nil
}

// DeleteCollector deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Cflowd. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Cflowd) DeleteCollector(IpAddress string, Port int32) {
	key := NokiaConf_Configure_Cflowd_Collector_Key{
		IpAddress: IpAddress,
		Port:      Port,
	}

	delete(t.Collector, key)
}

// AppendCollector appends the supplied NokiaConf_Configure_Cflowd_Collector struct to the
// list Collector of NokiaConf_Configure_Cflowd. If the key value(s) specified in
// the supplied NokiaConf_Configure_Cflowd_Collector already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Cflowd) AppendCollector(v *NokiaConf_Configure_Cflowd_Collector) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key for IpAddress")
	}

	if v.Port == nil {
		return fmt.Errorf("invalid nil key for Port")
	}

	key := NokiaConf_Configure_Cflowd_Collector_Key{
		IpAddress: *v.IpAddress,
		Port:      *v.Port,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[NokiaConf_Configure_Cflowd_Collector_Key]*NokiaConf_Configure_Cflowd_Collector)
	}

	if _, ok := t.Collector[key]; ok {
		return fmt.Errorf("duplicate key for list Collector %v", key)
	}

	t.Collector[key] = v
	return nil
}

// NewSampleProfile creates a new entry in the SampleProfile list of the
// NokiaConf_Configure_Cflowd struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Cflowd) NewSampleProfile(ProfileId uint32) (*NokiaConf_Configure_Cflowd_SampleProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SampleProfile == nil {
		t.SampleProfile = make(map[uint32]*NokiaConf_Configure_Cflowd_SampleProfile)
	}

	key := ProfileId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SampleProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SampleProfile", key)
	}

	t.SampleProfile[key] = &NokiaConf_Configure_Cflowd_SampleProfile{
		ProfileId: &ProfileId,
	}

	return t.SampleProfile[key], nil
}

// RenameSampleProfile renames an entry in the list SampleProfile within
// the NokiaConf_Configure_Cflowd struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Cflowd) RenameSampleProfile(oldK, newK uint32) error {
	if _, ok := t.SampleProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in SampleProfile", newK)
	}

	e, ok := t.SampleProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SampleProfile", oldK)
	}
	e.ProfileId = &newK

	t.SampleProfile[newK] = e
	delete(t.SampleProfile, oldK)
	return nil
}

// GetOrCreateSampleProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Cflowd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Cflowd) GetOrCreateSampleProfile(ProfileId uint32) *NokiaConf_Configure_Cflowd_SampleProfile {

	key := ProfileId

	if v, ok := t.SampleProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSampleProfile(ProfileId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSampleProfile got unexpected error: %v", err))
	}
	return v
}

// GetSampleProfile retrieves the value with the specified key from
// the SampleProfile map field of NokiaConf_Configure_Cflowd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Cflowd) GetSampleProfile(ProfileId uint32) *NokiaConf_Configure_Cflowd_SampleProfile {

	if t == nil {
		return nil
	}

	key := ProfileId

	if lm, ok := t.SampleProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteSampleProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Cflowd. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Cflowd) DeleteSampleProfile(ProfileId uint32) {
	key := ProfileId

	delete(t.SampleProfile, key)
}

// AppendSampleProfile appends the supplied NokiaConf_Configure_Cflowd_SampleProfile struct to the
// list SampleProfile of NokiaConf_Configure_Cflowd. If the key value(s) specified in
// the supplied NokiaConf_Configure_Cflowd_SampleProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Cflowd) AppendSampleProfile(v *NokiaConf_Configure_Cflowd_SampleProfile) error {
	if v.ProfileId == nil {
		return fmt.Errorf("invalid nil key received for ProfileId")
	}

	key := *v.ProfileId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SampleProfile == nil {
		t.SampleProfile = make(map[uint32]*NokiaConf_Configure_Cflowd_SampleProfile)
	}

	if _, ok := t.SampleProfile[key]; ok {
		return fmt.Errorf("duplicate key for list SampleProfile %v", key)
	}

	t.SampleProfile[key] = v
	return nil
}

// GetActiveFlowTimeout retrieves the value of the leaf ActiveFlowTimeout from the NokiaConf_Configure_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveFlowTimeout is set, it can
// safely use t.GetActiveFlowTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveFlowTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd) GetActiveFlowTimeout() uint32 {
	if t == nil || t.ActiveFlowTimeout == nil {
		return 1800
	}
	return *t.ActiveFlowTimeout
}

// GetActiveTimeout retrieves the value of the leaf ActiveTimeout from the NokiaConf_Configure_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveTimeout is set, it can
// safely use t.GetActiveTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd) GetActiveTimeout() uint32 {
	if t == nil || t.ActiveTimeout == nil {
		return 30
	}
	return *t.ActiveTimeout
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAnalyzeGrePayload retrieves the value of the leaf AnalyzeGrePayload from the NokiaConf_Configure_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AnalyzeGrePayload is set, it can
// safely use t.GetAnalyzeGrePayload() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AnalyzeGrePayload == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd) GetAnalyzeGrePayload() bool {
	if t == nil || t.AnalyzeGrePayload == nil {
		return false
	}
	return *t.AnalyzeGrePayload
}

// GetAnalyzeL2TpTraffic retrieves the value of the leaf AnalyzeL2TpTraffic from the NokiaConf_Configure_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AnalyzeL2TpTraffic is set, it can
// safely use t.GetAnalyzeL2TpTraffic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AnalyzeL2TpTraffic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd) GetAnalyzeL2TpTraffic() bool {
	if t == nil || t.AnalyzeL2TpTraffic == nil {
		return false
	}
	return *t.AnalyzeL2TpTraffic
}

// GetAnalyzeV4Overv6Traffic retrieves the value of the leaf AnalyzeV4Overv6Traffic from the NokiaConf_Configure_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AnalyzeV4Overv6Traffic is set, it can
// safely use t.GetAnalyzeV4Overv6Traffic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AnalyzeV4Overv6Traffic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd) GetAnalyzeV4Overv6Traffic() bool {
	if t == nil || t.AnalyzeV4Overv6Traffic == nil {
		return false
	}
	return *t.AnalyzeV4Overv6Traffic
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCacheSize retrieves the value of the leaf CacheSize from the NokiaConf_Configure_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CacheSize is set, it can
// safely use t.GetCacheSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CacheSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd) GetCacheSize() uint32 {
	if t == nil || t.CacheSize == nil {
		return 0
	}
	return *t.CacheSize
}

// GetEnhancedDistribution retrieves the value of the leaf EnhancedDistribution from the NokiaConf_Configure_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnhancedDistribution is set, it can
// safely use t.GetEnhancedDistribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnhancedDistribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd) GetEnhancedDistribution() bool {
	if t == nil || t.EnhancedDistribution == nil {
		return false
	}
	return *t.EnhancedDistribution
}

// GetExportMode retrieves the value of the leaf ExportMode from the NokiaConf_Configure_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportMode is set, it can
// safely use t.GetExportMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd) GetExportMode() E_NokiaConf_Configure_Cflowd_ExportMode {
	if t == nil || t.ExportMode == 0 {
		return NokiaConf_Configure_Cflowd_ExportMode_automatic
	}
	return t.ExportMode
}

// GetInactiveFlowTimeout retrieves the value of the leaf InactiveFlowTimeout from the NokiaConf_Configure_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InactiveFlowTimeout is set, it can
// safely use t.GetInactiveFlowTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InactiveFlowTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd) GetInactiveFlowTimeout() uint32 {
	if t == nil || t.InactiveFlowTimeout == nil {
		return 15
	}
	return *t.InactiveFlowTimeout
}

// GetInactiveTimeout retrieves the value of the leaf InactiveTimeout from the NokiaConf_Configure_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InactiveTimeout is set, it can
// safely use t.GetInactiveTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InactiveTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd) GetInactiveTimeout() uint32 {
	if t == nil || t.InactiveTimeout == nil {
		return 15
	}
	return *t.InactiveTimeout
}

// GetInbandCollectorExportOnly retrieves the value of the leaf InbandCollectorExportOnly from the NokiaConf_Configure_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InbandCollectorExportOnly is set, it can
// safely use t.GetInbandCollectorExportOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InbandCollectorExportOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd) GetInbandCollectorExportOnly() bool {
	if t == nil || t.InbandCollectorExportOnly == nil {
		return false
	}
	return *t.InbandCollectorExportOnly
}

// GetOverflow retrieves the value of the leaf Overflow from the NokiaConf_Configure_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Overflow is set, it can
// safely use t.GetOverflow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Overflow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd) GetOverflow() uint32 {
	if t == nil || t.Overflow == nil {
		return 1
	}
	return *t.Overflow
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd) GetRate() uint32 {
	if t == nil || t.Rate == nil {
		return 1000
	}
	return *t.Rate
}

// GetTemplateRetransmit retrieves the value of the leaf TemplateRetransmit from the NokiaConf_Configure_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateRetransmit is set, it can
// safely use t.GetTemplateRetransmit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateRetransmit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd) GetTemplateRetransmit() uint32 {
	if t == nil || t.TemplateRetransmit == nil {
		return 600
	}
	return *t.TemplateRetransmit
}

// GetUseVrtrIfIndex retrieves the value of the leaf UseVrtrIfIndex from the NokiaConf_Configure_Cflowd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseVrtrIfIndex is set, it can
// safely use t.GetUseVrtrIfIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseVrtrIfIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd) GetUseVrtrIfIndex() bool {
	if t == nil || t.UseVrtrIfIndex == nil {
		return false
	}
	return *t.UseVrtrIfIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Cflowd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Cflowd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ActiveFlowTimeout == nil {
		var v uint32 = 1800
		t.ActiveFlowTimeout = &v
	}
	if t.ActiveTimeout == nil {
		var v uint32 = 30
		t.ActiveTimeout = &v
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AnalyzeGrePayload == nil {
		var v bool = false
		t.AnalyzeGrePayload = &v
	}
	if t.AnalyzeL2TpTraffic == nil {
		var v bool = false
		t.AnalyzeL2TpTraffic = &v
	}
	if t.AnalyzeV4Overv6Traffic == nil {
		var v bool = false
		t.AnalyzeV4Overv6Traffic = &v
	}
	if t.EnhancedDistribution == nil {
		var v bool = false
		t.EnhancedDistribution = &v
	}
	if t.ExportMode == 0 {
		t.ExportMode = NokiaConf_Configure_Cflowd_ExportMode_automatic
	}
	if t.InactiveFlowTimeout == nil {
		var v uint32 = 15
		t.InactiveFlowTimeout = &v
	}
	if t.InactiveTimeout == nil {
		var v uint32 = 15
		t.InactiveTimeout = &v
	}
	if t.InbandCollectorExportOnly == nil {
		var v bool = false
		t.InbandCollectorExportOnly = &v
	}
	if t.Overflow == nil {
		var v uint32 = 1
		t.Overflow = &v
	}
	if t.Rate == nil {
		var v uint32 = 1000
		t.Rate = &v
	}
	if t.TemplateRetransmit == nil {
		var v uint32 = 600
		t.TemplateRetransmit = &v
	}
	if t.UseVrtrIfIndex == nil {
		var v bool = false
		t.UseVrtrIfIndex = &v
	}
	for _, e := range t.Collector {
		e.PopulateDefaults()
	}
	for _, e := range t.SampleProfile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Cflowd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Cflowd) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Cflowd.
func (*NokiaConf_Configure_Cflowd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Cflowd_Collector represents the /nokia-conf/configure/cflowd/collector YANG schema element.
type NokiaConf_Configure_Cflowd_Collector struct {
	AdminState           E_NokiaTypesSros_AdminState                                 `path:"admin-state" module:"nokia-conf"`
	Aggregation          *NokiaConf_Configure_Cflowd_Collector_Aggregation           `path:"aggregation" module:"nokia-conf"`
	ApplyGroups          []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	AutonomousSystemType E_NokiaConf_Configure_Cflowd_Collector_AutonomousSystemType `path:"autonomous-system-type" module:"nokia-conf"`
	Description          *string                                                     `path:"description" module:"nokia-conf"`
	ExportFilter         *NokiaConf_Configure_Cflowd_Collector_ExportFilter          `path:"export-filter" module:"nokia-conf"`
	IpAddress            *string                                                     `path:"ip-address" module:"nokia-conf"`
	Port                 *int32                                                      `path:"port" module:"nokia-conf"`
	RouterInstance       *string                                                     `path:"router-instance" module:"nokia-conf"`
	TemplateSet          E_NokiaConf_Configure_Cflowd_Collector_TemplateSet          `path:"template-set" module:"nokia-conf"`
	Version              *uint32                                                     `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Cflowd_Collector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Cflowd_Collector) IsYANGGoStruct() {}

// GetOrCreateAggregation retrieves the value of the Aggregation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Cflowd_Collector) GetOrCreateAggregation() *NokiaConf_Configure_Cflowd_Collector_Aggregation {
	if t.Aggregation != nil {
		return t.Aggregation
	}
	t.Aggregation = &NokiaConf_Configure_Cflowd_Collector_Aggregation{}
	return t.Aggregation
}

// GetOrCreateExportFilter retrieves the value of the ExportFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Cflowd_Collector) GetOrCreateExportFilter() *NokiaConf_Configure_Cflowd_Collector_ExportFilter {
	if t.ExportFilter != nil {
		return t.ExportFilter
	}
	t.ExportFilter = &NokiaConf_Configure_Cflowd_Collector_ExportFilter{}
	return t.ExportFilter
}

// GetAggregation returns the value of the Aggregation struct pointer
// from NokiaConf_Configure_Cflowd_Collector. If the receiver or the field Aggregation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Cflowd_Collector) GetAggregation() *NokiaConf_Configure_Cflowd_Collector_Aggregation {
	if t != nil && t.Aggregation != nil {
		return t.Aggregation
	}
	return nil
}

// GetExportFilter returns the value of the ExportFilter struct pointer
// from NokiaConf_Configure_Cflowd_Collector. If the receiver or the field ExportFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Cflowd_Collector) GetExportFilter() *NokiaConf_Configure_Cflowd_Collector_ExportFilter {
	if t != nil && t.ExportFilter != nil {
		return t.ExportFilter
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAutonomousSystemType retrieves the value of the leaf AutonomousSystemType from the NokiaConf_Configure_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutonomousSystemType is set, it can
// safely use t.GetAutonomousSystemType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutonomousSystemType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector) GetAutonomousSystemType() E_NokiaConf_Configure_Cflowd_Collector_AutonomousSystemType {
	if t == nil || t.AutonomousSystemType == 0 {
		return NokiaConf_Configure_Cflowd_Collector_AutonomousSystemType_origin
	}
	return t.AutonomousSystemType
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "management"
	}
	return *t.RouterInstance
}

// GetTemplateSet retrieves the value of the leaf TemplateSet from the NokiaConf_Configure_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateSet is set, it can
// safely use t.GetTemplateSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector) GetTemplateSet() E_NokiaConf_Configure_Cflowd_Collector_TemplateSet {
	if t == nil || t.TemplateSet == 0 {
		return 0
	}
	return t.TemplateSet
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Cflowd_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector) GetVersion() uint32 {
	if t == nil || t.Version == nil {
		return 0
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Cflowd_Collector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Cflowd_Collector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AutonomousSystemType == 0 {
		t.AutonomousSystemType = NokiaConf_Configure_Cflowd_Collector_AutonomousSystemType_origin
	}
	if t.RouterInstance == nil {
		var v string = "management"
		t.RouterInstance = &v
	}
	t.Aggregation.PopulateDefaults()
	t.ExportFilter.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Cflowd_Collector struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Cflowd_Collector) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	if t.Port == nil {
		return nil, fmt.Errorf("nil value for key Port")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
		"port":       *t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Cflowd_Collector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Cflowd_Collector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Cflowd_Collector.
func (*NokiaConf_Configure_Cflowd_Collector) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Cflowd_Collector_Aggregation represents the /nokia-conf/configure/cflowd/collector/aggregation YANG schema element.
type NokiaConf_Configure_Cflowd_Collector_Aggregation struct {
	AsMatrix                *bool `path:"as-matrix" module:"nokia-conf"`
	DestinationPrefix       *bool `path:"destination-prefix" module:"nokia-conf"`
	ProtocolPort            *bool `path:"protocol-port" module:"nokia-conf"`
	Raw                     *bool `path:"raw" module:"nokia-conf"`
	SourceDestinationPrefix *bool `path:"source-destination-prefix" module:"nokia-conf"`
	SourcePrefix            *bool `path:"source-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Cflowd_Collector_Aggregation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Cflowd_Collector_Aggregation) IsYANGGoStruct() {}

// GetAsMatrix retrieves the value of the leaf AsMatrix from the NokiaConf_Configure_Cflowd_Collector_Aggregation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsMatrix is set, it can
// safely use t.GetAsMatrix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsMatrix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_Aggregation) GetAsMatrix() bool {
	if t == nil || t.AsMatrix == nil {
		return false
	}
	return *t.AsMatrix
}

// GetDestinationPrefix retrieves the value of the leaf DestinationPrefix from the NokiaConf_Configure_Cflowd_Collector_Aggregation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationPrefix is set, it can
// safely use t.GetDestinationPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_Aggregation) GetDestinationPrefix() bool {
	if t == nil || t.DestinationPrefix == nil {
		return false
	}
	return *t.DestinationPrefix
}

// GetProtocolPort retrieves the value of the leaf ProtocolPort from the NokiaConf_Configure_Cflowd_Collector_Aggregation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolPort is set, it can
// safely use t.GetProtocolPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_Aggregation) GetProtocolPort() bool {
	if t == nil || t.ProtocolPort == nil {
		return false
	}
	return *t.ProtocolPort
}

// GetRaw retrieves the value of the leaf Raw from the NokiaConf_Configure_Cflowd_Collector_Aggregation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Raw is set, it can
// safely use t.GetRaw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Raw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_Aggregation) GetRaw() bool {
	if t == nil || t.Raw == nil {
		return false
	}
	return *t.Raw
}

// GetSourceDestinationPrefix retrieves the value of the leaf SourceDestinationPrefix from the NokiaConf_Configure_Cflowd_Collector_Aggregation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceDestinationPrefix is set, it can
// safely use t.GetSourceDestinationPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceDestinationPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_Aggregation) GetSourceDestinationPrefix() bool {
	if t == nil || t.SourceDestinationPrefix == nil {
		return false
	}
	return *t.SourceDestinationPrefix
}

// GetSourcePrefix retrieves the value of the leaf SourcePrefix from the NokiaConf_Configure_Cflowd_Collector_Aggregation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePrefix is set, it can
// safely use t.GetSourcePrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_Aggregation) GetSourcePrefix() bool {
	if t == nil || t.SourcePrefix == nil {
		return false
	}
	return *t.SourcePrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Cflowd_Collector_Aggregation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Cflowd_Collector_Aggregation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AsMatrix == nil {
		var v bool = false
		t.AsMatrix = &v
	}
	if t.DestinationPrefix == nil {
		var v bool = false
		t.DestinationPrefix = &v
	}
	if t.ProtocolPort == nil {
		var v bool = false
		t.ProtocolPort = &v
	}
	if t.Raw == nil {
		var v bool = false
		t.Raw = &v
	}
	if t.SourceDestinationPrefix == nil {
		var v bool = false
		t.SourceDestinationPrefix = &v
	}
	if t.SourcePrefix == nil {
		var v bool = false
		t.SourcePrefix = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_Aggregation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Cflowd_Collector_Aggregation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_Aggregation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Cflowd_Collector_Aggregation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Cflowd_Collector_Aggregation.
func (*NokiaConf_Configure_Cflowd_Collector_Aggregation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Cflowd_Collector_ExportFilter represents the /nokia-conf/configure/cflowd/collector/export-filter YANG schema element.
type NokiaConf_Configure_Cflowd_Collector_ExportFilter struct {
	Family        *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family            `path:"family" module:"nokia-conf"`
	InterfaceList *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList     `path:"interface-list" module:"nokia-conf"`
	Router        map[string]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router `path:"router" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Cflowd_Collector_ExportFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter) IsYANGGoStruct() {}

// NewRouter creates a new entry in the Router list of the
// NokiaConf_Configure_Cflowd_Collector_ExportFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter) NewRouter(RouterInstance string) (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Router == nil {
		t.Router = make(map[string]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router)
	}

	key := RouterInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Router[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Router", key)
	}

	t.Router[key] = &NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router{
		RouterInstance: &RouterInstance,
	}

	return t.Router[key], nil
}

// RenameRouter renames an entry in the list Router within
// the NokiaConf_Configure_Cflowd_Collector_ExportFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter) RenameRouter(oldK, newK string) error {
	if _, ok := t.Router[newK]; ok {
		return fmt.Errorf("key %v already exists in Router", newK)
	}

	e, ok := t.Router[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Router", oldK)
	}
	e.RouterInstance = &newK

	t.Router[newK] = e
	delete(t.Router, oldK)
	return nil
}

// GetOrCreateRouter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Cflowd_Collector_ExportFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter) GetOrCreateRouter(RouterInstance string) *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router {

	key := RouterInstance

	if v, ok := t.Router[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouter(RouterInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouter got unexpected error: %v", err))
	}
	return v
}

// GetRouter retrieves the value with the specified key from
// the Router map field of NokiaConf_Configure_Cflowd_Collector_ExportFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter) GetRouter(RouterInstance string) *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router {

	if t == nil {
		return nil
	}

	key := RouterInstance

	if lm, ok := t.Router[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Cflowd_Collector_ExportFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter) DeleteRouter(RouterInstance string) {
	key := RouterInstance

	delete(t.Router, key)
}

// AppendRouter appends the supplied NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router struct to the
// list Router of NokiaConf_Configure_Cflowd_Collector_ExportFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter) AppendRouter(v *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router) error {
	if v.RouterInstance == nil {
		return fmt.Errorf("invalid nil key received for RouterInstance")
	}

	key := *v.RouterInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Router == nil {
		t.Router = make(map[string]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_Router)
	}

	if _, ok := t.Router[key]; ok {
		return fmt.Errorf("duplicate key for list Router %v", key)
	}

	t.Router[key] = v
	return nil
}

// GetOrCreateFamily retrieves the value of the Family field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter) GetOrCreateFamily() *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family {
	if t.Family != nil {
		return t.Family
	}
	t.Family = &NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family{}
	return t.Family
}

// GetOrCreateInterfaceList retrieves the value of the InterfaceList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter) GetOrCreateInterfaceList() *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList {
	if t.InterfaceList != nil {
		return t.InterfaceList
	}
	t.InterfaceList = &NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList{}
	return t.InterfaceList
}

// GetFamily returns the value of the Family struct pointer
// from NokiaConf_Configure_Cflowd_Collector_ExportFilter. If the receiver or the field Family is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter) GetFamily() *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family {
	if t != nil && t.Family != nil {
		return t.Family
	}
	return nil
}

// GetInterfaceList returns the value of the InterfaceList struct pointer
// from NokiaConf_Configure_Cflowd_Collector_ExportFilter. If the receiver or the field InterfaceList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter) GetInterfaceList() *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList {
	if t != nil && t.InterfaceList != nil {
		return t.InterfaceList
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Cflowd_Collector_ExportFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Family.PopulateDefaults()
	t.InterfaceList.PopulateDefaults()
	for _, e := range t.Router {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Cflowd_Collector_ExportFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Cflowd_Collector_ExportFilter.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family represents the /nokia-conf/configure/cflowd/collector/export-filter/family YANG schema element.
type NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	L2Ip      *bool `path:"l2-ip" module:"nokia-conf"`
	McastIpv4 *bool `path:"mcast-ipv4" module:"nokia-conf"`
	McastIpv6 *bool `path:"mcast-ipv6" module:"nokia-conf"`
	Mpls      *bool `path:"mpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetL2Ip retrieves the value of the leaf L2Ip from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Ip is set, it can
// safely use t.GetL2Ip() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family) GetL2Ip() bool {
	if t == nil || t.L2Ip == nil {
		return false
	}
	return *t.L2Ip
}

// GetMcastIpv4 retrieves the value of the leaf McastIpv4 from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv4 is set, it can
// safely use t.GetMcastIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family) GetMcastIpv4() bool {
	if t == nil || t.McastIpv4 == nil {
		return false
	}
	return *t.McastIpv4
}

// GetMcastIpv6 retrieves the value of the leaf McastIpv6 from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv6 is set, it can
// safely use t.GetMcastIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family) GetMcastIpv6() bool {
	if t == nil || t.McastIpv6 == nil {
		return false
	}
	return *t.McastIpv6
}

// GetMpls retrieves the value of the leaf Mpls from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mpls is set, it can
// safely use t.GetMpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family) GetMpls() bool {
	if t == nil || t.Mpls == nil {
		return false
	}
	return *t.Mpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.L2Ip == nil {
		var v bool = false
		t.L2Ip = &v
	}
	if t.McastIpv4 == nil {
		var v bool = false
		t.McastIpv4 = &v
	}
	if t.McastIpv6 == nil {
		var v bool = false
		t.McastIpv6 = &v
	}
	if t.Mpls == nil {
		var v bool = false
		t.Mpls = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList represents the /nokia-conf/configure/cflowd/collector/export-filter/interface-list YANG schema element.
type NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList struct {
	Router  map[NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router `path:"router" module:"nokia-conf"`
	Service *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service                                                                               `path:"service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList) IsYANGGoStruct() {}

// NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key represents the key for list Router of element /nokia-conf/configure/cflowd/collector/export-filter/interface-list.
type NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key struct {
	RouterName    string `path:"router-name"`
	InterfaceName string `path:"interface-name"`
}

// NewRouter creates a new entry in the Router list of the
// NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList) NewRouter(RouterName string, InterfaceName string) (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Router == nil {
		t.Router = make(map[NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router)
	}

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key{
		RouterName:    RouterName,
		InterfaceName: InterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Router[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Router", key)
	}

	t.Router[key] = &NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router{
		RouterName:    &RouterName,
		InterfaceName: &InterfaceName,
	}

	return t.Router[key], nil
}

// RenameRouter renames an entry in the list Router within
// the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList) RenameRouter(oldK, newK NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key) error {
	if _, ok := t.Router[newK]; ok {
		return fmt.Errorf("key %v already exists in Router", newK)
	}

	e, ok := t.Router[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Router", oldK)
	}
	e.RouterName = &newK.RouterName
	e.InterfaceName = &newK.InterfaceName

	t.Router[newK] = e
	delete(t.Router, oldK)
	return nil
}

// GetOrCreateRouter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList) GetOrCreateRouter(RouterName string, InterfaceName string) *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router {

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key{
		RouterName:    RouterName,
		InterfaceName: InterfaceName,
	}

	if v, ok := t.Router[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouter(RouterName, InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouter got unexpected error: %v", err))
	}
	return v
}

// GetRouter retrieves the value with the specified key from
// the Router map field of NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList) GetRouter(RouterName string, InterfaceName string) *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key{
		RouterName:    RouterName,
		InterfaceName: InterfaceName,
	}

	if lm, ok := t.Router[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList) DeleteRouter(RouterName string, InterfaceName string) {
	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key{
		RouterName:    RouterName,
		InterfaceName: InterfaceName,
	}

	delete(t.Router, key)
}

// AppendRouter appends the supplied NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router struct to the
// list Router of NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList) AppendRouter(v *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router) error {
	if v.RouterName == nil {
		return fmt.Errorf("invalid nil key for RouterName")
	}

	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key for InterfaceName")
	}

	key := NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key{
		RouterName:    *v.RouterName,
		InterfaceName: *v.InterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Router == nil {
		t.Router = make(map[NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router_Key]*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router)
	}

	if _, ok := t.Router[key]; ok {
		return fmt.Errorf("duplicate key for list Router %v", key)
	}

	t.Router[key] = v
	return nil
}

// GetOrCreateService retrieves the value of the Service field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList) GetOrCreateService() *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service {
	if t.Service != nil {
		return t.Service
	}
	t.Service = &NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service{}
	return t.Service
}

// GetService returns the value of the Service struct pointer
// from NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList. If the receiver or the field Service is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList) GetService() *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Service {
	if t != nil && t.Service != nil {
		return t.Service
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Service.PopulateDefaults()
	for _, e := range t.Router {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router represents the /nokia-conf/configure/cflowd/collector/export-filter/interface-list/router YANG schema element.
type NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router struct {
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
	RouterName    *string `path:"router-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router) IsYANGGoStruct() {}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetRouterName retrieves the value of the leaf RouterName from the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterName is set, it can
// safely use t.GetRouterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router) GetRouterName() string {
	if t == nil || t.RouterName == nil {
		return ""
	}
	return *t.RouterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	if t.RouterName == nil {
		return nil, fmt.Errorf("nil value for key RouterName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
		"router-name":    *t.RouterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router.
func (*NokiaConf_Configure_Cflowd_Collector_ExportFilter_InterfaceList_Router) ΛBelongingModule() string {
	return "nokia-conf"
}
